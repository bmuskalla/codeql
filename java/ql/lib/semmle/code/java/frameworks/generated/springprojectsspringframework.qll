/** Definitions of taint steps in the springprojectsspringframework framework */

import java
private import semmle.code.java.dataflow.ExternalFlow

private class SpringprojectsspringframeworkSinksCsv extends SinkModelCsv {
  override predicate row(string row) {
    row =
      [
        "org.springframework.aop.aspectj.annotation;BeanFactoryAspectInstanceFactory;true;BeanFactoryAspectInstanceFactory;(BeanFactory,String);;Argument[1];jndi-injection",
        "org.springframework.aop.aspectj.annotation;BeanFactoryAspectInstanceFactory;true;BeanFactoryAspectInstanceFactory;(BeanFactory,String,Class);;Argument[1];jndi-injection",
        "org.springframework.aop.aspectj.annotation;MetadataAwareAspectInstanceFactory;true;getAspectCreationMutex;();;Argument[-1];jndi-injection",
        "org.springframework.aop.aspectj.annotation;PrototypeAspectInstanceFactory;true;PrototypeAspectInstanceFactory;(BeanFactory,String);;Argument[1];jndi-injection",
        "org.springframework.aop.aspectj;AspectInstanceFactory;true;getAspectInstance;();;Argument[-1];jndi-injection",
        "org.springframework.aop.framework.autoproxy;AutoProxyUtils;true;determineTargetClass;(ConfigurableListableBeanFactory,String);;Argument[1];jndi-injection",
        "org.springframework.aop.framework.autoproxy;BeanFactoryAdvisorRetrievalHelper;true;findAdvisorBeans;();;Argument[-1];jndi-injection",
        "org.springframework.aop.framework.autoproxy;TargetSourceCreator;true;getTargetSource;(Class,String);;Argument[1];jndi-injection",
        "org.springframework.aop.scope;ScopedObject;true;getTargetObject;();;Argument[-1];jndi-injection",
        "org.springframework.aop.scope;ScopedObject;true;removeFromScope;();;Argument[-1];jndi-injection",
        "org.springframework.aop;Advisor;true;getAdvice;();;Argument[-1];jndi-injection",
        "org.springframework.aop;TargetClassAware;true;getTargetClass;();;Argument[-1];jndi-injection",
        "org.springframework.beans.factory.annotation;BeanFactoryAnnotationUtils;true;isQualifierMatch;(Predicate,String,BeanFactory);;Argument[1];jndi-injection",
        "org.springframework.beans.factory.annotation;BeanFactoryAnnotationUtils;true;qualifiedBeanOfType;(BeanFactory,Class,String);;Argument[2];jndi-injection",
        "org.springframework.beans.factory.config;AutowireCapableBeanFactory;true;applyBeanPostProcessorsAfterInitialization;(Object,String);;Argument[1];jndi-injection",
        "org.springframework.beans.factory.config;AutowireCapableBeanFactory;true;configureBean;(Object,String);;Argument[0];jndi-injection",
        "org.springframework.beans.factory.config;AutowireCapableBeanFactory;true;configureBean;(Object,String);;Argument[1];jndi-injection",
        "org.springframework.beans.factory.config;AutowireCapableBeanFactory;true;initializeBean;(Object,String);;Argument[0];jndi-injection",
        "org.springframework.beans.factory.config;AutowireCapableBeanFactory;true;initializeBean;(Object,String);;Argument[1];jndi-injection",
        "org.springframework.beans.factory.config;AutowireCapableBeanFactory;true;resolveBeanByName;(String,DependencyDescriptor);;Argument[0];jndi-injection",
        "org.springframework.beans.factory.config;AutowireCapableBeanFactory;true;resolveDependency;(DependencyDescriptor,String);;Argument[1];jndi-injection",
        "org.springframework.beans.factory.config;AutowireCapableBeanFactory;true;resolveDependency;(DependencyDescriptor,String,Set,TypeConverter);;Argument[1];jndi-injection",
        "org.springframework.beans.factory.config;BeanExpressionContext;true;containsObject;(String);;Argument[0];jndi-injection",
        "org.springframework.beans.factory.config;BeanExpressionContext;true;getObject;(String);;Argument[0];jndi-injection",
        "org.springframework.beans.factory.config;BeanPostProcessor;true;postProcessAfterInitialization;(Object,String);;Argument[1];jndi-injection",
        "org.springframework.beans.factory.config;ConfigurableBeanFactory;true;destroyScopedBean;(String);;Argument[0];jndi-injection",
        "org.springframework.beans.factory.config;ConfigurableBeanFactory;true;isFactoryBean;(String);;Argument[0];jndi-injection",
        "org.springframework.beans.factory.config;ConfigurableListableBeanFactory;true;isAutowireCandidate;(String,DependencyDescriptor);;Argument[0];jndi-injection",
        "org.springframework.beans.factory.config;ConfigurableListableBeanFactory;true;preInstantiateSingletons;();;Argument[-1];jndi-injection",
        "org.springframework.beans.factory.config;DependencyDescriptor;true;resolveCandidate;(String,Class,BeanFactory);;Argument[0];jndi-injection",
        "org.springframework.beans.factory.config;DependencyDescriptor;true;resolveShortcut;(BeanFactory);;Argument[-1];jndi-injection",
        "org.springframework.beans.factory.config;InstantiationAwareBeanPostProcessor;true;postProcessBeforeInstantiation;(Class,String);;Argument[1];jndi-injection",
        "org.springframework.beans.factory.config;Scope;true;get;(String,ObjectFactory);;Argument[0];jndi-injection",
        "org.springframework.beans.factory.config;Scope;true;remove;(String);;Argument[0];jndi-injection",
        "org.springframework.beans.factory.config;SingletonBeanRegistry;true;registerSingleton;(String,Object);;Argument[0];jndi-injection",
        "org.springframework.beans.factory.config;SmartInstantiationAwareBeanPostProcessor;true;predictBeanType;(Class,String);;Argument[1];jndi-injection",
        "org.springframework.beans.factory.support;AbstractBeanFactory;true;getBean;(String,Class,Object[]);;Argument[0];jndi-injection",
        "org.springframework.beans.factory.support;AbstractBeanFactory;true;isBeanNameInUse;(String);;Argument[0];jndi-injection",
        "org.springframework.beans.factory.support;AutowireCandidateResolver;true;getLazyResolutionProxyIfNecessary;(DependencyDescriptor,String);;Argument[1];jndi-injection",
        "org.springframework.beans.factory.support;AutowireCandidateResolver;true;isAutowireCandidate;(BeanDefinitionHolder,DependencyDescriptor);;Argument[0];jndi-injection",
        "org.springframework.beans.factory.support;BeanDefinitionRegistry;true;isBeanNameInUse;(String);;Argument[0];jndi-injection",
        "org.springframework.beans.factory.support;DefaultListableBeanFactory;true;doResolveDependency;(DependencyDescriptor,String,Set,TypeConverter);;Argument[1];jndi-injection",
        "org.springframework.beans.factory.wiring;BeanConfigurerSupport;true;configureBean;(Object);;Argument[0];jndi-injection",
        "org.springframework.beans.factory;BeanFactory;true;containsBean;(String);;Argument[0];jndi-injection",
        "org.springframework.beans.factory;BeanFactory;true;getBean;(String);;Argument[0];jndi-injection",
        "org.springframework.beans.factory;BeanFactory;true;getBean;(String,Class);;Argument[0];jndi-injection",
        "org.springframework.beans.factory;BeanFactory;true;getBean;(String,Object[]);;Argument[0];jndi-injection",
        "org.springframework.beans.factory;BeanFactory;true;getType;(String);;Argument[0];jndi-injection",
        "org.springframework.beans.factory;BeanFactory;true;getType;(String,boolean);;Argument[0];jndi-injection",
        "org.springframework.beans.factory;BeanFactory;true;isPrototype;(String);;Argument[0];jndi-injection",
        "org.springframework.beans.factory;BeanFactory;true;isSingleton;(String);;Argument[0];jndi-injection",
        "org.springframework.beans.factory;BeanFactory;true;isTypeMatch;(String,Class);;Argument[0];jndi-injection",
        "org.springframework.beans.factory;BeanFactory;true;isTypeMatch;(String,ResolvableType);;Argument[0];jndi-injection",
        "org.springframework.beans.factory;BeanFactoryAware;true;setBeanFactory;(BeanFactory);;Argument[-1];jndi-injection",
        "org.springframework.beans.factory;HierarchicalBeanFactory;true;containsLocalBean;(String);;Argument[0];jndi-injection",
        "org.springframework.beans.factory;InitializingBean;true;afterPropertiesSet;();;Argument[-1];jndi-injection",
        "org.springframework.beans.factory;InitializingBean;true;afterPropertiesSet;();;Argument[-1];open-url",
        "org.springframework.beans.factory;InitializingBean;true;afterPropertiesSet;();;Argument[-1];sql",
        "org.springframework.beans.factory;ListableBeanFactory;true;findAnnotationOnBean;(String,Class);;Argument[0];jndi-injection",
        "org.springframework.beans.factory;ListableBeanFactory;true;getBeanNamesForAnnotation;(Class);;Argument[-1];jndi-injection",
        "org.springframework.beans.factory;SmartInitializingSingleton;true;afterSingletonsInstantiated;();;Argument[-1];jndi-injection",
        "org.springframework.cache.ehcache;EhCacheManagerUtils;true;buildCacheManager;(Resource);;Argument[0];open-url",
        "org.springframework.cache.ehcache;EhCacheManagerUtils;true;buildCacheManager;(String,Resource);;Argument[1];open-url",
        "org.springframework.cache.ehcache;EhCacheManagerUtils;true;parseConfiguration;(Resource);;Argument[0];open-url",
        "org.springframework.context.annotation;AnnotationConfigApplicationContext;true;AnnotationConfigApplicationContext;(Class[]);;Argument[-1];jndi-injection",
        "org.springframework.context.annotation;AnnotationConfigApplicationContext;true;AnnotationConfigApplicationContext;(String[]);;Argument[-1];jndi-injection",
        "org.springframework.context.annotation;MBeanExportConfiguration;true;mbeanExporter;();;Argument[-1];jndi-injection",
        "org.springframework.context.support;ApplicationObjectSupport;true;initApplicationContext;();;Argument[-1];jndi-injection",
        "org.springframework.context.support;ClassPathXmlApplicationContext;true;ClassPathXmlApplicationContext;(String);;Argument[-1];jndi-injection",
        "org.springframework.context.support;ClassPathXmlApplicationContext;true;ClassPathXmlApplicationContext;(String,Class);;Argument[-1];jndi-injection",
        "org.springframework.context.support;ClassPathXmlApplicationContext;true;ClassPathXmlApplicationContext;(String[]);;Argument[-1];jndi-injection",
        "org.springframework.context.support;ClassPathXmlApplicationContext;true;ClassPathXmlApplicationContext;(String[],ApplicationContext);;Argument[-1];jndi-injection",
        "org.springframework.context.support;ClassPathXmlApplicationContext;true;ClassPathXmlApplicationContext;(String[],Class);;Argument[-1];jndi-injection",
        "org.springframework.context.support;ClassPathXmlApplicationContext;true;ClassPathXmlApplicationContext;(String[],Class,ApplicationContext);;Argument[-1];jndi-injection",
        "org.springframework.context.support;ClassPathXmlApplicationContext;true;ClassPathXmlApplicationContext;(String[],boolean);;Argument[-1];jndi-injection",
        "org.springframework.context.support;ClassPathXmlApplicationContext;true;ClassPathXmlApplicationContext;(String[],boolean,ApplicationContext);;Argument[-1];jndi-injection",
        "org.springframework.context.support;FileSystemXmlApplicationContext;true;FileSystemXmlApplicationContext;(String);;Argument[-1];jndi-injection",
        "org.springframework.context.support;FileSystemXmlApplicationContext;true;FileSystemXmlApplicationContext;(String[]);;Argument[-1];jndi-injection",
        "org.springframework.context.support;FileSystemXmlApplicationContext;true;FileSystemXmlApplicationContext;(String[],ApplicationContext);;Argument[-1];jndi-injection",
        "org.springframework.context.support;FileSystemXmlApplicationContext;true;FileSystemXmlApplicationContext;(String[],boolean);;Argument[-1];jndi-injection",
        "org.springframework.context.support;FileSystemXmlApplicationContext;true;FileSystemXmlApplicationContext;(String[],boolean,ApplicationContext);;Argument[-1];jndi-injection",
        "org.springframework.context.support;GenericGroovyApplicationContext;true;GenericGroovyApplicationContext;(Class,String[]);;Argument[-1];jndi-injection",
        "org.springframework.context.support;GenericGroovyApplicationContext;true;GenericGroovyApplicationContext;(Resource[]);;Argument[-1];jndi-injection",
        "org.springframework.context.support;GenericGroovyApplicationContext;true;GenericGroovyApplicationContext;(String[]);;Argument[-1];jndi-injection",
        "org.springframework.context.support;GenericXmlApplicationContext;true;GenericXmlApplicationContext;(Class,String[]);;Argument[-1];jndi-injection",
        "org.springframework.context.support;GenericXmlApplicationContext;true;GenericXmlApplicationContext;(Resource[]);;Argument[-1];jndi-injection",
        "org.springframework.context.support;GenericXmlApplicationContext;true;GenericXmlApplicationContext;(String[]);;Argument[-1];jndi-injection",
        "org.springframework.context;ConfigurableApplicationContext;true;refresh;();;Argument[-1];jndi-injection",
        "org.springframework.core.env;ConfigurablePropertyResolver;true;validateRequiredProperties;();;Argument[-1];jndi-injection",
        "org.springframework.core.env;PropertyResolver;true;containsProperty;(String);;Argument[0];jndi-injection",
        "org.springframework.core.env;PropertyResolver;true;getProperty;(String);;Argument[0];jndi-injection",
        "org.springframework.core.env;PropertyResolver;true;getProperty;(String,Class);;Argument[0];jndi-injection",
        "org.springframework.core.env;PropertyResolver;true;getProperty;(String,Class,Object);;Argument[0];jndi-injection",
        "org.springframework.core.env;PropertyResolver;true;getProperty;(String,String);;Argument[0];jndi-injection",
        "org.springframework.core.env;PropertyResolver;true;getRequiredProperty;(String);;Argument[0];jndi-injection",
        "org.springframework.core.env;PropertyResolver;true;getRequiredProperty;(String,Class);;Argument[0];jndi-injection",
        "org.springframework.core.env;PropertySource;true;containsProperty;(String);;Argument[0];jndi-injection",
        "org.springframework.core.io.buffer;DataBufferUtils;true;read;(Resource,DataBufferFactory,int);;Argument[0];open-url",
        "org.springframework.core.io.buffer;DataBufferUtils;true;read;(Resource,long,DataBufferFactory,int);;Argument[0];open-url",
        "org.springframework.core.io.support;EncodedResource;true;getReader;();;Argument[-1];open-url",
        "org.springframework.core.io.support;PropertiesLoaderUtils;true;fillProperties;(Properties,Resource);;Argument[1];open-url",
        "org.springframework.core.io.support;PropertiesLoaderUtils;true;loadProperties;(Resource);;Argument[0];open-url",
        "org.springframework.core.io;InputStreamSource;true;getInputStream;();;Argument[-1];open-url",
        "org.springframework.core.io;Resource;true;contentLength;();;Argument[-1];open-url",
        "org.springframework.core.io;Resource;true;exists;();;Argument[-1];open-url",
        "org.springframework.core.io;Resource;true;isReadable;();;Argument[-1];open-url",
        "org.springframework.core.io;Resource;true;lastModified;();;Argument[-1];open-url",
        "org.springframework.core.io;Resource;true;readableChannel;();;Argument[-1];open-url",
        "org.springframework.core.io;WritableResource;true;getOutputStream;();;Argument[-1];create-file",
        "org.springframework.core.io;WritableResource;true;writableChannel;();;Argument[-1];create-file",
        "org.springframework.core.type.classreading;MetadataReaderFactory;true;getMetadataReader;(Resource);;Argument[0];open-url",
        "org.springframework.core;Ordered;true;getOrder;();;Argument[-1];jndi-injection",
        "org.springframework.expression.spel.ast;SpelNodeImpl;true;getValueInternal;(ExpressionState);;Argument[-1];jndi-injection",
        "org.springframework.expression.spel.ast;ValueRef;true;getValue;();;Argument[-1];jndi-injection",
        "org.springframework.expression;BeanResolver;true;resolve;(EvaluationContext,String);;Argument[1];jndi-injection",
        "org.springframework.expression;PropertyAccessor;true;canRead;(EvaluationContext,Object,String);;Argument[2];jndi-injection",
        "org.springframework.expression;PropertyAccessor;true;read;(EvaluationContext,Object,String);;Argument[2];jndi-injection",
        "org.springframework.http.client;AsyncClientHttpRequestFactory;true;createAsyncRequest;(URI,HttpMethod);;Argument[0];open-url",
        "org.springframework.http.client;ClientHttpRequestFactory;true;createRequest;(URI,HttpMethod);;Argument[0];open-url",
        "org.springframework.http.codec.multipart;DefaultPartHttpMessageReader;true;setFileStorageDirectory;(Path);;Argument[0];create-file",
        "org.springframework.http.codec.multipart;SynchronossPartHttpMessageReader;true;setFileStorageDirectory;(Path);;Argument[0];create-file",
        "org.springframework.http;HttpRange;true;toResourceRegion;(Resource);;Argument[0];open-url",
        "org.springframework.http;HttpRange;true;toResourceRegions;(List,Resource);;Argument[1];open-url",
        "org.springframework.http;RequestEntity;true;RequestEntity;(HttpMethod,URI);;Argument[1];open-url",
        "org.springframework.http;RequestEntity;true;RequestEntity;(MultiValueMap,HttpMethod,URI);;Argument[2];open-url",
        "org.springframework.http;RequestEntity;true;RequestEntity;(Object,HttpMethod,URI);;Argument[2];open-url",
        "org.springframework.http;RequestEntity;true;RequestEntity;(Object,HttpMethod,URI,Type);;Argument[2];open-url",
        "org.springframework.http;RequestEntity;true;RequestEntity;(Object,MultiValueMap,HttpMethod,URI);;Argument[3];open-url",
        "org.springframework.http;RequestEntity;true;delete;(String,Object[]);;Argument[0];open-url",
        "org.springframework.http;RequestEntity;true;delete;(URI);;Argument[0];open-url",
        "org.springframework.http;RequestEntity;true;get;(String,Object[]);;Argument[0];open-url",
        "org.springframework.http;RequestEntity;true;get;(URI);;Argument[0];open-url",
        "org.springframework.http;RequestEntity;true;head;(String,Object[]);;Argument[0];open-url",
        "org.springframework.http;RequestEntity;true;head;(URI);;Argument[0];open-url",
        "org.springframework.http;RequestEntity;true;options;(String,Object[]);;Argument[0];open-url",
        "org.springframework.http;RequestEntity;true;options;(URI);;Argument[0];open-url",
        "org.springframework.http;RequestEntity;true;patch;(String,Object[]);;Argument[0];open-url",
        "org.springframework.http;RequestEntity;true;patch;(URI);;Argument[0];open-url",
        "org.springframework.http;RequestEntity;true;post;(String,Object[]);;Argument[0];open-url",
        "org.springframework.http;RequestEntity;true;post;(URI);;Argument[0];open-url",
        "org.springframework.http;RequestEntity;true;put;(String,Object[]);;Argument[0];open-url",
        "org.springframework.http;RequestEntity;true;put;(URI);;Argument[0];open-url",
        "org.springframework.jdbc.core.support;JdbcBeanDefinitionReader;true;loadBeanDefinitions;(String);;Argument[0];sql",
        "org.springframework.jdbc.core;BatchUpdateUtils;true;executeBatchUpdate;(String,List,int[],JdbcOperations);;Argument[0];sql",
        "org.springframework.jdbc.core;CallableStatementCreator;true;createCallableStatement;(Connection);;Argument[-1];sql",
        "org.springframework.jdbc.core;JdbcOperations;true;batchUpdate;(String,BatchPreparedStatementSetter);;Argument[0];sql",
        "org.springframework.jdbc.core;JdbcOperations;true;batchUpdate;(String,Collection,int,ParameterizedPreparedStatementSetter);;Argument[0];sql",
        "org.springframework.jdbc.core;JdbcOperations;true;batchUpdate;(String,List);;Argument[0];sql",
        "org.springframework.jdbc.core;JdbcOperations;true;batchUpdate;(String,List,int[]);;Argument[0];sql",
        "org.springframework.jdbc.core;JdbcOperations;true;batchUpdate;(String[]);;Argument[0];sql",
        "org.springframework.jdbc.core;JdbcOperations;true;call;(CallableStatementCreator,List);;Argument[0];sql",
        "org.springframework.jdbc.core;JdbcOperations;true;execute;(PreparedStatementCreator,PreparedStatementCallback);;Argument[0];sql",
        "org.springframework.jdbc.core;JdbcOperations;true;execute;(StatementCallback);;Argument[0];sql",
        "org.springframework.jdbc.core;JdbcOperations;true;execute;(String);;Argument[0];sql",
        "org.springframework.jdbc.core;JdbcOperations;true;execute;(String,CallableStatementCallback);;Argument[0];sql",
        "org.springframework.jdbc.core;JdbcOperations;true;execute;(String,PreparedStatementCallback);;Argument[0];sql",
        "org.springframework.jdbc.core;JdbcOperations;true;query;(PreparedStatementCreator,ResultSetExtractor);;Argument[0];sql",
        "org.springframework.jdbc.core;JdbcOperations;true;query;(PreparedStatementCreator,RowCallbackHandler);;Argument[0];sql",
        "org.springframework.jdbc.core;JdbcOperations;true;query;(PreparedStatementCreator,RowMapper);;Argument[0];sql",
        "org.springframework.jdbc.core;JdbcOperations;true;query;(String,Object[],ResultSetExtractor);;Argument[0];sql",
        "org.springframework.jdbc.core;JdbcOperations;true;query;(String,Object[],RowCallbackHandler);;Argument[0];sql",
        "org.springframework.jdbc.core;JdbcOperations;true;query;(String,Object[],RowMapper);;Argument[0];sql",
        "org.springframework.jdbc.core;JdbcOperations;true;query;(String,Object[],int[],ResultSetExtractor);;Argument[0];sql",
        "org.springframework.jdbc.core;JdbcOperations;true;query;(String,Object[],int[],RowCallbackHandler);;Argument[0];sql",
        "org.springframework.jdbc.core;JdbcOperations;true;query;(String,Object[],int[],RowMapper);;Argument[0];sql",
        "org.springframework.jdbc.core;JdbcOperations;true;query;(String,PreparedStatementSetter,ResultSetExtractor);;Argument[0];sql",
        "org.springframework.jdbc.core;JdbcOperations;true;query;(String,PreparedStatementSetter,RowCallbackHandler);;Argument[0];sql",
        "org.springframework.jdbc.core;JdbcOperations;true;query;(String,PreparedStatementSetter,RowMapper);;Argument[0];sql",
        "org.springframework.jdbc.core;JdbcOperations;true;query;(String,ResultSetExtractor);;Argument[0];sql",
        "org.springframework.jdbc.core;JdbcOperations;true;query;(String,ResultSetExtractor,Object[]);;Argument[0];sql",
        "org.springframework.jdbc.core;JdbcOperations;true;query;(String,RowCallbackHandler);;Argument[0];sql",
        "org.springframework.jdbc.core;JdbcOperations;true;query;(String,RowCallbackHandler,Object[]);;Argument[0];sql",
        "org.springframework.jdbc.core;JdbcOperations;true;query;(String,RowMapper);;Argument[0];sql",
        "org.springframework.jdbc.core;JdbcOperations;true;query;(String,RowMapper,Object[]);;Argument[0];sql",
        "org.springframework.jdbc.core;JdbcOperations;true;queryForList;(String);;Argument[0];sql",
        "org.springframework.jdbc.core;JdbcOperations;true;queryForList;(String,Class);;Argument[0];sql",
        "org.springframework.jdbc.core;JdbcOperations;true;queryForList;(String,Class,Object[]);;Argument[0];sql",
        "org.springframework.jdbc.core;JdbcOperations;true;queryForList;(String,Object[]);;Argument[0];sql",
        "org.springframework.jdbc.core;JdbcOperations;true;queryForList;(String,Object[],Class);;Argument[0];sql",
        "org.springframework.jdbc.core;JdbcOperations;true;queryForList;(String,Object[],int[]);;Argument[0];sql",
        "org.springframework.jdbc.core;JdbcOperations;true;queryForList;(String,Object[],int[],Class);;Argument[0];sql",
        "org.springframework.jdbc.core;JdbcOperations;true;queryForMap;(String);;Argument[0];sql",
        "org.springframework.jdbc.core;JdbcOperations;true;queryForMap;(String,Object[]);;Argument[0];sql",
        "org.springframework.jdbc.core;JdbcOperations;true;queryForMap;(String,Object[],int[]);;Argument[0];sql",
        "org.springframework.jdbc.core;JdbcOperations;true;queryForObject;(String,Class);;Argument[0];sql",
        "org.springframework.jdbc.core;JdbcOperations;true;queryForObject;(String,Class,Object[]);;Argument[0];sql",
        "org.springframework.jdbc.core;JdbcOperations;true;queryForObject;(String,Object[],Class);;Argument[0];sql",
        "org.springframework.jdbc.core;JdbcOperations;true;queryForObject;(String,Object[],RowMapper);;Argument[0];sql",
        "org.springframework.jdbc.core;JdbcOperations;true;queryForObject;(String,Object[],int[],Class);;Argument[0];sql",
        "org.springframework.jdbc.core;JdbcOperations;true;queryForObject;(String,Object[],int[],RowMapper);;Argument[0];sql",
        "org.springframework.jdbc.core;JdbcOperations;true;queryForObject;(String,RowMapper);;Argument[0];sql",
        "org.springframework.jdbc.core;JdbcOperations;true;queryForObject;(String,RowMapper,Object[]);;Argument[0];sql",
        "org.springframework.jdbc.core;JdbcOperations;true;queryForRowSet;(String);;Argument[0];sql",
        "org.springframework.jdbc.core;JdbcOperations;true;queryForRowSet;(String,Object[]);;Argument[0];sql",
        "org.springframework.jdbc.core;JdbcOperations;true;queryForRowSet;(String,Object[],int[]);;Argument[0];sql",
        "org.springframework.jdbc.core;JdbcOperations;true;queryForStream;(PreparedStatementCreator,RowMapper);;Argument[0];sql",
        "org.springframework.jdbc.core;JdbcOperations;true;queryForStream;(String,PreparedStatementSetter,RowMapper);;Argument[0];sql",
        "org.springframework.jdbc.core;JdbcOperations;true;queryForStream;(String,RowMapper);;Argument[0];sql",
        "org.springframework.jdbc.core;JdbcOperations;true;queryForStream;(String,RowMapper,Object[]);;Argument[0];sql",
        "org.springframework.jdbc.core;JdbcOperations;true;update;(PreparedStatementCreator);;Argument[0];sql",
        "org.springframework.jdbc.core;JdbcOperations;true;update;(PreparedStatementCreator,KeyHolder);;Argument[0];sql",
        "org.springframework.jdbc.core;JdbcOperations;true;update;(String);;Argument[0];sql",
        "org.springframework.jdbc.core;JdbcOperations;true;update;(String,Object[]);;Argument[0];sql",
        "org.springframework.jdbc.core;JdbcOperations;true;update;(String,Object[],int[]);;Argument[0];sql",
        "org.springframework.jdbc.core;JdbcOperations;true;update;(String,PreparedStatementSetter);;Argument[0];sql",
        "org.springframework.jdbc.core;JdbcTemplate;true;query;(PreparedStatementCreator,PreparedStatementSetter,ResultSetExtractor);;Argument[0];sql",
        "org.springframework.jdbc.core;JdbcTemplate;true;queryForStream;(PreparedStatementCreator,PreparedStatementSetter,RowMapper);;Argument[0];sql",
        "org.springframework.jdbc.core;PreparedStatementCreator;true;createPreparedStatement;(Connection);;Argument[-1];sql",
        "org.springframework.jdbc.datasource.lookup;DataSourceLookup;true;getDataSource;(String);;Argument[0];jndi-injection",
        "org.springframework.jdbc.object;BatchSqlUpdate;true;BatchSqlUpdate;(DataSource,String);;Argument[1];sql",
        "org.springframework.jdbc.object;BatchSqlUpdate;true;BatchSqlUpdate;(DataSource,String,int[]);;Argument[1];sql",
        "org.springframework.jdbc.object;BatchSqlUpdate;true;BatchSqlUpdate;(DataSource,String,int[],int);;Argument[1];sql",
        "org.springframework.jdbc.object;MappingSqlQuery;true;MappingSqlQuery;(DataSource,String);;Argument[1];sql",
        "org.springframework.jdbc.object;MappingSqlQueryWithParameters;true;MappingSqlQueryWithParameters;(DataSource,String);;Argument[1];sql",
        "org.springframework.jdbc.object;SqlCall;true;SqlCall;(DataSource,String);;Argument[1];sql",
        "org.springframework.jdbc.object;SqlFunction;true;SqlFunction;(DataSource,String);;Argument[1];sql",
        "org.springframework.jdbc.object;SqlFunction;true;SqlFunction;(DataSource,String,int[]);;Argument[1];sql",
        "org.springframework.jdbc.object;SqlFunction;true;SqlFunction;(DataSource,String,int[],Class);;Argument[1];sql",
        "org.springframework.jdbc.object;SqlQuery;true;SqlQuery;(DataSource,String);;Argument[1];sql",
        "org.springframework.jdbc.object;SqlUpdate;true;SqlUpdate;(DataSource,String);;Argument[1];sql",
        "org.springframework.jdbc.object;SqlUpdate;true;SqlUpdate;(DataSource,String,int[]);;Argument[1];sql",
        "org.springframework.jdbc.object;SqlUpdate;true;SqlUpdate;(DataSource,String,int[],int);;Argument[1];sql",
        "org.springframework.jdbc.object;UpdatableSqlQuery;true;UpdatableSqlQuery;(DataSource,String);;Argument[1];sql",
        "org.springframework.jms.core;JmsMessageOperations;true;convertAndSend;(String,Object);;Argument[0];jndi-injection",
        "org.springframework.jms.core;JmsMessageOperations;true;convertAndSend;(String,Object,Map);;Argument[0];jndi-injection",
        "org.springframework.jms.core;JmsMessageOperations;true;convertAndSend;(String,Object,Map,MessagePostProcessor);;Argument[0];jndi-injection",
        "org.springframework.jms.core;JmsMessageOperations;true;convertAndSend;(String,Object,MessagePostProcessor);;Argument[0];jndi-injection",
        "org.springframework.jms.core;JmsMessageOperations;true;convertSendAndReceive;(String,Object,Class);;Argument[0];jndi-injection",
        "org.springframework.jms.core;JmsMessageOperations;true;convertSendAndReceive;(String,Object,Class,MessagePostProcessor);;Argument[0];jndi-injection",
        "org.springframework.jms.core;JmsMessageOperations;true;convertSendAndReceive;(String,Object,Map,Class);;Argument[0];jndi-injection",
        "org.springframework.jms.core;JmsMessageOperations;true;convertSendAndReceive;(String,Object,Map,Class,MessagePostProcessor);;Argument[0];jndi-injection",
        "org.springframework.jms.core;JmsMessageOperations;true;receive;(String);;Argument[0];jndi-injection",
        "org.springframework.jms.core;JmsMessageOperations;true;receiveAndConvert;(String,Class);;Argument[0];jndi-injection",
        "org.springframework.jms.core;JmsMessageOperations;true;send;(String,Message);;Argument[0];jndi-injection",
        "org.springframework.jms.core;JmsMessageOperations;true;sendAndReceive;(String,Message);;Argument[0];jndi-injection",
        "org.springframework.jms.core;JmsOperations;true;browse;(String,BrowserCallback);;Argument[0];jndi-injection",
        "org.springframework.jms.core;JmsOperations;true;browseSelected;(String,String,BrowserCallback);;Argument[0];jndi-injection",
        "org.springframework.jms.core;JmsOperations;true;convertAndSend;(String,Object);;Argument[0];jndi-injection",
        "org.springframework.jms.core;JmsOperations;true;convertAndSend;(String,Object,MessagePostProcessor);;Argument[0];jndi-injection",
        "org.springframework.jms.core;JmsOperations;true;execute;(String,ProducerCallback);;Argument[0];jndi-injection",
        "org.springframework.jms.core;JmsOperations;true;receive;(String);;Argument[0];jndi-injection",
        "org.springframework.jms.core;JmsOperations;true;receiveAndConvert;(String);;Argument[0];jndi-injection",
        "org.springframework.jms.core;JmsOperations;true;receiveSelected;(String,String);;Argument[0];jndi-injection",
        "org.springframework.jms.core;JmsOperations;true;receiveSelectedAndConvert;(String,String);;Argument[0];jndi-injection",
        "org.springframework.jms.core;JmsOperations;true;send;(String,MessageCreator);;Argument[0];jndi-injection",
        "org.springframework.jms.core;JmsOperations;true;sendAndReceive;(String,MessageCreator);;Argument[0];jndi-injection",
        "org.springframework.jms.support.destination;DestinationResolver;true;resolveDestinationName;(Session,String,boolean);;Argument[1];jndi-injection",
        "org.springframework.jmx.access;MBeanClientInterceptor;true;prepare;();;Argument[-1];jndi-injection",
        "org.springframework.jmx.access;NotificationListenerRegistrar;true;prepare;();;Argument[-1];jndi-injection",
        "org.springframework.jndi;JndiLocatorSupport;true;lookup;(String);;Argument[0];jndi-injection",
        "org.springframework.jndi;JndiLocatorSupport;true;lookup;(String,Class);;Argument[0];jndi-injection",
        "org.springframework.jndi;JndiTemplate;true;lookup;(String);;Argument[0];jndi-injection",
        "org.springframework.jndi;JndiTemplate;true;lookup;(String,Class);;Argument[0];jndi-injection",
        "org.springframework.mail.javamail;MimeMessageHelper;true;addAttachment;(String,InputStreamSource);;Argument[1];open-url",
        "org.springframework.mail.javamail;MimeMessageHelper;true;addAttachment;(String,InputStreamSource,String);;Argument[1];open-url",
        "org.springframework.mail.javamail;MimeMessageHelper;true;addInline;(String,InputStreamSource,String);;Argument[1];open-url",
        "org.springframework.mail.javamail;MimeMessageHelper;true;addInline;(String,Resource);;Argument[1];open-url",
        "org.springframework.messaging.handler.invocation.reactive;AbstractMethodMessageHandler;true;registerHandlerMethod;(Object,Method,Object);;Argument[0];jndi-injection",
        "org.springframework.messaging.handler;HandlerMethod;true;HandlerMethod;(String,BeanFactory,Method);;Argument[0];jndi-injection",
        "org.springframework.messaging.handler;HandlerMethod;true;createWithResolvedBean;();;Argument[-1];jndi-injection",
        "org.springframework.messaging.rsocket.annotation.support;RSocketMessageHandler;true;responder;(RSocketStrategies,Object[]);;Argument[1];jndi-injection",
        "org.springframework.orm.hibernate5;HibernateOperations;true;bulkUpdate;(String,Object[]);;Argument[0];sql",
        "org.springframework.orm.hibernate5;HibernateOperations;true;find;(String,Object[]);;Argument[0];sql",
        "org.springframework.orm.hibernate5;HibernateOperations;true;findByNamedParam;(String,String,Object);;Argument[0];sql",
        "org.springframework.orm.hibernate5;HibernateOperations;true;findByNamedParam;(String,String[],Object[]);;Argument[0];sql",
        "org.springframework.orm.hibernate5;HibernateOperations;true;findByValueBean;(String,Object);;Argument[0];sql",
        "org.springframework.orm.hibernate5;HibernateOperations;true;iterate;(String,Object[]);;Argument[0];sql",
        "org.springframework.orm.hibernate5;HibernateTransactionManager;true;getEntityInterceptor;();;Argument[-1];jndi-injection",
        "org.springframework.orm.jpa;EntityManagerFactoryUtils;true;findEntityManagerFactory;(ListableBeanFactory,String);;Argument[1];jndi-injection",
        "org.springframework.oxm.support;SaxResourceUtils;true;createInputSource;(Resource);;Argument[0];open-url",
        "org.springframework.r2dbc.connection.lookup;ConnectionFactoryLookup;true;getConnectionFactory;(String);;Argument[0];jndi-injection",
        "org.springframework.test.context.transaction;TestContextTransactionUtils;true;retrieveDataSource;(TestContext,String);;Argument[1];jndi-injection",
        "org.springframework.test.context.transaction;TestContextTransactionUtils;true;retrieveTransactionManager;(TestContext,String);;Argument[1];jndi-injection",
        "org.springframework.test.jdbc;JdbcTestUtils;true;countRowsInTable;(JdbcTemplate,String);;Argument[1];sql",
        "org.springframework.test.jdbc;JdbcTestUtils;true;countRowsInTableWhere;(JdbcTemplate,String,String);;Argument[1];sql",
        "org.springframework.test.jdbc;JdbcTestUtils;true;countRowsInTableWhere;(JdbcTemplate,String,String);;Argument[2];sql",
        "org.springframework.test.jdbc;JdbcTestUtils;true;deleteFromTableWhere;(JdbcTemplate,String,String,Object[]);;Argument[1];sql",
        "org.springframework.test.jdbc;JdbcTestUtils;true;deleteFromTableWhere;(JdbcTemplate,String,String,Object[]);;Argument[2];sql",
        "org.springframework.test.jdbc;JdbcTestUtils;true;deleteFromTables;(JdbcTemplate,String[]);;Argument[1];sql",
        "org.springframework.test.jdbc;JdbcTestUtils;true;dropTables;(JdbcTemplate,String[]);;Argument[1];sql",
        "org.springframework.test.util;XpathExpectationsHelper;true;XpathExpectationsHelper;(String,Map,Object[]);;Argument[-1];xpath",
        "org.springframework.test.util;XpathExpectationsHelper;true;XpathExpectationsHelper;(String,Map,Object[]);;Argument[0];xpath",
        "org.springframework.test.util;XpathExpectationsHelper;true;XpathExpectationsHelper;(String,Map,Object[]);;Argument[2];xpath",
        "org.springframework.test.web.client.match;MockRestRequestMatchers;true;xpath;(String,Map,Object[]);;Argument[0];xpath",
        "org.springframework.test.web.client.match;MockRestRequestMatchers;true;xpath;(String,Map,Object[]);;Argument[2];xpath",
        "org.springframework.test.web.client.match;MockRestRequestMatchers;true;xpath;(String,Object[]);;Argument[0];xpath",
        "org.springframework.test.web.client.match;MockRestRequestMatchers;true;xpath;(String,Object[]);;Argument[1];xpath",
        "org.springframework.test.web.client;ResponseCreator;true;createResponse;(ClientHttpRequest);;Argument[-1];open-url",
        "org.springframework.test.web.reactive.server;WebTestClient$BodyContentSpec;true;xpath;(String,Map,Object[]);;Argument[0];xpath",
        "org.springframework.test.web.reactive.server;WebTestClient$BodyContentSpec;true;xpath;(String,Map,Object[]);;Argument[2];xpath",
        "org.springframework.test.web.reactive.server;WebTestClient$BodyContentSpec;true;xpath;(String,Object[]);;Argument[0];xpath",
        "org.springframework.test.web.reactive.server;WebTestClient$BodyContentSpec;true;xpath;(String,Object[]);;Argument[1];xpath",
        "org.springframework.test.web.servlet.result;MockMvcResultMatchers;true;xpath;(String,Map,Object[]);;Argument[0];xpath",
        "org.springframework.test.web.servlet.result;MockMvcResultMatchers;true;xpath;(String,Map,Object[]);;Argument[2];xpath",
        "org.springframework.test.web.servlet.result;MockMvcResultMatchers;true;xpath;(String,Object[]);;Argument[0];xpath",
        "org.springframework.test.web.servlet.result;MockMvcResultMatchers;true;xpath;(String,Object[]);;Argument[1];xpath",
        "org.springframework.ui.freemarker;FreeMarkerConfigurationFactory;true;createConfiguration;();;Argument[-1];open-url",
        "org.springframework.util;FileCopyUtils;true;copy;(File,File);;Argument[1];create-file",
        "org.springframework.util;FileCopyUtils;true;copy;(byte[],File);;Argument[1];create-file",
        "org.springframework.util;FileSystemUtils;true;copyRecursively;(File,File);;Argument[1];create-file",
        "org.springframework.util;FileSystemUtils;true;copyRecursively;(Path,Path);;Argument[1];create-file",
        "org.springframework.util;MethodInvoker;true;getTargetClass;();;Argument[-1];jndi-injection",
        "org.springframework.util;MethodInvoker;true;getTargetObject;();;Argument[-1];jndi-injection",
        "org.springframework.util;PropertyPlaceholderHelper$PlaceholderResolver;true;resolvePlaceholder;(String);;Argument[0];jndi-injection",
        "org.springframework.web.bind.support;SessionAttributeStore;true;retrieveAttribute;(WebRequest,String);;Argument[1];jndi-injection",
        "org.springframework.web.client;AsyncRestOperations;true;delete;(String,Map);;Argument[0];open-url",
        "org.springframework.web.client;AsyncRestOperations;true;delete;(String,Map);;Argument[1];open-url",
        "org.springframework.web.client;AsyncRestOperations;true;delete;(String,Object[]);;Argument[0];open-url",
        "org.springframework.web.client;AsyncRestOperations;true;delete;(String,Object[]);;Argument[1];open-url",
        "org.springframework.web.client;AsyncRestOperations;true;delete;(URI);;Argument[0];open-url",
        "org.springframework.web.client;AsyncRestOperations;true;exchange;(String,HttpMethod,HttpEntity,Class,Map);;Argument[0];open-url",
        "org.springframework.web.client;AsyncRestOperations;true;exchange;(String,HttpMethod,HttpEntity,Class,Map);;Argument[2];open-url",
        "org.springframework.web.client;AsyncRestOperations;true;exchange;(String,HttpMethod,HttpEntity,Class,Map);;Argument[4];open-url",
        "org.springframework.web.client;AsyncRestOperations;true;exchange;(String,HttpMethod,HttpEntity,Class,Object[]);;Argument[0];open-url",
        "org.springframework.web.client;AsyncRestOperations;true;exchange;(String,HttpMethod,HttpEntity,Class,Object[]);;Argument[2];open-url",
        "org.springframework.web.client;AsyncRestOperations;true;exchange;(String,HttpMethod,HttpEntity,Class,Object[]);;Argument[4];open-url",
        "org.springframework.web.client;AsyncRestOperations;true;exchange;(String,HttpMethod,HttpEntity,ParameterizedTypeReference,Map);;Argument[0];open-url",
        "org.springframework.web.client;AsyncRestOperations;true;exchange;(String,HttpMethod,HttpEntity,ParameterizedTypeReference,Map);;Argument[2];open-url",
        "org.springframework.web.client;AsyncRestOperations;true;exchange;(String,HttpMethod,HttpEntity,ParameterizedTypeReference,Map);;Argument[4];open-url",
        "org.springframework.web.client;AsyncRestOperations;true;exchange;(String,HttpMethod,HttpEntity,ParameterizedTypeReference,Object[]);;Argument[0];open-url",
        "org.springframework.web.client;AsyncRestOperations;true;exchange;(String,HttpMethod,HttpEntity,ParameterizedTypeReference,Object[]);;Argument[2];open-url",
        "org.springframework.web.client;AsyncRestOperations;true;exchange;(String,HttpMethod,HttpEntity,ParameterizedTypeReference,Object[]);;Argument[4];open-url",
        "org.springframework.web.client;AsyncRestOperations;true;exchange;(URI,HttpMethod,HttpEntity,Class);;Argument[0];open-url",
        "org.springframework.web.client;AsyncRestOperations;true;exchange;(URI,HttpMethod,HttpEntity,Class);;Argument[2];open-url",
        "org.springframework.web.client;AsyncRestOperations;true;exchange;(URI,HttpMethod,HttpEntity,ParameterizedTypeReference);;Argument[0];open-url",
        "org.springframework.web.client;AsyncRestOperations;true;exchange;(URI,HttpMethod,HttpEntity,ParameterizedTypeReference);;Argument[2];open-url",
        "org.springframework.web.client;AsyncRestOperations;true;execute;(String,HttpMethod,AsyncRequestCallback,ResponseExtractor,Map);;Argument[0];open-url",
        "org.springframework.web.client;AsyncRestOperations;true;execute;(String,HttpMethod,AsyncRequestCallback,ResponseExtractor,Map);;Argument[4];open-url",
        "org.springframework.web.client;AsyncRestOperations;true;execute;(String,HttpMethod,AsyncRequestCallback,ResponseExtractor,Object[]);;Argument[0];open-url",
        "org.springframework.web.client;AsyncRestOperations;true;execute;(String,HttpMethod,AsyncRequestCallback,ResponseExtractor,Object[]);;Argument[4];open-url",
        "org.springframework.web.client;AsyncRestOperations;true;execute;(URI,HttpMethod,AsyncRequestCallback,ResponseExtractor);;Argument[0];open-url",
        "org.springframework.web.client;AsyncRestOperations;true;getForEntity;(String,Class,Map);;Argument[0];open-url",
        "org.springframework.web.client;AsyncRestOperations;true;getForEntity;(String,Class,Map);;Argument[2];open-url",
        "org.springframework.web.client;AsyncRestOperations;true;getForEntity;(String,Class,Object[]);;Argument[0];open-url",
        "org.springframework.web.client;AsyncRestOperations;true;getForEntity;(String,Class,Object[]);;Argument[2];open-url",
        "org.springframework.web.client;AsyncRestOperations;true;getForEntity;(URI,Class);;Argument[0];open-url",
        "org.springframework.web.client;AsyncRestOperations;true;headForHeaders;(String,Map);;Argument[0];open-url",
        "org.springframework.web.client;AsyncRestOperations;true;headForHeaders;(String,Map);;Argument[1];open-url",
        "org.springframework.web.client;AsyncRestOperations;true;headForHeaders;(String,Object[]);;Argument[0];open-url",
        "org.springframework.web.client;AsyncRestOperations;true;headForHeaders;(String,Object[]);;Argument[1];open-url",
        "org.springframework.web.client;AsyncRestOperations;true;headForHeaders;(URI);;Argument[0];open-url",
        "org.springframework.web.client;AsyncRestOperations;true;optionsForAllow;(String,Map);;Argument[0];open-url",
        "org.springframework.web.client;AsyncRestOperations;true;optionsForAllow;(String,Map);;Argument[1];open-url",
        "org.springframework.web.client;AsyncRestOperations;true;optionsForAllow;(String,Object[]);;Argument[0];open-url",
        "org.springframework.web.client;AsyncRestOperations;true;optionsForAllow;(String,Object[]);;Argument[1];open-url",
        "org.springframework.web.client;AsyncRestOperations;true;optionsForAllow;(URI);;Argument[0];open-url",
        "org.springframework.web.client;AsyncRestOperations;true;postForEntity;(String,HttpEntity,Class,Map);;Argument[0];open-url",
        "org.springframework.web.client;AsyncRestOperations;true;postForEntity;(String,HttpEntity,Class,Map);;Argument[1];open-url",
        "org.springframework.web.client;AsyncRestOperations;true;postForEntity;(String,HttpEntity,Class,Map);;Argument[3];open-url",
        "org.springframework.web.client;AsyncRestOperations;true;postForEntity;(String,HttpEntity,Class,Object[]);;Argument[0];open-url",
        "org.springframework.web.client;AsyncRestOperations;true;postForEntity;(String,HttpEntity,Class,Object[]);;Argument[1];open-url",
        "org.springframework.web.client;AsyncRestOperations;true;postForEntity;(String,HttpEntity,Class,Object[]);;Argument[3];open-url",
        "org.springframework.web.client;AsyncRestOperations;true;postForEntity;(URI,HttpEntity,Class);;Argument[0];open-url",
        "org.springframework.web.client;AsyncRestOperations;true;postForEntity;(URI,HttpEntity,Class);;Argument[1];open-url",
        "org.springframework.web.client;AsyncRestOperations;true;postForLocation;(String,HttpEntity,Map);;Argument[0];open-url",
        "org.springframework.web.client;AsyncRestOperations;true;postForLocation;(String,HttpEntity,Map);;Argument[1];open-url",
        "org.springframework.web.client;AsyncRestOperations;true;postForLocation;(String,HttpEntity,Map);;Argument[2];open-url",
        "org.springframework.web.client;AsyncRestOperations;true;postForLocation;(String,HttpEntity,Object[]);;Argument[0];open-url",
        "org.springframework.web.client;AsyncRestOperations;true;postForLocation;(String,HttpEntity,Object[]);;Argument[1];open-url",
        "org.springframework.web.client;AsyncRestOperations;true;postForLocation;(String,HttpEntity,Object[]);;Argument[2];open-url",
        "org.springframework.web.client;AsyncRestOperations;true;postForLocation;(URI,HttpEntity);;Argument[0];open-url",
        "org.springframework.web.client;AsyncRestOperations;true;postForLocation;(URI,HttpEntity);;Argument[1];open-url",
        "org.springframework.web.client;AsyncRestOperations;true;put;(String,HttpEntity,Map);;Argument[0];open-url",
        "org.springframework.web.client;AsyncRestOperations;true;put;(String,HttpEntity,Map);;Argument[1];open-url",
        "org.springframework.web.client;AsyncRestOperations;true;put;(String,HttpEntity,Map);;Argument[2];open-url",
        "org.springframework.web.client;AsyncRestOperations;true;put;(String,HttpEntity,Object[]);;Argument[0];open-url",
        "org.springframework.web.client;AsyncRestOperations;true;put;(String,HttpEntity,Object[]);;Argument[1];open-url",
        "org.springframework.web.client;AsyncRestOperations;true;put;(String,HttpEntity,Object[]);;Argument[2];open-url",
        "org.springframework.web.client;AsyncRestOperations;true;put;(URI,HttpEntity);;Argument[0];open-url",
        "org.springframework.web.client;AsyncRestOperations;true;put;(URI,HttpEntity);;Argument[1];open-url",
        "org.springframework.web.client;RequestCallback;true;doWithRequest;(ClientHttpRequest);;Argument[-1];open-url",
        "org.springframework.web.client;RestOperations;true;delete;(String,Map);;Argument[0];open-url",
        "org.springframework.web.client;RestOperations;true;delete;(String,Map);;Argument[1];open-url",
        "org.springframework.web.client;RestOperations;true;delete;(String,Object[]);;Argument[0];open-url",
        "org.springframework.web.client;RestOperations;true;delete;(String,Object[]);;Argument[1];open-url",
        "org.springframework.web.client;RestOperations;true;delete;(URI);;Argument[0];open-url",
        "org.springframework.web.client;RestOperations;true;exchange;(RequestEntity,Class);;Argument[0];open-url",
        "org.springframework.web.client;RestOperations;true;exchange;(RequestEntity,ParameterizedTypeReference);;Argument[0];open-url",
        "org.springframework.web.client;RestOperations;true;exchange;(String,HttpMethod,HttpEntity,Class,Map);;Argument[0];open-url",
        "org.springframework.web.client;RestOperations;true;exchange;(String,HttpMethod,HttpEntity,Class,Map);;Argument[2];open-url",
        "org.springframework.web.client;RestOperations;true;exchange;(String,HttpMethod,HttpEntity,Class,Map);;Argument[4];open-url",
        "org.springframework.web.client;RestOperations;true;exchange;(String,HttpMethod,HttpEntity,Class,Object[]);;Argument[0];open-url",
        "org.springframework.web.client;RestOperations;true;exchange;(String,HttpMethod,HttpEntity,Class,Object[]);;Argument[2];open-url",
        "org.springframework.web.client;RestOperations;true;exchange;(String,HttpMethod,HttpEntity,Class,Object[]);;Argument[4];open-url",
        "org.springframework.web.client;RestOperations;true;exchange;(String,HttpMethod,HttpEntity,ParameterizedTypeReference,Map);;Argument[0];open-url",
        "org.springframework.web.client;RestOperations;true;exchange;(String,HttpMethod,HttpEntity,ParameterizedTypeReference,Map);;Argument[2];open-url",
        "org.springframework.web.client;RestOperations;true;exchange;(String,HttpMethod,HttpEntity,ParameterizedTypeReference,Map);;Argument[4];open-url",
        "org.springframework.web.client;RestOperations;true;exchange;(String,HttpMethod,HttpEntity,ParameterizedTypeReference,Object[]);;Argument[0];open-url",
        "org.springframework.web.client;RestOperations;true;exchange;(String,HttpMethod,HttpEntity,ParameterizedTypeReference,Object[]);;Argument[2];open-url",
        "org.springframework.web.client;RestOperations;true;exchange;(String,HttpMethod,HttpEntity,ParameterizedTypeReference,Object[]);;Argument[4];open-url",
        "org.springframework.web.client;RestOperations;true;exchange;(URI,HttpMethod,HttpEntity,Class);;Argument[0];open-url",
        "org.springframework.web.client;RestOperations;true;exchange;(URI,HttpMethod,HttpEntity,Class);;Argument[2];open-url",
        "org.springframework.web.client;RestOperations;true;exchange;(URI,HttpMethod,HttpEntity,ParameterizedTypeReference);;Argument[0];open-url",
        "org.springframework.web.client;RestOperations;true;exchange;(URI,HttpMethod,HttpEntity,ParameterizedTypeReference);;Argument[2];open-url",
        "org.springframework.web.client;RestOperations;true;execute;(String,HttpMethod,RequestCallback,ResponseExtractor,Map);;Argument[0];open-url",
        "org.springframework.web.client;RestOperations;true;execute;(String,HttpMethod,RequestCallback,ResponseExtractor,Map);;Argument[4];open-url",
        "org.springframework.web.client;RestOperations;true;execute;(String,HttpMethod,RequestCallback,ResponseExtractor,Object[]);;Argument[0];open-url",
        "org.springframework.web.client;RestOperations;true;execute;(String,HttpMethod,RequestCallback,ResponseExtractor,Object[]);;Argument[4];open-url",
        "org.springframework.web.client;RestOperations;true;execute;(URI,HttpMethod,RequestCallback,ResponseExtractor);;Argument[0];open-url",
        "org.springframework.web.client;RestOperations;true;getForEntity;(String,Class,Map);;Argument[0];open-url",
        "org.springframework.web.client;RestOperations;true;getForEntity;(String,Class,Map);;Argument[2];open-url",
        "org.springframework.web.client;RestOperations;true;getForEntity;(String,Class,Object[]);;Argument[0];open-url",
        "org.springframework.web.client;RestOperations;true;getForEntity;(String,Class,Object[]);;Argument[2];open-url",
        "org.springframework.web.client;RestOperations;true;getForEntity;(URI,Class);;Argument[0];open-url",
        "org.springframework.web.client;RestOperations;true;getForObject;(String,Class,Map);;Argument[0];open-url",
        "org.springframework.web.client;RestOperations;true;getForObject;(String,Class,Map);;Argument[2];open-url",
        "org.springframework.web.client;RestOperations;true;getForObject;(String,Class,Object[]);;Argument[0];open-url",
        "org.springframework.web.client;RestOperations;true;getForObject;(String,Class,Object[]);;Argument[2];open-url",
        "org.springframework.web.client;RestOperations;true;getForObject;(URI,Class);;Argument[0];open-url",
        "org.springframework.web.client;RestOperations;true;headForHeaders;(String,Map);;Argument[0];open-url",
        "org.springframework.web.client;RestOperations;true;headForHeaders;(String,Map);;Argument[1];open-url",
        "org.springframework.web.client;RestOperations;true;headForHeaders;(String,Object[]);;Argument[0];open-url",
        "org.springframework.web.client;RestOperations;true;headForHeaders;(String,Object[]);;Argument[1];open-url",
        "org.springframework.web.client;RestOperations;true;headForHeaders;(URI);;Argument[0];open-url",
        "org.springframework.web.client;RestOperations;true;optionsForAllow;(String,Map);;Argument[0];open-url",
        "org.springframework.web.client;RestOperations;true;optionsForAllow;(String,Map);;Argument[1];open-url",
        "org.springframework.web.client;RestOperations;true;optionsForAllow;(String,Object[]);;Argument[0];open-url",
        "org.springframework.web.client;RestOperations;true;optionsForAllow;(String,Object[]);;Argument[1];open-url",
        "org.springframework.web.client;RestOperations;true;optionsForAllow;(URI);;Argument[0];open-url",
        "org.springframework.web.client;RestOperations;true;patchForObject;(String,Object,Class,Map);;Argument[0];open-url",
        "org.springframework.web.client;RestOperations;true;patchForObject;(String,Object,Class,Map);;Argument[1];open-url",
        "org.springframework.web.client;RestOperations;true;patchForObject;(String,Object,Class,Map);;Argument[3];open-url",
        "org.springframework.web.client;RestOperations;true;patchForObject;(String,Object,Class,Object[]);;Argument[0];open-url",
        "org.springframework.web.client;RestOperations;true;patchForObject;(String,Object,Class,Object[]);;Argument[1];open-url",
        "org.springframework.web.client;RestOperations;true;patchForObject;(String,Object,Class,Object[]);;Argument[3];open-url",
        "org.springframework.web.client;RestOperations;true;patchForObject;(URI,Object,Class);;Argument[0];open-url",
        "org.springframework.web.client;RestOperations;true;patchForObject;(URI,Object,Class);;Argument[1];open-url",
        "org.springframework.web.client;RestOperations;true;postForEntity;(String,Object,Class,Map);;Argument[0];open-url",
        "org.springframework.web.client;RestOperations;true;postForEntity;(String,Object,Class,Map);;Argument[1];open-url",
        "org.springframework.web.client;RestOperations;true;postForEntity;(String,Object,Class,Map);;Argument[3];open-url",
        "org.springframework.web.client;RestOperations;true;postForEntity;(String,Object,Class,Object[]);;Argument[0];open-url",
        "org.springframework.web.client;RestOperations;true;postForEntity;(String,Object,Class,Object[]);;Argument[1];open-url",
        "org.springframework.web.client;RestOperations;true;postForEntity;(String,Object,Class,Object[]);;Argument[3];open-url",
        "org.springframework.web.client;RestOperations;true;postForEntity;(URI,Object,Class);;Argument[0];open-url",
        "org.springframework.web.client;RestOperations;true;postForEntity;(URI,Object,Class);;Argument[1];open-url",
        "org.springframework.web.client;RestOperations;true;postForLocation;(String,Object,Map);;Argument[0];open-url",
        "org.springframework.web.client;RestOperations;true;postForLocation;(String,Object,Map);;Argument[1];open-url",
        "org.springframework.web.client;RestOperations;true;postForLocation;(String,Object,Map);;Argument[2];open-url",
        "org.springframework.web.client;RestOperations;true;postForLocation;(String,Object,Object[]);;Argument[0];open-url",
        "org.springframework.web.client;RestOperations;true;postForLocation;(String,Object,Object[]);;Argument[1];open-url",
        "org.springframework.web.client;RestOperations;true;postForLocation;(String,Object,Object[]);;Argument[2];open-url",
        "org.springframework.web.client;RestOperations;true;postForLocation;(URI,Object);;Argument[0];open-url",
        "org.springframework.web.client;RestOperations;true;postForLocation;(URI,Object);;Argument[1];open-url",
        "org.springframework.web.client;RestOperations;true;postForObject;(String,Object,Class,Map);;Argument[0];open-url",
        "org.springframework.web.client;RestOperations;true;postForObject;(String,Object,Class,Map);;Argument[1];open-url",
        "org.springframework.web.client;RestOperations;true;postForObject;(String,Object,Class,Map);;Argument[3];open-url",
        "org.springframework.web.client;RestOperations;true;postForObject;(String,Object,Class,Object[]);;Argument[0];open-url",
        "org.springframework.web.client;RestOperations;true;postForObject;(String,Object,Class,Object[]);;Argument[1];open-url",
        "org.springframework.web.client;RestOperations;true;postForObject;(String,Object,Class,Object[]);;Argument[3];open-url",
        "org.springframework.web.client;RestOperations;true;postForObject;(URI,Object,Class);;Argument[0];open-url",
        "org.springframework.web.client;RestOperations;true;postForObject;(URI,Object,Class);;Argument[1];open-url",
        "org.springframework.web.client;RestOperations;true;put;(String,Object,Map);;Argument[0];open-url",
        "org.springframework.web.client;RestOperations;true;put;(String,Object,Map);;Argument[1];open-url",
        "org.springframework.web.client;RestOperations;true;put;(String,Object,Map);;Argument[2];open-url",
        "org.springframework.web.client;RestOperations;true;put;(String,Object,Object[]);;Argument[0];open-url",
        "org.springframework.web.client;RestOperations;true;put;(String,Object,Object[]);;Argument[1];open-url",
        "org.springframework.web.client;RestOperations;true;put;(String,Object,Object[]);;Argument[2];open-url",
        "org.springframework.web.client;RestOperations;true;put;(URI,Object);;Argument[0];open-url",
        "org.springframework.web.client;RestOperations;true;put;(URI,Object);;Argument[1];open-url",
        "org.springframework.web.context.request.async;WebAsyncTask;true;getExecutor;();;Argument[-1];jndi-injection",
        "org.springframework.web.context.request;RequestAttributes;true;getAttribute;(String,int);;Argument[0];jndi-injection",
        "org.springframework.web.context.request;WebRequest;true;checkNotModified;(String);;Argument[0];header-splitting",
        "org.springframework.web.context.request;WebRequest;true;checkNotModified;(String,long);;Argument[0];header-splitting",
        "org.springframework.web.context.support;WebApplicationContextUtils;true;registerEnvironmentBeans;(ConfigurableListableBeanFactory,ServletContext);;Argument[1];jndi-injection",
        "org.springframework.web.context.support;WebApplicationContextUtils;true;registerEnvironmentBeans;(ConfigurableListableBeanFactory,ServletContext,ServletConfig);;Argument[1];jndi-injection",
        "org.springframework.web.context.support;WebApplicationContextUtils;true;registerEnvironmentBeans;(ConfigurableListableBeanFactory,ServletContext,ServletConfig);;Argument[2];jndi-injection",
        "org.springframework.web.context;ContextLoader;true;initWebApplicationContext;(ServletContext);;Argument[-1];jndi-injection",
        "org.springframework.web.method.annotation;SessionAttributesHandler;true;retrieveAttributes;(WebRequest);;Argument[-1];jndi-injection",
        "org.springframework.web.method.support;HandlerMethodReturnValueHandler;true;handleReturnValue;(Object,MethodParameter,ModelAndViewContainer,NativeWebRequest);;Argument[0];header-splitting",
        "org.springframework.web.method.support;HandlerMethodReturnValueHandler;true;handleReturnValue;(Object,MethodParameter,ModelAndViewContainer,NativeWebRequest);;Argument[0];open-url",
        "org.springframework.web.method;ControllerAdviceBean;true;ControllerAdviceBean;(String,BeanFactory);;Argument[0];jndi-injection",
        "org.springframework.web.method;ControllerAdviceBean;true;ControllerAdviceBean;(String,BeanFactory,ControllerAdvice);;Argument[0];jndi-injection",
        "org.springframework.web.method;ControllerAdviceBean;true;resolveBean;();;Argument[-1];jndi-injection",
        "org.springframework.web.method;HandlerMethod;true;HandlerMethod;(String,BeanFactory,MessageSource,Method);;Argument[0];jndi-injection",
        "org.springframework.web.method;HandlerMethod;true;HandlerMethod;(String,BeanFactory,Method);;Argument[0];jndi-injection",
        "org.springframework.web.method;HandlerMethod;true;createWithResolvedBean;();;Argument[-1];jndi-injection",
        "org.springframework.web.multipart.commons;CommonsFileUploadSupport;true;setUploadTempDir;(Resource);;Argument[0];open-url",
        "org.springframework.web.multipart;MultipartFile;true;transferTo;(File);;Argument[0];create-file",
        "org.springframework.web.multipart;MultipartFile;true;transferTo;(Path);;Argument[0];create-file",
        "org.springframework.web.reactive.resource;TransformedResource;true;TransformedResource;(Resource,byte[]);;Argument[0];open-url",
        "org.springframework.web.reactive.resource;VersionStrategy;true;getResourceVersion;(Resource);;Argument[0];open-url",
        "org.springframework.web.reactive.result.method;AbstractHandlerMethodMapping;true;registerMapping;(Object,Object,Method);;Argument[1];jndi-injection",
        "org.springframework.web.reactive.result.view;ViewResolver;true;resolveViewName;(String,Locale);;Argument[0];jndi-injection",
        "org.springframework.web.servlet.function;ServerRequest;true;attribute;(String);;Argument[0];jndi-injection",
        "org.springframework.web.servlet.function;ServerRequest;true;checkNotModified;(Instant,String);;Argument[1];header-splitting",
        "org.springframework.web.servlet.function;ServerRequest;true;checkNotModified;(String);;Argument[0];header-splitting",
        "org.springframework.web.servlet.function;ServerResponse$SseBuilder;true;data;(Object);;Argument[0];open-url",
        "org.springframework.web.servlet.function;ServerResponse$SseBuilder;true;send;(Object);;Argument[0];open-url",
        "org.springframework.web.servlet.handler;AbstractHandlerMethodMapping;true;registerMapping;(Object,Object,Method);;Argument[1];jndi-injection",
        "org.springframework.web.servlet.handler;MatchableHandlerMapping;true;match;(HttpServletRequest,String);;Argument[-1];jndi-injection",
        "org.springframework.web.servlet.mvc.method.annotation;ResponseBodyEmitter;true;send;(Object);;Argument[0];open-url",
        "org.springframework.web.servlet.mvc.method.annotation;ResponseBodyEmitter;true;send;(Object,MediaType);;Argument[0];open-url",
        "org.springframework.web.servlet.resource;ResourceTransformer;true;transform;(HttpServletRequest,Resource,ResourceTransformerChain);;Argument[1];open-url",
        "org.springframework.web.servlet.resource;ResourceTransformerChain;true;transform;(HttpServletRequest,Resource);;Argument[1];open-url",
        "org.springframework.web.servlet.resource;TransformedResource;true;TransformedResource;(Resource,byte[]);;Argument[0];open-url",
        "org.springframework.web.servlet.resource;VersionStrategy;true;getResourceVersion;(Resource);;Argument[0];open-url",
        "org.springframework.web.servlet.support;BindStatus;true;BindStatus;(RequestContext,String,boolean);;Argument[1];jndi-injection",
        "org.springframework.web.servlet.support;RequestContext;true;changeTheme;(String);;Argument[0];header-splitting",
        "org.springframework.web.servlet.support;RequestContext;true;getBindStatus;(String);;Argument[0];jndi-injection",
        "org.springframework.web.servlet.support;RequestContext;true;getBindStatus;(String,boolean);;Argument[0];jndi-injection",
        "org.springframework.web.servlet.support;RequestContext;true;getErrors;(String);;Argument[0];jndi-injection",
        "org.springframework.web.servlet.support;RequestContext;true;getErrors;(String,boolean);;Argument[0];jndi-injection",
        "org.springframework.web.servlet;ThemeResolver;true;setThemeName;(HttpServletRequest,HttpServletResponse,String);;Argument[2];header-splitting",
        "org.springframework.web.servlet;View;true;render;(Map,HttpServletRequest,HttpServletResponse);;Argument[0];header-splitting",
        "org.springframework.web.servlet;ViewResolver;true;resolveViewName;(String,Locale);;Argument[0];jndi-injection",
        "org.springframework.web.socket.client;WebSocketClient;true;doHandshake;(WebSocketHandler,String,Object[]);;Argument[1];open-url",
        "org.springframework.web.socket.client;WebSocketClient;true;doHandshake;(WebSocketHandler,String,Object[]);;Argument[2];open-url",
        "org.springframework.web.socket.client;WebSocketClient;true;doHandshake;(WebSocketHandler,WebSocketHttpHeaders,URI);;Argument[2];open-url",
        "org.springframework.web.socket.messaging;WebSocketStompClient;true;connect;(String,StompSessionHandler,Object[]);;Argument[0];open-url",
        "org.springframework.web.socket.messaging;WebSocketStompClient;true;connect;(String,StompSessionHandler,Object[]);;Argument[2];open-url",
        "org.springframework.web.socket.messaging;WebSocketStompClient;true;connect;(String,WebSocketHttpHeaders,StompHeaders,StompSessionHandler,Object[]);;Argument[0];open-url",
        "org.springframework.web.socket.messaging;WebSocketStompClient;true;connect;(String,WebSocketHttpHeaders,StompHeaders,StompSessionHandler,Object[]);;Argument[4];open-url",
        "org.springframework.web.socket.messaging;WebSocketStompClient;true;connect;(String,WebSocketHttpHeaders,StompSessionHandler,Object[]);;Argument[0];open-url",
        "org.springframework.web.socket.messaging;WebSocketStompClient;true;connect;(String,WebSocketHttpHeaders,StompSessionHandler,Object[]);;Argument[3];open-url",
        "org.springframework.web.socket.messaging;WebSocketStompClient;true;connect;(URI,WebSocketHttpHeaders,StompHeaders,StompSessionHandler);;Argument[0];open-url",
        "org.springframework.web.socket.sockjs.client;AbstractXhrTransport;true;executeSendRequestInternal;(URI,HttpHeaders,TextMessage);;Argument[0];open-url",
        "org.springframework.web.socket.sockjs.client;InfoReceiver;true;executeInfoRequest;(URI,HttpHeaders);;Argument[0];open-url",
        "org.springframework.web.socket.sockjs.client;XhrTransport;true;executeSendRequest;(URI,HttpHeaders,TextMessage);;Argument[0];open-url",
        "org.springframework.web.util;CookieGenerator;true;addCookie;(HttpServletResponse,String);;Argument[1];header-splitting",
        "org.springframework.web.util;UrlPathHelper;true;getLookupPathForRequest;(HttpServletRequest,String);;Argument[1];jndi-injection"
      ]
  }
}

private class SpringprojectsspringframeworkSourcesCsv extends SourceModelCsv {
  override predicate row(string row) {
    row =
      [
        "org.springframework.core.io;InputStreamSource;true;getInputStream;();;ReturnValue;remote",
        "org.springframework.core.io;Resource;true;getDescription;();;ReturnValue;remote",
        "org.springframework.core.io;Resource;true;getFilename;();;ReturnValue;remote",
        "org.springframework.http;HttpInputMessage;true;getBody;();;ReturnValue;remote",
        "org.springframework.http;HttpMessage;true;getHeaders;();;ReturnValue;remote",
        "org.springframework.http;HttpRequest;true;getURI;();;ReturnValue;remote",
        "org.springframework.mock.web;MockCookie;true;toString;();;ReturnValue;remote",
        "org.springframework.web.accept;ContentNegotiationStrategy;true;resolveMediaTypes;(NativeWebRequest);;ReturnValue;remote",
        "org.springframework.web.bind.support;WebRequestDataBinder;true;bind;(WebRequest);;Argument[0];remote",
        "org.springframework.web.bind.support;WebRequestDataBinder;true;bind;(WebRequest);;ReturnValue;remote",
        "org.springframework.web.bind;ServletRequestDataBinder;true;bind;(ServletRequest);;Argument[0];remote",
        "org.springframework.web.bind;ServletRequestDataBinder;true;bind;(ServletRequest);;ReturnValue;remote",
        "org.springframework.web.bind;ServletRequestUtils;true;getRequiredBooleanParameter;(ServletRequest,String);;ReturnValue;remote",
        "org.springframework.web.bind;ServletRequestUtils;true;getRequiredBooleanParameters;(ServletRequest,String);;ReturnValue;remote",
        "org.springframework.web.bind;ServletRequestUtils;true;getRequiredDoubleParameter;(ServletRequest,String);;ReturnValue;remote",
        "org.springframework.web.bind;ServletRequestUtils;true;getRequiredDoubleParameters;(ServletRequest,String);;ReturnValue;remote",
        "org.springframework.web.bind;ServletRequestUtils;true;getRequiredFloatParameter;(ServletRequest,String);;ReturnValue;remote",
        "org.springframework.web.bind;ServletRequestUtils;true;getRequiredFloatParameters;(ServletRequest,String);;ReturnValue;remote",
        "org.springframework.web.bind;ServletRequestUtils;true;getRequiredIntParameter;(ServletRequest,String);;ReturnValue;remote",
        "org.springframework.web.bind;ServletRequestUtils;true;getRequiredIntParameters;(ServletRequest,String);;ReturnValue;remote",
        "org.springframework.web.bind;ServletRequestUtils;true;getRequiredLongParameter;(ServletRequest,String);;ReturnValue;remote",
        "org.springframework.web.bind;ServletRequestUtils;true;getRequiredLongParameters;(ServletRequest,String);;ReturnValue;remote",
        "org.springframework.web.bind;ServletRequestUtils;true;getRequiredStringParameter;(ServletRequest,String);;ReturnValue;remote",
        "org.springframework.web.bind;ServletRequestUtils;true;getRequiredStringParameters;(ServletRequest,String);;ReturnValue;remote",
        "org.springframework.web.bind;ServletRequestUtils;true;getStringParameter;(ServletRequest,String,String);;ReturnValue;remote",
        "org.springframework.web.context.request;RequestAttributes;true;resolveReference;(String);;ReturnValue;remote",
        "org.springframework.web.context.request;WebRequest;true;getDescription;(boolean);;Argument[0];remote",
        "org.springframework.web.context.request;WebRequest;true;getDescription;(boolean);;ReturnValue;remote",
        "org.springframework.web.context.request;WebRequest;true;getHeader;(String);;ReturnValue;remote",
        "org.springframework.web.context.request;WebRequest;true;getHeaderNames;();;ReturnValue;remote",
        "org.springframework.web.context.request;WebRequest;true;getHeaderValues;(String);;Argument[0];remote",
        "org.springframework.web.context.request;WebRequest;true;getHeaderValues;(String);;ReturnValue;remote",
        "org.springframework.web.context.request;WebRequest;true;getParameter;(String);;Argument[0];remote",
        "org.springframework.web.context.request;WebRequest;true;getParameter;(String);;ReturnValue;remote",
        "org.springframework.web.context.request;WebRequest;true;getParameterMap;();;ReturnValue;remote",
        "org.springframework.web.context.request;WebRequest;true;getParameterNames;();;ReturnValue;remote",
        "org.springframework.web.context.request;WebRequest;true;getParameterValues;(String);;Argument[0];remote",
        "org.springframework.web.context.request;WebRequest;true;getParameterValues;(String);;ReturnValue;remote",
        "org.springframework.web.context.request;WebRequest;true;getRemoteUser;();;ReturnValue;remote",
        "org.springframework.web.cors;CorsUtils;true;isCorsRequest;(HttpServletRequest);;Argument[0];remote",
        "org.springframework.web.cors;CorsUtils;true;isCorsRequest;(HttpServletRequest);;ReturnValue;remote",
        "org.springframework.web.cors;CorsUtils;true;isPreFlightRequest;(HttpServletRequest);;ReturnValue;remote",
        "org.springframework.web.method.annotation;ModelAttributeMethodProcessor;true;resolveConstructorArgument;(String,Class,NativeWebRequest);;Argument[0];remote",
        "org.springframework.web.method.annotation;ModelAttributeMethodProcessor;true;resolveConstructorArgument;(String,Class,NativeWebRequest);;Argument[1];remote",
        "org.springframework.web.method.annotation;ModelAttributeMethodProcessor;true;resolveConstructorArgument;(String,Class,NativeWebRequest);;Argument[2];remote",
        "org.springframework.web.method.annotation;ModelAttributeMethodProcessor;true;resolveConstructorArgument;(String,Class,NativeWebRequest);;ReturnValue;remote",
        "org.springframework.web.method.support;HandlerMethodArgumentResolver;true;resolveArgument;(MethodParameter,ModelAndViewContainer,NativeWebRequest,WebDataBinderFactory);;Argument[0];remote",
        "org.springframework.web.method.support;HandlerMethodArgumentResolver;true;resolveArgument;(MethodParameter,ModelAndViewContainer,NativeWebRequest,WebDataBinderFactory);;Argument[1];remote",
        "org.springframework.web.method.support;HandlerMethodArgumentResolver;true;resolveArgument;(MethodParameter,ModelAndViewContainer,NativeWebRequest,WebDataBinderFactory);;Argument[2];remote",
        "org.springframework.web.method.support;HandlerMethodArgumentResolver;true;resolveArgument;(MethodParameter,ModelAndViewContainer,NativeWebRequest,WebDataBinderFactory);;Argument[3];remote",
        "org.springframework.web.method.support;HandlerMethodArgumentResolver;true;resolveArgument;(MethodParameter,ModelAndViewContainer,NativeWebRequest,WebDataBinderFactory);;ReturnValue;remote",
        "org.springframework.web.multipart.support;MultipartResolutionDelegate;false;resolveMultipartArgument;(String,MethodParameter,HttpServletRequest);;Argument[0];remote",
        "org.springframework.web.multipart.support;MultipartResolutionDelegate;false;resolveMultipartArgument;(String,MethodParameter,HttpServletRequest);;Argument[1];remote",
        "org.springframework.web.multipart.support;MultipartResolutionDelegate;false;resolveMultipartArgument;(String,MethodParameter,HttpServletRequest);;Argument[2];remote",
        "org.springframework.web.multipart.support;MultipartResolutionDelegate;false;resolveMultipartArgument;(String,MethodParameter,HttpServletRequest);;ReturnValue;remote",
        "org.springframework.web.multipart;MultipartHttpServletRequest;true;getMultipartHeaders;(String);;Argument[0];remote",
        "org.springframework.web.multipart;MultipartHttpServletRequest;true;getMultipartHeaders;(String);;ReturnValue;remote",
        "org.springframework.web.multipart;MultipartRequest;true;getMultipartContentType;(String);;Argument[0];remote",
        "org.springframework.web.multipart;MultipartRequest;true;getMultipartContentType;(String);;ReturnValue;remote",
        "org.springframework.web.multipart;MultipartResolver;true;cleanupMultipart;(MultipartHttpServletRequest);;ReturnValue;remote",
        "org.springframework.web.servlet.function;ServerRequest;true;cookies;();;ReturnValue;remote",
        "org.springframework.web.servlet.function;ServerRequest;true;param;(String);;ReturnValue;remote",
        "org.springframework.web.servlet.support;ServletUriComponentsBuilder;true;fromRequest;(HttpServletRequest);;ReturnValue;remote",
        "org.springframework.web.servlet.support;ServletUriComponentsBuilder;true;fromRequestUri;(HttpServletRequest);;ReturnValue;remote",
        "org.springframework.web.servlet;HandlerInterceptor;true;preHandle;(HttpServletRequest,HttpServletResponse,Object);;Argument[0];remote",
        "org.springframework.web.servlet;HandlerInterceptor;true;preHandle;(HttpServletRequest,HttpServletResponse,Object);;Argument[1];remote",
        "org.springframework.web.servlet;HandlerInterceptor;true;preHandle;(HttpServletRequest,HttpServletResponse,Object);;Argument[2];remote",
        "org.springframework.web.servlet;HandlerInterceptor;true;preHandle;(HttpServletRequest,HttpServletResponse,Object);;ReturnValue;remote",
        "org.springframework.web.servlet;ThemeResolver;true;resolveThemeName;(HttpServletRequest);;ReturnValue;remote",
        "org.springframework.web.util;UrlPathHelper;true;getOriginatingQueryString;(HttpServletRequest);;Argument[0];remote",
        "org.springframework.web.util;UrlPathHelper;true;getOriginatingQueryString;(HttpServletRequest);;ReturnValue;remote",
        "org.springframework.web.util;UrlPathHelper;true;getOriginatingRequestUri;(HttpServletRequest);;ReturnValue;remote",
        "org.springframework.web.util;UrlPathHelper;true;getRequestUri;(HttpServletRequest);;Argument[0];remote",
        "org.springframework.web.util;UrlPathHelper;true;getRequestUri;(HttpServletRequest);;ReturnValue;remote",
        "org.springframework.web.util;WebUtils;true;findParameterValue;(ServletRequest,String);;ReturnValue;remote",
        "org.springframework.web.util;WebUtils;true;getParametersStartingWith;(ServletRequest,String);;Argument[0];remote",
        "org.springframework.web.util;WebUtils;true;getParametersStartingWith;(ServletRequest,String);;Argument[1];remote",
        "org.springframework.web.util;WebUtils;true;getParametersStartingWith;(ServletRequest,String);;ReturnValue;remote"
      ]
  }
}

private class SpringprojectsspringframeworkSummaryCsv extends SummaryModelCsv {
  override predicate row(string row) {
    row =
      [
        "org.aopalliance.intercept;Invocation;true;getArguments;();;Argument[-1];ReturnValue;taint",
        "org.aopalliance.intercept;Joinpoint;true;getStaticPart;();;Argument[-1];ReturnValue;taint",
        "org.aopalliance.intercept;Joinpoint;true;getThis;();;Argument[-1];ReturnValue;taint",
        "org.aopalliance.intercept;Joinpoint;true;proceed;();;Argument[-1];ReturnValue;taint",
        "org.aopalliance.intercept;MethodInterceptor;true;invoke;(MethodInvocation);;Argument[-1];ReturnValue;taint",
        "org.aopalliance.intercept;MethodInvocation;true;getMethod;();;Argument[-1];ReturnValue;taint",
        "org.apache.commons.logging;LogFactory;true;getInstance;(String);;Argument[0];ReturnValue;taint",
        "org.apache.commons.logging;LogFactory;true;getLog;(String);;Argument[0];ReturnValue;taint",
        "org.apache.commons.logging;LogFactoryService;true;getAttribute;(String);;Argument[-1];ReturnValue;taint",
        "org.apache.commons.logging;LogFactoryService;true;getAttributeNames;();;Argument[-1];ReturnValue;taint",
        "org.apache.commons.logging;LogFactoryService;true;setAttribute;(String,Object);;Argument[0];Argument[-1];taint",
        "org.apache.commons.logging;LogFactoryService;true;setAttribute;(String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.aop.aspectj.annotation;AnnotationAwareAspectJAutoProxyCreator;true;setAspectJAdvisorFactory;(AspectJAdvisorFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.aspectj.annotation;AspectJAdvisorFactory;true;getAdvice;(Method,AspectJExpressionPointcut,MetadataAwareAspectInstanceFactory,int,String);;Argument[0];ReturnValue;taint",
        "org.springframework.aop.aspectj.annotation;AspectJAdvisorFactory;true;getAdvice;(Method,AspectJExpressionPointcut,MetadataAwareAspectInstanceFactory,int,String);;Argument[1];ReturnValue;taint",
        "org.springframework.aop.aspectj.annotation;AspectJAdvisorFactory;true;getAdvice;(Method,AspectJExpressionPointcut,MetadataAwareAspectInstanceFactory,int,String);;Argument[2];ReturnValue;taint",
        "org.springframework.aop.aspectj.annotation;AspectJAdvisorFactory;true;getAdvice;(Method,AspectJExpressionPointcut,MetadataAwareAspectInstanceFactory,int,String);;Argument[4];ReturnValue;taint",
        "org.springframework.aop.aspectj.annotation;AspectJAdvisorFactory;true;getAdvisor;(Method,MetadataAwareAspectInstanceFactory,int,String);;Argument[0];ReturnValue;taint",
        "org.springframework.aop.aspectj.annotation;AspectJAdvisorFactory;true;getAdvisor;(Method,MetadataAwareAspectInstanceFactory,int,String);;Argument[1];ReturnValue;taint",
        "org.springframework.aop.aspectj.annotation;AspectJAdvisorFactory;true;getAdvisor;(Method,MetadataAwareAspectInstanceFactory,int,String);;Argument[3];ReturnValue;taint",
        "org.springframework.aop.aspectj.annotation;AspectJAdvisorFactory;true;getAdvisors;(MetadataAwareAspectInstanceFactory);;Argument[0];ReturnValue;taint",
        "org.springframework.aop.aspectj.annotation;AspectJProxyFactory;true;AspectJProxyFactory;(Class[]);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.aspectj.annotation;AspectJProxyFactory;true;AspectJProxyFactory;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.aspectj.annotation;AspectJProxyFactory;true;addAspect;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.aspectj.annotation;AspectMetadata;true;AspectMetadata;(Class,String);;Argument[1];Argument[-1];taint",
        "org.springframework.aop.aspectj.annotation;AspectMetadata;true;getAjType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.aop.aspectj.annotation;AspectMetadata;true;getAspectName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.aop.aspectj.annotation;AspectMetadata;true;getPerClausePointcut;();;Argument[-1];ReturnValue;taint",
        "org.springframework.aop.aspectj.annotation;BeanFactoryAspectInstanceFactory;true;BeanFactoryAspectInstanceFactory;(BeanFactory,String);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.aspectj.annotation;BeanFactoryAspectInstanceFactory;true;BeanFactoryAspectInstanceFactory;(BeanFactory,String);;Argument[1];Argument[-1];taint",
        "org.springframework.aop.aspectj.annotation;BeanFactoryAspectInstanceFactory;true;BeanFactoryAspectInstanceFactory;(BeanFactory,String,Class);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.aspectj.annotation;BeanFactoryAspectInstanceFactory;true;BeanFactoryAspectInstanceFactory;(BeanFactory,String,Class);;Argument[1];Argument[-1];taint",
        "org.springframework.aop.aspectj.annotation;BeanFactoryAspectInstanceFactory;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.aop.aspectj.annotation;BeanFactoryAspectJAdvisorsBuilder;true;BeanFactoryAspectJAdvisorsBuilder;(ListableBeanFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.aspectj.annotation;BeanFactoryAspectJAdvisorsBuilder;true;BeanFactoryAspectJAdvisorsBuilder;(ListableBeanFactory,AspectJAdvisorFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.aspectj.annotation;BeanFactoryAspectJAdvisorsBuilder;true;BeanFactoryAspectJAdvisorsBuilder;(ListableBeanFactory,AspectJAdvisorFactory);;Argument[1];Argument[-1];taint",
        "org.springframework.aop.aspectj.annotation;BeanFactoryAspectJAdvisorsBuilder;true;buildAspectJAdvisors;();;Argument[-1];ReturnValue;taint",
        "org.springframework.aop.aspectj.annotation;LazySingletonAspectInstanceFactoryDecorator;true;LazySingletonAspectInstanceFactoryDecorator;(MetadataAwareAspectInstanceFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.aspectj.annotation;LazySingletonAspectInstanceFactoryDecorator;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.aop.aspectj.annotation;MetadataAwareAspectInstanceFactory;true;getAspectCreationMutex;();;Argument[-1];ReturnValue;taint",
        "org.springframework.aop.aspectj.annotation;MetadataAwareAspectInstanceFactory;true;getAspectCreationMutex;();;Argument[-1];ReturnValue;value",
        "org.springframework.aop.aspectj.annotation;MetadataAwareAspectInstanceFactory;true;getAspectMetadata;();;Argument[-1];ReturnValue;taint",
        "org.springframework.aop.aspectj.annotation;PrototypeAspectInstanceFactory;true;PrototypeAspectInstanceFactory;(BeanFactory,String);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.aspectj.annotation;PrototypeAspectInstanceFactory;true;PrototypeAspectInstanceFactory;(BeanFactory,String);;Argument[1];Argument[-1];taint",
        "org.springframework.aop.aspectj.annotation;ReflectiveAspectJAdvisorFactory;true;ReflectiveAspectJAdvisorFactory;(BeanFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.aspectj.annotation;SimpleMetadataAwareAspectInstanceFactory;true;SimpleMetadataAwareAspectInstanceFactory;(Class,String);;Argument[1];Argument[-1];taint",
        "org.springframework.aop.aspectj.annotation;SingletonMetadataAwareAspectInstanceFactory;true;SingletonMetadataAwareAspectInstanceFactory;(Object,String);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.aspectj.annotation;SingletonMetadataAwareAspectInstanceFactory;true;SingletonMetadataAwareAspectInstanceFactory;(Object,String);;Argument[1];Argument[-1];taint",
        "org.springframework.aop.aspectj;AbstractAspectJAdvice;true;AbstractAspectJAdvice;(Method,AspectJExpressionPointcut,AspectInstanceFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.aspectj;AbstractAspectJAdvice;true;AbstractAspectJAdvice;(Method,AspectJExpressionPointcut,AspectInstanceFactory);;Argument[1];Argument[-1];taint",
        "org.springframework.aop.aspectj;AbstractAspectJAdvice;true;AbstractAspectJAdvice;(Method,AspectJExpressionPointcut,AspectInstanceFactory);;Argument[2];Argument[-1];taint",
        "org.springframework.aop.aspectj;AbstractAspectJAdvice;true;getAspectClassLoader;();;Argument[-1];ReturnValue;taint",
        "org.springframework.aop.aspectj;AbstractAspectJAdvice;true;getAspectInstanceFactory;();;Argument[-1];ReturnValue;taint",
        "org.springframework.aop.aspectj;AbstractAspectJAdvice;true;getAspectJAdviceMethod;();;Argument[-1];ReturnValue;taint",
        "org.springframework.aop.aspectj;AbstractAspectJAdvice;true;getPointcut;();;Argument[-1];ReturnValue;taint",
        "org.springframework.aop.aspectj;AbstractAspectJAdvice;true;setArgumentNames;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.aspectj;AbstractAspectJAdvice;true;setArgumentNamesFromStringArray;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.aspectj;AbstractAspectJAdvice;true;setAspectName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.aspectj;AbstractAspectJAdvice;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.aop.aspectj;AspectInstanceFactory;true;getAspectClassLoader;();;Argument[-1];ReturnValue;taint",
        "org.springframework.aop.aspectj;AspectInstanceFactory;true;getAspectInstance;();;Argument[-1];ReturnValue;taint",
        "org.springframework.aop.aspectj;AspectJAdviceParameterNameDiscoverer;true;AspectJAdviceParameterNameDiscoverer;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.aspectj;AspectJAdviceParameterNameDiscoverer;true;setReturningName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.aspectj;AspectJAdviceParameterNameDiscoverer;true;setThrowingName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.aspectj;AspectJAfterAdvice;true;AspectJAfterAdvice;(Method,AspectJExpressionPointcut,AspectInstanceFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.aspectj;AspectJAfterAdvice;true;AspectJAfterAdvice;(Method,AspectJExpressionPointcut,AspectInstanceFactory);;Argument[1];Argument[-1];taint",
        "org.springframework.aop.aspectj;AspectJAfterAdvice;true;AspectJAfterAdvice;(Method,AspectJExpressionPointcut,AspectInstanceFactory);;Argument[2];Argument[-1];taint",
        "org.springframework.aop.aspectj;AspectJAfterReturningAdvice;true;AspectJAfterReturningAdvice;(Method,AspectJExpressionPointcut,AspectInstanceFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.aspectj;AspectJAfterReturningAdvice;true;AspectJAfterReturningAdvice;(Method,AspectJExpressionPointcut,AspectInstanceFactory);;Argument[1];Argument[-1];taint",
        "org.springframework.aop.aspectj;AspectJAfterReturningAdvice;true;AspectJAfterReturningAdvice;(Method,AspectJExpressionPointcut,AspectInstanceFactory);;Argument[2];Argument[-1];taint",
        "org.springframework.aop.aspectj;AspectJAfterThrowingAdvice;true;AspectJAfterThrowingAdvice;(Method,AspectJExpressionPointcut,AspectInstanceFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.aspectj;AspectJAfterThrowingAdvice;true;AspectJAfterThrowingAdvice;(Method,AspectJExpressionPointcut,AspectInstanceFactory);;Argument[1];Argument[-1];taint",
        "org.springframework.aop.aspectj;AspectJAfterThrowingAdvice;true;AspectJAfterThrowingAdvice;(Method,AspectJExpressionPointcut,AspectInstanceFactory);;Argument[2];Argument[-1];taint",
        "org.springframework.aop.aspectj;AspectJAopUtils;true;getAspectJPrecedenceInformationFor;(Advisor);;Argument[0];ReturnValue;taint",
        "org.springframework.aop.aspectj;AspectJAroundAdvice;true;AspectJAroundAdvice;(Method,AspectJExpressionPointcut,AspectInstanceFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.aspectj;AspectJAroundAdvice;true;AspectJAroundAdvice;(Method,AspectJExpressionPointcut,AspectInstanceFactory);;Argument[1];Argument[-1];taint",
        "org.springframework.aop.aspectj;AspectJAroundAdvice;true;AspectJAroundAdvice;(Method,AspectJExpressionPointcut,AspectInstanceFactory);;Argument[2];Argument[-1];taint",
        "org.springframework.aop.aspectj;AspectJExpressionPointcut;true;AspectJExpressionPointcut;(Class,String[],Class[]);;Argument[1];Argument[-1];taint",
        "org.springframework.aop.aspectj;AspectJExpressionPointcut;true;AspectJExpressionPointcut;(Class,String[],Class[]);;Argument[2];Argument[-1];taint",
        "org.springframework.aop.aspectj;AspectJExpressionPointcut;true;getPointcutExpression;();;Argument[-1];ReturnValue;taint",
        "org.springframework.aop.aspectj;AspectJExpressionPointcut;true;setParameterNames;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.aspectj;AspectJExpressionPointcut;true;setParameterTypes;(Class[]);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.aspectj;AspectJExpressionPointcut;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.aop.aspectj;AspectJExpressionPointcutAdvisor;true;getExpression;();;Argument[-1];ReturnValue;taint",
        "org.springframework.aop.aspectj;AspectJExpressionPointcutAdvisor;true;getLocation;();;Argument[-1];ReturnValue;taint",
        "org.springframework.aop.aspectj;AspectJExpressionPointcutAdvisor;true;setExpression;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.aspectj;AspectJExpressionPointcutAdvisor;true;setLocation;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.aspectj;AspectJExpressionPointcutAdvisor;true;setParameterNames;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.aspectj;AspectJExpressionPointcutAdvisor;true;setParameterTypes;(Class[]);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.aspectj;AspectJMethodBeforeAdvice;true;AspectJMethodBeforeAdvice;(Method,AspectJExpressionPointcut,AspectInstanceFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.aspectj;AspectJMethodBeforeAdvice;true;AspectJMethodBeforeAdvice;(Method,AspectJExpressionPointcut,AspectInstanceFactory);;Argument[1];Argument[-1];taint",
        "org.springframework.aop.aspectj;AspectJMethodBeforeAdvice;true;AspectJMethodBeforeAdvice;(Method,AspectJExpressionPointcut,AspectInstanceFactory);;Argument[2];Argument[-1];taint",
        "org.springframework.aop.aspectj;AspectJPointcutAdvisor;true;AspectJPointcutAdvisor;(AbstractAspectJAdvice);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.aspectj;AspectJPointcutAdvisor;true;getAspectName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.aop.aspectj;AspectJPrecedenceInformation;true;getAspectName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.aop.aspectj;DeclareParentsAdvisor;true;DeclareParentsAdvisor;(Class,String,Class);;Argument[1];Argument[-1];taint",
        "org.springframework.aop.aspectj;DeclareParentsAdvisor;true;DeclareParentsAdvisor;(Class,String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.aop.aspectj;DeclareParentsAdvisor;true;DeclareParentsAdvisor;(Class,String,Object);;Argument[2];Argument[-1];taint",
        "org.springframework.aop.aspectj;MethodInvocationProceedingJoinPoint;true;MethodInvocationProceedingJoinPoint;(ProxyMethodInvocation);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.aspectj;SingletonAspectInstanceFactory;true;SingletonAspectInstanceFactory;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.aspectj;TypePatternClassFilter;true;TypePatternClassFilter;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.aspectj;TypePatternClassFilter;true;getTypePattern;();;Argument[-1];ReturnValue;taint",
        "org.springframework.aop.aspectj;TypePatternClassFilter;true;setTypePattern;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.aspectj;TypePatternClassFilter;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.aop.config;AdviceEntry;true;AdviceEntry;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.config;AdviceEntry;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.aop.config;AdvisorComponentDefinition;true;AdvisorComponentDefinition;(String,BeanDefinition);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.config;AdvisorComponentDefinition;true;AdvisorComponentDefinition;(String,BeanDefinition);;Argument[1];Argument[-1];taint",
        "org.springframework.aop.config;AdvisorComponentDefinition;true;AdvisorComponentDefinition;(String,BeanDefinition,BeanDefinition);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.config;AdvisorComponentDefinition;true;AdvisorComponentDefinition;(String,BeanDefinition,BeanDefinition);;Argument[1];Argument[-1];taint",
        "org.springframework.aop.config;AdvisorComponentDefinition;true;AdvisorComponentDefinition;(String,BeanDefinition,BeanDefinition);;Argument[2];Argument[-1];taint",
        "org.springframework.aop.config;AdvisorEntry;true;AdvisorEntry;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.config;AdvisorEntry;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.aop.config;AopConfigUtils;true;registerAspectJAnnotationAutoProxyCreatorIfNecessary;(BeanDefinitionRegistry,Object);;Argument[1];ReturnValue;taint",
        "org.springframework.aop.config;AopConfigUtils;true;registerAspectJAutoProxyCreatorIfNecessary;(BeanDefinitionRegistry,Object);;Argument[1];ReturnValue;taint",
        "org.springframework.aop.config;AopConfigUtils;true;registerAutoProxyCreatorIfNecessary;(BeanDefinitionRegistry,Object);;Argument[1];ReturnValue;taint",
        "org.springframework.aop.config;AspectComponentDefinition;true;AspectComponentDefinition;(String,BeanDefinition[],BeanReference[],Object);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.config;AspectComponentDefinition;true;AspectComponentDefinition;(String,BeanDefinition[],BeanReference[],Object);;Argument[1];Argument[-1];taint",
        "org.springframework.aop.config;AspectComponentDefinition;true;AspectComponentDefinition;(String,BeanDefinition[],BeanReference[],Object);;Argument[2];Argument[-1];taint",
        "org.springframework.aop.config;AspectComponentDefinition;true;AspectComponentDefinition;(String,BeanDefinition[],BeanReference[],Object);;Argument[3];Argument[-1];taint",
        "org.springframework.aop.config;AspectEntry;true;AspectEntry;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.config;AspectEntry;true;AspectEntry;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.aop.config;AspectEntry;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.aop.config;MethodLocatingFactoryBean;true;setMethodName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.config;MethodLocatingFactoryBean;true;setTargetBeanName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.config;PointcutComponentDefinition;true;PointcutComponentDefinition;(String,BeanDefinition,String);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.config;PointcutComponentDefinition;true;PointcutComponentDefinition;(String,BeanDefinition,String);;Argument[1];Argument[-1];taint",
        "org.springframework.aop.config;PointcutComponentDefinition;true;PointcutComponentDefinition;(String,BeanDefinition,String);;Argument[2];Argument[-1];taint",
        "org.springframework.aop.config;PointcutEntry;true;PointcutEntry;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.config;PointcutEntry;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.aop.config;SimpleBeanFactoryAwareAspectInstanceFactory;true;setAspectBeanName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.framework.adapter;AdvisorAdapterRegistrationManager;true;setAdvisorAdapterRegistry;(AdvisorAdapterRegistry);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.framework.adapter;AdvisorAdapterRegistry;true;registerAdvisorAdapter;(AdvisorAdapter);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.framework.adapter;AdvisorAdapterRegistry;true;wrap;(Object);;Argument[0];ReturnValue;taint",
        "org.springframework.aop.framework.adapter;AfterReturningAdviceInterceptor;true;AfterReturningAdviceInterceptor;(AfterReturningAdvice);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.framework.adapter;MethodBeforeAdviceInterceptor;true;MethodBeforeAdviceInterceptor;(MethodBeforeAdvice);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.framework.adapter;ThrowsAdviceInterceptor;true;ThrowsAdviceInterceptor;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.framework.autoproxy;AbstractAutoProxyCreator;true;setAdvisorAdapterRegistry;(AdvisorAdapterRegistry);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.framework.autoproxy;AbstractAutoProxyCreator;true;setCustomTargetSourceCreators;(TargetSourceCreator[]);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.framework.autoproxy;AbstractAutoProxyCreator;true;setInterceptorNames;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.framework.autoproxy;BeanFactoryAdvisorRetrievalHelper;true;BeanFactoryAdvisorRetrievalHelper;(ConfigurableListableBeanFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.framework.autoproxy;BeanFactoryAdvisorRetrievalHelper;true;findAdvisorBeans;();;Argument[-1];ReturnValue;taint",
        "org.springframework.aop.framework.autoproxy;BeanNameAutoProxyCreator;true;setBeanNames;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.framework.autoproxy;DefaultAdvisorAutoProxyCreator;true;getAdvisorBeanNamePrefix;();;Argument[-1];ReturnValue;taint",
        "org.springframework.aop.framework.autoproxy;DefaultAdvisorAutoProxyCreator;true;setAdvisorBeanNamePrefix;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.framework.autoproxy;TargetSourceCreator;true;getTargetSource;(Class,String);;Argument[1];Argument[-1];taint",
        "org.springframework.aop.framework.autoproxy;TargetSourceCreator;true;getTargetSource;(Class,String);;Argument[1];ReturnValue;taint",
        "org.springframework.aop.framework;AbstractSingletonProxyFactoryBean;true;setAdvisorAdapterRegistry;(AdvisorAdapterRegistry);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.framework;AbstractSingletonProxyFactoryBean;true;setPostInterceptors;(Object[]);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.framework;AbstractSingletonProxyFactoryBean;true;setPreInterceptors;(Object[]);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.framework;AbstractSingletonProxyFactoryBean;true;setProxyClassLoader;(ClassLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.framework;AbstractSingletonProxyFactoryBean;true;setProxyInterfaces;(Class[]);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.framework;AbstractSingletonProxyFactoryBean;true;setTarget;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.framework;Advised;true;addAdvice;(Advice);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.framework;Advised;true;addAdvice;(int,Advice);;Argument[1];Argument[-1];taint",
        "org.springframework.aop.framework;Advised;true;addAdvisor;(Advisor);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.framework;Advised;true;addAdvisor;(int,Advisor);;Argument[1];Argument[-1];taint",
        "org.springframework.aop.framework;Advised;true;getAdvisors;();;Argument[-1];ReturnValue;taint",
        "org.springframework.aop.framework;Advised;true;getProxiedInterfaces;();;Argument[-1];ReturnValue;taint",
        "org.springframework.aop.framework;Advised;true;getTargetSource;();;Argument[-1];ReturnValue;taint",
        "org.springframework.aop.framework;Advised;true;replaceAdvisor;(Advisor,Advisor);;Argument[1];Argument[-1];taint",
        "org.springframework.aop.framework;Advised;true;setTargetSource;(TargetSource);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.framework;Advised;true;toProxyConfigString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.aop.framework;AdvisedSupport;true;AdvisedSupport;(Class[]);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.framework;AdvisedSupport;true;addAdvisors;(Advisor[]);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.framework;AdvisedSupport;true;addAdvisors;(Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.framework;AdvisedSupport;true;getAdvisorChainFactory;();;Argument[-1];ReturnValue;taint",
        "org.springframework.aop.framework;AdvisedSupport;true;getInterceptorsAndDynamicInterceptionAdvice;(Method,Class);;Argument[-1];ReturnValue;taint",
        "org.springframework.aop.framework;AdvisedSupport;true;getInterceptorsAndDynamicInterceptionAdvice;(Method,Class);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.framework;AdvisedSupport;true;getInterceptorsAndDynamicInterceptionAdvice;(Method,Class);;Argument[0];ReturnValue;taint",
        "org.springframework.aop.framework;AdvisedSupport;true;setAdvisorChainFactory;(AdvisorChainFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.framework;AdvisedSupport;true;setInterfaces;(Class[]);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.framework;AdvisedSupport;true;setTarget;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.framework;AdvisedSupport;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.aop.framework;AdvisorChainFactory;true;getInterceptorsAndDynamicInterceptionAdvice;(Advised,Method,Class);;Argument[1];ReturnValue;taint",
        "org.springframework.aop.framework;AopProxyFactory;true;createAopProxy;(AdvisedSupport);;Argument[0];ReturnValue;taint",
        "org.springframework.aop.framework;ProxyCreatorSupport;true;ProxyCreatorSupport;(AopProxyFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.framework;ProxyCreatorSupport;true;addListener;(AdvisedSupportListener);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.framework;ProxyCreatorSupport;true;getAopProxyFactory;();;Argument[-1];ReturnValue;taint",
        "org.springframework.aop.framework;ProxyCreatorSupport;true;setAopProxyFactory;(AopProxyFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.framework;ProxyFactory;true;ProxyFactory;(Class,Interceptor);;Argument[1];Argument[-1];taint",
        "org.springframework.aop.framework;ProxyFactory;true;ProxyFactory;(Class,TargetSource);;Argument[1];Argument[-1];taint",
        "org.springframework.aop.framework;ProxyFactory;true;ProxyFactory;(Class[]);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.framework;ProxyFactory;true;ProxyFactory;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.framework;ProxyFactoryBean;true;setAdvisorAdapterRegistry;(AdvisorAdapterRegistry);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.framework;ProxyFactoryBean;true;setInterceptorNames;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.framework;ProxyFactoryBean;true;setProxyClassLoader;(ClassLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.framework;ProxyFactoryBean;true;setProxyInterfaces;(Class[]);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.framework;ProxyFactoryBean;true;setTargetName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.framework;ProxyProcessorSupport;true;setProxyClassLoader;(ClassLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.framework;ReflectiveMethodInvocation;true;getUserAttributes;();;Argument[-1];ReturnValue;taint",
        "org.springframework.aop.framework;ReflectiveMethodInvocation;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.aop.interceptor;AbstractMonitoringInterceptor;true;setPrefix;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.interceptor;AbstractMonitoringInterceptor;true;setSuffix;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.interceptor;AbstractTraceInterceptor;true;setLoggerName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.interceptor;AsyncExecutionAspectSupport;true;AsyncExecutionAspectSupport;(Executor);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.interceptor;AsyncExecutionAspectSupport;true;AsyncExecutionAspectSupport;(Executor,AsyncUncaughtExceptionHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.interceptor;AsyncExecutionAspectSupport;true;AsyncExecutionAspectSupport;(Executor,AsyncUncaughtExceptionHandler);;Argument[1];Argument[-1];taint",
        "org.springframework.aop.interceptor;AsyncExecutionAspectSupport;true;configure;(Supplier,Supplier);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.interceptor;AsyncExecutionAspectSupport;true;configure;(Supplier,Supplier);;Argument[1];Argument[-1];taint",
        "org.springframework.aop.interceptor;AsyncExecutionAspectSupport;true;setExceptionHandler;(AsyncUncaughtExceptionHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.interceptor;AsyncExecutionAspectSupport;true;setExecutor;(Executor);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.interceptor;AsyncExecutionInterceptor;true;AsyncExecutionInterceptor;(Executor);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.interceptor;AsyncExecutionInterceptor;true;AsyncExecutionInterceptor;(Executor,AsyncUncaughtExceptionHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.interceptor;AsyncExecutionInterceptor;true;AsyncExecutionInterceptor;(Executor,AsyncUncaughtExceptionHandler);;Argument[1];Argument[-1];taint",
        "org.springframework.aop.interceptor;ExposeBeanNameAdvisors;true;createAdvisorIntroducingNamedBean;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.aop.interceptor;ExposeBeanNameAdvisors;true;createAdvisorWithoutIntroduction;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.aop.scope;DefaultScopedObject;true;DefaultScopedObject;(ConfigurableBeanFactory,String);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.scope;DefaultScopedObject;true;DefaultScopedObject;(ConfigurableBeanFactory,String);;Argument[1];Argument[-1];taint",
        "org.springframework.aop.scope;ScopedObject;true;getTargetObject;();;Argument[-1];ReturnValue;taint",
        "org.springframework.aop.scope;ScopedProxyFactoryBean;true;setTargetBeanName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.scope;ScopedProxyUtils;true;createScopedProxy;(BeanDefinitionHolder,BeanDefinitionRegistry,boolean);;Argument[0];ReturnValue;taint",
        "org.springframework.aop.scope;ScopedProxyUtils;true;getOriginalBeanName;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.aop.scope;ScopedProxyUtils;true;getTargetBeanName;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.aop.support.annotation;AnnotationMatchingPointcut;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.aop.support;AbstractBeanFactoryPointcutAdvisor;true;getAdviceBeanName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.aop.support;AbstractBeanFactoryPointcutAdvisor;true;setAdvice;(Advice);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.support;AbstractBeanFactoryPointcutAdvisor;true;setAdviceBeanName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.support;AbstractBeanFactoryPointcutAdvisor;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.aop.support;AbstractExpressionPointcut;true;getLocation;();;Argument[-1];ReturnValue;taint",
        "org.springframework.aop.support;AbstractExpressionPointcut;true;setExpression;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.support;AbstractExpressionPointcut;true;setLocation;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.support;AbstractGenericPointcutAdvisor;true;setAdvice;(Advice);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.support;AbstractGenericPointcutAdvisor;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.aop.support;AbstractRegexpMethodPointcut;true;getExcludedPatterns;();;Argument[-1];ReturnValue;taint",
        "org.springframework.aop.support;AbstractRegexpMethodPointcut;true;getPatterns;();;Argument[-1];ReturnValue;taint",
        "org.springframework.aop.support;AbstractRegexpMethodPointcut;true;setExcludedPattern;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.support;AbstractRegexpMethodPointcut;true;setExcludedPatterns;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.support;AbstractRegexpMethodPointcut;true;setPattern;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.support;AbstractRegexpMethodPointcut;true;setPatterns;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.support;AopUtils;true;findAdvisorsThatCanApply;(List,Class);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.aop.support;AopUtils;true;getMostSpecificMethod;(Method,Class);;Argument[0];ReturnValue;taint",
        "org.springframework.aop.support;AopUtils;true;selectInvocableMethod;(Method,Class);;Argument[0];ReturnValue;taint",
        "org.springframework.aop.support;ClassFilters;true;intersection;(ClassFilter,ClassFilter);;Argument[0];ReturnValue;taint",
        "org.springframework.aop.support;ClassFilters;true;intersection;(ClassFilter,ClassFilter);;Argument[1];ReturnValue;taint",
        "org.springframework.aop.support;ClassFilters;true;intersection;(ClassFilter[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.aop.support;ClassFilters;true;union;(ClassFilter,ClassFilter);;Argument[0];ReturnValue;taint",
        "org.springframework.aop.support;ClassFilters;true;union;(ClassFilter,ClassFilter);;Argument[1];ReturnValue;taint",
        "org.springframework.aop.support;ClassFilters;true;union;(ClassFilter[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.aop.support;ComposablePointcut;true;ComposablePointcut;(ClassFilter);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.support;ComposablePointcut;true;ComposablePointcut;(ClassFilter,MethodMatcher);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.support;ComposablePointcut;true;ComposablePointcut;(ClassFilter,MethodMatcher);;Argument[1];Argument[-1];taint",
        "org.springframework.aop.support;ComposablePointcut;true;ComposablePointcut;(MethodMatcher);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.support;ComposablePointcut;true;ComposablePointcut;(Pointcut);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.support;ComposablePointcut;true;intersection;(ClassFilter);;Argument[-1];ReturnValue;value",
        "org.springframework.aop.support;ComposablePointcut;true;intersection;(ClassFilter);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.support;ComposablePointcut;true;intersection;(ClassFilter);;Argument[0];ReturnValue;taint",
        "org.springframework.aop.support;ComposablePointcut;true;intersection;(MethodMatcher);;Argument[-1];ReturnValue;value",
        "org.springframework.aop.support;ComposablePointcut;true;intersection;(MethodMatcher);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.support;ComposablePointcut;true;intersection;(MethodMatcher);;Argument[0];ReturnValue;taint",
        "org.springframework.aop.support;ComposablePointcut;true;intersection;(Pointcut);;Argument[-1];ReturnValue;value",
        "org.springframework.aop.support;ComposablePointcut;true;intersection;(Pointcut);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.support;ComposablePointcut;true;intersection;(Pointcut);;Argument[0];ReturnValue;taint",
        "org.springframework.aop.support;ComposablePointcut;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.aop.support;ComposablePointcut;true;union;(ClassFilter);;Argument[-1];ReturnValue;value",
        "org.springframework.aop.support;ComposablePointcut;true;union;(ClassFilter);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.support;ComposablePointcut;true;union;(ClassFilter);;Argument[0];ReturnValue;taint",
        "org.springframework.aop.support;ComposablePointcut;true;union;(MethodMatcher);;Argument[-1];ReturnValue;value",
        "org.springframework.aop.support;ComposablePointcut;true;union;(MethodMatcher);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.support;ComposablePointcut;true;union;(MethodMatcher);;Argument[0];ReturnValue;taint",
        "org.springframework.aop.support;ComposablePointcut;true;union;(Pointcut);;Argument[-1];ReturnValue;value",
        "org.springframework.aop.support;ComposablePointcut;true;union;(Pointcut);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.support;ComposablePointcut;true;union;(Pointcut);;Argument[0];ReturnValue;taint",
        "org.springframework.aop.support;ControlFlowPointcut;true;ControlFlowPointcut;(Class,String);;Argument[1];Argument[-1];taint",
        "org.springframework.aop.support;ControlFlowPointcut;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.aop.support;DefaultBeanFactoryPointcutAdvisor;true;setPointcut;(Pointcut);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.support;DefaultBeanFactoryPointcutAdvisor;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.aop.support;DefaultIntroductionAdvisor;true;DefaultIntroductionAdvisor;(Advice);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.support;DefaultIntroductionAdvisor;true;DefaultIntroductionAdvisor;(Advice,IntroductionInfo);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.support;DefaultIntroductionAdvisor;true;DefaultIntroductionAdvisor;(DynamicIntroductionAdvice,Class);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.support;DefaultIntroductionAdvisor;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.aop.support;DefaultPointcutAdvisor;true;DefaultPointcutAdvisor;(Advice);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.support;DefaultPointcutAdvisor;true;DefaultPointcutAdvisor;(Pointcut,Advice);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.support;DefaultPointcutAdvisor;true;DefaultPointcutAdvisor;(Pointcut,Advice);;Argument[1];Argument[-1];taint",
        "org.springframework.aop.support;DefaultPointcutAdvisor;true;setPointcut;(Pointcut);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.support;DefaultPointcutAdvisor;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.aop.support;DelegatingIntroductionInterceptor;true;DelegatingIntroductionInterceptor;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.support;ExpressionPointcut;true;getExpression;();;Argument[-1];ReturnValue;taint",
        "org.springframework.aop.support;MethodMatchers;true;intersection;(MethodMatcher,MethodMatcher);;Argument[0];ReturnValue;taint",
        "org.springframework.aop.support;MethodMatchers;true;intersection;(MethodMatcher,MethodMatcher);;Argument[1];ReturnValue;taint",
        "org.springframework.aop.support;MethodMatchers;true;union;(MethodMatcher,MethodMatcher);;Argument[0];ReturnValue;taint",
        "org.springframework.aop.support;MethodMatchers;true;union;(MethodMatcher,MethodMatcher);;Argument[1];ReturnValue;taint",
        "org.springframework.aop.support;NameMatchMethodPointcut;true;addMethodName;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.aop.support;NameMatchMethodPointcut;true;addMethodName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.support;NameMatchMethodPointcut;true;addMethodName;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.aop.support;NameMatchMethodPointcut;true;setMappedName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.support;NameMatchMethodPointcut;true;setMappedNames;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.support;NameMatchMethodPointcut;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.aop.support;NameMatchMethodPointcutAdvisor;true;NameMatchMethodPointcutAdvisor;(Advice);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.support;NameMatchMethodPointcutAdvisor;true;addMethodName;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.aop.support;NameMatchMethodPointcutAdvisor;true;addMethodName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.support;NameMatchMethodPointcutAdvisor;true;addMethodName;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.aop.support;NameMatchMethodPointcutAdvisor;true;setClassFilter;(ClassFilter);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.support;NameMatchMethodPointcutAdvisor;true;setMappedName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.support;NameMatchMethodPointcutAdvisor;true;setMappedNames;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.support;Pointcuts;true;intersection;(Pointcut,Pointcut);;Argument[0];ReturnValue;taint",
        "org.springframework.aop.support;Pointcuts;true;intersection;(Pointcut,Pointcut);;Argument[1];ReturnValue;taint",
        "org.springframework.aop.support;Pointcuts;true;union;(Pointcut,Pointcut);;Argument[0];ReturnValue;taint",
        "org.springframework.aop.support;Pointcuts;true;union;(Pointcut,Pointcut);;Argument[1];ReturnValue;taint",
        "org.springframework.aop.support;RegexpMethodPointcutAdvisor;true;RegexpMethodPointcutAdvisor;(Advice);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.support;RegexpMethodPointcutAdvisor;true;RegexpMethodPointcutAdvisor;(String,Advice);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.support;RegexpMethodPointcutAdvisor;true;RegexpMethodPointcutAdvisor;(String,Advice);;Argument[1];Argument[-1];taint",
        "org.springframework.aop.support;RegexpMethodPointcutAdvisor;true;RegexpMethodPointcutAdvisor;(String[],Advice);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.support;RegexpMethodPointcutAdvisor;true;RegexpMethodPointcutAdvisor;(String[],Advice);;Argument[1];Argument[-1];taint",
        "org.springframework.aop.support;RegexpMethodPointcutAdvisor;true;setPattern;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.support;RegexpMethodPointcutAdvisor;true;setPatterns;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.support;RegexpMethodPointcutAdvisor;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.aop.support;StaticMethodMatcherPointcut;true;setClassFilter;(ClassFilter);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.support;StaticMethodMatcherPointcutAdvisor;true;StaticMethodMatcherPointcutAdvisor;(Advice);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.support;StaticMethodMatcherPointcutAdvisor;true;setAdvice;(Advice);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.target.dynamic;BeanFactoryRefreshableTargetSource;true;BeanFactoryRefreshableTargetSource;(BeanFactory,String);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.target.dynamic;BeanFactoryRefreshableTargetSource;true;BeanFactoryRefreshableTargetSource;(BeanFactory,String);;Argument[1];Argument[-1];taint",
        "org.springframework.aop.target;AbstractBeanFactoryBasedTargetSource;true;getBeanFactory;();;Argument[-1];ReturnValue;taint",
        "org.springframework.aop.target;AbstractBeanFactoryBasedTargetSource;true;getTargetBeanName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.aop.target;AbstractBeanFactoryBasedTargetSource;true;setTargetBeanName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.target;AbstractBeanFactoryBasedTargetSource;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.aop.target;HotSwappableTargetSource;true;HotSwappableTargetSource;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.target;HotSwappableTargetSource;true;swap;(Object);;Argument[-1];ReturnValue;taint",
        "org.springframework.aop.target;HotSwappableTargetSource;true;swap;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.aop.target;HotSwappableTargetSource;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.aop.target;PrototypeTargetSource;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.aop.target;SingletonTargetSource;true;SingletonTargetSource;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.aop;Advisor;true;getAdvice;();;Argument[-1];ReturnValue;taint",
        "org.springframework.aop;IntroductionAdvisor;true;getClassFilter;();;Argument[-1];ReturnValue;taint",
        "org.springframework.aop;IntroductionAdvisor;true;getClassFilter;();;Argument[-1];ReturnValue;value",
        "org.springframework.aop;IntroductionAwareMethodMatcher;true;matches;(Method,Class,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.aop;IntroductionInfo;true;getInterfaces;();;Argument[-1];ReturnValue;taint",
        "org.springframework.aop;MethodMatcher;true;matches;(Method,Class);;Argument[0];Argument[-1];taint",
        "org.springframework.aop;MethodMatcher;true;matches;(Method,Class,Object[]);;Argument[0];Argument[-1];taint",
        "org.springframework.aop;Pointcut;true;getClassFilter;();;Argument[-1];ReturnValue;taint",
        "org.springframework.aop;Pointcut;true;getClassFilter;();;Argument[-1];ReturnValue;value",
        "org.springframework.aop;Pointcut;true;getMethodMatcher;();;Argument[-1];ReturnValue;taint",
        "org.springframework.aop;Pointcut;true;getMethodMatcher;();;Argument[-1];ReturnValue;value",
        "org.springframework.aop;PointcutAdvisor;true;getPointcut;();;Argument[-1];ReturnValue;taint",
        "org.springframework.aop;PointcutAdvisor;true;getPointcut;();;Argument[-1];ReturnValue;value",
        "org.springframework.aop;ProxyMethodInvocation;true;getProxy;();;Argument[-1];ReturnValue;taint",
        "org.springframework.aop;ProxyMethodInvocation;true;getUserAttribute;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.aop;ProxyMethodInvocation;true;invocableClone;();;Argument[-1];ReturnValue;taint",
        "org.springframework.aop;ProxyMethodInvocation;true;invocableClone;(Object[]);;Argument[-1];ReturnValue;taint",
        "org.springframework.aop;ProxyMethodInvocation;true;invocableClone;(Object[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.aop;ProxyMethodInvocation;true;setArguments;(Object[]);;Argument[0];Argument[-1];taint",
        "org.springframework.aop;ProxyMethodInvocation;true;setUserAttribute;(String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.aop;ProxyMethodInvocation;true;setUserAttribute;(String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.aop;TargetSource;true;getTarget;();;Argument[-1];ReturnValue;taint",
        "org.springframework.asm;AnnotationVisitor;true;AnnotationVisitor;(int,AnnotationVisitor);;Argument[1];Argument[-1];taint",
        "org.springframework.asm;AnnotationVisitor;true;visit;(String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.asm;AnnotationVisitor;true;visit;(String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.asm;AnnotationVisitor;true;visitAnnotation;(String,String);;Argument[-1];ReturnValue;value",
        "org.springframework.asm;AnnotationVisitor;true;visitAnnotation;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.asm;AnnotationVisitor;true;visitAnnotation;(String,String);;Argument[0];ReturnValue;taint",
        "org.springframework.asm;AnnotationVisitor;true;visitAnnotation;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.asm;AnnotationVisitor;true;visitAnnotation;(String,String);;Argument[1];ReturnValue;taint",
        "org.springframework.asm;AnnotationVisitor;true;visitArray;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.asm;AnnotationVisitor;true;visitArray;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.asm;AnnotationVisitor;true;visitArray;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.asm;AnnotationVisitor;true;visitEnum;(String,String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.asm;AnnotationVisitor;true;visitEnum;(String,String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.asm;AnnotationVisitor;true;visitEnum;(String,String,String);;Argument[2];Argument[-1];taint",
        "org.springframework.asm;ByteVector;true;putByte;(int);;Argument[-1];ReturnValue;value",
        "org.springframework.asm;ByteVector;true;putByteArray;(byte[],int,int);;Argument[-1];ReturnValue;value",
        "org.springframework.asm;ByteVector;true;putByteArray;(byte[],int,int);;Argument[0];Argument[-1];taint",
        "org.springframework.asm;ByteVector;true;putByteArray;(byte[],int,int);;Argument[0];ReturnValue;taint",
        "org.springframework.asm;ByteVector;true;putInt;(int);;Argument[-1];ReturnValue;value",
        "org.springframework.asm;ByteVector;true;putLong;(long);;Argument[-1];ReturnValue;value",
        "org.springframework.asm;ByteVector;true;putShort;(int);;Argument[-1];ReturnValue;value",
        "org.springframework.asm;ByteVector;true;putUTF8;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.asm;ClassReader;true;ClassReader;(InputStream);;Argument[0];Argument[-1];taint",
        "org.springframework.asm;ClassReader;true;ClassReader;(byte[]);;Argument[0];Argument[-1];taint",
        "org.springframework.asm;ClassReader;true;ClassReader;(byte[],int,int);;Argument[0];Argument[-1];taint",
        "org.springframework.asm;ClassReader;true;getClassName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.asm;ClassReader;true;getInterfaces;();;Argument[-1];ReturnValue;taint",
        "org.springframework.asm;ClassReader;true;getSuperName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.asm;ClassReader;true;readClass;(int,char[]);;Argument[-1];ReturnValue;taint",
        "org.springframework.asm;ClassReader;true;readClass;(int,char[]);;Argument[1];Argument[-1];taint",
        "org.springframework.asm;ClassReader;true;readClass;(int,char[]);;Argument[1];ReturnValue;taint",
        "org.springframework.asm;ClassReader;true;readConst;(int,char[]);;Argument[-1];ReturnValue;taint",
        "org.springframework.asm;ClassReader;true;readConst;(int,char[]);;Argument[1];Argument[-1];taint",
        "org.springframework.asm;ClassReader;true;readConst;(int,char[]);;Argument[1];ReturnValue;taint",
        "org.springframework.asm;ClassReader;true;readModule;(int,char[]);;Argument[-1];ReturnValue;taint",
        "org.springframework.asm;ClassReader;true;readModule;(int,char[]);;Argument[1];Argument[-1];taint",
        "org.springframework.asm;ClassReader;true;readModule;(int,char[]);;Argument[1];ReturnValue;taint",
        "org.springframework.asm;ClassReader;true;readPackage;(int,char[]);;Argument[-1];ReturnValue;taint",
        "org.springframework.asm;ClassReader;true;readPackage;(int,char[]);;Argument[1];Argument[-1];taint",
        "org.springframework.asm;ClassReader;true;readPackage;(int,char[]);;Argument[1];ReturnValue;taint",
        "org.springframework.asm;ClassReader;true;readUTF8;(int,char[]);;Argument[-1];ReturnValue;taint",
        "org.springframework.asm;ClassReader;true;readUTF8;(int,char[]);;Argument[1];Argument[-1];taint",
        "org.springframework.asm;ClassReader;true;readUTF8;(int,char[]);;Argument[1];ReturnValue;taint",
        "org.springframework.asm;ClassTooLargeException;false;ClassTooLargeException;(String,int);;Argument[0];Argument[-1];taint",
        "org.springframework.asm;ClassTooLargeException;false;getClassName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.asm;ClassVisitor;true;ClassVisitor;(int,ClassVisitor);;Argument[1];Argument[-1];taint",
        "org.springframework.asm;ClassVisitor;true;visit;(int,int,String,String,String,String[]);;Argument[2];Argument[-1];taint",
        "org.springframework.asm;ClassVisitor;true;visit;(int,int,String,String,String,String[]);;Argument[3];Argument[-1];taint",
        "org.springframework.asm;ClassVisitor;true;visit;(int,int,String,String,String,String[]);;Argument[4];Argument[-1];taint",
        "org.springframework.asm;ClassVisitor;true;visit;(int,int,String,String,String,String[]);;Argument[5];Argument[-1];taint",
        "org.springframework.asm;ClassVisitor;true;visitAnnotation;(String,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.asm;ClassVisitor;true;visitAnnotation;(String,boolean);;Argument[0];ReturnValue;taint",
        "org.springframework.asm;ClassVisitor;true;visitAttribute;(Attribute);;Argument[0];Argument[-1];taint",
        "org.springframework.asm;ClassVisitor;true;visitField;(int,String,String,String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.asm;ClassVisitor;true;visitField;(int,String,String,String,Object);;Argument[2];Argument[-1];taint",
        "org.springframework.asm;ClassVisitor;true;visitField;(int,String,String,String,Object);;Argument[3];Argument[-1];taint",
        "org.springframework.asm;ClassVisitor;true;visitField;(int,String,String,String,Object);;Argument[4];Argument[-1];taint",
        "org.springframework.asm;ClassVisitor;true;visitInnerClass;(String,String,String,int);;Argument[0];Argument[-1];taint",
        "org.springframework.asm;ClassVisitor;true;visitInnerClass;(String,String,String,int);;Argument[1];Argument[-1];taint",
        "org.springframework.asm;ClassVisitor;true;visitInnerClass;(String,String,String,int);;Argument[2];Argument[-1];taint",
        "org.springframework.asm;ClassVisitor;true;visitMethod;(int,String,String,String,String[]);;Argument[1];Argument[-1];taint",
        "org.springframework.asm;ClassVisitor;true;visitMethod;(int,String,String,String,String[]);;Argument[1];ReturnValue;taint",
        "org.springframework.asm;ClassVisitor;true;visitMethod;(int,String,String,String,String[]);;Argument[2];Argument[-1];taint",
        "org.springframework.asm;ClassVisitor;true;visitMethod;(int,String,String,String,String[]);;Argument[2];ReturnValue;taint",
        "org.springframework.asm;ClassVisitor;true;visitMethod;(int,String,String,String,String[]);;Argument[3];Argument[-1];taint",
        "org.springframework.asm;ClassVisitor;true;visitMethod;(int,String,String,String,String[]);;Argument[4];Argument[-1];taint",
        "org.springframework.asm;ClassVisitor;true;visitModule;(String,int,String);;Argument[0];Argument[-1];taint",
        "org.springframework.asm;ClassVisitor;true;visitModule;(String,int,String);;Argument[2];Argument[-1];taint",
        "org.springframework.asm;ClassVisitor;true;visitNestHost;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.asm;ClassVisitor;true;visitNestMember;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.asm;ClassVisitor;true;visitOuterClass;(String,String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.asm;ClassVisitor;true;visitOuterClass;(String,String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.asm;ClassVisitor;true;visitOuterClass;(String,String,String);;Argument[2];Argument[-1];taint",
        "org.springframework.asm;ClassVisitor;true;visitPermittedSubclass;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.asm;ClassVisitor;true;visitRecordComponent;(String,String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.asm;ClassVisitor;true;visitRecordComponent;(String,String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.asm;ClassVisitor;true;visitRecordComponent;(String,String,String);;Argument[2];Argument[-1];taint",
        "org.springframework.asm;ClassVisitor;true;visitSource;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.asm;ClassVisitor;true;visitTypeAnnotation;(int,TypePath,String,boolean);;Argument[2];Argument[-1];taint",
        "org.springframework.asm;ClassVisitor;true;visitTypeAnnotation;(int,TypePath,String,boolean);;Argument[2];ReturnValue;taint",
        "org.springframework.asm;ClassWriter;true;ClassWriter;(ClassReader,int);;Argument[0];Argument[-1];taint",
        "org.springframework.asm;ClassWriter;true;newClass;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.asm;ClassWriter;true;newConst;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.asm;ClassWriter;true;newConstantDynamic;(String,String,Handle,Object[]);;Argument[0];Argument[-1];taint",
        "org.springframework.asm;ClassWriter;true;newConstantDynamic;(String,String,Handle,Object[]);;Argument[1];Argument[-1];taint",
        "org.springframework.asm;ClassWriter;true;newConstantDynamic;(String,String,Handle,Object[]);;Argument[3];Argument[-1];taint",
        "org.springframework.asm;ClassWriter;true;newField;(String,String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.asm;ClassWriter;true;newField;(String,String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.asm;ClassWriter;true;newField;(String,String,String);;Argument[2];Argument[-1];taint",
        "org.springframework.asm;ClassWriter;true;newHandle;(int,String,String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.asm;ClassWriter;true;newHandle;(int,String,String,String);;Argument[2];Argument[-1];taint",
        "org.springframework.asm;ClassWriter;true;newHandle;(int,String,String,String);;Argument[3];Argument[-1];taint",
        "org.springframework.asm;ClassWriter;true;newHandle;(int,String,String,String,boolean);;Argument[1];Argument[-1];taint",
        "org.springframework.asm;ClassWriter;true;newHandle;(int,String,String,String,boolean);;Argument[2];Argument[-1];taint",
        "org.springframework.asm;ClassWriter;true;newHandle;(int,String,String,String,boolean);;Argument[3];Argument[-1];taint",
        "org.springframework.asm;ClassWriter;true;newInvokeDynamic;(String,String,Handle,Object[]);;Argument[0];Argument[-1];taint",
        "org.springframework.asm;ClassWriter;true;newInvokeDynamic;(String,String,Handle,Object[]);;Argument[1];Argument[-1];taint",
        "org.springframework.asm;ClassWriter;true;newInvokeDynamic;(String,String,Handle,Object[]);;Argument[3];Argument[-1];taint",
        "org.springframework.asm;ClassWriter;true;newMethod;(String,String,String,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.asm;ClassWriter;true;newMethod;(String,String,String,boolean);;Argument[1];Argument[-1];taint",
        "org.springframework.asm;ClassWriter;true;newMethod;(String,String,String,boolean);;Argument[2];Argument[-1];taint",
        "org.springframework.asm;ClassWriter;true;newMethodType;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.asm;ClassWriter;true;newModule;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.asm;ClassWriter;true;newNameType;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.asm;ClassWriter;true;newNameType;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.asm;ClassWriter;true;newPackage;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.asm;ClassWriter;true;newUTF8;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.asm;ClassWriter;true;toByteArray;();;Argument[-1];ReturnValue;taint",
        "org.springframework.asm;ConstantDynamic;false;ConstantDynamic;(String,String,Handle,Object[]);;Argument[0];Argument[-1];taint",
        "org.springframework.asm;ConstantDynamic;false;ConstantDynamic;(String,String,Handle,Object[]);;Argument[1];Argument[-1];taint",
        "org.springframework.asm;ConstantDynamic;false;ConstantDynamic;(String,String,Handle,Object[]);;Argument[2];Argument[-1];taint",
        "org.springframework.asm;ConstantDynamic;false;ConstantDynamic;(String,String,Handle,Object[]);;Argument[3];Argument[-1];taint",
        "org.springframework.asm;ConstantDynamic;false;getBootstrapMethod;();;Argument[-1];ReturnValue;taint",
        "org.springframework.asm;ConstantDynamic;false;getBootstrapMethodArgument;(int);;Argument[-1];ReturnValue;taint",
        "org.springframework.asm;ConstantDynamic;false;getDescriptor;();;Argument[-1];ReturnValue;taint",
        "org.springframework.asm;ConstantDynamic;false;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.asm;ConstantDynamic;false;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.asm;FieldVisitor;true;FieldVisitor;(int,FieldVisitor);;Argument[1];Argument[-1];taint",
        "org.springframework.asm;FieldVisitor;true;visitAnnotation;(String,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.asm;FieldVisitor;true;visitAnnotation;(String,boolean);;Argument[0];ReturnValue;taint",
        "org.springframework.asm;FieldVisitor;true;visitAttribute;(Attribute);;Argument[0];Argument[-1];taint",
        "org.springframework.asm;FieldVisitor;true;visitTypeAnnotation;(int,TypePath,String,boolean);;Argument[2];Argument[-1];taint",
        "org.springframework.asm;FieldVisitor;true;visitTypeAnnotation;(int,TypePath,String,boolean);;Argument[2];ReturnValue;taint",
        "org.springframework.asm;Handle;false;Handle;(int,String,String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.asm;Handle;false;Handle;(int,String,String,String);;Argument[2];Argument[-1];taint",
        "org.springframework.asm;Handle;false;Handle;(int,String,String,String);;Argument[3];Argument[-1];taint",
        "org.springframework.asm;Handle;false;Handle;(int,String,String,String,boolean);;Argument[1];Argument[-1];taint",
        "org.springframework.asm;Handle;false;Handle;(int,String,String,String,boolean);;Argument[2];Argument[-1];taint",
        "org.springframework.asm;Handle;false;Handle;(int,String,String,String,boolean);;Argument[3];Argument[-1];taint",
        "org.springframework.asm;Handle;false;getDesc;();;Argument[-1];ReturnValue;taint",
        "org.springframework.asm;Handle;false;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.asm;Handle;false;getOwner;();;Argument[-1];ReturnValue;taint",
        "org.springframework.asm;Handle;false;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.asm;MethodTooLargeException;false;MethodTooLargeException;(String,String,String,int);;Argument[0];Argument[-1];taint",
        "org.springframework.asm;MethodTooLargeException;false;MethodTooLargeException;(String,String,String,int);;Argument[1];Argument[-1];taint",
        "org.springframework.asm;MethodTooLargeException;false;MethodTooLargeException;(String,String,String,int);;Argument[2];Argument[-1];taint",
        "org.springframework.asm;MethodTooLargeException;false;getClassName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.asm;MethodTooLargeException;false;getDescriptor;();;Argument[-1];ReturnValue;taint",
        "org.springframework.asm;MethodTooLargeException;false;getMethodName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.asm;MethodVisitor;true;MethodVisitor;(int,MethodVisitor);;Argument[1];Argument[-1];taint",
        "org.springframework.asm;MethodVisitor;true;visitAnnotation;(String,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.asm;MethodVisitor;true;visitAnnotation;(String,boolean);;Argument[0];ReturnValue;taint",
        "org.springframework.asm;MethodVisitor;true;visitAttribute;(Attribute);;Argument[0];Argument[-1];taint",
        "org.springframework.asm;MethodVisitor;true;visitFieldInsn;(int,String,String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.asm;MethodVisitor;true;visitFieldInsn;(int,String,String,String);;Argument[2];Argument[-1];taint",
        "org.springframework.asm;MethodVisitor;true;visitFieldInsn;(int,String,String,String);;Argument[3];Argument[-1];taint",
        "org.springframework.asm;MethodVisitor;true;visitFrame;(int,int,Object[],int,Object[]);;Argument[2];Argument[-1];taint",
        "org.springframework.asm;MethodVisitor;true;visitFrame;(int,int,Object[],int,Object[]);;Argument[4];Argument[-1];taint",
        "org.springframework.asm;MethodVisitor;true;visitInsnAnnotation;(int,TypePath,String,boolean);;Argument[2];Argument[-1];taint",
        "org.springframework.asm;MethodVisitor;true;visitInsnAnnotation;(int,TypePath,String,boolean);;Argument[2];ReturnValue;taint",
        "org.springframework.asm;MethodVisitor;true;visitInvokeDynamicInsn;(String,String,Handle,Object[]);;Argument[0];Argument[-1];taint",
        "org.springframework.asm;MethodVisitor;true;visitInvokeDynamicInsn;(String,String,Handle,Object[]);;Argument[1];Argument[-1];taint",
        "org.springframework.asm;MethodVisitor;true;visitInvokeDynamicInsn;(String,String,Handle,Object[]);;Argument[3];Argument[-1];taint",
        "org.springframework.asm;MethodVisitor;true;visitJumpInsn;(int,Label);;Argument[1];Argument[-1];taint",
        "org.springframework.asm;MethodVisitor;true;visitLabel;(Label);;Argument[0];Argument[-1];taint",
        "org.springframework.asm;MethodVisitor;true;visitLdcInsn;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.asm;MethodVisitor;true;visitLocalVariable;(String,String,String,Label,Label,int);;Argument[0];Argument[-1];taint",
        "org.springframework.asm;MethodVisitor;true;visitLocalVariable;(String,String,String,Label,Label,int);;Argument[1];Argument[-1];taint",
        "org.springframework.asm;MethodVisitor;true;visitLocalVariable;(String,String,String,Label,Label,int);;Argument[2];Argument[-1];taint",
        "org.springframework.asm;MethodVisitor;true;visitLocalVariableAnnotation;(int,TypePath,Label[],Label[],int[],String,boolean);;Argument[5];Argument[-1];taint",
        "org.springframework.asm;MethodVisitor;true;visitLocalVariableAnnotation;(int,TypePath,Label[],Label[],int[],String,boolean);;Argument[5];ReturnValue;taint",
        "org.springframework.asm;MethodVisitor;true;visitLookupSwitchInsn;(Label,int[],Label[]);;Argument[0];Argument[-1];taint",
        "org.springframework.asm;MethodVisitor;true;visitLookupSwitchInsn;(Label,int[],Label[]);;Argument[2];Argument[-1];taint",
        "org.springframework.asm;MethodVisitor;true;visitMethodInsn;(int,String,String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.asm;MethodVisitor;true;visitMethodInsn;(int,String,String,String);;Argument[2];Argument[-1];taint",
        "org.springframework.asm;MethodVisitor;true;visitMethodInsn;(int,String,String,String);;Argument[3];Argument[-1];taint",
        "org.springframework.asm;MethodVisitor;true;visitMethodInsn;(int,String,String,String,boolean);;Argument[1];Argument[-1];taint",
        "org.springframework.asm;MethodVisitor;true;visitMethodInsn;(int,String,String,String,boolean);;Argument[2];Argument[-1];taint",
        "org.springframework.asm;MethodVisitor;true;visitMethodInsn;(int,String,String,String,boolean);;Argument[3];Argument[-1];taint",
        "org.springframework.asm;MethodVisitor;true;visitMultiANewArrayInsn;(String,int);;Argument[0];Argument[-1];taint",
        "org.springframework.asm;MethodVisitor;true;visitParameter;(String,int);;Argument[0];Argument[-1];taint",
        "org.springframework.asm;MethodVisitor;true;visitParameterAnnotation;(int,String,boolean);;Argument[1];Argument[-1];taint",
        "org.springframework.asm;MethodVisitor;true;visitParameterAnnotation;(int,String,boolean);;Argument[1];ReturnValue;taint",
        "org.springframework.asm;MethodVisitor;true;visitTableSwitchInsn;(int,int,Label,Label[]);;Argument[2];Argument[-1];taint",
        "org.springframework.asm;MethodVisitor;true;visitTableSwitchInsn;(int,int,Label,Label[]);;Argument[3];Argument[-1];taint",
        "org.springframework.asm;MethodVisitor;true;visitTryCatchAnnotation;(int,TypePath,String,boolean);;Argument[2];Argument[-1];taint",
        "org.springframework.asm;MethodVisitor;true;visitTryCatchAnnotation;(int,TypePath,String,boolean);;Argument[2];ReturnValue;taint",
        "org.springframework.asm;MethodVisitor;true;visitTryCatchBlock;(Label,Label,Label,String);;Argument[0];Argument[-1];taint",
        "org.springframework.asm;MethodVisitor;true;visitTryCatchBlock;(Label,Label,Label,String);;Argument[1];Argument[-1];taint",
        "org.springframework.asm;MethodVisitor;true;visitTryCatchBlock;(Label,Label,Label,String);;Argument[2];Argument[-1];taint",
        "org.springframework.asm;MethodVisitor;true;visitTryCatchBlock;(Label,Label,Label,String);;Argument[3];Argument[-1];taint",
        "org.springframework.asm;MethodVisitor;true;visitTypeAnnotation;(int,TypePath,String,boolean);;Argument[2];Argument[-1];taint",
        "org.springframework.asm;MethodVisitor;true;visitTypeAnnotation;(int,TypePath,String,boolean);;Argument[2];ReturnValue;taint",
        "org.springframework.asm;MethodVisitor;true;visitTypeInsn;(int,String);;Argument[1];Argument[-1];taint",
        "org.springframework.asm;ModuleVisitor;true;ModuleVisitor;(int,ModuleVisitor);;Argument[1];Argument[-1];taint",
        "org.springframework.asm;ModuleVisitor;true;visitExport;(String,int,String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.asm;ModuleVisitor;true;visitExport;(String,int,String[]);;Argument[2];Argument[-1];taint",
        "org.springframework.asm;ModuleVisitor;true;visitMainClass;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.asm;ModuleVisitor;true;visitOpen;(String,int,String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.asm;ModuleVisitor;true;visitOpen;(String,int,String[]);;Argument[2];Argument[-1];taint",
        "org.springframework.asm;ModuleVisitor;true;visitPackage;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.asm;ModuleVisitor;true;visitProvide;(String,String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.asm;ModuleVisitor;true;visitProvide;(String,String[]);;Argument[1];Argument[-1];taint",
        "org.springframework.asm;ModuleVisitor;true;visitRequire;(String,int,String);;Argument[0];Argument[-1];taint",
        "org.springframework.asm;ModuleVisitor;true;visitRequire;(String,int,String);;Argument[2];Argument[-1];taint",
        "org.springframework.asm;ModuleVisitor;true;visitUse;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.asm;RecordComponentVisitor;true;RecordComponentVisitor;(int,RecordComponentVisitor);;Argument[1];Argument[-1];taint",
        "org.springframework.asm;RecordComponentVisitor;true;getDelegate;();;Argument[-1];ReturnValue;taint",
        "org.springframework.asm;RecordComponentVisitor;true;visitAnnotation;(String,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.asm;RecordComponentVisitor;true;visitAnnotation;(String,boolean);;Argument[0];ReturnValue;taint",
        "org.springframework.asm;RecordComponentVisitor;true;visitAttribute;(Attribute);;Argument[0];Argument[-1];taint",
        "org.springframework.asm;RecordComponentVisitor;true;visitTypeAnnotation;(int,TypePath,String,boolean);;Argument[2];Argument[-1];taint",
        "org.springframework.asm;RecordComponentVisitor;true;visitTypeAnnotation;(int,TypePath,String,boolean);;Argument[2];ReturnValue;taint",
        "org.springframework.asm;Type;false;getArgumentTypes;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.asm;Type;false;getDescriptor;();;Argument[-1];ReturnValue;taint",
        "org.springframework.asm;Type;false;getInternalName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.asm;Type;false;getMethodType;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.asm;Type;false;getObjectType;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.asm;Type;false;getReturnType;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.asm;Type;false;getType;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.asm;Type;false;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.asm;TypePath;false;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.annotation;AnnotatedBeanDefinition;true;getFactoryMethodMetadata;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.annotation;AnnotatedBeanDefinition;true;getMetadata;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.annotation;AnnotatedGenericBeanDefinition;true;AnnotatedGenericBeanDefinition;(AnnotationMetadata);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.annotation;AnnotatedGenericBeanDefinition;true;AnnotatedGenericBeanDefinition;(AnnotationMetadata,MethodMetadata);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.annotation;AnnotatedGenericBeanDefinition;true;AnnotatedGenericBeanDefinition;(AnnotationMetadata,MethodMetadata);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory.annotation;AutowiredAnnotationBeanPostProcessor;true;setAutowiredAnnotationTypes;(Set);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.annotation;AutowiredAnnotationBeanPostProcessor;true;setRequiredParameterName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.annotation;BeanFactoryAnnotationUtils;true;qualifiedBeanOfType;(BeanFactory,Class,String);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory.annotation;BeanFactoryAnnotationUtils;true;qualifiedBeanOfType;(BeanFactory,Class,String);;Argument[2];ReturnValue;taint",
        "org.springframework.beans.factory.annotation;BeanFactoryAnnotationUtils;true;qualifiedBeansOfType;(ListableBeanFactory,Class,String);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory.annotation;CustomAutowireConfigurer;true;setCustomQualifierTypes;(Set);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.annotation;InjectionMetadata$InjectedElement;true;getMember;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.annotation;InjectionMetadata$InjectedElement;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.annotation;InjectionMetadata;true;InjectionMetadata;(Class,Collection);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory.annotation;InjectionMetadata;true;forElements;(Collection,Class);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory.annotation;ParameterResolutionDelegate;false;resolveDependency;(Parameter,int,Class,AutowireCapableBeanFactory);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory.annotation;ParameterResolutionDelegate;false;resolveDependency;(Parameter,int,Class,AutowireCapableBeanFactory);;Argument[3];ReturnValue;taint",
        "org.springframework.beans.factory.annotation;QualifierAnnotationAutowireCandidateResolver;true;QualifierAnnotationAutowireCandidateResolver;(Set);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;AutowireCapableBeanFactory;true;applyBeanPostProcessorsAfterInitialization;(Object,String);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory.config;AutowireCapableBeanFactory;true;applyBeanPostProcessorsAfterInitialization;(Object,String);;Argument[1];ReturnValue;taint",
        "org.springframework.beans.factory.config;AutowireCapableBeanFactory;true;applyBeanPostProcessorsBeforeInitialization;(Object,String);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory.config;AutowireCapableBeanFactory;true;applyBeanPropertyValues;(Object,String);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory.config;AutowireCapableBeanFactory;true;configureBean;(Object,String);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory.config;AutowireCapableBeanFactory;true;configureBean;(Object,String);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory.config;AutowireCapableBeanFactory;true;configureBean;(Object,String);;Argument[1];ReturnValue;taint",
        "org.springframework.beans.factory.config;AutowireCapableBeanFactory;true;createBean;(Class);;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.config;AutowireCapableBeanFactory;true;createBean;(Class,int,boolean);;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.config;AutowireCapableBeanFactory;true;initializeBean;(Object,String);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory.config;AutowireCapableBeanFactory;true;initializeBean;(Object,String);;Argument[1];ReturnValue;taint",
        "org.springframework.beans.factory.config;AutowireCapableBeanFactory;true;resolveBeanByName;(String,DependencyDescriptor);;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.config;AutowireCapableBeanFactory;true;resolveBeanByName;(String,DependencyDescriptor);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;AutowireCapableBeanFactory;true;resolveBeanByName;(String,DependencyDescriptor);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory.config;AutowireCapableBeanFactory;true;resolveDependency;(DependencyDescriptor,String);;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.config;AutowireCapableBeanFactory;true;resolveDependency;(DependencyDescriptor,String);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory.config;AutowireCapableBeanFactory;true;resolveDependency;(DependencyDescriptor,String);;Argument[1];ReturnValue;taint",
        "org.springframework.beans.factory.config;AutowireCapableBeanFactory;true;resolveDependency;(DependencyDescriptor,String,Set,TypeConverter);;Argument[-1];Element of Argument[2];taint",
        "org.springframework.beans.factory.config;AutowireCapableBeanFactory;true;resolveDependency;(DependencyDescriptor,String,Set,TypeConverter);;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.config;AutowireCapableBeanFactory;true;resolveDependency;(DependencyDescriptor,String,Set,TypeConverter);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory.config;AutowireCapableBeanFactory;true;resolveDependency;(DependencyDescriptor,String,Set,TypeConverter);;Argument[1];ReturnValue;taint",
        "org.springframework.beans.factory.config;BeanDefinition;true;getBeanClassName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.config;BeanDefinition;true;getConstructorArgumentValues;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.config;BeanDefinition;true;getDependsOn;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.config;BeanDefinition;true;getDescription;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.config;BeanDefinition;true;getDestroyMethodName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.config;BeanDefinition;true;getFactoryBeanName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.config;BeanDefinition;true;getFactoryMethodName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.config;BeanDefinition;true;getInitMethodName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.config;BeanDefinition;true;getOriginatingBeanDefinition;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.config;BeanDefinition;true;getParentName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.config;BeanDefinition;true;getPropertyValues;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.config;BeanDefinition;true;getResolvableType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.config;BeanDefinition;true;getResourceDescription;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.config;BeanDefinition;true;getScope;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.config;BeanDefinition;true;setBeanClassName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;BeanDefinition;true;setDependsOn;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;BeanDefinition;true;setDescription;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;BeanDefinition;true;setDestroyMethodName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;BeanDefinition;true;setFactoryBeanName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;BeanDefinition;true;setFactoryMethodName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;BeanDefinition;true;setInitMethodName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;BeanDefinition;true;setParentName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;BeanDefinition;true;setScope;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;BeanDefinitionHolder;true;BeanDefinitionHolder;(BeanDefinition,String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;BeanDefinitionHolder;true;BeanDefinitionHolder;(BeanDefinition,String);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory.config;BeanDefinitionHolder;true;BeanDefinitionHolder;(BeanDefinition,String,String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;BeanDefinitionHolder;true;BeanDefinitionHolder;(BeanDefinition,String,String[]);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory.config;BeanDefinitionHolder;true;BeanDefinitionHolder;(BeanDefinition,String,String[]);;Argument[2];Argument[-1];taint",
        "org.springframework.beans.factory.config;BeanDefinitionHolder;true;BeanDefinitionHolder;(BeanDefinitionHolder);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;BeanDefinitionHolder;true;getAliases;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.config;BeanDefinitionHolder;true;getBeanDefinition;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.config;BeanDefinitionHolder;true;getBeanName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.config;BeanDefinitionHolder;true;getLongDescription;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.config;BeanDefinitionHolder;true;getShortDescription;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.config;BeanDefinitionHolder;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.config;BeanDefinitionVisitor;true;BeanDefinitionVisitor;(StringValueResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;BeanDefinitionVisitor;true;visitBeanDefinition;(BeanDefinition);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;BeanExpressionContext;true;BeanExpressionContext;(ConfigurableBeanFactory,Scope);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;BeanExpressionContext;true;BeanExpressionContext;(ConfigurableBeanFactory,Scope);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory.config;BeanExpressionContext;true;containsObject;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;BeanExpressionContext;true;getBeanFactory;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.config;BeanExpressionContext;true;getObject;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.config;BeanExpressionContext;true;getObject;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;BeanExpressionContext;true;getObject;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory.config;BeanExpressionContext;true;getScope;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.config;BeanExpressionResolver;true;evaluate;(String,BeanExpressionContext);;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.config;BeanExpressionResolver;true;evaluate;(String,BeanExpressionContext);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;BeanExpressionResolver;true;evaluate;(String,BeanExpressionContext);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory.config;BeanExpressionResolver;true;evaluate;(String,BeanExpressionContext);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory.config;BeanFactoryPostProcessor;true;postProcessBeanFactory;(ConfigurableListableBeanFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;BeanPostProcessor;true;postProcessAfterInitialization;(Object,String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;BeanPostProcessor;true;postProcessAfterInitialization;(Object,String);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory.config;BeanPostProcessor;true;postProcessAfterInitialization;(Object,String);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory.config;BeanPostProcessor;true;postProcessBeforeInitialization;(Object,String);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory.config;BeanReference;true;getBeanName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.config;ConfigurableBeanFactory;true;addBeanPostProcessor;(BeanPostProcessor);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;ConfigurableBeanFactory;true;addEmbeddedValueResolver;(StringValueResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;ConfigurableBeanFactory;true;addPropertyEditorRegistrar;(PropertyEditorRegistrar);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;ConfigurableBeanFactory;true;destroyBean;(String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;ConfigurableBeanFactory;true;destroyScopedBean;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;ConfigurableBeanFactory;true;getAccessControlContext;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.config;ConfigurableBeanFactory;true;getApplicationStartup;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.config;ConfigurableBeanFactory;true;getBeanClassLoader;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.config;ConfigurableBeanFactory;true;getBeanExpressionResolver;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.config;ConfigurableBeanFactory;true;getConversionService;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.config;ConfigurableBeanFactory;true;getMergedBeanDefinition;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.config;ConfigurableBeanFactory;true;getMergedBeanDefinition;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;ConfigurableBeanFactory;true;getRegisteredScope;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.config;ConfigurableBeanFactory;true;getRegisteredScopeNames;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.config;ConfigurableBeanFactory;true;getTempClassLoader;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.config;ConfigurableBeanFactory;true;getTypeConverter;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.config;ConfigurableBeanFactory;true;isFactoryBean;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;ConfigurableBeanFactory;true;registerScope;(String,Scope);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;ConfigurableBeanFactory;true;registerScope;(String,Scope);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory.config;ConfigurableBeanFactory;true;resolveEmbeddedValue;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.config;ConfigurableBeanFactory;true;resolveEmbeddedValue;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory.config;ConfigurableBeanFactory;true;setApplicationStartup;(ApplicationStartup);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;ConfigurableBeanFactory;true;setBeanClassLoader;(ClassLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;ConfigurableBeanFactory;true;setBeanExpressionResolver;(BeanExpressionResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;ConfigurableBeanFactory;true;setConversionService;(ConversionService);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;ConfigurableBeanFactory;true;setParentBeanFactory;(BeanFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;ConfigurableBeanFactory;true;setTempClassLoader;(ClassLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;ConfigurableBeanFactory;true;setTypeConverter;(TypeConverter);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;ConfigurableListableBeanFactory;true;getBeanDefinition;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.config;ConfigurableListableBeanFactory;true;getBeanNamesIterator;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.config;ConfigurableListableBeanFactory;true;isAutowireCandidate;(String,DependencyDescriptor);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;ConfigurableListableBeanFactory;true;registerResolvableDependency;(Class,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory.config;ConstructorArgumentValues$ValueHolder;true;ValueHolder;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;ConstructorArgumentValues$ValueHolder;true;ValueHolder;(Object,String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;ConstructorArgumentValues$ValueHolder;true;ValueHolder;(Object,String);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory.config;ConstructorArgumentValues$ValueHolder;true;ValueHolder;(Object,String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;ConstructorArgumentValues$ValueHolder;true;ValueHolder;(Object,String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory.config;ConstructorArgumentValues$ValueHolder;true;ValueHolder;(Object,String,String);;Argument[2];Argument[-1];taint",
        "org.springframework.beans.factory.config;ConstructorArgumentValues$ValueHolder;true;getConvertedValue;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.config;ConstructorArgumentValues$ValueHolder;true;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.config;ConstructorArgumentValues$ValueHolder;true;getType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.config;ConstructorArgumentValues$ValueHolder;true;getValue;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.config;ConstructorArgumentValues$ValueHolder;true;setConvertedValue;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;ConstructorArgumentValues$ValueHolder;true;setName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;ConstructorArgumentValues$ValueHolder;true;setSource;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;ConstructorArgumentValues$ValueHolder;true;setType;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;ConstructorArgumentValues$ValueHolder;true;setValue;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;ConstructorArgumentValues;true;addGenericArgumentValue;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;ConstructorArgumentValues;true;addGenericArgumentValue;(Object,String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;ConstructorArgumentValues;true;addGenericArgumentValue;(Object,String);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory.config;ConstructorArgumentValues;true;addGenericArgumentValue;(ValueHolder);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;ConstructorArgumentValues;true;addIndexedArgumentValue;(int,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory.config;ConstructorArgumentValues;true;addIndexedArgumentValue;(int,Object,String);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory.config;ConstructorArgumentValues;true;addIndexedArgumentValue;(int,Object,String);;Argument[2];Argument[-1];taint",
        "org.springframework.beans.factory.config;ConstructorArgumentValues;true;addIndexedArgumentValue;(int,ValueHolder);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory.config;ConstructorArgumentValues;true;getArgumentValue;(int,Class);;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.config;ConstructorArgumentValues;true;getArgumentValue;(int,Class,String);;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.config;ConstructorArgumentValues;true;getArgumentValue;(int,Class,String,Set);;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.config;ConstructorArgumentValues;true;getGenericArgumentValue;(Class);;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.config;ConstructorArgumentValues;true;getGenericArgumentValue;(Class,String);;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.config;ConstructorArgumentValues;true;getGenericArgumentValue;(Class,String,Set);;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.config;ConstructorArgumentValues;true;getGenericArgumentValues;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.config;ConstructorArgumentValues;true;getIndexedArgumentValue;(int,Class);;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.config;ConstructorArgumentValues;true;getIndexedArgumentValue;(int,Class,String);;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.config;ConstructorArgumentValues;true;getIndexedArgumentValues;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.config;CustomEditorConfigurer;true;setCustomEditors;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;CustomEditorConfigurer;true;setPropertyEditorRegistrars;(PropertyEditorRegistrar[]);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;CustomScopeConfigurer;true;addScope;(String,Scope);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;CustomScopeConfigurer;true;addScope;(String,Scope);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory.config;CustomScopeConfigurer;true;setScopes;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;DependencyDescriptor;true;DependencyDescriptor;(Field,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;DependencyDescriptor;true;DependencyDescriptor;(Field,boolean,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;DependencyDescriptor;true;DependencyDescriptor;(MethodParameter,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;DependencyDescriptor;true;DependencyDescriptor;(MethodParameter,boolean,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;DependencyDescriptor;true;getDependencyName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.config;DependencyDescriptor;true;getResolvableType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.config;DependencyDescriptor;true;getTypeDescriptor;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.config;DependencyDescriptor;true;initParameterNameDiscovery;(ParameterNameDiscoverer);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;DependencyDescriptor;true;resolveCandidate;(String,Class,BeanFactory);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory.config;DependencyDescriptor;true;resolveCandidate;(String,Class,BeanFactory);;Argument[2];ReturnValue;taint",
        "org.springframework.beans.factory.config;DependencyDescriptor;true;resolveShortcut;(BeanFactory);;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.config;DependencyDescriptor;true;resolveShortcut;(BeanFactory);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory.config;DeprecatedBeanWarner;true;setLoggerName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;EmbeddedValueResolver;true;EmbeddedValueResolver;(ConfigurableBeanFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;FieldRetrievingFactoryBean;true;getTargetField;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.config;FieldRetrievingFactoryBean;true;getTargetObject;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.config;FieldRetrievingFactoryBean;true;setStaticField;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;FieldRetrievingFactoryBean;true;setTargetField;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;FieldRetrievingFactoryBean;true;setTargetObject;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;InstantiationAwareBeanPostProcessor;true;postProcessBeforeInstantiation;(Class,String);;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.config;InstantiationAwareBeanPostProcessor;true;postProcessBeforeInstantiation;(Class,String);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory.config;InstantiationAwareBeanPostProcessor;true;postProcessBeforeInstantiation;(Class,String);;Argument[1];ReturnValue;taint",
        "org.springframework.beans.factory.config;InstantiationAwareBeanPostProcessor;true;postProcessProperties;(PropertyValues,Object,String);;Argument[2];Argument[-1];taint",
        "org.springframework.beans.factory.config;InstantiationAwareBeanPostProcessor;true;postProcessProperties;(PropertyValues,Object,String);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory.config;InstantiationAwareBeanPostProcessor;true;postProcessPropertyValues;(PropertyValues,PropertyDescriptor[],Object,String);;Argument[3];Argument[-1];taint",
        "org.springframework.beans.factory.config;InstantiationAwareBeanPostProcessor;true;postProcessPropertyValues;(PropertyValues,PropertyDescriptor[],Object,String);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory.config;ListFactoryBean;true;setSourceList;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;MapFactoryBean;true;setSourceMap;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;NamedBeanHolder;true;NamedBeanHolder;(String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;NamedBeanHolder;true;NamedBeanHolder;(String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory.config;NamedBeanHolder;true;getBeanInstance;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.config;ObjectFactoryCreatingFactoryBean;true;setTargetBeanName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;PlaceholderConfigurerSupport;true;setNullValue;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;PlaceholderConfigurerSupport;true;setPlaceholderPrefix;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;PlaceholderConfigurerSupport;true;setPlaceholderSuffix;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;PlaceholderConfigurerSupport;true;setValueSeparator;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;PreferencesPlaceholderConfigurer;true;setSystemTreePath;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;PreferencesPlaceholderConfigurer;true;setUserTreePath;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;PropertyOverrideConfigurer;true;setBeanNameSeparator;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;PropertyPathFactoryBean;true;setPropertyPath;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;PropertyPathFactoryBean;true;setTargetBeanName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;PropertyPathFactoryBean;true;setTargetObject;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;ProviderCreatingFactoryBean;true;setTargetBeanName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;RuntimeBeanNameReference;true;RuntimeBeanNameReference;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;RuntimeBeanNameReference;true;setSource;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;RuntimeBeanNameReference;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.config;RuntimeBeanReference;true;RuntimeBeanReference;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;RuntimeBeanReference;true;RuntimeBeanReference;(String,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;RuntimeBeanReference;true;setSource;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;RuntimeBeanReference;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.config;Scope;true;get;(String,ObjectFactory);;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.config;Scope;true;get;(String,ObjectFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;Scope;true;get;(String,ObjectFactory);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory.config;Scope;true;registerDestructionCallback;(String,Runnable);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;Scope;true;registerDestructionCallback;(String,Runnable);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory.config;Scope;true;remove;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.config;Scope;true;remove;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory.config;ServiceLocatorFactoryBean;true;setServiceMappings;(Properties);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;SetFactoryBean;true;setSourceSet;(Set);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;SingletonBeanRegistry;true;getSingleton;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.config;SingletonBeanRegistry;true;getSingleton;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;SingletonBeanRegistry;true;getSingletonMutex;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.config;SingletonBeanRegistry;true;getSingletonNames;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.config;SingletonBeanRegistry;true;registerSingleton;(String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;SingletonBeanRegistry;true;registerSingleton;(String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory.config;SmartInstantiationAwareBeanPostProcessor;true;determineCandidateConstructors;(Class,String);;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.config;SmartInstantiationAwareBeanPostProcessor;true;determineCandidateConstructors;(Class,String);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory.config;SmartInstantiationAwareBeanPostProcessor;true;getEarlyBeanReference;(Object,String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;SmartInstantiationAwareBeanPostProcessor;true;getEarlyBeanReference;(Object,String);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory.config;SmartInstantiationAwareBeanPostProcessor;true;getEarlyBeanReference;(Object,String);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory.config;SmartInstantiationAwareBeanPostProcessor;true;predictBeanType;(Class,String);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory.config;TypedStringValue;true;TypedStringValue;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;TypedStringValue;true;TypedStringValue;(String,Class);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;TypedStringValue;true;TypedStringValue;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;TypedStringValue;true;TypedStringValue;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory.config;TypedStringValue;true;getSpecifiedTypeName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.config;TypedStringValue;true;getTargetTypeName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.config;TypedStringValue;true;getValue;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.config;TypedStringValue;true;setSource;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;TypedStringValue;true;setSpecifiedTypeName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;TypedStringValue;true;setTargetTypeName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;TypedStringValue;true;setValue;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;TypedStringValue;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.config;YamlProcessor;true;setDocumentMatchers;(DocumentMatcher[]);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.config;YamlProcessor;true;setResources;(Resource[]);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.groovy;GroovyBeanDefinitionReader;true;GroovyBeanDefinitionReader;(BeanDefinitionRegistry);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.groovy;GroovyBeanDefinitionReader;true;GroovyBeanDefinitionReader;(XmlBeanDefinitionReader);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.groovy;GroovyBeanDefinitionReader;true;bean;(Class,Object[]);;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.groovy;GroovyBeanDefinitionReader;true;bean;(Class,Object[]);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory.groovy;GroovyBeanDefinitionReader;true;bean;(Class,Object[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.beans.factory.groovy;GroovyBeanDefinitionReader;true;beans;(Closure);;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.groovy;GroovyBeanDefinitionReader;true;getBinding;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.groovy;GroovyBeanDefinitionReader;true;setBinding;(Binding);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.groovy;GroovyBeanDefinitionReader;true;xmlns;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.parsing;AbstractComponentDefinition;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.parsing;AliasDefinition;true;AliasDefinition;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.parsing;AliasDefinition;true;AliasDefinition;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory.parsing;AliasDefinition;true;AliasDefinition;(String,String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.parsing;AliasDefinition;true;AliasDefinition;(String,String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory.parsing;AliasDefinition;true;AliasDefinition;(String,String,Object);;Argument[2];Argument[-1];taint",
        "org.springframework.beans.factory.parsing;AliasDefinition;true;getAlias;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.parsing;AliasDefinition;true;getBeanName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.parsing;BeanComponentDefinition;true;BeanComponentDefinition;(BeanDefinition,String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.parsing;BeanComponentDefinition;true;BeanComponentDefinition;(BeanDefinition,String);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory.parsing;BeanComponentDefinition;true;BeanComponentDefinition;(BeanDefinition,String,String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.parsing;BeanComponentDefinition;true;BeanComponentDefinition;(BeanDefinition,String,String[]);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory.parsing;BeanComponentDefinition;true;BeanComponentDefinition;(BeanDefinition,String,String[]);;Argument[2];Argument[-1];taint",
        "org.springframework.beans.factory.parsing;BeanComponentDefinition;true;BeanComponentDefinition;(BeanDefinitionHolder);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.parsing;BeanComponentDefinition;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.parsing;BeanEntry;true;BeanEntry;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.parsing;BeanEntry;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.parsing;ComponentDefinition;true;getBeanDefinitions;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.parsing;ComponentDefinition;true;getBeanReferences;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.parsing;ComponentDefinition;true;getDescription;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.parsing;ComponentDefinition;true;getInnerBeanDefinitions;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.parsing;ComponentDefinition;true;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.parsing;CompositeComponentDefinition;true;CompositeComponentDefinition;(String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.parsing;CompositeComponentDefinition;true;CompositeComponentDefinition;(String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory.parsing;CompositeComponentDefinition;true;addNestedComponent;(ComponentDefinition);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.parsing;FailFastProblemReporter;true;setLogger;(Log);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.parsing;ImportDefinition;true;ImportDefinition;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.parsing;ImportDefinition;true;ImportDefinition;(String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.parsing;ImportDefinition;true;ImportDefinition;(String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory.parsing;ImportDefinition;true;ImportDefinition;(String,Resource[],Object);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.parsing;ImportDefinition;true;ImportDefinition;(String,Resource[],Object);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory.parsing;ImportDefinition;true;ImportDefinition;(String,Resource[],Object);;Argument[2];Argument[-1];taint",
        "org.springframework.beans.factory.parsing;ImportDefinition;true;getActualResources;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.parsing;ImportDefinition;true;getImportedResource;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.parsing;Location;true;Location;(Resource);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.parsing;Location;true;Location;(Resource,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.parsing;Location;true;Location;(Resource,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory.parsing;Location;true;getResource;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.parsing;Location;true;getSource;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.parsing;ParseState;false;peek;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.parsing;ParseState;false;push;(Entry);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.parsing;ParseState;false;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.parsing;Problem;true;Problem;(String,Location);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.parsing;Problem;true;Problem;(String,Location);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory.parsing;Problem;true;Problem;(String,Location,ParseState);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.parsing;Problem;true;Problem;(String,Location,ParseState);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory.parsing;Problem;true;Problem;(String,Location,ParseState);;Argument[2];Argument[-1];taint",
        "org.springframework.beans.factory.parsing;Problem;true;Problem;(String,Location,ParseState,Throwable);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.parsing;Problem;true;Problem;(String,Location,ParseState,Throwable);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory.parsing;Problem;true;Problem;(String,Location,ParseState,Throwable);;Argument[2];Argument[-1];taint",
        "org.springframework.beans.factory.parsing;Problem;true;Problem;(String,Location,ParseState,Throwable);;Argument[3];Argument[-1];taint",
        "org.springframework.beans.factory.parsing;Problem;true;getLocation;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.parsing;Problem;true;getMessage;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.parsing;Problem;true;getParseState;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.parsing;Problem;true;getResourceDescription;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.parsing;Problem;true;getRootCause;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.parsing;Problem;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.parsing;PropertyEntry;true;PropertyEntry;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.parsing;PropertyEntry;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.parsing;QualifierEntry;true;QualifierEntry;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.parsing;QualifierEntry;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.parsing;ReaderContext;true;ReaderContext;(Resource,ProblemReporter,ReaderEventListener,SourceExtractor);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.parsing;ReaderContext;true;ReaderContext;(Resource,ProblemReporter,ReaderEventListener,SourceExtractor);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory.parsing;ReaderContext;true;ReaderContext;(Resource,ProblemReporter,ReaderEventListener,SourceExtractor);;Argument[2];Argument[-1];taint",
        "org.springframework.beans.factory.parsing;ReaderContext;true;ReaderContext;(Resource,ProblemReporter,ReaderEventListener,SourceExtractor);;Argument[3];Argument[-1];taint",
        "org.springframework.beans.factory.parsing;ReaderContext;true;extractSource;(Object);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory.parsing;ReaderContext;true;fireComponentRegistered;(ComponentDefinition);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.parsing;ReaderContext;true;fireDefaultsRegistered;(DefaultsDefinition);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.parsing;ReaderContext;true;fireImportProcessed;(String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.parsing;ReaderContext;true;fireImportProcessed;(String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory.parsing;ReaderContext;true;fireImportProcessed;(String,Resource[],Object);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.parsing;ReaderContext;true;fireImportProcessed;(String,Resource[],Object);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory.parsing;ReaderContext;true;fireImportProcessed;(String,Resource[],Object);;Argument[2];Argument[-1];taint",
        "org.springframework.beans.factory.parsing;ReaderContext;true;getResource;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.parsing;ReaderContext;true;getSourceExtractor;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.parsing;ReaderEventListener;true;componentRegistered;(ComponentDefinition);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.parsing;ReaderEventListener;true;defaultsRegistered;(DefaultsDefinition);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.parsing;ReaderEventListener;true;importProcessed;(ImportDefinition);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.parsing;SourceExtractor;true;extractSource;(Object,Resource);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory.support;AbstractAutowireCapableBeanFactory;true;AbstractAutowireCapableBeanFactory;(BeanFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;AbstractAutowireCapableBeanFactory;true;setInstantiationStrategy;(InstantiationStrategy);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;AbstractAutowireCapableBeanFactory;true;setParameterNameDiscoverer;(ParameterNameDiscoverer);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;AbstractBeanDefinition;true;addQualifier;(AutowireCandidateQualifier);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;AbstractBeanDefinition;true;copyQualifiersFrom;(AbstractBeanDefinition);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;AbstractBeanDefinition;true;getInstanceSupplier;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.support;AbstractBeanDefinition;true;getMethodOverrides;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.support;AbstractBeanDefinition;true;getQualifier;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.support;AbstractBeanDefinition;true;getQualifiers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.support;AbstractBeanDefinition;true;getResource;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.support;AbstractBeanDefinition;true;overrideFrom;(BeanDefinition);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;AbstractBeanDefinition;true;setConstructorArgumentValues;(ConstructorArgumentValues);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;AbstractBeanDefinition;true;setInstanceSupplier;(Supplier);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;AbstractBeanDefinition;true;setMethodOverrides;(MethodOverrides);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;AbstractBeanDefinition;true;setOriginatingBeanDefinition;(BeanDefinition);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;AbstractBeanDefinition;true;setPropertyValues;(MutablePropertyValues);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;AbstractBeanDefinition;true;setResource;(Resource);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;AbstractBeanDefinition;true;setResourceDescription;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;AbstractBeanDefinition;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.support;AbstractBeanDefinitionReader;true;getBeanFactory;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.support;AbstractBeanDefinitionReader;true;loadBeanDefinitions;(String,Set);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;AbstractBeanDefinitionReader;true;setBeanClassLoader;(ClassLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;AbstractBeanDefinitionReader;true;setBeanNameGenerator;(BeanNameGenerator);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;AbstractBeanDefinitionReader;true;setEnvironment;(Environment);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;AbstractBeanDefinitionReader;true;setResourceLoader;(ResourceLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;AbstractBeanFactory;true;AbstractBeanFactory;(BeanFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;AbstractBeanFactory;true;addBeanPostProcessors;(Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;AbstractBeanFactory;true;getBean;(String,Class,Object[]);;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.support;AbstractBeanFactory;true;getBean;(String,Class,Object[]);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;AbstractBeanFactory;true;getBean;(String,Class,Object[]);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory.support;AbstractBeanFactory;true;getBean;(String,Class,Object[]);;Argument[2];Argument[-1];taint",
        "org.springframework.beans.factory.support;AbstractBeanFactory;true;getBeanDefinition;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.support;AbstractBeanFactory;true;getBeanPostProcessors;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.support;AbstractBeanFactory;true;getCustomEditors;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.support;AbstractBeanFactory;true;getPropertyEditorRegistrars;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.support;AbstractBeanFactory;true;isBeanNameInUse;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;AbstractBeanFactory;true;setSecurityContextProvider;(SecurityContextProvider);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;AutowireCandidateQualifier;true;AutowireCandidateQualifier;(Class,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory.support;AutowireCandidateQualifier;true;AutowireCandidateQualifier;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;AutowireCandidateQualifier;true;AutowireCandidateQualifier;(String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;AutowireCandidateQualifier;true;AutowireCandidateQualifier;(String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory.support;AutowireCandidateQualifier;true;getTypeName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.support;AutowireCandidateResolver;true;cloneIfNecessary;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.support;AutowireCandidateResolver;true;cloneIfNecessary;();;Argument[-1];ReturnValue;value",
        "org.springframework.beans.factory.support;AutowireCandidateResolver;true;isAutowireCandidate;(BeanDefinitionHolder,DependencyDescriptor);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;BeanDefinitionBuilder;false;addAutowiredProperty;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.beans.factory.support;BeanDefinitionBuilder;false;addAutowiredProperty;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;BeanDefinitionBuilder;false;addAutowiredProperty;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory.support;BeanDefinitionBuilder;false;addConstructorArgReference;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.beans.factory.support;BeanDefinitionBuilder;false;addConstructorArgReference;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;BeanDefinitionBuilder;false;addConstructorArgReference;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory.support;BeanDefinitionBuilder;false;addConstructorArgValue;(Object);;Argument[-1];ReturnValue;value",
        "org.springframework.beans.factory.support;BeanDefinitionBuilder;false;addConstructorArgValue;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;BeanDefinitionBuilder;false;addConstructorArgValue;(Object);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory.support;BeanDefinitionBuilder;false;addDependsOn;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.beans.factory.support;BeanDefinitionBuilder;false;addDependsOn;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;BeanDefinitionBuilder;false;addDependsOn;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory.support;BeanDefinitionBuilder;false;addPropertyReference;(String,String);;Argument[-1];ReturnValue;value",
        "org.springframework.beans.factory.support;BeanDefinitionBuilder;false;addPropertyReference;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;BeanDefinitionBuilder;false;addPropertyReference;(String,String);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory.support;BeanDefinitionBuilder;false;addPropertyReference;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory.support;BeanDefinitionBuilder;false;addPropertyReference;(String,String);;Argument[1];ReturnValue;taint",
        "org.springframework.beans.factory.support;BeanDefinitionBuilder;false;addPropertyValue;(String,Object);;Argument[-1];ReturnValue;value",
        "org.springframework.beans.factory.support;BeanDefinitionBuilder;false;addPropertyValue;(String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;BeanDefinitionBuilder;false;addPropertyValue;(String,Object);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory.support;BeanDefinitionBuilder;false;addPropertyValue;(String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory.support;BeanDefinitionBuilder;false;addPropertyValue;(String,Object);;Argument[1];ReturnValue;taint",
        "org.springframework.beans.factory.support;BeanDefinitionBuilder;false;applyCustomizers;(BeanDefinitionCustomizer[]);;Argument[-1];ReturnValue;value",
        "org.springframework.beans.factory.support;BeanDefinitionBuilder;false;childBeanDefinition;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory.support;BeanDefinitionBuilder;false;genericBeanDefinition;(Class,Supplier);;Argument[1];ReturnValue;taint",
        "org.springframework.beans.factory.support;BeanDefinitionBuilder;false;genericBeanDefinition;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory.support;BeanDefinitionBuilder;false;getBeanDefinition;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.support;BeanDefinitionBuilder;false;getRawBeanDefinition;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.support;BeanDefinitionBuilder;false;rootBeanDefinition;(Class,String);;Argument[1];ReturnValue;taint",
        "org.springframework.beans.factory.support;BeanDefinitionBuilder;false;rootBeanDefinition;(Class,Supplier);;Argument[1];ReturnValue;taint",
        "org.springframework.beans.factory.support;BeanDefinitionBuilder;false;rootBeanDefinition;(ResolvableType,Supplier);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory.support;BeanDefinitionBuilder;false;rootBeanDefinition;(ResolvableType,Supplier);;Argument[1];ReturnValue;taint",
        "org.springframework.beans.factory.support;BeanDefinitionBuilder;false;rootBeanDefinition;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory.support;BeanDefinitionBuilder;false;rootBeanDefinition;(String,String);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory.support;BeanDefinitionBuilder;false;rootBeanDefinition;(String,String);;Argument[1];ReturnValue;taint",
        "org.springframework.beans.factory.support;BeanDefinitionBuilder;false;setAbstract;(boolean);;Argument[-1];ReturnValue;value",
        "org.springframework.beans.factory.support;BeanDefinitionBuilder;false;setAutowireMode;(int);;Argument[-1];ReturnValue;value",
        "org.springframework.beans.factory.support;BeanDefinitionBuilder;false;setDependencyCheck;(int);;Argument[-1];ReturnValue;value",
        "org.springframework.beans.factory.support;BeanDefinitionBuilder;false;setDestroyMethodName;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.beans.factory.support;BeanDefinitionBuilder;false;setDestroyMethodName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;BeanDefinitionBuilder;false;setDestroyMethodName;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory.support;BeanDefinitionBuilder;false;setFactoryMethod;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.beans.factory.support;BeanDefinitionBuilder;false;setFactoryMethod;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;BeanDefinitionBuilder;false;setFactoryMethod;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory.support;BeanDefinitionBuilder;false;setFactoryMethodOnBean;(String,String);;Argument[-1];ReturnValue;value",
        "org.springframework.beans.factory.support;BeanDefinitionBuilder;false;setFactoryMethodOnBean;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;BeanDefinitionBuilder;false;setFactoryMethodOnBean;(String,String);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory.support;BeanDefinitionBuilder;false;setFactoryMethodOnBean;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory.support;BeanDefinitionBuilder;false;setFactoryMethodOnBean;(String,String);;Argument[1];ReturnValue;taint",
        "org.springframework.beans.factory.support;BeanDefinitionBuilder;false;setInitMethodName;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.beans.factory.support;BeanDefinitionBuilder;false;setInitMethodName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;BeanDefinitionBuilder;false;setInitMethodName;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory.support;BeanDefinitionBuilder;false;setLazyInit;(boolean);;Argument[-1];ReturnValue;value",
        "org.springframework.beans.factory.support;BeanDefinitionBuilder;false;setParentName;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.beans.factory.support;BeanDefinitionBuilder;false;setParentName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;BeanDefinitionBuilder;false;setParentName;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory.support;BeanDefinitionBuilder;false;setPrimary;(boolean);;Argument[-1];ReturnValue;value",
        "org.springframework.beans.factory.support;BeanDefinitionBuilder;false;setRole;(int);;Argument[-1];ReturnValue;value",
        "org.springframework.beans.factory.support;BeanDefinitionBuilder;false;setScope;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.beans.factory.support;BeanDefinitionBuilder;false;setScope;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;BeanDefinitionBuilder;false;setScope;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory.support;BeanDefinitionBuilder;false;setSynthetic;(boolean);;Argument[-1];ReturnValue;value",
        "org.springframework.beans.factory.support;BeanDefinitionDefaults;true;getDestroyMethodName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.support;BeanDefinitionDefaults;true;getInitMethodName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.support;BeanDefinitionDefaults;true;setDestroyMethodName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;BeanDefinitionDefaults;true;setInitMethodName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;BeanDefinitionOverrideException;true;BeanDefinitionOverrideException;(String,BeanDefinition,BeanDefinition);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;BeanDefinitionOverrideException;true;BeanDefinitionOverrideException;(String,BeanDefinition,BeanDefinition);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory.support;BeanDefinitionOverrideException;true;BeanDefinitionOverrideException;(String,BeanDefinition,BeanDefinition);;Argument[2];Argument[-1];taint",
        "org.springframework.beans.factory.support;BeanDefinitionOverrideException;true;getBeanDefinition;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.support;BeanDefinitionOverrideException;true;getExistingDefinition;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.support;BeanDefinitionReader;true;getBeanClassLoader;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.support;BeanDefinitionReader;true;getBeanNameGenerator;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.support;BeanDefinitionReader;true;getRegistry;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.support;BeanDefinitionReader;true;getResourceLoader;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.support;BeanDefinitionReader;true;loadBeanDefinitions;(Resource);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;BeanDefinitionReader;true;loadBeanDefinitions;(Resource[]);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;BeanDefinitionReader;true;loadBeanDefinitions;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;BeanDefinitionReader;true;loadBeanDefinitions;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;BeanDefinitionReaderUtils;true;createBeanDefinition;(String,String,ClassLoader);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory.support;BeanDefinitionReaderUtils;true;createBeanDefinition;(String,String,ClassLoader);;Argument[1];ReturnValue;taint",
        "org.springframework.beans.factory.support;BeanDefinitionReaderUtils;true;generateBeanName;(BeanDefinition,BeanDefinitionRegistry);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory.support;BeanDefinitionReaderUtils;true;generateBeanName;(BeanDefinition,BeanDefinitionRegistry,boolean);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory.support;BeanDefinitionReaderUtils;true;registerWithGeneratedName;(AbstractBeanDefinition,BeanDefinitionRegistry);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory.support;BeanDefinitionReaderUtils;true;uniqueBeanName;(String,BeanDefinitionRegistry);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory.support;BeanDefinitionRegistry;true;getBeanDefinition;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.support;BeanDefinitionRegistry;true;getBeanDefinitionNames;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.support;BeanDefinitionRegistry;true;isBeanNameInUse;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;BeanDefinitionRegistry;true;registerBeanDefinition;(String,BeanDefinition);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;BeanDefinitionRegistry;true;registerBeanDefinition;(String,BeanDefinition);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory.support;BeanDefinitionRegistryPostProcessor;true;postProcessBeanDefinitionRegistry;(BeanDefinitionRegistry);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;BeanNameGenerator;true;generateBeanName;(BeanDefinition,BeanDefinitionRegistry);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory.support;ChildBeanDefinition;true;ChildBeanDefinition;(ChildBeanDefinition);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;ChildBeanDefinition;true;ChildBeanDefinition;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;ChildBeanDefinition;true;ChildBeanDefinition;(String,Class,ConstructorArgumentValues,MutablePropertyValues);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;ChildBeanDefinition;true;ChildBeanDefinition;(String,Class,ConstructorArgumentValues,MutablePropertyValues);;Argument[2];Argument[-1];taint",
        "org.springframework.beans.factory.support;ChildBeanDefinition;true;ChildBeanDefinition;(String,Class,ConstructorArgumentValues,MutablePropertyValues);;Argument[3];Argument[-1];taint",
        "org.springframework.beans.factory.support;ChildBeanDefinition;true;ChildBeanDefinition;(String,ConstructorArgumentValues,MutablePropertyValues);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;ChildBeanDefinition;true;ChildBeanDefinition;(String,ConstructorArgumentValues,MutablePropertyValues);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory.support;ChildBeanDefinition;true;ChildBeanDefinition;(String,ConstructorArgumentValues,MutablePropertyValues);;Argument[2];Argument[-1];taint",
        "org.springframework.beans.factory.support;ChildBeanDefinition;true;ChildBeanDefinition;(String,MutablePropertyValues);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;ChildBeanDefinition;true;ChildBeanDefinition;(String,MutablePropertyValues);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory.support;ChildBeanDefinition;true;ChildBeanDefinition;(String,String,ConstructorArgumentValues,MutablePropertyValues);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;ChildBeanDefinition;true;ChildBeanDefinition;(String,String,ConstructorArgumentValues,MutablePropertyValues);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory.support;ChildBeanDefinition;true;ChildBeanDefinition;(String,String,ConstructorArgumentValues,MutablePropertyValues);;Argument[2];Argument[-1];taint",
        "org.springframework.beans.factory.support;ChildBeanDefinition;true;ChildBeanDefinition;(String,String,ConstructorArgumentValues,MutablePropertyValues);;Argument[3];Argument[-1];taint",
        "org.springframework.beans.factory.support;ChildBeanDefinition;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.support;DefaultListableBeanFactory;true;DefaultListableBeanFactory;(BeanFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;DefaultListableBeanFactory;true;doResolveDependency;(DependencyDescriptor,String,Set,TypeConverter);;Argument[-1];Element of Argument[2];taint",
        "org.springframework.beans.factory.support;DefaultListableBeanFactory;true;doResolveDependency;(DependencyDescriptor,String,Set,TypeConverter);;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.support;DefaultListableBeanFactory;true;doResolveDependency;(DependencyDescriptor,String,Set,TypeConverter);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory.support;DefaultListableBeanFactory;true;getAutowireCandidateResolver;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.support;DefaultListableBeanFactory;true;getDependencyComparator;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.support;DefaultListableBeanFactory;true;getSerializationId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.support;DefaultListableBeanFactory;true;setAutowireCandidateResolver;(AutowireCandidateResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;DefaultListableBeanFactory;true;setDependencyComparator;(Comparator);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;DefaultListableBeanFactory;true;setSerializationId;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;DefaultListableBeanFactory;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.support;DefaultSingletonBeanRegistry;true;getDependenciesForBean;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.support;DefaultSingletonBeanRegistry;true;getDependentBeans;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.support;DefaultSingletonBeanRegistry;true;getSingleton;(String,ObjectFactory);;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.support;DefaultSingletonBeanRegistry;true;getSingleton;(String,ObjectFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;DefaultSingletonBeanRegistry;true;registerDisposableBean;(String,DisposableBean);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;DefaultSingletonBeanRegistry;true;registerDisposableBean;(String,DisposableBean);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory.support;DefaultSingletonBeanRegistry;true;setCurrentlyInCreation;(String,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;FactoryBeanRegistrySupport;true;getAccessControlContext;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.support;GenericBeanDefinition;true;GenericBeanDefinition;(BeanDefinition);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;GenericBeanDefinition;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.support;LookupOverride;true;LookupOverride;(Method,String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;LookupOverride;true;LookupOverride;(Method,String);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory.support;LookupOverride;true;LookupOverride;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;LookupOverride;true;LookupOverride;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory.support;LookupOverride;true;getBeanName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.support;LookupOverride;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.support;ManagedArray;true;ManagedArray;(String,int);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;ManagedList;true;getElementTypeName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.support;ManagedList;true;setElementTypeName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;ManagedList;true;setSource;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;ManagedMap;true;getKeyTypeName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.support;ManagedMap;true;getValueTypeName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.support;ManagedMap;true;setKeyTypeName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;ManagedMap;true;setSource;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;ManagedMap;true;setValueTypeName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;ManagedProperties;true;setSource;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;ManagedSet;true;getElementTypeName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.support;ManagedSet;true;setElementTypeName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;ManagedSet;true;setSource;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;MergedBeanDefinitionPostProcessor;true;postProcessMergedBeanDefinition;(RootBeanDefinition,Class,String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;MergedBeanDefinitionPostProcessor;true;postProcessMergedBeanDefinition;(RootBeanDefinition,Class,String);;Argument[2];Argument[-1];taint",
        "org.springframework.beans.factory.support;MethodOverride;true;getMethodName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.support;MethodOverride;true;setSource;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;MethodOverrides;true;MethodOverrides;(MethodOverrides);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;MethodOverrides;true;addOverride;(MethodOverride);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;MethodOverrides;true;addOverrides;(MethodOverrides);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;MethodOverrides;true;getOverride;(Method);;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.support;MethodOverrides;true;getOverrides;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.support;PropertiesBeanDefinitionReader;true;PropertiesBeanDefinitionReader;(BeanDefinitionRegistry);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;PropertiesBeanDefinitionReader;true;getDefaultParentBean;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.support;PropertiesBeanDefinitionReader;true;getPropertiesPersister;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.support;PropertiesBeanDefinitionReader;true;loadBeanDefinitions;(Resource,String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;PropertiesBeanDefinitionReader;true;registerBeanDefinitions;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;PropertiesBeanDefinitionReader;true;registerBeanDefinitions;(Map,String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;PropertiesBeanDefinitionReader;true;registerBeanDefinitions;(Map,String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;PropertiesBeanDefinitionReader;true;setDefaultParentBean;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;PropertiesBeanDefinitionReader;true;setPropertiesPersister;(PropertiesPersister);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;ReplaceOverride;true;ReplaceOverride;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;ReplaceOverride;true;ReplaceOverride;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory.support;ReplaceOverride;true;addTypeIdentifier;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;ReplaceOverride;true;getMethodReplacerBeanName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.support;ReplaceOverride;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.support;RootBeanDefinition;true;RootBeanDefinition;(Class,ConstructorArgumentValues,MutablePropertyValues);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory.support;RootBeanDefinition;true;RootBeanDefinition;(Class,ConstructorArgumentValues,MutablePropertyValues);;Argument[2];Argument[-1];taint",
        "org.springframework.beans.factory.support;RootBeanDefinition;true;RootBeanDefinition;(Class,String,Supplier);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory.support;RootBeanDefinition;true;RootBeanDefinition;(Class,String,Supplier);;Argument[2];Argument[-1];taint",
        "org.springframework.beans.factory.support;RootBeanDefinition;true;RootBeanDefinition;(Class,Supplier);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory.support;RootBeanDefinition;true;RootBeanDefinition;(RootBeanDefinition);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;RootBeanDefinition;true;RootBeanDefinition;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;RootBeanDefinition;true;RootBeanDefinition;(String,ConstructorArgumentValues,MutablePropertyValues);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;RootBeanDefinition;true;RootBeanDefinition;(String,ConstructorArgumentValues,MutablePropertyValues);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory.support;RootBeanDefinition;true;RootBeanDefinition;(String,ConstructorArgumentValues,MutablePropertyValues);;Argument[2];Argument[-1];taint",
        "org.springframework.beans.factory.support;RootBeanDefinition;true;getDecoratedDefinition;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.support;RootBeanDefinition;true;getQualifiedElement;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.support;RootBeanDefinition;true;getResolvedFactoryMethod;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.support;RootBeanDefinition;true;registerExternallyManagedConfigMember;(Member);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;RootBeanDefinition;true;registerExternallyManagedDestroyMethod;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;RootBeanDefinition;true;registerExternallyManagedInitMethod;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;RootBeanDefinition;true;setDecoratedDefinition;(BeanDefinitionHolder);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;RootBeanDefinition;true;setNonUniqueFactoryMethodName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;RootBeanDefinition;true;setQualifiedElement;(AnnotatedElement);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;RootBeanDefinition;true;setResolvedFactoryMethod;(Method);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;RootBeanDefinition;true;setTargetType;(ResolvableType);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;RootBeanDefinition;true;setUniqueFactoryMethodName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;RootBeanDefinition;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.support;ScopeNotActiveException;true;ScopeNotActiveException;(String,String,IllegalStateException);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;SecurityContextProvider;true;getAccessControlContext;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.support;SimpleSecurityContextProvider;true;SimpleSecurityContextProvider;(AccessControlContext);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;StaticListableBeanFactory;true;StaticListableBeanFactory;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;StaticListableBeanFactory;true;addBean;(String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.support;StaticListableBeanFactory;true;addBean;(String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory.wiring;BeanConfigurerSupport;true;setBeanWiringInfoResolver;(BeanWiringInfoResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.wiring;BeanWiringInfo;true;BeanWiringInfo;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.wiring;BeanWiringInfo;true;BeanWiringInfo;(String,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.wiring;BeanWiringInfo;true;getBeanName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.xml;BeanDefinitionDecorator;true;decorate;(Node,BeanDefinitionHolder,ParserContext);;Argument[1];ReturnValue;taint",
        "org.springframework.beans.factory.xml;BeanDefinitionDocumentReader;true;registerBeanDefinitions;(Document,XmlReaderContext);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory.xml;BeanDefinitionParser;true;parse;(Element,ParserContext);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory.xml;BeanDefinitionParserDelegate;true;BeanDefinitionParserDelegate;(XmlReaderContext);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.xml;BeanDefinitionParserDelegate;true;decorateBeanDefinitionIfRequired;(Element,BeanDefinitionHolder);;Argument[1];ReturnValue;taint",
        "org.springframework.beans.factory.xml;BeanDefinitionParserDelegate;true;decorateBeanDefinitionIfRequired;(Element,BeanDefinitionHolder,BeanDefinition);;Argument[1];ReturnValue;taint",
        "org.springframework.beans.factory.xml;BeanDefinitionParserDelegate;true;decorateIfRequired;(Node,BeanDefinitionHolder,BeanDefinition);;Argument[1];ReturnValue;taint",
        "org.springframework.beans.factory.xml;BeanDefinitionParserDelegate;true;getAutowireCandidatePatterns;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.xml;BeanDefinitionParserDelegate;true;getDefaults;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.xml;BeanDefinitionParserDelegate;true;getReaderContext;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.xml;BeanDefinitionParserDelegate;true;initDefaults;(Element);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.xml;BeanDefinitionParserDelegate;true;initDefaults;(Element,BeanDefinitionParserDelegate);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.xml;BeanDefinitionParserDelegate;true;parseArrayElement;(Element,BeanDefinition);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory.xml;BeanDefinitionParserDelegate;true;parseArrayElement;(Element,BeanDefinition);;Argument[1];ReturnValue;taint",
        "org.springframework.beans.factory.xml;BeanDefinitionParserDelegate;true;parseBeanDefinitionAttributes;(Element,String,BeanDefinition,AbstractBeanDefinition);;Argument[2];ReturnValue;taint",
        "org.springframework.beans.factory.xml;BeanDefinitionParserDelegate;true;parseBeanDefinitionAttributes;(Element,String,BeanDefinition,AbstractBeanDefinition);;Argument[3];ReturnValue;taint",
        "org.springframework.beans.factory.xml;BeanDefinitionParserDelegate;true;parseBeanDefinitionElement;(Element);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory.xml;BeanDefinitionParserDelegate;true;parseBeanDefinitionElement;(Element,BeanDefinition);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory.xml;BeanDefinitionParserDelegate;true;parseBeanDefinitionElement;(Element,BeanDefinition);;Argument[1];ReturnValue;taint",
        "org.springframework.beans.factory.xml;BeanDefinitionParserDelegate;true;parseBeanDefinitionElement;(Element,String,BeanDefinition);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory.xml;BeanDefinitionParserDelegate;true;parseBeanDefinitionElement;(Element,String,BeanDefinition);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory.xml;BeanDefinitionParserDelegate;true;parseBeanDefinitionElement;(Element,String,BeanDefinition);;Argument[2];ReturnValue;taint",
        "org.springframework.beans.factory.xml;BeanDefinitionParserDelegate;true;parseCustomElement;(Element);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory.xml;BeanDefinitionParserDelegate;true;parseCustomElement;(Element,BeanDefinition);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory.xml;BeanDefinitionParserDelegate;true;parseCustomElement;(Element,BeanDefinition);;Argument[1];ReturnValue;taint",
        "org.springframework.beans.factory.xml;BeanDefinitionParserDelegate;true;parseIdRefElement;(Element);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory.xml;BeanDefinitionParserDelegate;true;parseListElement;(Element,BeanDefinition);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory.xml;BeanDefinitionParserDelegate;true;parseListElement;(Element,BeanDefinition);;Argument[1];ReturnValue;taint",
        "org.springframework.beans.factory.xml;BeanDefinitionParserDelegate;true;parseMapElement;(Element,BeanDefinition);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory.xml;BeanDefinitionParserDelegate;true;parseMapElement;(Element,BeanDefinition);;Argument[1];ReturnValue;taint",
        "org.springframework.beans.factory.xml;BeanDefinitionParserDelegate;true;parsePropertySubElement;(Element,BeanDefinition);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory.xml;BeanDefinitionParserDelegate;true;parsePropertySubElement;(Element,BeanDefinition);;Argument[1];ReturnValue;taint",
        "org.springframework.beans.factory.xml;BeanDefinitionParserDelegate;true;parsePropertySubElement;(Element,BeanDefinition,String);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory.xml;BeanDefinitionParserDelegate;true;parsePropertySubElement;(Element,BeanDefinition,String);;Argument[1];ReturnValue;taint",
        "org.springframework.beans.factory.xml;BeanDefinitionParserDelegate;true;parsePropertySubElement;(Element,BeanDefinition,String);;Argument[2];ReturnValue;taint",
        "org.springframework.beans.factory.xml;BeanDefinitionParserDelegate;true;parsePropertyValue;(Element,BeanDefinition,String);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory.xml;BeanDefinitionParserDelegate;true;parsePropertyValue;(Element,BeanDefinition,String);;Argument[1];ReturnValue;taint",
        "org.springframework.beans.factory.xml;BeanDefinitionParserDelegate;true;parsePropsElement;(Element);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory.xml;BeanDefinitionParserDelegate;true;parseSetElement;(Element,BeanDefinition);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory.xml;BeanDefinitionParserDelegate;true;parseSetElement;(Element,BeanDefinition);;Argument[1];ReturnValue;taint",
        "org.springframework.beans.factory.xml;BeanDefinitionParserDelegate;true;parseValueElement;(Element,String);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory.xml;BeanDefinitionParserDelegate;true;parseValueElement;(Element,String);;Argument[1];ReturnValue;taint",
        "org.springframework.beans.factory.xml;DefaultNamespaceHandlerResolver;true;DefaultNamespaceHandlerResolver;(ClassLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.xml;DefaultNamespaceHandlerResolver;true;DefaultNamespaceHandlerResolver;(ClassLoader,String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.xml;DefaultNamespaceHandlerResolver;true;DefaultNamespaceHandlerResolver;(ClassLoader,String);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory.xml;DefaultNamespaceHandlerResolver;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.xml;DelegatingEntityResolver;true;DelegatingEntityResolver;(ClassLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.xml;DelegatingEntityResolver;true;DelegatingEntityResolver;(EntityResolver,EntityResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.xml;DelegatingEntityResolver;true;DelegatingEntityResolver;(EntityResolver,EntityResolver);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory.xml;DelegatingEntityResolver;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.xml;DocumentDefaultsDefinition;true;getAutowire;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.xml;DocumentDefaultsDefinition;true;getAutowireCandidates;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.xml;DocumentDefaultsDefinition;true;getDestroyMethod;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.xml;DocumentDefaultsDefinition;true;getInitMethod;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.xml;DocumentDefaultsDefinition;true;getLazyInit;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.xml;DocumentDefaultsDefinition;true;getMerge;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.xml;DocumentDefaultsDefinition;true;setAutowire;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.xml;DocumentDefaultsDefinition;true;setAutowireCandidates;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.xml;DocumentDefaultsDefinition;true;setDestroyMethod;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.xml;DocumentDefaultsDefinition;true;setInitMethod;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.xml;DocumentDefaultsDefinition;true;setLazyInit;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.xml;DocumentDefaultsDefinition;true;setMerge;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.xml;DocumentDefaultsDefinition;true;setSource;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.xml;NamespaceHandler;true;decorate;(Node,BeanDefinitionHolder,ParserContext);;Argument[1];ReturnValue;taint",
        "org.springframework.beans.factory.xml;NamespaceHandler;true;parse;(Element,ParserContext);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory.xml;NamespaceHandlerResolver;true;resolve;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.xml;ParserContext;false;ParserContext;(XmlReaderContext,BeanDefinitionParserDelegate);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.xml;ParserContext;false;ParserContext;(XmlReaderContext,BeanDefinitionParserDelegate);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory.xml;ParserContext;false;ParserContext;(XmlReaderContext,BeanDefinitionParserDelegate,BeanDefinition);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.xml;ParserContext;false;ParserContext;(XmlReaderContext,BeanDefinitionParserDelegate,BeanDefinition);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory.xml;ParserContext;false;ParserContext;(XmlReaderContext,BeanDefinitionParserDelegate,BeanDefinition);;Argument[2];Argument[-1];taint",
        "org.springframework.beans.factory.xml;ParserContext;false;extractSource;(Object);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory.xml;ParserContext;false;getContainingBeanDefinition;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.xml;ParserContext;false;getContainingComponent;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.xml;ParserContext;false;getDelegate;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.xml;ParserContext;false;getReaderContext;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.xml;ParserContext;false;getRegistry;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.xml;ParserContext;false;popContainingComponent;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.xml;ParserContext;false;pushContainingComponent;(CompositeComponentDefinition);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.xml;ParserContext;false;registerBeanComponent;(BeanComponentDefinition);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.xml;ParserContext;false;registerComponent;(ComponentDefinition);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.xml;PluggableSchemaResolver;true;PluggableSchemaResolver;(ClassLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.xml;PluggableSchemaResolver;true;PluggableSchemaResolver;(ClassLoader,String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.xml;PluggableSchemaResolver;true;PluggableSchemaResolver;(ClassLoader,String);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory.xml;PluggableSchemaResolver;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.xml;ResourceEntityResolver;true;ResourceEntityResolver;(ResourceLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.xml;XmlBeanDefinitionReader;true;XmlBeanDefinitionReader;(BeanDefinitionRegistry);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.xml;XmlBeanDefinitionReader;true;createReaderContext;(Resource);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory.xml;XmlBeanDefinitionReader;true;getNamespaceHandlerResolver;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.xml;XmlBeanDefinitionReader;true;setDocumentLoader;(DocumentLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.xml;XmlBeanDefinitionReader;true;setEntityResolver;(EntityResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.xml;XmlBeanDefinitionReader;true;setErrorHandler;(ErrorHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.xml;XmlBeanDefinitionReader;true;setEventListener;(ReaderEventListener);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.xml;XmlBeanDefinitionReader;true;setNamespaceHandlerResolver;(NamespaceHandlerResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.xml;XmlBeanDefinitionReader;true;setProblemReporter;(ProblemReporter);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.xml;XmlBeanDefinitionReader;true;setSourceExtractor;(SourceExtractor);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.xml;XmlBeanDefinitionStoreException;true;XmlBeanDefinitionStoreException;(String,String,SAXException);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.xml;XmlBeanFactory;true;XmlBeanFactory;(Resource,BeanFactory);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory.xml;XmlReaderContext;true;XmlReaderContext;(Resource,ProblemReporter,ReaderEventListener,SourceExtractor,XmlBeanDefinitionReader,NamespaceHandlerResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory.xml;XmlReaderContext;true;XmlReaderContext;(Resource,ProblemReporter,ReaderEventListener,SourceExtractor,XmlBeanDefinitionReader,NamespaceHandlerResolver);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory.xml;XmlReaderContext;true;XmlReaderContext;(Resource,ProblemReporter,ReaderEventListener,SourceExtractor,XmlBeanDefinitionReader,NamespaceHandlerResolver);;Argument[2];Argument[-1];taint",
        "org.springframework.beans.factory.xml;XmlReaderContext;true;XmlReaderContext;(Resource,ProblemReporter,ReaderEventListener,SourceExtractor,XmlBeanDefinitionReader,NamespaceHandlerResolver);;Argument[3];Argument[-1];taint",
        "org.springframework.beans.factory.xml;XmlReaderContext;true;XmlReaderContext;(Resource,ProblemReporter,ReaderEventListener,SourceExtractor,XmlBeanDefinitionReader,NamespaceHandlerResolver);;Argument[4];Argument[-1];taint",
        "org.springframework.beans.factory.xml;XmlReaderContext;true;XmlReaderContext;(Resource,ProblemReporter,ReaderEventListener,SourceExtractor,XmlBeanDefinitionReader,NamespaceHandlerResolver);;Argument[5];Argument[-1];taint",
        "org.springframework.beans.factory.xml;XmlReaderContext;true;generateBeanName;(BeanDefinition);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory.xml;XmlReaderContext;true;getBeanClassLoader;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.xml;XmlReaderContext;true;getEnvironment;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.xml;XmlReaderContext;true;getNamespaceHandlerResolver;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.xml;XmlReaderContext;true;getReader;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.xml;XmlReaderContext;true;getRegistry;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.xml;XmlReaderContext;true;getResourceLoader;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory.xml;XmlReaderContext;true;registerWithGeneratedName;(BeanDefinition);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory;BeanClassLoaderAware;true;setBeanClassLoader;(ClassLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory;BeanCreationException;true;BeanCreationException;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory;BeanCreationException;true;BeanCreationException;(String,String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory;BeanCreationException;true;BeanCreationException;(String,String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory;BeanCreationException;true;BeanCreationException;(String,String,String,Throwable);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory;BeanCreationException;true;BeanCreationException;(String,String,String,Throwable);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory;BeanCreationException;true;BeanCreationException;(String,String,Throwable);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory;BeanCreationException;true;addRelatedCause;(Throwable);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory;BeanCreationException;true;getBeanName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory;BeanCreationException;true;getRelatedCauses;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory;BeanCreationException;true;getResourceDescription;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory;BeanCreationException;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory;BeanCreationNotAllowedException;true;BeanCreationNotAllowedException;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory;BeanCurrentlyInCreationException;true;BeanCurrentlyInCreationException;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory;BeanCurrentlyInCreationException;true;BeanCurrentlyInCreationException;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory;BeanDefinitionStoreException;true;BeanDefinitionStoreException;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory;BeanDefinitionStoreException;true;BeanDefinitionStoreException;(String,String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory;BeanDefinitionStoreException;true;BeanDefinitionStoreException;(String,String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory;BeanDefinitionStoreException;true;BeanDefinitionStoreException;(String,String,String,Throwable);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory;BeanDefinitionStoreException;true;BeanDefinitionStoreException;(String,String,String,Throwable);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory;BeanDefinitionStoreException;true;BeanDefinitionStoreException;(String,String,Throwable);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory;BeanDefinitionStoreException;true;getBeanName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory;BeanDefinitionStoreException;true;getResourceDescription;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory;BeanFactory;true;containsBean;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory;BeanFactory;true;getAliases;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory;BeanFactory;true;getAliases;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory;BeanFactory;true;getBean;(Class);;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory;BeanFactory;true;getBean;(Class,Object[]);;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory;BeanFactory;true;getBean;(Class,Object[]);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory;BeanFactory;true;getBean;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory;BeanFactory;true;getBean;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory;BeanFactory;true;getBean;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory;BeanFactory;true;getBean;(String,Class);;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory;BeanFactory;true;getBean;(String,Class);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory;BeanFactory;true;getBean;(String,Class);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory;BeanFactory;true;getBean;(String,Object[]);;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory;BeanFactory;true;getBean;(String,Object[]);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory;BeanFactory;true;getBean;(String,Object[]);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory;BeanFactory;true;getBean;(String,Object[]);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory;BeanFactory;true;getType;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory;BeanFactory;true;getType;(String,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory;BeanFactory;true;isPrototype;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory;BeanFactory;true;isSingleton;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory;BeanFactory;true;isTypeMatch;(String,Class);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory;BeanFactory;true;isTypeMatch;(String,ResolvableType);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory;BeanFactoryAware;true;setBeanFactory;(BeanFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory;BeanFactoryUtils;true;beanOfType;(ListableBeanFactory,Class);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory;BeanFactoryUtils;true;beanOfType;(ListableBeanFactory,Class,boolean,boolean);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory;BeanFactoryUtils;true;beanOfTypeIncludingAncestors;(ListableBeanFactory,Class);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory;BeanFactoryUtils;true;beanOfTypeIncludingAncestors;(ListableBeanFactory,Class,boolean,boolean);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory;BeanFactoryUtils;true;beansOfTypeIncludingAncestors;(ListableBeanFactory,Class);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory;BeanFactoryUtils;true;beansOfTypeIncludingAncestors;(ListableBeanFactory,Class,boolean,boolean);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory;BeanFactoryUtils;true;originalBeanName;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory;BeanFactoryUtils;true;transformedBeanName;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory;BeanIsAbstractException;true;BeanIsAbstractException;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory;BeanIsNotAFactoryException;true;BeanIsNotAFactoryException;(String,Class);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory;BeanNameAware;true;setBeanName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory;BeanNotOfRequiredTypeException;true;BeanNotOfRequiredTypeException;(String,Class,Class);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory;BeanNotOfRequiredTypeException;true;getBeanName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory;CannotLoadBeanClassException;true;CannotLoadBeanClassException;(String,String,String,ClassNotFoundException);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory;CannotLoadBeanClassException;true;CannotLoadBeanClassException;(String,String,String,ClassNotFoundException);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory;CannotLoadBeanClassException;true;CannotLoadBeanClassException;(String,String,String,ClassNotFoundException);;Argument[2];Argument[-1];taint",
        "org.springframework.beans.factory;CannotLoadBeanClassException;true;CannotLoadBeanClassException;(String,String,String,LinkageError);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory;CannotLoadBeanClassException;true;CannotLoadBeanClassException;(String,String,String,LinkageError);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory;CannotLoadBeanClassException;true;CannotLoadBeanClassException;(String,String,String,LinkageError);;Argument[2];Argument[-1];taint",
        "org.springframework.beans.factory;CannotLoadBeanClassException;true;getBeanClassName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory;CannotLoadBeanClassException;true;getBeanName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory;CannotLoadBeanClassException;true;getResourceDescription;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory;HierarchicalBeanFactory;true;containsLocalBean;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory;HierarchicalBeanFactory;true;getParentBeanFactory;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory;InjectionPoint;true;InjectionPoint;(Field);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory;InjectionPoint;true;InjectionPoint;(MethodParameter);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory;InjectionPoint;true;getAnnotatedElement;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory;InjectionPoint;true;getAnnotation;(Class);;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory;InjectionPoint;true;getAnnotations;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory;InjectionPoint;true;getField;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory;InjectionPoint;true;getMember;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory;InjectionPoint;true;getMethodParameter;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory;ListableBeanFactory;true;findAnnotationOnBean;(String,Class);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory;ListableBeanFactory;true;findAnnotationOnBean;(String,Class);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.factory;ListableBeanFactory;true;getBeanDefinitionNames;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory;ListableBeanFactory;true;getBeanNamesForAnnotation;(Class);;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory;ListableBeanFactory;true;getBeanNamesForType;(Class);;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory;ListableBeanFactory;true;getBeanNamesForType;(Class,boolean,boolean);;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory;ListableBeanFactory;true;getBeanNamesForType;(ResolvableType);;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory;ListableBeanFactory;true;getBeanNamesForType;(ResolvableType,boolean,boolean);;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory;ListableBeanFactory;true;getBeansOfType;(Class);;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory;ListableBeanFactory;true;getBeansOfType;(Class,boolean,boolean);;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory;ListableBeanFactory;true;getBeansWithAnnotation;(Class);;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory;NamedBean;true;getBeanName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory;NoSuchBeanDefinitionException;true;NoSuchBeanDefinitionException;(ResolvableType);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory;NoSuchBeanDefinitionException;true;NoSuchBeanDefinitionException;(ResolvableType,String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory;NoSuchBeanDefinitionException;true;NoSuchBeanDefinitionException;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory;NoSuchBeanDefinitionException;true;NoSuchBeanDefinitionException;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory;NoSuchBeanDefinitionException;true;getBeanName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory;NoSuchBeanDefinitionException;true;getResolvableType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory;NoUniqueBeanDefinitionException;true;NoUniqueBeanDefinitionException;(Class,Collection);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory;NoUniqueBeanDefinitionException;true;NoUniqueBeanDefinitionException;(Class,String[]);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory;NoUniqueBeanDefinitionException;true;NoUniqueBeanDefinitionException;(ResolvableType,Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory;NoUniqueBeanDefinitionException;true;NoUniqueBeanDefinitionException;(ResolvableType,Collection);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory;NoUniqueBeanDefinitionException;true;NoUniqueBeanDefinitionException;(ResolvableType,String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory;NoUniqueBeanDefinitionException;true;NoUniqueBeanDefinitionException;(ResolvableType,String[]);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory;NoUniqueBeanDefinitionException;true;getBeanNamesFound;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.factory;UnsatisfiedDependencyException;true;UnsatisfiedDependencyException;(String,String,InjectionPoint,BeansException);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory;UnsatisfiedDependencyException;true;UnsatisfiedDependencyException;(String,String,InjectionPoint,BeansException);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory;UnsatisfiedDependencyException;true;UnsatisfiedDependencyException;(String,String,InjectionPoint,BeansException);;Argument[2];Argument[-1];taint",
        "org.springframework.beans.factory;UnsatisfiedDependencyException;true;UnsatisfiedDependencyException;(String,String,InjectionPoint,String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory;UnsatisfiedDependencyException;true;UnsatisfiedDependencyException;(String,String,InjectionPoint,String);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory;UnsatisfiedDependencyException;true;UnsatisfiedDependencyException;(String,String,InjectionPoint,String);;Argument[2];Argument[-1];taint",
        "org.springframework.beans.factory;UnsatisfiedDependencyException;true;UnsatisfiedDependencyException;(String,String,String,BeansException);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory;UnsatisfiedDependencyException;true;UnsatisfiedDependencyException;(String,String,String,BeansException);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory;UnsatisfiedDependencyException;true;UnsatisfiedDependencyException;(String,String,String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.factory;UnsatisfiedDependencyException;true;UnsatisfiedDependencyException;(String,String,String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.factory;UnsatisfiedDependencyException;true;getInjectionPoint;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.propertyeditors;ClassArrayEditor;true;ClassArrayEditor;(ClassLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.propertyeditors;ClassEditor;true;ClassEditor;(ClassLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.propertyeditors;CustomBooleanEditor;true;CustomBooleanEditor;(String,String,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.propertyeditors;CustomBooleanEditor;true;CustomBooleanEditor;(String,String,boolean);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.propertyeditors;CustomDateEditor;true;CustomDateEditor;(DateFormat,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.propertyeditors;CustomDateEditor;true;CustomDateEditor;(DateFormat,boolean,int);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.propertyeditors;CustomNumberEditor;true;CustomNumberEditor;(Class,NumberFormat,boolean);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.propertyeditors;FileEditor;true;FileEditor;(ResourceEditor);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.propertyeditors;InputSourceEditor;true;InputSourceEditor;(ResourceEditor);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.propertyeditors;InputStreamEditor;true;InputStreamEditor;(ResourceEditor);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.propertyeditors;PathEditor;true;PathEditor;(ResourceEditor);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.propertyeditors;ReaderEditor;true;ReaderEditor;(ResourceEditor);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.propertyeditors;StringArrayPropertyEditor;true;StringArrayPropertyEditor;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.propertyeditors;StringArrayPropertyEditor;true;StringArrayPropertyEditor;(String,String,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.propertyeditors;StringArrayPropertyEditor;true;StringArrayPropertyEditor;(String,String,boolean);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.propertyeditors;StringArrayPropertyEditor;true;StringArrayPropertyEditor;(String,String,boolean,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.propertyeditors;StringArrayPropertyEditor;true;StringArrayPropertyEditor;(String,String,boolean,boolean);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.propertyeditors;StringArrayPropertyEditor;true;StringArrayPropertyEditor;(String,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.propertyeditors;StringArrayPropertyEditor;true;StringArrayPropertyEditor;(String,boolean,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.propertyeditors;StringTrimmerEditor;true;StringTrimmerEditor;(String,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.propertyeditors;URIEditor;true;URIEditor;(ClassLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.propertyeditors;URIEditor;true;URIEditor;(ClassLoader,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.propertyeditors;URLEditor;true;URLEditor;(ResourceEditor);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.support;ArgumentConvertingMethodInvoker;true;getTypeConverter;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.support;ArgumentConvertingMethodInvoker;true;setTypeConverter;(TypeConverter);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.support;MutableSortDefinition;true;MutableSortDefinition;(String,boolean,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.support;MutableSortDefinition;true;setProperty;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.support;PagedListHolder;true;PagedListHolder;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.support;PagedListHolder;true;PagedListHolder;(List,SortDefinition);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.support;PagedListHolder;true;PagedListHolder;(List,SortDefinition);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.support;PagedListHolder;true;getPageList;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.support;PagedListHolder;true;getRefreshDate;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.support;PagedListHolder;true;getSort;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.support;PagedListHolder;true;getSource;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.support;PagedListHolder;true;setSort;(SortDefinition);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.support;PagedListHolder;true;setSource;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.support;PropertyComparator;true;PropertyComparator;(SortDefinition);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.support;PropertyComparator;true;PropertyComparator;(String,boolean,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.support;PropertyComparator;true;getSortDefinition;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.support;ResourceEditorRegistrar;true;ResourceEditorRegistrar;(ResourceLoader,PropertyResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.support;ResourceEditorRegistrar;true;ResourceEditorRegistrar;(ResourceLoader,PropertyResolver);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.support;SortDefinition;true;getProperty;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans.factory;DummyFactory;true;getBeanFactory;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans.factory;DummyFactory;true;getBeanName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans.factory;DummyFactory;true;getOtherTestBean;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans.factory;DummyFactory;true;setOtherTestBean;(TestBean);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;CollectingReaderEventListener;true;getAliases;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;CollectingReaderEventListener;true;getComponentDefinition;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;CollectingReaderEventListener;true;getDefaults;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;CollectingReaderEventListener;true;getImports;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;Colour;true;Colour;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;Colour;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;DependenciesBean;true;getBeanFactory;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;DependenciesBean;true;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;DependenciesBean;true;getSpouse;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;DependenciesBean;true;setName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;DependenciesBean;true;setSpouse;(TestBean);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;DerivedTestBean;true;DerivedTestBean;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;DerivedTestBean;true;create;(String[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;DerivedTestBean;true;setActualSpouse;(TestBean);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;DerivedTestBean;true;setSpouseRef;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;DummyBean;true;DummyBean;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;DummyBean;true;DummyBean;(String,Object,int);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;DummyBean;true;DummyBean;(String,Object,int);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;DummyBean;true;DummyBean;(String,TestBean);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;DummyBean;true;DummyBean;(String,TestBean);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;DummyBean;true;DummyBean;(String,int);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;DummyBean;true;DummyBean;(int,String);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;DummyBean;true;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;DummyBean;true;getSpouse;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;DummyBean;true;getValue;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;DummyFactory;true;getBeanFactory;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;DummyFactory;true;getBeanName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;DummyFactory;true;getOtherTestBean;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;DummyFactory;true;setOtherTestBean;(TestBean);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;Employee;true;Employee;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;Employee;true;getCompany;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;Employee;true;setCompany;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;FactoryMethods;true;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;FactoryMethods;true;getStringValue;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;FactoryMethods;true;getTestBean;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;FactoryMethods;true;newInstance;(TestBean);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;FactoryMethods;true;newInstance;(TestBean,int,String);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;FactoryMethods;true;newInstance;(TestBean,int,String);;Argument[2];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;FactoryMethods;true;setName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;FactoryMethods;true;setStringValue;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;GenericBean;true;GenericBean;(HashMap);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;GenericBean;true;GenericBean;(HashSet,Map);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;GenericBean;true;GenericBean;(Map,Map);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;GenericBean;true;GenericBean;(Map,Map);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;GenericBean;true;GenericBean;(Map,Resource);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;GenericBean;true;GenericBean;(Map,Resource);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;GenericBean;true;GenericBean;(Set,List);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;GenericBean;true;GenericBean;(boolean,Map);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;GenericBean;true;createInstance;(HashMap);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;GenericBean;true;createInstance;(HashSet,Map);;Element of Argument[1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;GenericBean;true;createInstance;(Map,Map);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;GenericBean;true;createInstance;(Map,Map);;Element of Argument[1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;GenericBean;true;createInstance;(Map,Resource);;Argument[1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;GenericBean;true;createInstance;(Map,Resource);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;GenericBean;true;createInstance;(Set,List);;Element of Argument[1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;GenericBean;true;createInstance;(boolean,Map);;Element of Argument[1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;GenericBean;true;getCollectionMap;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;GenericBean;true;getCustomEnumArray;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;GenericBean;true;getCustomEnumSet;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;GenericBean;true;getCustomEnumSetMismatch;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;GenericBean;true;getGenericListProperty;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;GenericBean;true;getGenericProperty;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;GenericBean;true;getListOfArrays;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;GenericBean;true;getListOfLists;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;GenericBean;true;getListOfMaps;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;GenericBean;true;getLongMap;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;GenericBean;true;getMapOfLists;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;GenericBean;true;getMapOfMaps;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;GenericBean;true;getNumberSet;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;GenericBean;true;getPlainMap;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;GenericBean;true;getResourceList;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;GenericBean;true;getShortMap;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;GenericBean;true;getStandardEnumMap;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;GenericBean;true;getStandardEnumSet;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;GenericBean;true;getTestBeanList;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;GenericBean;true;getTestBeanSet;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;GenericBean;true;setCollectionMap;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;GenericBean;true;setCustomEnumArray;(CustomEnum[]);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;GenericBean;true;setCustomEnumSet;(Set);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;GenericBean;true;setGenericListProperty;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;GenericBean;true;setGenericProperty;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;GenericBean;true;setListOfArrays;(ArrayList);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;GenericBean;true;setListOfLists;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;GenericBean;true;setListOfMaps;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;GenericBean;true;setLongMap;(HashMap);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;GenericBean;true;setMapOfLists;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;GenericBean;true;setMapOfMaps;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;GenericBean;true;setNumberSet;(Set);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;GenericBean;true;setResourceList;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;GenericBean;true;setShortMap;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;GenericBean;true;setStandardEnumMap;(EnumMap);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;GenericBean;true;setStandardEnumSet;(EnumSet);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;GenericBean;true;setTestBeanList;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;GenericBean;true;setTestBeanSet;(Set);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;HasMap;true;getClassArray;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;HasMap;true;getClassList;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;HasMap;true;getConcurrentSet;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;HasMap;true;getIdentityMap;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;HasMap;true;getMap;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;HasMap;true;getObjectArray;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;HasMap;true;getProps;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;HasMap;true;getSet;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;HasMap;true;setClassArray;(Class[]);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;HasMap;true;setClassList;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;HasMap;true;setConcurrentSet;(CopyOnWriteArraySet);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;HasMap;true;setIdentityMap;(IdentityHashMap);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;HasMap;true;setMap;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;HasMap;true;setObjectArray;(Object[]);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;HasMap;true;setProps;(Properties);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;HasMap;true;setSet;(Set);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;INestedTestBean;true;getCompany;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;ITestBean;true;getDoctor;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;ITestBean;true;getLawyer;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;ITestBean;true;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;ITestBean;true;getNestedIndexedBean;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;ITestBean;true;getSpouse;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;ITestBean;true;getSpouses;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;ITestBean;true;getStringArray;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;ITestBean;true;returnsThis;();;Argument[-1];ReturnValue;value",
        "org.springframework.beans.testfixture.beans;ITestBean;true;setName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;ITestBean;true;setSpouse;(ITestBean);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;ITestBean;true;setStringArray;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;IndexedTestBean;true;getArray;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;IndexedTestBean;true;getCollection;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;IndexedTestBean;true;getList;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;IndexedTestBean;true;getMap;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;IndexedTestBean;true;getSet;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;IndexedTestBean;true;getSortedMap;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;IndexedTestBean;true;getSortedSet;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;IndexedTestBean;true;setArray;(TestBean[]);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;IndexedTestBean;true;setCollection;(Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;IndexedTestBean;true;setList;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;IndexedTestBean;true;setMap;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;IndexedTestBean;true;setSet;(Set);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;IndexedTestBean;true;setSortedMap;(SortedMap);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;IndexedTestBean;true;setSortedSet;(SortedSet);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;LifecycleBean;true;getBeanName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;NestedTestBean;true;NestedTestBean;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;NestedTestBean;true;setCompany;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;NestedTestBean;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;Person;true;echo;(Object);;Argument[0];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;Person;true;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;Person;true;setName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;Pet;true;Pet;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;Pet;true;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;Pet;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;TestBean;true;TestBean;(ITestBean);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;TestBean;true;TestBean;(ITestBean,Properties);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;TestBean;true;TestBean;(ITestBean,Properties);;Argument[1];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;TestBean;true;TestBean;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;TestBean;true;TestBean;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;TestBean;true;TestBean;(Properties);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;TestBean;true;TestBean;(Set);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;TestBean;true;TestBean;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;TestBean;true;TestBean;(String,int);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;TestBean;true;getBeanFactory;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;TestBean;true;getBeanName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;TestBean;true;getCountry;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;TestBean;true;getDate;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;TestBean;true;getFavouriteColour;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;TestBean;true;getFriends;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;TestBean;true;getOtherColours;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;TestBean;true;getPets;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;TestBean;true;getSex;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;TestBean;true;getSomeList;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;TestBean;true;getSomeMap;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;TestBean;true;getSomeProperties;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;TestBean;true;getSomeSet;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;TestBean;true;getTouchy;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans.testfixture.beans;TestBean;true;setCountry;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;TestBean;true;setDate;(Date);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;TestBean;true;setDoctor;(INestedTestBean);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;TestBean;true;setFavouriteColour;(Colour);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;TestBean;true;setFriends;(Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;TestBean;true;setLawyer;(INestedTestBean);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;TestBean;true;setNestedIndexedBean;(IndexedTestBean);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;TestBean;true;setOtherColours;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;TestBean;true;setPets;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;TestBean;true;setSex;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;TestBean;true;setSomeList;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;TestBean;true;setSomeMap;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;TestBean;true;setSomeProperties;(Properties);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;TestBean;true;setSomeSet;(Set);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;TestBean;true;setTouchy;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans.testfixture.beans;TestBean;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans;AbstractNestablePropertyAccessor;true;getNestedPath;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans;AbstractNestablePropertyAccessor;true;getRootInstance;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans;AbstractNestablePropertyAccessor;true;getWrappedInstance;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans;AbstractNestablePropertyAccessor;true;setWrappedInstance;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.beans;AbstractNestablePropertyAccessor;true;setWrappedInstance;(Object,String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.beans;AbstractNestablePropertyAccessor;true;setWrappedInstance;(Object,String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.beans;AbstractNestablePropertyAccessor;true;setWrappedInstance;(Object,String,Object);;Argument[2];Argument[-1];taint",
        "org.springframework.beans;BeanInstantiationException;true;BeanInstantiationException;(Constructor,String,Throwable);;Argument[0];Argument[-1];taint",
        "org.springframework.beans;BeanInstantiationException;true;BeanInstantiationException;(Method,String,Throwable);;Argument[0];Argument[-1];taint",
        "org.springframework.beans;BeanInstantiationException;true;getConstructingMethod;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans;BeanInstantiationException;true;getConstructor;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans;BeanMetadataAttribute;true;BeanMetadataAttribute;(String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.beans;BeanMetadataAttribute;true;BeanMetadataAttribute;(String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.beans;BeanMetadataAttribute;true;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans;BeanMetadataAttribute;true;getValue;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans;BeanMetadataAttribute;true;setSource;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.beans;BeanMetadataAttribute;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans;BeanMetadataAttributeAccessor;true;addMetadataAttribute;(BeanMetadataAttribute);;Argument[0];Argument[-1];taint",
        "org.springframework.beans;BeanMetadataAttributeAccessor;true;getMetadataAttribute;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.beans;BeanMetadataAttributeAccessor;true;setSource;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.beans;BeanMetadataElement;true;getSource;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans;BeanUtils;true;findMethodWithMinimalParameters;(Method[],String);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.beans;BeanWrapper;true;getPropertyDescriptor;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.beans;BeanWrapper;true;getPropertyDescriptor;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans;BeanWrapper;true;getPropertyDescriptor;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.beans;BeanWrapperImpl;true;BeanWrapperImpl;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.beans;BeanWrapperImpl;true;BeanWrapperImpl;(Object,String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.beans;BeanWrapperImpl;true;BeanWrapperImpl;(Object,String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.beans;BeanWrapperImpl;true;BeanWrapperImpl;(Object,String,Object);;Argument[2];Argument[-1];taint",
        "org.springframework.beans;BeanWrapperImpl;true;convertForProperty;(Object,String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans;BeanWrapperImpl;true;convertForProperty;(Object,String);;Argument[0];ReturnValue;taint",
        "org.springframework.beans;BeanWrapperImpl;true;convertForProperty;(Object,String);;Argument[1];Argument[-1];taint",
        "org.springframework.beans;BeanWrapperImpl;true;getSecurityContext;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans;BeanWrapperImpl;true;setBeanInstance;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.beans;BeanWrapperImpl;true;setSecurityContext;(AccessControlContext);;Argument[0];Argument[-1];taint",
        "org.springframework.beans;ConversionNotSupportedException;true;ConversionNotSupportedException;(Object,Class,Throwable);;Argument[0];Argument[-1];taint",
        "org.springframework.beans;ConversionNotSupportedException;true;ConversionNotSupportedException;(PropertyChangeEvent,Class,Throwable);;Argument[0];Argument[-1];taint",
        "org.springframework.beans;DirectFieldAccessor;true;DirectFieldAccessor;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.beans;InvalidPropertyException;true;InvalidPropertyException;(Class,String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.beans;InvalidPropertyException;true;InvalidPropertyException;(Class,String,String,Throwable);;Argument[1];Argument[-1];taint",
        "org.springframework.beans;InvalidPropertyException;true;getPropertyName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans;Mergeable;true;merge;(Object);;Argument[-1];ReturnValue;value",
        "org.springframework.beans;Mergeable;true;merge;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.beans;Mergeable;true;merge;(Object);;Argument[0];ReturnValue;taint",
        "org.springframework.beans;MethodInvocationException;true;MethodInvocationException;(PropertyChangeEvent,Throwable);;Argument[0];Argument[-1];taint",
        "org.springframework.beans;MutablePropertyValues;true;MutablePropertyValues;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.beans;MutablePropertyValues;true;MutablePropertyValues;(PropertyValues);;Argument[0];Argument[-1];taint",
        "org.springframework.beans;MutablePropertyValues;true;add;(String,Object);;Argument[-1];ReturnValue;value",
        "org.springframework.beans;MutablePropertyValues;true;add;(String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.beans;MutablePropertyValues;true;add;(String,Object);;Argument[0];ReturnValue;taint",
        "org.springframework.beans;MutablePropertyValues;true;add;(String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.beans;MutablePropertyValues;true;add;(String,Object);;Argument[1];ReturnValue;taint",
        "org.springframework.beans;MutablePropertyValues;true;addPropertyValue;(PropertyValue);;Argument[-1];ReturnValue;value",
        "org.springframework.beans;MutablePropertyValues;true;addPropertyValue;(PropertyValue);;Argument[0];Argument[-1];taint",
        "org.springframework.beans;MutablePropertyValues;true;addPropertyValue;(PropertyValue);;Argument[0];ReturnValue;taint",
        "org.springframework.beans;MutablePropertyValues;true;addPropertyValue;(String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.beans;MutablePropertyValues;true;addPropertyValue;(String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.beans;MutablePropertyValues;true;addPropertyValues;(Map);;Argument[-1];ReturnValue;value",
        "org.springframework.beans;MutablePropertyValues;true;addPropertyValues;(Map);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.beans;MutablePropertyValues;true;addPropertyValues;(PropertyValues);;Argument[-1];ReturnValue;value",
        "org.springframework.beans;MutablePropertyValues;true;addPropertyValues;(PropertyValues);;Argument[0];Argument[-1];taint",
        "org.springframework.beans;MutablePropertyValues;true;addPropertyValues;(PropertyValues);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.beans;MutablePropertyValues;true;get;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.beans;MutablePropertyValues;true;getPropertyValueList;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans;MutablePropertyValues;true;registerProcessedProperty;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans;MutablePropertyValues;true;setPropertyValueAt;(PropertyValue,int);;Argument[0];Argument[-1];taint",
        "org.springframework.beans;MutablePropertyValues;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans;NotReadablePropertyException;true;NotReadablePropertyException;(Class,String);;Argument[1];Argument[-1];taint",
        "org.springframework.beans;NotReadablePropertyException;true;NotReadablePropertyException;(Class,String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.beans;NotReadablePropertyException;true;NotReadablePropertyException;(Class,String,String,Throwable);;Argument[1];Argument[-1];taint",
        "org.springframework.beans;NotWritablePropertyException;true;NotWritablePropertyException;(Class,String);;Argument[1];Argument[-1];taint",
        "org.springframework.beans;NotWritablePropertyException;true;NotWritablePropertyException;(Class,String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.beans;NotWritablePropertyException;true;NotWritablePropertyException;(Class,String,String,String[]);;Argument[1];Argument[-1];taint",
        "org.springframework.beans;NotWritablePropertyException;true;NotWritablePropertyException;(Class,String,String,String[]);;Argument[3];Argument[-1];taint",
        "org.springframework.beans;NotWritablePropertyException;true;NotWritablePropertyException;(Class,String,String,Throwable);;Argument[1];Argument[-1];taint",
        "org.springframework.beans;NotWritablePropertyException;true;getPossibleMatches;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans;NullValueInNestedPathException;true;NullValueInNestedPathException;(Class,String);;Argument[1];Argument[-1];taint",
        "org.springframework.beans;NullValueInNestedPathException;true;NullValueInNestedPathException;(Class,String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.beans;NullValueInNestedPathException;true;NullValueInNestedPathException;(Class,String,String,Throwable);;Argument[1];Argument[-1];taint",
        "org.springframework.beans;PropertyAccessException;true;PropertyAccessException;(PropertyChangeEvent,String,Throwable);;Argument[0];Argument[-1];taint",
        "org.springframework.beans;PropertyAccessException;true;getPropertyChangeEvent;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans;PropertyAccessException;true;getPropertyName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans;PropertyAccessException;true;getValue;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans;PropertyAccessor;true;getPropertyType;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans;PropertyAccessor;true;getPropertyTypeDescriptor;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans;PropertyAccessor;true;getPropertyValue;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans;PropertyAccessor;true;isReadableProperty;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans;PropertyAccessor;true;isWritableProperty;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans;PropertyAccessor;true;setPropertyValue;(PropertyValue);;Argument[0];Argument[-1];taint",
        "org.springframework.beans;PropertyAccessor;true;setPropertyValue;(String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.beans;PropertyAccessor;true;setPropertyValues;(PropertyValues);;Argument[0];Argument[-1];taint",
        "org.springframework.beans;PropertyAccessor;true;setPropertyValues;(PropertyValues,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.beans;PropertyAccessor;true;setPropertyValues;(PropertyValues,boolean,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.beans;PropertyAccessorFactory;false;forBeanPropertyAccess;(Object);;Argument[0];ReturnValue;taint",
        "org.springframework.beans;PropertyAccessorFactory;false;forDirectFieldAccess;(Object);;Argument[0];ReturnValue;taint",
        "org.springframework.beans;PropertyAccessorUtils;true;canonicalPropertyName;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.beans;PropertyAccessorUtils;true;canonicalPropertyNames;(String[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.beans;PropertyAccessorUtils;true;getPropertyName;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.beans;PropertyBatchUpdateException;true;PropertyBatchUpdateException;(PropertyAccessException[]);;Argument[0];Argument[-1];taint",
        "org.springframework.beans;PropertyBatchUpdateException;true;getPropertyAccessException;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.beans;PropertyBatchUpdateException;true;getPropertyAccessExceptions;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans;PropertyBatchUpdateException;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans;PropertyEditorRegistry;true;findCustomEditor;(Class,String);;Argument[-1];ReturnValue;taint",
        "org.springframework.beans;PropertyEditorRegistry;true;findCustomEditor;(Class,String);;Argument[1];Argument[-1];taint",
        "org.springframework.beans;PropertyEditorRegistry;true;registerCustomEditor;(Class,PropertyEditor);;Argument[1];Argument[-1];taint",
        "org.springframework.beans;PropertyEditorRegistry;true;registerCustomEditor;(Class,String,PropertyEditor);;Argument[1];Argument[-1];taint",
        "org.springframework.beans;PropertyEditorRegistry;true;registerCustomEditor;(Class,String,PropertyEditor);;Argument[2];Argument[-1];taint",
        "org.springframework.beans;PropertyEditorRegistrySupport;true;getConversionService;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans;PropertyEditorRegistrySupport;true;getDefaultEditor;(Class);;Argument[-1];ReturnValue;taint",
        "org.springframework.beans;PropertyEditorRegistrySupport;true;getPropertyType;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.beans;PropertyEditorRegistrySupport;true;overrideDefaultEditor;(Class,PropertyEditor);;Argument[1];Argument[-1];taint",
        "org.springframework.beans;PropertyEditorRegistrySupport;true;setConversionService;(ConversionService);;Argument[0];Argument[-1];taint",
        "org.springframework.beans;PropertyMatches;true;buildErrorMessage;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans;PropertyMatches;true;forField;(String,Class);;Argument[0];ReturnValue;taint",
        "org.springframework.beans;PropertyMatches;true;forField;(String,Class,int);;Argument[0];ReturnValue;taint",
        "org.springframework.beans;PropertyMatches;true;forProperty;(String,Class);;Argument[0];ReturnValue;taint",
        "org.springframework.beans;PropertyMatches;true;forProperty;(String,Class,int);;Argument[0];ReturnValue;taint",
        "org.springframework.beans;PropertyMatches;true;getPossibleMatches;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans;PropertyMatches;true;getPropertyName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans;PropertyValue;true;PropertyValue;(PropertyValue);;Argument[0];Argument[-1];taint",
        "org.springframework.beans;PropertyValue;true;PropertyValue;(PropertyValue,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.beans;PropertyValue;true;PropertyValue;(PropertyValue,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.beans;PropertyValue;true;PropertyValue;(String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.beans;PropertyValue;true;PropertyValue;(String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.beans;PropertyValue;true;getConvertedValue;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans;PropertyValue;true;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans;PropertyValue;true;getOriginalPropertyValue;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans;PropertyValue;true;getValue;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans;PropertyValue;true;setConvertedValue;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.beans;PropertyValue;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans;PropertyValues;true;changesSince;(PropertyValues);;Argument[-1];ReturnValue;taint",
        "org.springframework.beans;PropertyValues;true;getPropertyValue;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.beans;PropertyValues;true;getPropertyValues;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans;PropertyValues;true;stream;();;Argument[-1];ReturnValue;taint",
        "org.springframework.beans;TypeConverter;true;convertIfNecessary;(Object,Class);;Argument[0];Argument[-1];taint",
        "org.springframework.beans;TypeConverter;true;convertIfNecessary;(Object,Class);;Argument[0];ReturnValue;taint",
        "org.springframework.beans;TypeConverter;true;convertIfNecessary;(Object,Class,Field);;Argument[0];Argument[-1];taint",
        "org.springframework.beans;TypeConverter;true;convertIfNecessary;(Object,Class,Field);;Argument[0];ReturnValue;taint",
        "org.springframework.beans;TypeConverter;true;convertIfNecessary;(Object,Class,Field);;Argument[2];Argument[-1];taint",
        "org.springframework.beans;TypeConverter;true;convertIfNecessary;(Object,Class,MethodParameter);;Argument[0];Argument[-1];taint",
        "org.springframework.beans;TypeConverter;true;convertIfNecessary;(Object,Class,MethodParameter);;Argument[0];ReturnValue;taint",
        "org.springframework.beans;TypeConverter;true;convertIfNecessary;(Object,Class,MethodParameter);;Argument[2];Argument[-1];taint",
        "org.springframework.beans;TypeConverter;true;convertIfNecessary;(Object,Class,TypeDescriptor);;Argument[0];Argument[-1];taint",
        "org.springframework.beans;TypeConverter;true;convertIfNecessary;(Object,Class,TypeDescriptor);;Argument[0];ReturnValue;taint",
        "org.springframework.beans;TypeConverter;true;convertIfNecessary;(Object,Class,TypeDescriptor);;Argument[2];Argument[-1];taint",
        "org.springframework.beans;TypeMismatchException;true;TypeMismatchException;(Object,Class);;Argument[0];Argument[-1];taint",
        "org.springframework.beans;TypeMismatchException;true;TypeMismatchException;(Object,Class,Throwable);;Argument[0];Argument[-1];taint",
        "org.springframework.beans;TypeMismatchException;true;TypeMismatchException;(PropertyChangeEvent,Class);;Argument[0];Argument[-1];taint",
        "org.springframework.beans;TypeMismatchException;true;TypeMismatchException;(PropertyChangeEvent,Class,Throwable);;Argument[0];Argument[-1];taint",
        "org.springframework.beans;TypeMismatchException;true;initPropertyName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.annotation;AnnotationCacheOperationSource;true;AnnotationCacheOperationSource;(CacheAnnotationParser);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.annotation;AnnotationCacheOperationSource;true;AnnotationCacheOperationSource;(CacheAnnotationParser[]);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.annotation;AnnotationCacheOperationSource;true;AnnotationCacheOperationSource;(Set);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.annotation;ProxyCachingConfiguration;true;cacheAdvisor;(CacheOperationSource,CacheInterceptor);;Argument[0];ReturnValue;taint",
        "org.springframework.cache.annotation;ProxyCachingConfiguration;true;cacheAdvisor;(CacheOperationSource,CacheInterceptor);;Argument[1];ReturnValue;taint",
        "org.springframework.cache.annotation;ProxyCachingConfiguration;true;cacheInterceptor;(CacheOperationSource);;Argument[0];ReturnValue;taint",
        "org.springframework.cache.caffeine;CaffeineCache;true;CaffeineCache;(String,Cache);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.caffeine;CaffeineCache;true;CaffeineCache;(String,Cache);;Argument[1];Argument[-1];taint",
        "org.springframework.cache.caffeine;CaffeineCache;true;CaffeineCache;(String,Cache,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.caffeine;CaffeineCache;true;CaffeineCache;(String,Cache,boolean);;Argument[1];Argument[-1];taint",
        "org.springframework.cache.caffeine;CaffeineCacheManager;true;CaffeineCacheManager;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.caffeine;CaffeineCacheManager;true;registerCustomCache;(String,Cache);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.caffeine;CaffeineCacheManager;true;registerCustomCache;(String,Cache);;Argument[1];Argument[-1];taint",
        "org.springframework.cache.caffeine;CaffeineCacheManager;true;setCacheLoader;(CacheLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.caffeine;CaffeineCacheManager;true;setCacheNames;(Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.caffeine;CaffeineCacheManager;true;setCaffeine;(Caffeine);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.concurrent;ConcurrentMapCache;true;ConcurrentMapCache;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.concurrent;ConcurrentMapCache;true;ConcurrentMapCache;(String,ConcurrentMap,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.concurrent;ConcurrentMapCache;true;ConcurrentMapCache;(String,ConcurrentMap,boolean);;Argument[1];Argument[-1];taint",
        "org.springframework.cache.concurrent;ConcurrentMapCache;true;ConcurrentMapCache;(String,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.concurrent;ConcurrentMapCacheFactoryBean;true;setName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.concurrent;ConcurrentMapCacheFactoryBean;true;setStore;(ConcurrentMap);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.concurrent;ConcurrentMapCacheManager;true;ConcurrentMapCacheManager;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.concurrent;ConcurrentMapCacheManager;true;setCacheNames;(Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.ehcache;EhCacheCache;true;EhCacheCache;(Ehcache);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.ehcache;EhCacheCacheManager;true;EhCacheCacheManager;(CacheManager);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.ehcache;EhCacheCacheManager;true;getCacheManager;();;Argument[-1];ReturnValue;taint",
        "org.springframework.cache.ehcache;EhCacheCacheManager;true;setCacheManager;(CacheManager);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.ehcache;EhCacheFactoryBean;true;setBootstrapCacheLoader;(BootstrapCacheLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.ehcache;EhCacheFactoryBean;true;setCacheEntryFactory;(CacheEntryFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.ehcache;EhCacheFactoryBean;true;setCacheEventListeners;(Set);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.ehcache;EhCacheFactoryBean;true;setCacheManager;(CacheManager);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.ehcache;EhCacheManagerFactoryBean;true;setCacheManagerName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.ehcache;EhCacheManagerFactoryBean;true;setConfigLocation;(Resource);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.interceptor;AbstractCacheInvoker;true;getErrorHandler;();;Argument[-1];ReturnValue;taint",
        "org.springframework.cache.interceptor;AbstractCacheInvoker;true;setErrorHandler;(CacheErrorHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.interceptor;AbstractCacheResolver;true;getCacheManager;();;Argument[-1];ReturnValue;taint",
        "org.springframework.cache.interceptor;AbstractCacheResolver;true;setCacheManager;(CacheManager);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.interceptor;BasicOperation;true;getCacheNames;();;Argument[-1];ReturnValue;taint",
        "org.springframework.cache.interceptor;BeanFactoryCacheOperationSourceAdvisor;true;setCacheOperationSource;(CacheOperationSource);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.interceptor;BeanFactoryCacheOperationSourceAdvisor;true;setClassFilter;(ClassFilter);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.interceptor;CacheAspectSupport;true;configure;(Supplier,Supplier,Supplier,Supplier);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.interceptor;CacheAspectSupport;true;configure;(Supplier,Supplier,Supplier,Supplier);;Argument[1];Argument[-1];taint",
        "org.springframework.cache.interceptor;CacheAspectSupport;true;configure;(Supplier,Supplier,Supplier,Supplier);;Argument[2];Argument[-1];taint",
        "org.springframework.cache.interceptor;CacheAspectSupport;true;getCacheOperationSource;();;Argument[-1];ReturnValue;taint",
        "org.springframework.cache.interceptor;CacheAspectSupport;true;getCacheResolver;();;Argument[-1];ReturnValue;taint",
        "org.springframework.cache.interceptor;CacheAspectSupport;true;getKeyGenerator;();;Argument[-1];ReturnValue;taint",
        "org.springframework.cache.interceptor;CacheAspectSupport;true;setCacheManager;(CacheManager);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.interceptor;CacheAspectSupport;true;setCacheOperationSource;(CacheOperationSource);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.interceptor;CacheAspectSupport;true;setCacheOperationSources;(CacheOperationSource[]);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.interceptor;CacheAspectSupport;true;setCacheResolver;(CacheResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.interceptor;CacheAspectSupport;true;setKeyGenerator;(KeyGenerator);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.interceptor;CacheOperation$Builder;true;getCacheManager;();;Argument[-1];ReturnValue;taint",
        "org.springframework.cache.interceptor;CacheOperation$Builder;true;getCacheNames;();;Argument[-1];ReturnValue;taint",
        "org.springframework.cache.interceptor;CacheOperation$Builder;true;getCacheResolver;();;Argument[-1];ReturnValue;taint",
        "org.springframework.cache.interceptor;CacheOperation$Builder;true;getKey;();;Argument[-1];ReturnValue;taint",
        "org.springframework.cache.interceptor;CacheOperation$Builder;true;getKeyGenerator;();;Argument[-1];ReturnValue;taint",
        "org.springframework.cache.interceptor;CacheOperation$Builder;true;setCacheManager;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.interceptor;CacheOperation$Builder;true;setCacheName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.interceptor;CacheOperation$Builder;true;setCacheNames;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.interceptor;CacheOperation$Builder;true;setCacheResolver;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.interceptor;CacheOperation$Builder;true;setCondition;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.interceptor;CacheOperation$Builder;true;setKey;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.interceptor;CacheOperation$Builder;true;setKeyGenerator;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.interceptor;CacheOperation$Builder;true;setName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.interceptor;CacheOperation;true;getCacheManager;();;Argument[-1];ReturnValue;taint",
        "org.springframework.cache.interceptor;CacheOperation;true;getCacheResolver;();;Argument[-1];ReturnValue;taint",
        "org.springframework.cache.interceptor;CacheOperation;true;getCondition;();;Argument[-1];ReturnValue;taint",
        "org.springframework.cache.interceptor;CacheOperation;true;getKey;();;Argument[-1];ReturnValue;taint",
        "org.springframework.cache.interceptor;CacheOperation;true;getKeyGenerator;();;Argument[-1];ReturnValue;taint",
        "org.springframework.cache.interceptor;CacheOperation;true;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.cache.interceptor;CacheOperation;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.cache.interceptor;CacheOperationInvoker$ThrowableWrapper;true;ThrowableWrapper;(Throwable);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.interceptor;CacheOperationInvoker$ThrowableWrapper;true;getOriginal;();;Argument[-1];ReturnValue;taint",
        "org.springframework.cache.interceptor;CacheOperationSource;true;getCacheOperations;(Method,Class);;Argument[-1];ReturnValue;taint",
        "org.springframework.cache.interceptor;CacheOperationSource;true;getCacheOperations;(Method,Class);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.interceptor;CacheProxyFactoryBean;true;setCacheManager;(CacheManager);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.interceptor;CacheProxyFactoryBean;true;setCacheOperationSources;(CacheOperationSource[]);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.interceptor;CacheProxyFactoryBean;true;setCacheResolver;(CacheResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.interceptor;CacheProxyFactoryBean;true;setKeyGenerator;(KeyGenerator);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.interceptor;CacheProxyFactoryBean;true;setPointcut;(Pointcut);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.interceptor;CachePutOperation$Builder;true;setUnless;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.interceptor;CachePutOperation;true;getUnless;();;Argument[-1];ReturnValue;taint",
        "org.springframework.cache.interceptor;CacheResolver;true;resolveCaches;(CacheOperationInvocationContext);;Argument[-1];ReturnValue;taint",
        "org.springframework.cache.interceptor;CacheableOperation$Builder;true;setUnless;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.interceptor;CacheableOperation;true;getUnless;();;Argument[-1];ReturnValue;taint",
        "org.springframework.cache.interceptor;CompositeCacheOperationSource;true;CompositeCacheOperationSource;(CacheOperationSource[]);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.interceptor;CompositeCacheOperationSource;true;getCacheOperationSources;();;Argument[-1];ReturnValue;taint",
        "org.springframework.cache.interceptor;KeyGenerator;true;generate;(Object,Method,Object[]);;Argument[1];Argument[-1];taint",
        "org.springframework.cache.interceptor;KeyGenerator;true;generate;(Object,Method,Object[]);;ArrayElement of Argument[2];ReturnValue;taint",
        "org.springframework.cache.interceptor;NameMatchCacheOperationSource;true;addCacheMethod;(String,Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.interceptor;NameMatchCacheOperationSource;true;addCacheMethod;(String,Collection);;Argument[1];Argument[-1];taint",
        "org.springframework.cache.interceptor;NameMatchCacheOperationSource;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.cache.interceptor;NamedCacheResolver;true;NamedCacheResolver;(CacheManager,String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.interceptor;NamedCacheResolver;true;NamedCacheResolver;(CacheManager,String[]);;Argument[1];Argument[-1];taint",
        "org.springframework.cache.interceptor;NamedCacheResolver;true;setCacheNames;(Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.interceptor;SimpleCacheResolver;true;SimpleCacheResolver;(CacheManager);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.interceptor;SimpleKey;true;SimpleKey;(Object[]);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.interceptor;SimpleKey;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.cache.interceptor;SimpleKeyGenerator;true;generateKey;(Object[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.cache.jcache.config;ProxyJCacheConfiguration;true;cacheAdvisor;(JCacheOperationSource,JCacheInterceptor);;Argument[0];ReturnValue;taint",
        "org.springframework.cache.jcache.config;ProxyJCacheConfiguration;true;cacheAdvisor;(JCacheOperationSource,JCacheInterceptor);;Argument[1];ReturnValue;taint",
        "org.springframework.cache.jcache.config;ProxyJCacheConfiguration;true;cacheInterceptor;(JCacheOperationSource);;Argument[0];ReturnValue;taint",
        "org.springframework.cache.jcache.interceptor;BeanFactoryJCacheOperationSourceAdvisor;true;setCacheOperationSource;(JCacheOperationSource);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.jcache.interceptor;BeanFactoryJCacheOperationSourceAdvisor;true;setClassFilter;(ClassFilter);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.jcache.interceptor;DefaultJCacheOperationSource;true;DefaultJCacheOperationSource;(Supplier,Supplier,Supplier,Supplier);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.jcache.interceptor;DefaultJCacheOperationSource;true;DefaultJCacheOperationSource;(Supplier,Supplier,Supplier,Supplier);;Argument[1];Argument[-1];taint",
        "org.springframework.cache.jcache.interceptor;DefaultJCacheOperationSource;true;DefaultJCacheOperationSource;(Supplier,Supplier,Supplier,Supplier);;Argument[2];Argument[-1];taint",
        "org.springframework.cache.jcache.interceptor;DefaultJCacheOperationSource;true;DefaultJCacheOperationSource;(Supplier,Supplier,Supplier,Supplier);;Argument[3];Argument[-1];taint",
        "org.springframework.cache.jcache.interceptor;DefaultJCacheOperationSource;true;getCacheManager;();;Argument[-1];ReturnValue;taint",
        "org.springframework.cache.jcache.interceptor;DefaultJCacheOperationSource;true;getCacheResolver;();;Argument[-1];ReturnValue;taint",
        "org.springframework.cache.jcache.interceptor;DefaultJCacheOperationSource;true;getExceptionCacheResolver;();;Argument[-1];ReturnValue;taint",
        "org.springframework.cache.jcache.interceptor;DefaultJCacheOperationSource;true;getKeyGenerator;();;Argument[-1];ReturnValue;taint",
        "org.springframework.cache.jcache.interceptor;DefaultJCacheOperationSource;true;setCacheManager;(CacheManager);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.jcache.interceptor;DefaultJCacheOperationSource;true;setCacheResolver;(CacheResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.jcache.interceptor;DefaultJCacheOperationSource;true;setExceptionCacheResolver;(CacheResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.jcache.interceptor;DefaultJCacheOperationSource;true;setKeyGenerator;(KeyGenerator);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.jcache.interceptor;JCacheAspectSupport;true;getCacheOperationSource;();;Argument[-1];ReturnValue;taint",
        "org.springframework.cache.jcache.interceptor;JCacheAspectSupport;true;setCacheOperationSource;(JCacheOperationSource);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.jcache.interceptor;JCacheInterceptor;true;JCacheInterceptor;(Supplier);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.jcache.interceptor;JCacheOperationSource;true;getCacheOperation;(Method,Class);;Argument[-1];ReturnValue;taint",
        "org.springframework.cache.jcache.interceptor;JCacheOperationSource;true;getCacheOperation;(Method,Class);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.jcache.interceptor;JCacheOperationSource;true;getCacheOperation;(Method,Class);;Argument[0];ReturnValue;taint",
        "org.springframework.cache.jcache.interceptor;SimpleExceptionCacheResolver;true;SimpleExceptionCacheResolver;(CacheManager);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.jcache;JCacheCache;true;JCacheCache;(Cache);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.jcache;JCacheCache;true;JCacheCache;(Cache,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.jcache;JCacheCacheManager;true;JCacheCacheManager;(CacheManager);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.jcache;JCacheCacheManager;true;getCacheManager;();;Argument[-1];ReturnValue;taint",
        "org.springframework.cache.jcache;JCacheCacheManager;true;setCacheManager;(CacheManager);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.jcache;JCacheManagerFactoryBean;true;setCacheManagerProperties;(Properties);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.jcache;JCacheManagerFactoryBean;true;setCacheManagerUri;(URI);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.support;CompositeCacheManager;true;CompositeCacheManager;(CacheManager[]);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.support;CompositeCacheManager;true;setCacheManagers;(Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.support;NoOpCache;true;NoOpCache;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.support;SimpleCacheManager;true;setCaches;(Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.support;SimpleValueWrapper;true;SimpleValueWrapper;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.transaction;TransactionAwareCacheDecorator;true;TransactionAwareCacheDecorator;(Cache);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.transaction;TransactionAwareCacheDecorator;true;getTargetCache;();;Argument[-1];ReturnValue;taint",
        "org.springframework.cache.transaction;TransactionAwareCacheManagerProxy;true;TransactionAwareCacheManagerProxy;(CacheManager);;Argument[0];Argument[-1];taint",
        "org.springframework.cache.transaction;TransactionAwareCacheManagerProxy;true;setTargetCacheManager;(CacheManager);;Argument[0];Argument[-1];taint",
        "org.springframework.cache;Cache$ValueRetrievalException;true;ValueRetrievalException;(Object,Callable,Throwable);;Argument[0];Argument[-1];taint",
        "org.springframework.cache;Cache$ValueRetrievalException;true;getKey;();;Argument[-1];ReturnValue;taint",
        "org.springframework.cache;Cache$ValueWrapper;true;get;();;Argument[-1];ReturnValue;taint",
        "org.springframework.cache;Cache;true;get;(Object);;Argument[-1];ReturnValue;taint",
        "org.springframework.cache;Cache;true;get;(Object,Callable);;Argument[-1];ReturnValue;taint",
        "org.springframework.cache;Cache;true;get;(Object,Callable);;Argument[0];Argument[-1];taint",
        "org.springframework.cache;Cache;true;get;(Object,Class);;Argument[-1];ReturnValue;taint",
        "org.springframework.cache;Cache;true;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.cache;Cache;true;getNativeCache;();;Argument[-1];ReturnValue;taint",
        "org.springframework.cache;Cache;true;getNativeCache;();;Argument[-1];ReturnValue;value",
        "org.springframework.cache;Cache;true;put;(Object,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.cache;Cache;true;put;(Object,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.cache;Cache;true;putIfAbsent;(Object,Object);;Argument[-1];ReturnValue;taint",
        "org.springframework.cache;Cache;true;putIfAbsent;(Object,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.cache;Cache;true;putIfAbsent;(Object,Object);;Argument[0];ReturnValue;taint",
        "org.springframework.cache;Cache;true;putIfAbsent;(Object,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.cache;Cache;true;putIfAbsent;(Object,Object);;Argument[1];ReturnValue;taint",
        "org.springframework.cache;CacheManager;true;getCache;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.cache;CacheManager;true;getCache;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.cache;CacheManager;true;getCache;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.cache;CacheManager;true;getCacheNames;();;Argument[-1];ReturnValue;taint",
        "org.springframework.cglib.core;AbstractClassGenerator;true;getClassLoader;();;Argument[-1];ReturnValue;taint",
        "org.springframework.cglib.core;AbstractClassGenerator;true;getNamingPolicy;();;Argument[-1];ReturnValue;taint",
        "org.springframework.cglib.core;AbstractClassGenerator;true;getStrategy;();;Argument[-1];ReturnValue;taint",
        "org.springframework.cglib.core;AbstractClassGenerator;true;setClassLoader;(ClassLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.cglib.core;AbstractClassGenerator;true;setNamingPolicy;(NamingPolicy);;Argument[0];Argument[-1];taint",
        "org.springframework.cglib.core;AbstractClassGenerator;true;setStrategy;(GeneratorStrategy);;Argument[0];Argument[-1];taint",
        "org.springframework.cglib.core;ClassLoaderAwareGeneratorStrategy;true;ClassLoaderAwareGeneratorStrategy;(ClassLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.cglib.core;ReflectUtils;true;addAllInterfaces;(Class,List);;Element of Argument[1];ReturnValue;taint",
        "org.springframework.cglib.core;ReflectUtils;true;addAllMethods;(Class,List);;Element of Argument[1];ReturnValue;taint",
        "org.springframework.cglib.core;ReflectUtils;true;findMethods;(String[],Method[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.cglib.proxy;Enhancer;true;create;(Class[],Object[]);;Argument[0];Argument[-1];taint",
        "org.springframework.cglib.proxy;Enhancer;true;create;(Class[],Object[]);;Argument[1];Argument[-1];taint",
        "org.springframework.cglib.proxy;Enhancer;true;setCallback;(Callback);;Argument[0];Argument[-1];taint",
        "org.springframework.cglib.proxy;Enhancer;true;setCallbackFilter;(CallbackFilter);;Argument[0];Argument[-1];taint",
        "org.springframework.cglib.proxy;Enhancer;true;setCallbacks;(Callback[]);;Argument[0];Argument[-1];taint",
        "org.springframework.cglib.proxy;Enhancer;true;setInterfaces;(Class[]);;Argument[0];Argument[-1];taint",
        "org.springframework.cglib.proxy;MethodProxy;true;getSignature;();;Argument[-1];ReturnValue;taint",
        "org.springframework.context.annotation;AnnotatedBeanDefinitionReader;true;AnnotatedBeanDefinitionReader;(BeanDefinitionRegistry);;Argument[0];Argument[-1];taint",
        "org.springframework.context.annotation;AnnotatedBeanDefinitionReader;true;AnnotatedBeanDefinitionReader;(BeanDefinitionRegistry,Environment);;Argument[0];Argument[-1];taint",
        "org.springframework.context.annotation;AnnotatedBeanDefinitionReader;true;AnnotatedBeanDefinitionReader;(BeanDefinitionRegistry,Environment);;Argument[1];Argument[-1];taint",
        "org.springframework.context.annotation;AnnotatedBeanDefinitionReader;true;getRegistry;();;Argument[-1];ReturnValue;taint",
        "org.springframework.context.annotation;AnnotatedBeanDefinitionReader;true;register;(Class[]);;Argument[0];Argument[-1];taint",
        "org.springframework.context.annotation;AnnotatedBeanDefinitionReader;true;registerBean;(Class,String);;Argument[1];Argument[-1];taint",
        "org.springframework.context.annotation;AnnotatedBeanDefinitionReader;true;registerBean;(Class,String,Class[]);;Argument[1];Argument[-1];taint",
        "org.springframework.context.annotation;AnnotatedBeanDefinitionReader;true;registerBean;(Class,String,Supplier);;Argument[1];Argument[-1];taint",
        "org.springframework.context.annotation;AnnotatedBeanDefinitionReader;true;registerBean;(Class,String,Supplier);;Argument[2];Argument[-1];taint",
        "org.springframework.context.annotation;AnnotatedBeanDefinitionReader;true;registerBean;(Class,String,Supplier,BeanDefinitionCustomizer[]);;Argument[1];Argument[-1];taint",
        "org.springframework.context.annotation;AnnotatedBeanDefinitionReader;true;registerBean;(Class,String,Supplier,BeanDefinitionCustomizer[]);;Argument[2];Argument[-1];taint",
        "org.springframework.context.annotation;AnnotatedBeanDefinitionReader;true;registerBean;(Class,Supplier);;Argument[1];Argument[-1];taint",
        "org.springframework.context.annotation;AnnotatedBeanDefinitionReader;true;setBeanNameGenerator;(BeanNameGenerator);;Argument[0];Argument[-1];taint",
        "org.springframework.context.annotation;AnnotatedBeanDefinitionReader;true;setEnvironment;(Environment);;Argument[0];Argument[-1];taint",
        "org.springframework.context.annotation;AnnotatedBeanDefinitionReader;true;setScopeMetadataResolver;(ScopeMetadataResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.context.annotation;AnnotationConfigApplicationContext;true;AnnotationConfigApplicationContext;(Class[]);;Argument[0];Argument[-1];taint",
        "org.springframework.context.annotation;AnnotationConfigApplicationContext;true;AnnotationConfigApplicationContext;(DefaultListableBeanFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.context.annotation;AnnotationConfigApplicationContext;true;setBeanNameGenerator;(BeanNameGenerator);;Argument[0];Argument[-1];taint",
        "org.springframework.context.annotation;AnnotationConfigApplicationContext;true;setScopeMetadataResolver;(ScopeMetadataResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.context.annotation;AnnotationConfigRegistry;true;register;(Class[]);;Argument[0];Argument[-1];taint",
        "org.springframework.context.annotation;AnnotationConfigRegistry;true;scan;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.context.annotation;AnnotationConfigUtils;true;registerAnnotationConfigProcessors;(BeanDefinitionRegistry,Object);;Argument[1];ReturnValue;taint",
        "org.springframework.context.annotation;ClassPathBeanDefinitionScanner;true;ClassPathBeanDefinitionScanner;(BeanDefinitionRegistry);;Argument[0];Argument[-1];taint",
        "org.springframework.context.annotation;ClassPathBeanDefinitionScanner;true;ClassPathBeanDefinitionScanner;(BeanDefinitionRegistry,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.context.annotation;ClassPathBeanDefinitionScanner;true;ClassPathBeanDefinitionScanner;(BeanDefinitionRegistry,boolean,Environment);;Argument[0];Argument[-1];taint",
        "org.springframework.context.annotation;ClassPathBeanDefinitionScanner;true;ClassPathBeanDefinitionScanner;(BeanDefinitionRegistry,boolean,Environment);;Argument[2];Argument[-1];taint",
        "org.springframework.context.annotation;ClassPathBeanDefinitionScanner;true;ClassPathBeanDefinitionScanner;(BeanDefinitionRegistry,boolean,Environment,ResourceLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.context.annotation;ClassPathBeanDefinitionScanner;true;ClassPathBeanDefinitionScanner;(BeanDefinitionRegistry,boolean,Environment,ResourceLoader);;Argument[2];Argument[-1];taint",
        "org.springframework.context.annotation;ClassPathBeanDefinitionScanner;true;ClassPathBeanDefinitionScanner;(BeanDefinitionRegistry,boolean,Environment,ResourceLoader);;Argument[3];Argument[-1];taint",
        "org.springframework.context.annotation;ClassPathBeanDefinitionScanner;true;getBeanDefinitionDefaults;();;Argument[-1];ReturnValue;taint",
        "org.springframework.context.annotation;ClassPathBeanDefinitionScanner;true;setAutowireCandidatePatterns;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.context.annotation;ClassPathBeanDefinitionScanner;true;setBeanDefinitionDefaults;(BeanDefinitionDefaults);;Argument[0];Argument[-1];taint",
        "org.springframework.context.annotation;ClassPathBeanDefinitionScanner;true;setBeanNameGenerator;(BeanNameGenerator);;Argument[0];Argument[-1];taint",
        "org.springframework.context.annotation;ClassPathBeanDefinitionScanner;true;setScopeMetadataResolver;(ScopeMetadataResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.context.annotation;ClassPathScanningCandidateComponentProvider;true;ClassPathScanningCandidateComponentProvider;(boolean,Environment);;Argument[1];Argument[-1];taint",
        "org.springframework.context.annotation;ClassPathScanningCandidateComponentProvider;true;addExcludeFilter;(TypeFilter);;Argument[0];Argument[-1];taint",
        "org.springframework.context.annotation;ClassPathScanningCandidateComponentProvider;true;addIncludeFilter;(TypeFilter);;Argument[0];Argument[-1];taint",
        "org.springframework.context.annotation;ClassPathScanningCandidateComponentProvider;true;getMetadataReaderFactory;();;Argument[-1];ReturnValue;taint",
        "org.springframework.context.annotation;ClassPathScanningCandidateComponentProvider;true;getRegistry;();;Argument[-1];ReturnValue;taint",
        "org.springframework.context.annotation;ClassPathScanningCandidateComponentProvider;true;getResourceLoader;();;Argument[-1];ReturnValue;taint",
        "org.springframework.context.annotation;ClassPathScanningCandidateComponentProvider;true;setEnvironment;(Environment);;Argument[0];Argument[-1];taint",
        "org.springframework.context.annotation;ClassPathScanningCandidateComponentProvider;true;setMetadataReaderFactory;(MetadataReaderFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.context.annotation;ClassPathScanningCandidateComponentProvider;true;setResourcePattern;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.context.annotation;CommonAnnotationBeanPostProcessor;true;ignoreResourceType;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.context.annotation;CommonAnnotationBeanPostProcessor;true;setJndiFactory;(BeanFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.context.annotation;CommonAnnotationBeanPostProcessor;true;setResourceFactory;(BeanFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.context.annotation;ConditionContext;true;getBeanFactory;();;Argument[-1];ReturnValue;taint",
        "org.springframework.context.annotation;ConditionContext;true;getClassLoader;();;Argument[-1];ReturnValue;taint",
        "org.springframework.context.annotation;ConditionContext;true;getEnvironment;();;Argument[-1];ReturnValue;taint",
        "org.springframework.context.annotation;ConditionContext;true;getRegistry;();;Argument[-1];ReturnValue;taint",
        "org.springframework.context.annotation;ConditionContext;true;getResourceLoader;();;Argument[-1];ReturnValue;taint",
        "org.springframework.context.annotation;ConfigurationClassPostProcessor;true;processConfigBeanDefinitions;(BeanDefinitionRegistry);;Argument[0];Argument[-1];taint",
        "org.springframework.context.annotation;ConfigurationClassPostProcessor;true;setBeanNameGenerator;(BeanNameGenerator);;Argument[0];Argument[-1];taint",
        "org.springframework.context.annotation;ConfigurationClassPostProcessor;true;setMetadataReaderFactory;(MetadataReaderFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.context.annotation;ConfigurationClassPostProcessor;true;setProblemReporter;(ProblemReporter);;Argument[0];Argument[-1];taint",
        "org.springframework.context.annotation;ConfigurationClassPostProcessor;true;setSourceExtractor;(SourceExtractor);;Argument[0];Argument[-1];taint",
        "org.springframework.context.annotation;DeferredImportSelector$Group$Entry;true;Entry;(AnnotationMetadata,String);;Argument[0];Argument[-1];taint",
        "org.springframework.context.annotation;DeferredImportSelector$Group$Entry;true;Entry;(AnnotationMetadata,String);;Argument[1];Argument[-1];taint",
        "org.springframework.context.annotation;DeferredImportSelector$Group$Entry;true;getImportClassName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.context.annotation;DeferredImportSelector$Group$Entry;true;getMetadata;();;Argument[-1];ReturnValue;taint",
        "org.springframework.context.annotation;DeferredImportSelector$Group$Entry;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.context.annotation;DeferredImportSelector$Group;true;process;(AnnotationMetadata,DeferredImportSelector);;Argument[0];Argument[-1];taint",
        "org.springframework.context.annotation;DeferredImportSelector$Group;true;selectImports;();;Argument[-1];ReturnValue;taint",
        "org.springframework.context.annotation;ImportAware;true;setImportMetadata;(AnnotationMetadata);;Argument[0];Argument[-1];taint",
        "org.springframework.context.annotation;Jsr330ScopeMetadataResolver;true;registerScope;(Class,String);;Argument[1];Argument[-1];taint",
        "org.springframework.context.annotation;Jsr330ScopeMetadataResolver;true;registerScope;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.context.annotation;Jsr330ScopeMetadataResolver;true;registerScope;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.context.annotation;LoadTimeWeavingConfiguration;true;setLoadTimeWeavingConfigurer;(LoadTimeWeavingConfigurer);;Argument[0];Argument[-1];taint",
        "org.springframework.context.annotation;ScopeMetadata;true;getScopeName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.context.annotation;ScopeMetadata;true;setScopeName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.context.annotation;ScopeMetadataResolver;true;resolveScopeMetadata;(BeanDefinition);;Argument[0];ReturnValue;taint",
        "org.springframework.context.event;ApplicationEventMulticaster;true;addApplicationListener;(ApplicationListener);;Argument[0];Argument[-1];taint",
        "org.springframework.context.event;ApplicationEventMulticaster;true;addApplicationListenerBean;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.context.event;ApplicationEventMulticaster;true;multicastEvent;(ApplicationEvent,ResolvableType);;Argument[1];Argument[-1];taint",
        "org.springframework.context.event;ApplicationListenerMethodAdapter;true;ApplicationListenerMethodAdapter;(String,Class,Method);;Argument[0];Argument[-1];taint",
        "org.springframework.context.event;ApplicationListenerMethodAdapter;true;ApplicationListenerMethodAdapter;(String,Class,Method);;Argument[2];Argument[-1];taint",
        "org.springframework.context.event;EventListenerFactory;true;createApplicationListener;(String,Class,Method);;Argument[0];ReturnValue;taint",
        "org.springframework.context.event;EventListenerFactory;true;createApplicationListener;(String,Class,Method);;Argument[2];ReturnValue;taint",
        "org.springframework.context.event;GenericApplicationListenerAdapter;true;GenericApplicationListenerAdapter;(ApplicationListener);;Argument[0];Argument[-1];taint",
        "org.springframework.context.event;SimpleApplicationEventMulticaster;true;SimpleApplicationEventMulticaster;(BeanFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.context.event;SimpleApplicationEventMulticaster;true;setErrorHandler;(ErrorHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.context.event;SimpleApplicationEventMulticaster;true;setTaskExecutor;(Executor);;Argument[0];Argument[-1];taint",
        "org.springframework.context.event;SmartApplicationListener;true;getListenerId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.context.event;SourceFilteringListener;true;SourceFilteringListener;(Object,ApplicationListener);;Argument[0];Argument[-1];taint",
        "org.springframework.context.event;SourceFilteringListener;true;SourceFilteringListener;(Object,ApplicationListener);;Argument[1];Argument[-1];taint",
        "org.springframework.context.expression;AnnotatedElementKey;false;AnnotatedElementKey;(AnnotatedElement,Class);;Argument[0];Argument[-1];taint",
        "org.springframework.context.expression;AnnotatedElementKey;false;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.context.expression;BeanFactoryResolver;true;BeanFactoryResolver;(BeanFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.context.expression;MethodBasedEvaluationContext;true;MethodBasedEvaluationContext;(Object,Method,Object[],ParameterNameDiscoverer);;Argument[0];Argument[-1];taint",
        "org.springframework.context.expression;MethodBasedEvaluationContext;true;MethodBasedEvaluationContext;(Object,Method,Object[],ParameterNameDiscoverer);;Argument[1];Argument[-1];taint",
        "org.springframework.context.expression;MethodBasedEvaluationContext;true;MethodBasedEvaluationContext;(Object,Method,Object[],ParameterNameDiscoverer);;Argument[2];Argument[-1];taint",
        "org.springframework.context.expression;MethodBasedEvaluationContext;true;MethodBasedEvaluationContext;(Object,Method,Object[],ParameterNameDiscoverer);;Argument[3];Argument[-1];taint",
        "org.springframework.context.expression;StandardBeanExpressionResolver;true;StandardBeanExpressionResolver;(ClassLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.context.expression;StandardBeanExpressionResolver;true;setExpressionParser;(ExpressionParser);;Argument[0];Argument[-1];taint",
        "org.springframework.context.expression;StandardBeanExpressionResolver;true;setExpressionPrefix;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.context.expression;StandardBeanExpressionResolver;true;setExpressionSuffix;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.context.i18n;LocaleContext;true;getLocale;();;Argument[-1];ReturnValue;taint",
        "org.springframework.context.i18n;SimpleLocaleContext;true;SimpleLocaleContext;(Locale);;Argument[0];Argument[-1];taint",
        "org.springframework.context.i18n;SimpleTimeZoneAwareLocaleContext;true;SimpleTimeZoneAwareLocaleContext;(Locale,TimeZone);;Argument[0];Argument[-1];taint",
        "org.springframework.context.i18n;SimpleTimeZoneAwareLocaleContext;true;SimpleTimeZoneAwareLocaleContext;(Locale,TimeZone);;Argument[1];Argument[-1];taint",
        "org.springframework.context.i18n;TimeZoneAwareLocaleContext;true;getTimeZone;();;Argument[-1];ReturnValue;taint",
        "org.springframework.context.support;AbstractApplicationContext;true;AbstractApplicationContext;(ApplicationContext);;Argument[0];Argument[-1];taint",
        "org.springframework.context.support;AbstractApplicationContext;true;getApplicationListeners;();;Argument[-1];ReturnValue;taint",
        "org.springframework.context.support;AbstractApplicationContext;true;getBeanFactoryPostProcessors;();;Argument[-1];ReturnValue;taint",
        "org.springframework.context.support;AbstractApplicationContext;true;setDisplayName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.context.support;AbstractApplicationContext;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.context.support;AbstractMessageSource;true;setCommonMessages;(Properties);;Argument[0];Argument[-1];taint",
        "org.springframework.context.support;AbstractRefreshableApplicationContext;true;AbstractRefreshableApplicationContext;(ApplicationContext);;Argument[0];Argument[-1];taint",
        "org.springframework.context.support;AbstractRefreshableConfigApplicationContext;true;AbstractRefreshableConfigApplicationContext;(ApplicationContext);;Argument[0];Argument[-1];taint",
        "org.springframework.context.support;AbstractRefreshableConfigApplicationContext;true;getConfigLocations;();;Argument[-1];ReturnValue;taint",
        "org.springframework.context.support;AbstractRefreshableConfigApplicationContext;true;setConfigLocation;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.context.support;AbstractRefreshableConfigApplicationContext;true;setConfigLocations;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.context.support;AbstractResourceBasedMessageSource;true;addBasenames;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.context.support;AbstractResourceBasedMessageSource;true;getBasenameSet;();;Argument[-1];ReturnValue;taint",
        "org.springframework.context.support;AbstractResourceBasedMessageSource;true;setBasename;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.context.support;AbstractResourceBasedMessageSource;true;setBasenames;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.context.support;AbstractResourceBasedMessageSource;true;setDefaultEncoding;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.context.support;AbstractResourceBasedMessageSource;true;setDefaultLocale;(Locale);;Argument[0];Argument[-1];taint",
        "org.springframework.context.support;AbstractXmlApplicationContext;true;AbstractXmlApplicationContext;(ApplicationContext);;Argument[0];Argument[-1];taint",
        "org.springframework.context.support;ApplicationObjectSupport;true;getApplicationContext;();;Argument[-1];ReturnValue;taint",
        "org.springframework.context.support;ClassPathXmlApplicationContext;true;ClassPathXmlApplicationContext;(ApplicationContext);;Argument[0];Argument[-1];taint",
        "org.springframework.context.support;ClassPathXmlApplicationContext;true;ClassPathXmlApplicationContext;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.context.support;ClassPathXmlApplicationContext;true;ClassPathXmlApplicationContext;(String,Class);;Argument[0];Argument[-1];taint",
        "org.springframework.context.support;ClassPathXmlApplicationContext;true;ClassPathXmlApplicationContext;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.context.support;ClassPathXmlApplicationContext;true;ClassPathXmlApplicationContext;(String[],ApplicationContext);;Argument[0];Argument[-1];taint",
        "org.springframework.context.support;ClassPathXmlApplicationContext;true;ClassPathXmlApplicationContext;(String[],ApplicationContext);;Argument[1];Argument[-1];taint",
        "org.springframework.context.support;ClassPathXmlApplicationContext;true;ClassPathXmlApplicationContext;(String[],Class);;Argument[0];Argument[-1];taint",
        "org.springframework.context.support;ClassPathXmlApplicationContext;true;ClassPathXmlApplicationContext;(String[],Class,ApplicationContext);;Argument[0];Argument[-1];taint",
        "org.springframework.context.support;ClassPathXmlApplicationContext;true;ClassPathXmlApplicationContext;(String[],Class,ApplicationContext);;Argument[2];Argument[-1];taint",
        "org.springframework.context.support;ClassPathXmlApplicationContext;true;ClassPathXmlApplicationContext;(String[],boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.context.support;ClassPathXmlApplicationContext;true;ClassPathXmlApplicationContext;(String[],boolean,ApplicationContext);;Argument[0];Argument[-1];taint",
        "org.springframework.context.support;ClassPathXmlApplicationContext;true;ClassPathXmlApplicationContext;(String[],boolean,ApplicationContext);;Argument[2];Argument[-1];taint",
        "org.springframework.context.support;ConversionServiceFactoryBean;true;setConverters;(Set);;Argument[0];Argument[-1];taint",
        "org.springframework.context.support;DefaultMessageSourceResolvable;true;DefaultMessageSourceResolvable;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.context.support;DefaultMessageSourceResolvable;true;DefaultMessageSourceResolvable;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.context.support;DefaultMessageSourceResolvable;true;DefaultMessageSourceResolvable;(String[],Object[]);;Argument[0];Argument[-1];taint",
        "org.springframework.context.support;DefaultMessageSourceResolvable;true;DefaultMessageSourceResolvable;(String[],Object[]);;Argument[1];Argument[-1];taint",
        "org.springframework.context.support;DefaultMessageSourceResolvable;true;DefaultMessageSourceResolvable;(String[],Object[],String);;Argument[0];Argument[-1];taint",
        "org.springframework.context.support;DefaultMessageSourceResolvable;true;DefaultMessageSourceResolvable;(String[],Object[],String);;Argument[1];Argument[-1];taint",
        "org.springframework.context.support;DefaultMessageSourceResolvable;true;DefaultMessageSourceResolvable;(String[],Object[],String);;Argument[2];Argument[-1];taint",
        "org.springframework.context.support;DefaultMessageSourceResolvable;true;DefaultMessageSourceResolvable;(String[],String);;Argument[0];Argument[-1];taint",
        "org.springframework.context.support;DefaultMessageSourceResolvable;true;DefaultMessageSourceResolvable;(String[],String);;Argument[1];Argument[-1];taint",
        "org.springframework.context.support;DefaultMessageSourceResolvable;true;getCode;();;Argument[-1];ReturnValue;taint",
        "org.springframework.context.support;DefaultMessageSourceResolvable;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.context.support;DelegatingMessageSource;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.context.support;FileSystemXmlApplicationContext;true;FileSystemXmlApplicationContext;(ApplicationContext);;Argument[0];Argument[-1];taint",
        "org.springframework.context.support;FileSystemXmlApplicationContext;true;FileSystemXmlApplicationContext;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.context.support;FileSystemXmlApplicationContext;true;FileSystemXmlApplicationContext;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.context.support;FileSystemXmlApplicationContext;true;FileSystemXmlApplicationContext;(String[],ApplicationContext);;Argument[0];Argument[-1];taint",
        "org.springframework.context.support;FileSystemXmlApplicationContext;true;FileSystemXmlApplicationContext;(String[],ApplicationContext);;Argument[1];Argument[-1];taint",
        "org.springframework.context.support;FileSystemXmlApplicationContext;true;FileSystemXmlApplicationContext;(String[],boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.context.support;FileSystemXmlApplicationContext;true;FileSystemXmlApplicationContext;(String[],boolean,ApplicationContext);;Argument[0];Argument[-1];taint",
        "org.springframework.context.support;FileSystemXmlApplicationContext;true;FileSystemXmlApplicationContext;(String[],boolean,ApplicationContext);;Argument[2];Argument[-1];taint",
        "org.springframework.context.support;GenericApplicationContext;true;GenericApplicationContext;(ApplicationContext);;Argument[0];Argument[-1];taint",
        "org.springframework.context.support;GenericApplicationContext;true;GenericApplicationContext;(DefaultListableBeanFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.context.support;GenericApplicationContext;true;GenericApplicationContext;(DefaultListableBeanFactory,ApplicationContext);;Argument[0];Argument[-1];taint",
        "org.springframework.context.support;GenericApplicationContext;true;GenericApplicationContext;(DefaultListableBeanFactory,ApplicationContext);;Argument[1];Argument[-1];taint",
        "org.springframework.context.support;GenericApplicationContext;true;getDefaultListableBeanFactory;();;Argument[-1];ReturnValue;taint",
        "org.springframework.context.support;GenericApplicationContext;true;registerBean;(Class,Supplier,BeanDefinitionCustomizer[]);;Argument[1];Argument[-1];taint",
        "org.springframework.context.support;GenericApplicationContext;true;registerBean;(String,Class,BeanDefinitionCustomizer[]);;Argument[0];Argument[-1];taint",
        "org.springframework.context.support;GenericApplicationContext;true;registerBean;(String,Class,Object[]);;Argument[0];Argument[-1];taint",
        "org.springframework.context.support;GenericApplicationContext;true;registerBean;(String,Class,Supplier,BeanDefinitionCustomizer[]);;Argument[0];Argument[-1];taint",
        "org.springframework.context.support;GenericApplicationContext;true;registerBean;(String,Class,Supplier,BeanDefinitionCustomizer[]);;Argument[2];Argument[-1];taint",
        "org.springframework.context.support;GenericApplicationContext;true;setResourceLoader;(ResourceLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.context.support;GenericGroovyApplicationContext;true;getReader;();;Argument[-1];ReturnValue;taint",
        "org.springframework.context.support;GenericXmlApplicationContext;true;getReader;();;Argument[-1];ReturnValue;taint",
        "org.springframework.context.support;LiveBeansViewMBean;true;getSnapshotAsJson;();;Argument[-1];ReturnValue;taint",
        "org.springframework.context.support;MessageSourceAccessor;true;MessageSourceAccessor;(MessageSource);;Argument[0];Argument[-1];taint",
        "org.springframework.context.support;MessageSourceAccessor;true;MessageSourceAccessor;(MessageSource,Locale);;Argument[0];Argument[-1];taint",
        "org.springframework.context.support;MessageSourceAccessor;true;MessageSourceAccessor;(MessageSource,Locale);;Argument[1];Argument[-1];taint",
        "org.springframework.context.support;MessageSourceAccessor;true;getMessage;(MessageSourceResolvable);;Argument[-1];ReturnValue;taint",
        "org.springframework.context.support;MessageSourceAccessor;true;getMessage;(MessageSourceResolvable,Locale);;Argument[-1];ReturnValue;taint",
        "org.springframework.context.support;MessageSourceAccessor;true;getMessage;(MessageSourceResolvable,Locale);;Argument[1];Argument[-1];taint",
        "org.springframework.context.support;MessageSourceAccessor;true;getMessage;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.context.support;MessageSourceAccessor;true;getMessage;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.context.support;MessageSourceAccessor;true;getMessage;(String,Locale);;Argument[-1];ReturnValue;taint",
        "org.springframework.context.support;MessageSourceAccessor;true;getMessage;(String,Locale);;Argument[0];ReturnValue;taint",
        "org.springframework.context.support;MessageSourceAccessor;true;getMessage;(String,Locale);;Argument[1];Argument[-1];taint",
        "org.springframework.context.support;MessageSourceAccessor;true;getMessage;(String,Object[]);;Argument[-1];ReturnValue;taint",
        "org.springframework.context.support;MessageSourceAccessor;true;getMessage;(String,Object[]);;Argument[0];ReturnValue;taint",
        "org.springframework.context.support;MessageSourceAccessor;true;getMessage;(String,Object[],Locale);;Argument[-1];ReturnValue;taint",
        "org.springframework.context.support;MessageSourceAccessor;true;getMessage;(String,Object[],Locale);;Argument[0];ReturnValue;taint",
        "org.springframework.context.support;MessageSourceAccessor;true;getMessage;(String,Object[],Locale);;Argument[2];Argument[-1];taint",
        "org.springframework.context.support;MessageSourceAccessor;true;getMessage;(String,Object[],String);;Argument[-1];ReturnValue;taint",
        "org.springframework.context.support;MessageSourceAccessor;true;getMessage;(String,Object[],String);;Argument[0];ReturnValue;taint",
        "org.springframework.context.support;MessageSourceAccessor;true;getMessage;(String,Object[],String);;Argument[2];Argument[-1];taint",
        "org.springframework.context.support;MessageSourceAccessor;true;getMessage;(String,Object[],String);;Argument[2];ReturnValue;taint",
        "org.springframework.context.support;MessageSourceAccessor;true;getMessage;(String,Object[],String,Locale);;Argument[-1];ReturnValue;taint",
        "org.springframework.context.support;MessageSourceAccessor;true;getMessage;(String,Object[],String,Locale);;Argument[0];ReturnValue;taint",
        "org.springframework.context.support;MessageSourceAccessor;true;getMessage;(String,Object[],String,Locale);;Argument[2];Argument[-1];taint",
        "org.springframework.context.support;MessageSourceAccessor;true;getMessage;(String,Object[],String,Locale);;Argument[2];ReturnValue;taint",
        "org.springframework.context.support;MessageSourceAccessor;true;getMessage;(String,Object[],String,Locale);;Argument[3];Argument[-1];taint",
        "org.springframework.context.support;MessageSourceAccessor;true;getMessage;(String,String);;Argument[-1];ReturnValue;taint",
        "org.springframework.context.support;MessageSourceAccessor;true;getMessage;(String,String);;Argument[0];ReturnValue;taint",
        "org.springframework.context.support;MessageSourceAccessor;true;getMessage;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.context.support;MessageSourceAccessor;true;getMessage;(String,String);;Argument[1];ReturnValue;taint",
        "org.springframework.context.support;MessageSourceAccessor;true;getMessage;(String,String,Locale);;Argument[-1];ReturnValue;taint",
        "org.springframework.context.support;MessageSourceAccessor;true;getMessage;(String,String,Locale);;Argument[0];ReturnValue;taint",
        "org.springframework.context.support;MessageSourceAccessor;true;getMessage;(String,String,Locale);;Argument[1];Argument[-1];taint",
        "org.springframework.context.support;MessageSourceAccessor;true;getMessage;(String,String,Locale);;Argument[1];ReturnValue;taint",
        "org.springframework.context.support;MessageSourceAccessor;true;getMessage;(String,String,Locale);;Argument[2];Argument[-1];taint",
        "org.springframework.context.support;MessageSourceResourceBundle;true;MessageSourceResourceBundle;(MessageSource,Locale);;Argument[0];Argument[-1];taint",
        "org.springframework.context.support;MessageSourceResourceBundle;true;MessageSourceResourceBundle;(MessageSource,Locale);;Argument[1];Argument[-1];taint",
        "org.springframework.context.support;MessageSourceResourceBundle;true;MessageSourceResourceBundle;(MessageSource,Locale,ResourceBundle);;Argument[0];Argument[-1];taint",
        "org.springframework.context.support;MessageSourceResourceBundle;true;MessageSourceResourceBundle;(MessageSource,Locale,ResourceBundle);;Argument[1];Argument[-1];taint",
        "org.springframework.context.support;PropertySourcesPlaceholderConfigurer;true;getAppliedPropertySources;();;Argument[-1];ReturnValue;taint",
        "org.springframework.context.support;PropertySourcesPlaceholderConfigurer;true;setPropertySources;(PropertySources);;Argument[0];Argument[-1];taint",
        "org.springframework.context.support;ReloadableResourceBundleMessageSource;true;setFileEncodings;(Properties);;Argument[0];Argument[-1];taint",
        "org.springframework.context.support;ReloadableResourceBundleMessageSource;true;setPropertiesPersister;(PropertiesPersister);;Argument[0];Argument[-1];taint",
        "org.springframework.context.support;ReloadableResourceBundleMessageSource;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.context.support;ResourceBundleMessageSource;true;setBundleClassLoader;(ClassLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.context.support;ResourceBundleMessageSource;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.context.support;StaticApplicationContext;true;StaticApplicationContext;(ApplicationContext);;Argument[0];Argument[-1];taint",
        "org.springframework.context.support;StaticApplicationContext;true;addMessage;(String,Locale,String);;Argument[1];Argument[-1];taint",
        "org.springframework.context.support;StaticApplicationContext;true;addMessage;(String,Locale,String);;Argument[2];Argument[-1];taint",
        "org.springframework.context.support;StaticApplicationContext;true;getStaticMessageSource;();;Argument[-1];ReturnValue;taint",
        "org.springframework.context.support;StaticApplicationContext;true;registerPrototype;(String,Class);;Argument[0];Argument[-1];taint",
        "org.springframework.context.support;StaticApplicationContext;true;registerPrototype;(String,Class,MutablePropertyValues);;Argument[0];Argument[-1];taint",
        "org.springframework.context.support;StaticApplicationContext;true;registerPrototype;(String,Class,MutablePropertyValues);;Argument[2];Argument[-1];taint",
        "org.springframework.context.support;StaticApplicationContext;true;registerSingleton;(String,Class);;Argument[0];Argument[-1];taint",
        "org.springframework.context.support;StaticApplicationContext;true;registerSingleton;(String,Class,MutablePropertyValues);;Argument[0];Argument[-1];taint",
        "org.springframework.context.support;StaticApplicationContext;true;registerSingleton;(String,Class,MutablePropertyValues);;Argument[2];Argument[-1];taint",
        "org.springframework.context.support;StaticMessageSource;true;addMessage;(String,Locale,String);;Argument[1];Argument[-1];taint",
        "org.springframework.context.support;StaticMessageSource;true;addMessage;(String,Locale,String);;Argument[2];Argument[-1];taint",
        "org.springframework.context.support;StaticMessageSource;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.context.testfixture.beans;ACATester;true;getApplicationContext;();;Argument[-1];ReturnValue;taint",
        "org.springframework.context.testfixture.beans;BeanThatListens;true;BeanThatListens;(BeanThatBroadcasts);;Argument[0];Argument[-1];taint",
        "org.springframework.context.testfixture.cache;CacheTestUtils;true;createSimpleCacheManager;(String[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.context.testfixture.cache;SomeCustomKeyGenerator;true;generateKey;(String,Object[]);;Argument[0];ReturnValue;taint",
        "org.springframework.context.testfixture.cache;SomeCustomKeyGenerator;true;generateKey;(String,Object[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.context.testfixture.index;CandidateComponentsTestClassLoader;true;CandidateComponentsTestClassLoader;(ClassLoader,Enumeration);;Argument[1];Argument[-1];taint",
        "org.springframework.context.testfixture.index;CandidateComponentsTestClassLoader;true;CandidateComponentsTestClassLoader;(ClassLoader,IOException);;Argument[1];Argument[-1];taint",
        "org.springframework.context.testfixture.jndi;ExpectedLookupTemplate;true;ExpectedLookupTemplate;(String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.context.testfixture.jndi;ExpectedLookupTemplate;true;ExpectedLookupTemplate;(String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.context.testfixture.jndi;ExpectedLookupTemplate;true;addObject;(String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.context.testfixture.jndi;ExpectedLookupTemplate;true;addObject;(String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.context.testfixture.jndi;SimpleNamingContext;true;SimpleNamingContext;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.context.testfixture.jndi;SimpleNamingContext;true;SimpleNamingContext;(String,Hashtable,Hashtable);;Argument[0];Argument[-1];taint",
        "org.springframework.context.testfixture.jndi;SimpleNamingContext;true;SimpleNamingContext;(String,Hashtable,Hashtable);;Argument[1];Argument[-1];taint",
        "org.springframework.context.testfixture.jndi;SimpleNamingContext;true;SimpleNamingContext;(String,Hashtable,Hashtable);;Argument[2];Argument[-1];taint",
        "org.springframework.context.testfixture.jndi;SimpleNamingContextBuilder;true;bind;(String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.context.testfixture.jndi;SimpleNamingContextBuilder;true;bind;(String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.context.testfixture;SimpleMapScope;true;getMap;();;Argument[-1];ReturnValue;taint",
        "org.springframework.context.weaving;DefaultContextLoadTimeWeaver;true;DefaultContextLoadTimeWeaver;(ClassLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.context.weaving;LoadTimeWeaverAware;true;setLoadTimeWeaver;(LoadTimeWeaver);;Argument[0];Argument[-1];taint",
        "org.springframework.context.weaving;LoadTimeWeaverAwareProcessor;true;LoadTimeWeaverAwareProcessor;(BeanFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.context.weaving;LoadTimeWeaverAwareProcessor;true;LoadTimeWeaverAwareProcessor;(LoadTimeWeaver);;Argument[0];Argument[-1];taint",
        "org.springframework.context;ApplicationContext;true;getApplicationName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.context;ApplicationContext;true;getAutowireCapableBeanFactory;();;Argument[-1];ReturnValue;taint",
        "org.springframework.context;ApplicationContext;true;getDisplayName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.context;ApplicationContext;true;getId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.context;ApplicationContext;true;getParent;();;Argument[-1];ReturnValue;taint",
        "org.springframework.context;ApplicationContextAware;true;setApplicationContext;(ApplicationContext);;Argument[0];Argument[-1];taint",
        "org.springframework.context;ApplicationEventPublisher;true;publishEvent;(ApplicationEvent);;Argument[0];Argument[-1];taint",
        "org.springframework.context;ApplicationEventPublisher;true;publishEvent;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.context;ApplicationEventPublisherAware;true;setApplicationEventPublisher;(ApplicationEventPublisher);;Argument[0];Argument[-1];taint",
        "org.springframework.context;ApplicationStartupAware;true;setApplicationStartup;(ApplicationStartup);;Argument[0];Argument[-1];taint",
        "org.springframework.context;ConfigurableApplicationContext;true;addApplicationListener;(ApplicationListener);;Argument[0];Argument[-1];taint",
        "org.springframework.context;ConfigurableApplicationContext;true;addBeanFactoryPostProcessor;(BeanFactoryPostProcessor);;Argument[0];Argument[-1];taint",
        "org.springframework.context;ConfigurableApplicationContext;true;getApplicationStartup;();;Argument[-1];ReturnValue;taint",
        "org.springframework.context;ConfigurableApplicationContext;true;getBeanFactory;();;Argument[-1];ReturnValue;taint",
        "org.springframework.context;ConfigurableApplicationContext;true;setApplicationStartup;(ApplicationStartup);;Argument[0];Argument[-1];taint",
        "org.springframework.context;ConfigurableApplicationContext;true;setClassLoader;(ClassLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.context;ConfigurableApplicationContext;true;setEnvironment;(ConfigurableEnvironment);;Argument[0];Argument[-1];taint",
        "org.springframework.context;ConfigurableApplicationContext;true;setId;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.context;ConfigurableApplicationContext;true;setParent;(ApplicationContext);;Argument[0];Argument[-1];taint",
        "org.springframework.context;EmbeddedValueResolverAware;true;setEmbeddedValueResolver;(StringValueResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.context;EnvironmentAware;true;setEnvironment;(Environment);;Argument[0];Argument[-1];taint",
        "org.springframework.context;HierarchicalMessageSource;true;getParentMessageSource;();;Argument[-1];ReturnValue;taint",
        "org.springframework.context;HierarchicalMessageSource;true;setParentMessageSource;(MessageSource);;Argument[0];Argument[-1];taint",
        "org.springframework.context;MessageSource;true;getMessage;(MessageSourceResolvable,Locale);;Argument[-1];ReturnValue;taint",
        "org.springframework.context;MessageSource;true;getMessage;(MessageSourceResolvable,Locale);;Argument[1];Argument[-1];taint",
        "org.springframework.context;MessageSource;true;getMessage;(String,Object[],Locale);;Argument[-1];ReturnValue;taint",
        "org.springframework.context;MessageSource;true;getMessage;(String,Object[],Locale);;Argument[0];ReturnValue;taint",
        "org.springframework.context;MessageSource;true;getMessage;(String,Object[],Locale);;Argument[2];Argument[-1];taint",
        "org.springframework.context;MessageSource;true;getMessage;(String,Object[],String,Locale);;Argument[-1];ReturnValue;taint",
        "org.springframework.context;MessageSource;true;getMessage;(String,Object[],String,Locale);;Argument[0];ReturnValue;taint",
        "org.springframework.context;MessageSource;true;getMessage;(String,Object[],String,Locale);;Argument[2];Argument[-1];taint",
        "org.springframework.context;MessageSource;true;getMessage;(String,Object[],String,Locale);;Argument[2];ReturnValue;taint",
        "org.springframework.context;MessageSource;true;getMessage;(String,Object[],String,Locale);;Argument[3];Argument[-1];taint",
        "org.springframework.context;MessageSourceAware;true;setMessageSource;(MessageSource);;Argument[0];Argument[-1];taint",
        "org.springframework.context;MessageSourceResolvable;true;getArguments;();;Argument[-1];ReturnValue;taint",
        "org.springframework.context;MessageSourceResolvable;true;getCodes;();;Argument[-1];ReturnValue;taint",
        "org.springframework.context;MessageSourceResolvable;true;getDefaultMessage;();;Argument[-1];ReturnValue;taint",
        "org.springframework.context;PayloadApplicationEvent;true;PayloadApplicationEvent;(Object,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.context;PayloadApplicationEvent;true;getPayload;();;Argument[-1];ReturnValue;taint",
        "org.springframework.context;ResourceLoaderAware;true;setResourceLoader;(ResourceLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.context;SmartLifecycle;true;stop;(Runnable);;Argument[0];Argument[-1];taint",
        "org.springframework.core.annotation;AnnotatedElementUtils;true;findMergedAnnotation;(AnnotatedElement,Class);;Argument[0];ReturnValue;taint",
        "org.springframework.core.annotation;AnnotatedElementUtils;true;findMergedAnnotationAttributes;(AnnotatedElement,Class,boolean,boolean);;Argument[0];ReturnValue;taint",
        "org.springframework.core.annotation;AnnotatedElementUtils;true;findMergedAnnotationAttributes;(AnnotatedElement,String,boolean,boolean);;Argument[0];ReturnValue;taint",
        "org.springframework.core.annotation;AnnotatedElementUtils;true;forAnnotations;(Annotation[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.core.annotation;AnnotatedElementUtils;true;getMergedAnnotation;(AnnotatedElement,Class);;Argument[0];ReturnValue;taint",
        "org.springframework.core.annotation;AnnotatedElementUtils;true;getMergedAnnotationAttributes;(AnnotatedElement,Class);;Argument[0];ReturnValue;taint",
        "org.springframework.core.annotation;AnnotatedElementUtils;true;getMergedAnnotationAttributes;(AnnotatedElement,String);;Argument[0];ReturnValue;taint",
        "org.springframework.core.annotation;AnnotatedElementUtils;true;getMergedAnnotationAttributes;(AnnotatedElement,String,boolean,boolean);;Argument[0];ReturnValue;taint",
        "org.springframework.core.annotation;AnnotationAttributes;true;AnnotationAttributes;(AnnotationAttributes);;Argument[0];Argument[-1];taint",
        "org.springframework.core.annotation;AnnotationAttributes;true;AnnotationAttributes;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.core.annotation;AnnotationAttributes;true;AnnotationAttributes;(String,ClassLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.core.annotation;AnnotationAttributes;true;fromMap;(Map);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.core.annotation;AnnotationAttributes;true;getAnnotation;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.core.annotation;AnnotationAttributes;true;getAnnotation;(String,Class);;Argument[-1];ReturnValue;taint",
        "org.springframework.core.annotation;AnnotationAttributes;true;getAnnotationArray;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.core.annotation;AnnotationAttributes;true;getAnnotationArray;(String,Class);;Argument[-1];ReturnValue;taint",
        "org.springframework.core.annotation;AnnotationAttributes;true;getClassArray;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.core.annotation;AnnotationAttributes;true;getEnum;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.core.annotation;AnnotationAttributes;true;getString;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.core.annotation;AnnotationAttributes;true;getStringArray;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.core.annotation;AnnotationAttributes;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.annotation;AnnotationFilter;true;packages;(String[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.core.annotation;AnnotationUtils;true;findAnnotation;(AnnotatedElement,Class);;Argument[0];ReturnValue;taint",
        "org.springframework.core.annotation;AnnotationUtils;true;findAnnotation;(Method,Class);;Argument[0];ReturnValue;taint",
        "org.springframework.core.annotation;AnnotationUtils;true;getAnnotation;(AnnotatedElement,Class);;Argument[0];ReturnValue;taint",
        "org.springframework.core.annotation;AnnotationUtils;true;getAnnotation;(Annotation,Class);;Argument[0];ReturnValue;taint",
        "org.springframework.core.annotation;AnnotationUtils;true;getAnnotation;(Method,Class);;Argument[0];ReturnValue;taint",
        "org.springframework.core.annotation;AnnotationUtils;true;getAnnotationAttributes;(AnnotatedElement,Annotation);;Argument[0];ReturnValue;taint",
        "org.springframework.core.annotation;AnnotationUtils;true;getAnnotationAttributes;(AnnotatedElement,Annotation,boolean,boolean);;Argument[0];ReturnValue;taint",
        "org.springframework.core.annotation;AnnotationUtils;true;synthesizeAnnotation;(Annotation,AnnotatedElement);;Argument[0];ReturnValue;taint",
        "org.springframework.core.annotation;MergedAnnotation;true;from;(Annotation);;Argument[0];ReturnValue;taint",
        "org.springframework.core.annotation;MergedAnnotation;true;from;(Object,Annotation);;Argument[0];ReturnValue;taint",
        "org.springframework.core.annotation;MergedAnnotation;true;from;(Object,Annotation);;Argument[1];ReturnValue;taint",
        "org.springframework.core.annotation;MergedAnnotation;true;of;(AnnotatedElement,Class,Map);;Argument[0];ReturnValue;taint",
        "org.springframework.core.annotation;MergedAnnotation;true;of;(AnnotatedElement,Class,Map);;Element of Argument[2];ReturnValue;taint",
        "org.springframework.core.annotation;MergedAnnotation;true;of;(Class,Map);;Element of Argument[1];ReturnValue;taint",
        "org.springframework.core.annotation;MergedAnnotation;true;of;(ClassLoader,Object,Class,Map);;Argument[0];ReturnValue;taint",
        "org.springframework.core.annotation;MergedAnnotation;true;of;(ClassLoader,Object,Class,Map);;Argument[1];ReturnValue;taint",
        "org.springframework.core.annotation;MergedAnnotation;true;of;(ClassLoader,Object,Class,Map);;Element of Argument[3];ReturnValue;taint",
        "org.springframework.core.annotation;MergedAnnotationPredicates;true;firstRunOf;(Function);;Argument[0];ReturnValue;taint",
        "org.springframework.core.annotation;MergedAnnotationPredicates;true;unique;(Function);;Argument[0];ReturnValue;taint",
        "org.springframework.core.annotation;MergedAnnotations;true;from;(AnnotatedElement);;Argument[0];ReturnValue;taint",
        "org.springframework.core.annotation;MergedAnnotations;true;from;(AnnotatedElement,SearchStrategy);;Argument[0];ReturnValue;taint",
        "org.springframework.core.annotation;MergedAnnotations;true;from;(AnnotatedElement,SearchStrategy,RepeatableContainers);;Argument[0];ReturnValue;taint",
        "org.springframework.core.annotation;MergedAnnotations;true;from;(AnnotatedElement,SearchStrategy,RepeatableContainers);;Argument[2];ReturnValue;taint",
        "org.springframework.core.annotation;MergedAnnotations;true;from;(AnnotatedElement,SearchStrategy,RepeatableContainers,AnnotationFilter);;Argument[0];ReturnValue;taint",
        "org.springframework.core.annotation;MergedAnnotations;true;from;(AnnotatedElement,SearchStrategy,RepeatableContainers,AnnotationFilter);;Argument[2];ReturnValue;taint",
        "org.springframework.core.annotation;MergedAnnotations;true;from;(AnnotatedElement,SearchStrategy,RepeatableContainers,AnnotationFilter);;Argument[3];ReturnValue;taint",
        "org.springframework.core.annotation;MergedAnnotations;true;from;(Annotation[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.core.annotation;MergedAnnotations;true;from;(Object,Annotation[]);;Argument[0];ReturnValue;taint",
        "org.springframework.core.annotation;MergedAnnotations;true;from;(Object,Annotation[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.core.annotation;MergedAnnotations;true;from;(Object,Annotation[],RepeatableContainers);;Argument[0];ReturnValue;taint",
        "org.springframework.core.annotation;MergedAnnotations;true;from;(Object,Annotation[],RepeatableContainers);;Argument[2];ReturnValue;taint",
        "org.springframework.core.annotation;MergedAnnotations;true;from;(Object,Annotation[],RepeatableContainers);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.core.annotation;MergedAnnotations;true;from;(Object,Annotation[],RepeatableContainers,AnnotationFilter);;Argument[0];ReturnValue;taint",
        "org.springframework.core.annotation;MergedAnnotations;true;from;(Object,Annotation[],RepeatableContainers,AnnotationFilter);;Argument[2];ReturnValue;taint",
        "org.springframework.core.annotation;MergedAnnotations;true;from;(Object,Annotation[],RepeatableContainers,AnnotationFilter);;Argument[3];ReturnValue;taint",
        "org.springframework.core.annotation;MergedAnnotations;true;from;(Object,Annotation[],RepeatableContainers,AnnotationFilter);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.core.annotation;MergedAnnotations;true;get;(Class);;Argument[-1];ReturnValue;taint",
        "org.springframework.core.annotation;MergedAnnotations;true;get;(Class,Predicate);;Argument[-1];ReturnValue;taint",
        "org.springframework.core.annotation;MergedAnnotations;true;get;(Class,Predicate,MergedAnnotationSelector);;Argument[-1];ReturnValue;taint",
        "org.springframework.core.annotation;MergedAnnotations;true;get;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.core.annotation;MergedAnnotations;true;get;(String,Predicate);;Argument[-1];ReturnValue;taint",
        "org.springframework.core.annotation;MergedAnnotations;true;get;(String,Predicate,MergedAnnotationSelector);;Argument[-1];ReturnValue;taint",
        "org.springframework.core.annotation;MergedAnnotations;true;of;(Collection);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.core.annotation;SynthesizingMethodParameter;true;SynthesizingMethodParameter;(Constructor,int);;Argument[0];Argument[-1];taint",
        "org.springframework.core.annotation;SynthesizingMethodParameter;true;SynthesizingMethodParameter;(Constructor,int,int);;Argument[0];Argument[-1];taint",
        "org.springframework.core.annotation;SynthesizingMethodParameter;true;SynthesizingMethodParameter;(Method,int);;Argument[0];Argument[-1];taint",
        "org.springframework.core.annotation;SynthesizingMethodParameter;true;SynthesizingMethodParameter;(Method,int,int);;Argument[0];Argument[-1];taint",
        "org.springframework.core.annotation;SynthesizingMethodParameter;true;forExecutable;(Executable,int);;Argument[0];ReturnValue;taint",
        "org.springframework.core.codec;AbstractDecoder;true;getLogger;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.codec;AbstractDecoder;true;setLogger;(Log);;Argument[0];Argument[-1];taint",
        "org.springframework.core.codec;AbstractEncoder;true;getLogger;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.codec;AbstractEncoder;true;setLogger;(Log);;Argument[0];Argument[-1];taint",
        "org.springframework.core.codec;AbstractSingleValueEncoder;true;AbstractSingleValueEncoder;(MimeType[]);;Argument[0];Argument[-1];taint",
        "org.springframework.core.codec;Decoder;true;getDecodableMimeTypes;(ResolvableType);;Argument[-1];ReturnValue;taint",
        "org.springframework.core.codec;Encoder;true;getEncodableMimeTypes;(ResolvableType);;Argument[-1];ReturnValue;taint",
        "org.springframework.core.codec;Hints;true;from;(String,Object);;Argument[0];ReturnValue;taint",
        "org.springframework.core.codec;Hints;true;from;(String,Object);;Argument[1];ReturnValue;taint",
        "org.springframework.core.codec;Hints;true;getLogPrefix;(Map);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.core.codec;Hints;true;getRequiredHint;(Map,String);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.core.codec;Hints;true;merge;(Map,Map);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.core.codec;Hints;true;merge;(Map,Map);;Element of Argument[1];ReturnValue;taint",
        "org.springframework.core.codec;Hints;true;merge;(Map,String,Object);;Argument[1];ReturnValue;taint",
        "org.springframework.core.codec;Hints;true;merge;(Map,String,Object);;Argument[2];ReturnValue;taint",
        "org.springframework.core.codec;Hints;true;merge;(Map,String,Object);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.core.codec;StringDecoder;false;allMimeTypes;(List,boolean);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.core.codec;StringDecoder;false;textPlainOnly;(List,boolean);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.core.convert.converter;ConditionalConverter;true;matches;(TypeDescriptor,TypeDescriptor);;Argument[0];Argument[-1];taint",
        "org.springframework.core.convert.converter;ConditionalConverter;true;matches;(TypeDescriptor,TypeDescriptor);;Argument[1];Argument[-1];taint",
        "org.springframework.core.convert.converter;ConverterRegistry;true;addConverter;(Class,Class,Converter);;Argument[2];Argument[-1];taint",
        "org.springframework.core.convert.converter;ConverterRegistry;true;addConverter;(Converter);;Argument[0];Argument[-1];taint",
        "org.springframework.core.convert.converter;ConverterRegistry;true;addConverter;(GenericConverter);;Argument[0];Argument[-1];taint",
        "org.springframework.core.convert.converter;ConverterRegistry;true;addConverterFactory;(ConverterFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.core.convert.converter;ConvertingComparator;true;ConvertingComparator;(Comparator,ConversionService,Class);;Argument[0];Argument[-1];taint",
        "org.springframework.core.convert.converter;ConvertingComparator;true;ConvertingComparator;(Comparator,ConversionService,Class);;Argument[1];Argument[-1];taint",
        "org.springframework.core.convert.converter;ConvertingComparator;true;ConvertingComparator;(Comparator,Converter);;Argument[0];Argument[-1];taint",
        "org.springframework.core.convert.converter;ConvertingComparator;true;ConvertingComparator;(Comparator,Converter);;Argument[1];Argument[-1];taint",
        "org.springframework.core.convert.converter;ConvertingComparator;true;ConvertingComparator;(Converter);;Argument[0];Argument[-1];taint",
        "org.springframework.core.convert.converter;ConvertingComparator;true;mapEntryKeys;(Comparator);;Argument[0];ReturnValue;taint",
        "org.springframework.core.convert.converter;ConvertingComparator;true;mapEntryValues;(Comparator);;Argument[0];ReturnValue;taint",
        "org.springframework.core.convert.converter;GenericConverter;true;convert;(Object,TypeDescriptor,TypeDescriptor);;Argument[0];ReturnValue;taint",
        "org.springframework.core.convert.converter;GenericConverter;true;convert;(Object,TypeDescriptor,TypeDescriptor);;Argument[1];Argument[-1];taint",
        "org.springframework.core.convert.converter;GenericConverter;true;convert;(Object,TypeDescriptor,TypeDescriptor);;Argument[2];Argument[-1];taint",
        "org.springframework.core.convert.converter;GenericConverter;true;getConvertibleTypes;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.convert.support;ConvertingPropertyEditorAdapter;true;ConvertingPropertyEditorAdapter;(ConversionService,TypeDescriptor);;Argument[0];Argument[-1];taint",
        "org.springframework.core.convert.support;ConvertingPropertyEditorAdapter;true;ConvertingPropertyEditorAdapter;(ConversionService,TypeDescriptor);;Argument[1];Argument[-1];taint",
        "org.springframework.core.convert.support;GenericConversionService;true;canBypassConvert;(TypeDescriptor,TypeDescriptor);;Argument[0];Argument[-1];taint",
        "org.springframework.core.convert.support;GenericConversionService;true;canBypassConvert;(TypeDescriptor,TypeDescriptor);;Argument[1];Argument[-1];taint",
        "org.springframework.core.convert.support;GenericConversionService;true;convert;(Object,TypeDescriptor);;Argument[0];ReturnValue;taint",
        "org.springframework.core.convert.support;GenericConversionService;true;convert;(Object,TypeDescriptor);;Argument[1];Argument[-1];taint",
        "org.springframework.core.convert.support;GenericConversionService;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.convert;ConversionFailedException;true;ConversionFailedException;(TypeDescriptor,TypeDescriptor,Object,Throwable);;Argument[0];Argument[-1];taint",
        "org.springframework.core.convert;ConversionFailedException;true;ConversionFailedException;(TypeDescriptor,TypeDescriptor,Object,Throwable);;Argument[1];Argument[-1];taint",
        "org.springframework.core.convert;ConversionFailedException;true;ConversionFailedException;(TypeDescriptor,TypeDescriptor,Object,Throwable);;Argument[2];Argument[-1];taint",
        "org.springframework.core.convert;ConversionFailedException;true;getSourceType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.convert;ConversionFailedException;true;getTargetType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.convert;ConversionFailedException;true;getValue;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.convert;ConversionService;true;canConvert;(TypeDescriptor,TypeDescriptor);;Argument[0];Argument[-1];taint",
        "org.springframework.core.convert;ConversionService;true;canConvert;(TypeDescriptor,TypeDescriptor);;Argument[1];Argument[-1];taint",
        "org.springframework.core.convert;ConversionService;true;convert;(Object,Class);;Argument[0];ReturnValue;taint",
        "org.springframework.core.convert;ConversionService;true;convert;(Object,TypeDescriptor,TypeDescriptor);;Argument[0];ReturnValue;taint",
        "org.springframework.core.convert;ConversionService;true;convert;(Object,TypeDescriptor,TypeDescriptor);;Argument[1];Argument[-1];taint",
        "org.springframework.core.convert;ConversionService;true;convert;(Object,TypeDescriptor,TypeDescriptor);;Argument[2];Argument[-1];taint",
        "org.springframework.core.convert;ConverterNotFoundException;true;ConverterNotFoundException;(TypeDescriptor,TypeDescriptor);;Argument[0];Argument[-1];taint",
        "org.springframework.core.convert;ConverterNotFoundException;true;ConverterNotFoundException;(TypeDescriptor,TypeDescriptor);;Argument[1];Argument[-1];taint",
        "org.springframework.core.convert;ConverterNotFoundException;true;getSourceType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.convert;ConverterNotFoundException;true;getTargetType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.convert;Property;false;Property;(Class,Method,Method);;Argument[1];Argument[-1];taint",
        "org.springframework.core.convert;Property;false;Property;(Class,Method,Method);;Argument[2];Argument[-1];taint",
        "org.springframework.core.convert;Property;false;Property;(Class,Method,Method,String);;Argument[1];Argument[-1];taint",
        "org.springframework.core.convert;Property;false;Property;(Class,Method,Method,String);;Argument[2];Argument[-1];taint",
        "org.springframework.core.convert;Property;false;Property;(Class,Method,Method,String);;Argument[3];Argument[-1];taint",
        "org.springframework.core.convert;Property;false;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.convert;Property;false;getReadMethod;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.convert;Property;false;getWriteMethod;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.convert;TypeDescriptor;true;TypeDescriptor;(Field);;Argument[0];Argument[-1];taint",
        "org.springframework.core.convert;TypeDescriptor;true;TypeDescriptor;(MethodParameter);;Argument[0];Argument[-1];taint",
        "org.springframework.core.convert;TypeDescriptor;true;TypeDescriptor;(ResolvableType,Class,Annotation[]);;Argument[0];Argument[-1];taint",
        "org.springframework.core.convert;TypeDescriptor;true;TypeDescriptor;(ResolvableType,Class,Annotation[]);;Argument[2];Argument[-1];taint",
        "org.springframework.core.convert;TypeDescriptor;true;array;(TypeDescriptor);;Argument[0];ReturnValue;taint",
        "org.springframework.core.convert;TypeDescriptor;true;collection;(Class,TypeDescriptor);;Argument[1];ReturnValue;taint",
        "org.springframework.core.convert;TypeDescriptor;true;elementTypeDescriptor;(Object);;Argument[-1];ReturnValue;taint",
        "org.springframework.core.convert;TypeDescriptor;true;getAnnotations;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.convert;TypeDescriptor;true;getMapKeyTypeDescriptor;(Object);;Argument[-1];ReturnValue;taint",
        "org.springframework.core.convert;TypeDescriptor;true;getMapValueTypeDescriptor;(Object);;Argument[-1];ReturnValue;taint",
        "org.springframework.core.convert;TypeDescriptor;true;getResolvableType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.convert;TypeDescriptor;true;getSource;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.convert;TypeDescriptor;true;map;(Class,TypeDescriptor,TypeDescriptor);;Argument[1];ReturnValue;taint",
        "org.springframework.core.convert;TypeDescriptor;true;map;(Class,TypeDescriptor,TypeDescriptor);;Argument[2];ReturnValue;taint",
        "org.springframework.core.convert;TypeDescriptor;true;narrow;(Object);;Argument[-1];ReturnValue;value",
        "org.springframework.core.convert;TypeDescriptor;true;nested;(Field,int);;Argument[0];ReturnValue;taint",
        "org.springframework.core.convert;TypeDescriptor;true;nested;(MethodParameter,int);;Argument[0];ReturnValue;taint",
        "org.springframework.core.convert;TypeDescriptor;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.env;AbstractEnvironment;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.env;CommandLinePropertySource;true;CommandLinePropertySource;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.core.env;CommandLinePropertySource;true;CommandLinePropertySource;(String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.core.env;CommandLinePropertySource;true;CommandLinePropertySource;(String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.core.env;CommandLinePropertySource;true;setNonOptionArgsPropertyName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.core.env;CompositePropertySource;true;CompositePropertySource;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.core.env;CompositePropertySource;true;addFirstPropertySource;(PropertySource);;Argument[0];Argument[-1];taint",
        "org.springframework.core.env;CompositePropertySource;true;addPropertySource;(PropertySource);;Argument[0];Argument[-1];taint",
        "org.springframework.core.env;CompositePropertySource;true;getPropertySources;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.env;CompositePropertySource;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.env;ConfigurableEnvironment;true;getPropertySources;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.env;ConfigurablePropertyResolver;true;getConversionService;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.env;ConfigurablePropertyResolver;true;setConversionService;(ConfigurableConversionService);;Argument[0];Argument[-1];taint",
        "org.springframework.core.env;ConfigurablePropertyResolver;true;setPlaceholderPrefix;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.core.env;ConfigurablePropertyResolver;true;setPlaceholderSuffix;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.core.env;ConfigurablePropertyResolver;true;setRequiredProperties;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.core.env;ConfigurablePropertyResolver;true;setValueSeparator;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.core.env;EnumerablePropertySource;true;EnumerablePropertySource;(String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.core.env;EnumerablePropertySource;true;EnumerablePropertySource;(String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.core.env;Environment;true;getActiveProfiles;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.env;Environment;true;getDefaultProfiles;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.env;EnvironmentCapable;true;getEnvironment;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.env;JOptCommandLinePropertySource;true;JOptCommandLinePropertySource;(OptionSet);;Argument[0];Argument[-1];taint",
        "org.springframework.core.env;JOptCommandLinePropertySource;true;JOptCommandLinePropertySource;(String,OptionSet);;Argument[0];Argument[-1];taint",
        "org.springframework.core.env;JOptCommandLinePropertySource;true;JOptCommandLinePropertySource;(String,OptionSet);;Argument[1];Argument[-1];taint",
        "org.springframework.core.env;MapPropertySource;true;MapPropertySource;(String,Map);;Argument[0];Argument[-1];taint",
        "org.springframework.core.env;MapPropertySource;true;MapPropertySource;(String,Map);;Argument[1];Argument[-1];taint",
        "org.springframework.core.env;MissingRequiredPropertiesException;true;getMissingRequiredProperties;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.env;MutablePropertySources;true;MutablePropertySources;(PropertySources);;Argument[0];Argument[-1];taint",
        "org.springframework.core.env;MutablePropertySources;true;addAfter;(String,PropertySource);;Argument[1];Argument[-1];taint",
        "org.springframework.core.env;MutablePropertySources;true;addBefore;(String,PropertySource);;Argument[1];Argument[-1];taint",
        "org.springframework.core.env;MutablePropertySources;true;addFirst;(PropertySource);;Argument[0];Argument[-1];taint",
        "org.springframework.core.env;MutablePropertySources;true;addLast;(PropertySource);;Argument[0];Argument[-1];taint",
        "org.springframework.core.env;MutablePropertySources;true;remove;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.core.env;MutablePropertySources;true;replace;(String,PropertySource);;Argument[1];Argument[-1];taint",
        "org.springframework.core.env;Profiles;true;of;(String[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.core.env;PropertiesPropertySource;true;PropertiesPropertySource;(String,Properties);;Argument[0];Argument[-1];taint",
        "org.springframework.core.env;PropertiesPropertySource;true;PropertiesPropertySource;(String,Properties);;Argument[1];Argument[-1];taint",
        "org.springframework.core.env;PropertyResolver;true;getProperty;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.core.env;PropertyResolver;true;getProperty;(String,Class);;Argument[-1];ReturnValue;taint",
        "org.springframework.core.env;PropertyResolver;true;getProperty;(String,Class,Object);;Argument[-1];ReturnValue;taint",
        "org.springframework.core.env;PropertyResolver;true;getProperty;(String,Class,Object);;Argument[2];ReturnValue;taint",
        "org.springframework.core.env;PropertyResolver;true;getProperty;(String,String);;Argument[-1];ReturnValue;taint",
        "org.springframework.core.env;PropertyResolver;true;getProperty;(String,String);;Argument[1];ReturnValue;taint",
        "org.springframework.core.env;PropertyResolver;true;getRequiredProperty;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.core.env;PropertyResolver;true;getRequiredProperty;(String,Class);;Argument[-1];ReturnValue;taint",
        "org.springframework.core.env;PropertyResolver;true;resolvePlaceholders;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.core.env;PropertyResolver;true;resolveRequiredPlaceholders;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.core.env;PropertySource$StubPropertySource;true;StubPropertySource;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.core.env;PropertySource;true;PropertySource;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.core.env;PropertySource;true;PropertySource;(String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.core.env;PropertySource;true;PropertySource;(String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.core.env;PropertySource;true;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.env;PropertySource;true;getSource;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.env;PropertySource;true;named;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.core.env;PropertySource;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.env;PropertySources;true;get;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.core.env;PropertySources;true;stream;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.env;PropertySourcesPropertyResolver;true;PropertySourcesPropertyResolver;(PropertySources);;Argument[0];Argument[-1];taint",
        "org.springframework.core.env;SimpleCommandLinePropertySource;true;SimpleCommandLinePropertySource;(String,String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.core.env;SimpleCommandLinePropertySource;true;SimpleCommandLinePropertySource;(String,String[]);;Argument[1];Argument[-1];taint",
        "org.springframework.core.env;SimpleCommandLinePropertySource;true;SimpleCommandLinePropertySource;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.core.env;SystemEnvironmentPropertySource;true;SystemEnvironmentPropertySource;(String,Map);;Argument[0];Argument[-1];taint",
        "org.springframework.core.env;SystemEnvironmentPropertySource;true;SystemEnvironmentPropertySource;(String,Map);;Argument[1];Argument[-1];taint",
        "org.springframework.core.io.buffer;DataBuffer;true;capacity;(int);;Argument[-1];ReturnValue;taint",
        "org.springframework.core.io.buffer;DataBuffer;true;capacity;(int);;Argument[-1];ReturnValue;value",
        "org.springframework.core.io.buffer;DataBuffer;true;ensureCapacity;(int);;Argument[-1];ReturnValue;taint",
        "org.springframework.core.io.buffer;DataBuffer;true;ensureCapacity;(int);;Argument[-1];ReturnValue;value",
        "org.springframework.core.io.buffer;DataBuffer;true;factory;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.io.buffer;DataBuffer;true;read;(byte[]);;Argument[-1];ReturnValue;taint",
        "org.springframework.core.io.buffer;DataBuffer;true;read;(byte[]);;Argument[-1];ReturnValue;value",
        "org.springframework.core.io.buffer;DataBuffer;true;read;(byte[],int,int);;Argument[-1];ReturnValue;taint",
        "org.springframework.core.io.buffer;DataBuffer;true;read;(byte[],int,int);;Argument[-1];ReturnValue;value",
        "org.springframework.core.io.buffer;DataBuffer;true;readPosition;(int);;Argument[-1];ReturnValue;taint",
        "org.springframework.core.io.buffer;DataBuffer;true;readPosition;(int);;Argument[-1];ReturnValue;value",
        "org.springframework.core.io.buffer;DataBuffer;true;toString;(Charset);;Argument[-1];ReturnValue;taint",
        "org.springframework.core.io.buffer;DataBuffer;true;toString;(int,int,Charset);;Argument[-1];ReturnValue;taint",
        "org.springframework.core.io.buffer;DataBuffer;true;write;(ByteBuffer[]);;Argument[-1];ReturnValue;taint",
        "org.springframework.core.io.buffer;DataBuffer;true;write;(ByteBuffer[]);;Argument[-1];ReturnValue;value",
        "org.springframework.core.io.buffer;DataBuffer;true;write;(CharSequence,Charset);;Argument[-1];ReturnValue;taint",
        "org.springframework.core.io.buffer;DataBuffer;true;write;(CharSequence,Charset);;Argument[-1];ReturnValue;value",
        "org.springframework.core.io.buffer;DataBuffer;true;write;(DataBuffer[]);;Argument[-1];ReturnValue;taint",
        "org.springframework.core.io.buffer;DataBuffer;true;write;(DataBuffer[]);;Argument[-1];ReturnValue;value",
        "org.springframework.core.io.buffer;DataBuffer;true;write;(byte);;Argument[-1];ReturnValue;taint",
        "org.springframework.core.io.buffer;DataBuffer;true;write;(byte);;Argument[-1];ReturnValue;value",
        "org.springframework.core.io.buffer;DataBuffer;true;write;(byte[]);;Argument[-1];ReturnValue;taint",
        "org.springframework.core.io.buffer;DataBuffer;true;write;(byte[]);;Argument[-1];ReturnValue;value",
        "org.springframework.core.io.buffer;DataBuffer;true;write;(byte[],int,int);;Argument[-1];ReturnValue;taint",
        "org.springframework.core.io.buffer;DataBuffer;true;write;(byte[],int,int);;Argument[-1];ReturnValue;value",
        "org.springframework.core.io.buffer;DataBuffer;true;writePosition;(int);;Argument[-1];ReturnValue;taint",
        "org.springframework.core.io.buffer;DataBuffer;true;writePosition;(int);;Argument[-1];ReturnValue;value",
        "org.springframework.core.io.buffer;DataBufferFactory;true;join;(List);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.core.io.buffer;DataBufferUtils$Matcher;true;delimiter;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.io.buffer;DataBufferUtils;true;join;(Publisher);;Argument[0];ReturnValue;taint",
        "org.springframework.core.io.buffer;DataBufferUtils;true;join;(Publisher,int);;Argument[0];ReturnValue;taint",
        "org.springframework.core.io.buffer;DataBufferUtils;true;matcher;(byte[]);;Argument[0];ReturnValue;taint",
        "org.springframework.core.io.buffer;DataBufferUtils;true;matcher;(byte[][]);;Argument[0];ReturnValue;taint",
        "org.springframework.core.io.buffer;DataBufferUtils;true;retain;(DataBuffer);;Argument[0];ReturnValue;taint",
        "org.springframework.core.io.buffer;DataBufferUtils;true;touch;(DataBuffer,Object);;Argument[0];ReturnValue;taint",
        "org.springframework.core.io.buffer;DataBufferWrapper;true;DataBufferWrapper;(DataBuffer);;Argument[0];Argument[-1];taint",
        "org.springframework.core.io.buffer;DataBufferWrapper;true;dataBuffer;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.io.buffer;DefaultDataBuffer;true;getNativeBuffer;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.io.buffer;DefaultDataBuffer;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.io.buffer;DefaultDataBufferFactory;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.io.buffer;NettyDataBuffer;true;getNativeBuffer;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.io.buffer;NettyDataBuffer;true;write;(ByteBuf[]);;Argument[-1];ReturnValue;value",
        "org.springframework.core.io.buffer;NettyDataBufferFactory;true;NettyDataBufferFactory;(ByteBufAllocator);;Argument[0];Argument[-1];taint",
        "org.springframework.core.io.buffer;NettyDataBufferFactory;true;getByteBufAllocator;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.io.buffer;NettyDataBufferFactory;true;toByteBuf;(DataBuffer);;Argument[0];ReturnValue;taint",
        "org.springframework.core.io.buffer;NettyDataBufferFactory;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.io.buffer;NettyDataBufferFactory;true;wrap;(ByteBuf);;Argument[0];ReturnValue;taint",
        "org.springframework.core.io.buffer;PooledDataBuffer;true;retain;();;Argument[-1];ReturnValue;value",
        "org.springframework.core.io.buffer;PooledDataBuffer;true;touch;(Object);;Argument[-1];ReturnValue;value",
        "org.springframework.core.io.support;EncodedResource;true;EncodedResource;(Resource);;Argument[0];Argument[-1];taint",
        "org.springframework.core.io.support;EncodedResource;true;EncodedResource;(Resource,Charset);;Argument[0];Argument[-1];taint",
        "org.springframework.core.io.support;EncodedResource;true;EncodedResource;(Resource,String);;Argument[0];Argument[-1];taint",
        "org.springframework.core.io.support;EncodedResource;true;EncodedResource;(Resource,String);;Argument[1];Argument[-1];taint",
        "org.springframework.core.io.support;EncodedResource;true;getEncoding;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.io.support;EncodedResource;true;getReader;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.io.support;EncodedResource;true;getResource;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.io.support;EncodedResource;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.io.support;LocalizedResourceHelper;true;LocalizedResourceHelper;(ResourceLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.core.io.support;LocalizedResourceHelper;true;findLocalizedResource;(String,String,Locale);;Argument[0];ReturnValue;taint",
        "org.springframework.core.io.support;LocalizedResourceHelper;true;findLocalizedResource;(String,String,Locale);;Argument[1];ReturnValue;taint",
        "org.springframework.core.io.support;LocalizedResourceHelper;true;setSeparator;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.core.io.support;PathMatchingResourcePatternResolver;true;PathMatchingResourcePatternResolver;(ClassLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.core.io.support;PathMatchingResourcePatternResolver;true;PathMatchingResourcePatternResolver;(ResourceLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.core.io.support;PathMatchingResourcePatternResolver;true;getPathMatcher;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.io.support;PathMatchingResourcePatternResolver;true;getResourceLoader;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.io.support;PathMatchingResourcePatternResolver;true;setPathMatcher;(PathMatcher);;Argument[0];Argument[-1];taint",
        "org.springframework.core.io.support;PropertiesLoaderSupport;true;setFileEncoding;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.core.io.support;PropertiesLoaderSupport;true;setLocation;(Resource);;Argument[0];Argument[-1];taint",
        "org.springframework.core.io.support;PropertiesLoaderSupport;true;setLocations;(Resource[]);;Argument[0];Argument[-1];taint",
        "org.springframework.core.io.support;PropertiesLoaderSupport;true;setProperties;(Properties);;Argument[0];Argument[-1];taint",
        "org.springframework.core.io.support;PropertiesLoaderSupport;true;setPropertiesArray;(Properties[]);;Argument[0];Argument[-1];taint",
        "org.springframework.core.io.support;PropertiesLoaderSupport;true;setPropertiesPersister;(PropertiesPersister);;Argument[0];Argument[-1];taint",
        "org.springframework.core.io.support;PropertySourceFactory;true;createPropertySource;(String,EncodedResource);;Argument[0];ReturnValue;taint",
        "org.springframework.core.io.support;ResourceArrayPropertyEditor;true;ResourceArrayPropertyEditor;(ResourcePatternResolver,PropertyResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.core.io.support;ResourceArrayPropertyEditor;true;ResourceArrayPropertyEditor;(ResourcePatternResolver,PropertyResolver);;Argument[1];Argument[-1];taint",
        "org.springframework.core.io.support;ResourceArrayPropertyEditor;true;ResourceArrayPropertyEditor;(ResourcePatternResolver,PropertyResolver,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.core.io.support;ResourceArrayPropertyEditor;true;ResourceArrayPropertyEditor;(ResourcePatternResolver,PropertyResolver,boolean);;Argument[1];Argument[-1];taint",
        "org.springframework.core.io.support;ResourcePatternResolver;true;getResources;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.core.io.support;ResourcePatternResolver;true;getResources;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.core.io.support;ResourcePatternUtils;true;getResourcePatternResolver;(ResourceLoader);;Argument[0];ReturnValue;taint",
        "org.springframework.core.io.support;ResourcePropertySource;true;ResourcePropertySource;(Resource);;Argument[0];Argument[-1];taint",
        "org.springframework.core.io.support;ResourcePropertySource;true;ResourcePropertySource;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.core.io.support;ResourcePropertySource;true;ResourcePropertySource;(String,ClassLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.core.io.support;ResourcePropertySource;true;ResourcePropertySource;(String,ClassLoader);;Argument[1];Argument[-1];taint",
        "org.springframework.core.io.support;ResourcePropertySource;true;ResourcePropertySource;(String,EncodedResource);;Argument[0];Argument[-1];taint",
        "org.springframework.core.io.support;ResourcePropertySource;true;ResourcePropertySource;(String,Resource);;Argument[0];Argument[-1];taint",
        "org.springframework.core.io.support;ResourcePropertySource;true;ResourcePropertySource;(String,Resource);;Argument[1];Argument[-1];taint",
        "org.springframework.core.io.support;ResourcePropertySource;true;ResourcePropertySource;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.core.io.support;ResourcePropertySource;true;ResourcePropertySource;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.core.io.support;ResourcePropertySource;true;ResourcePropertySource;(String,String,ClassLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.core.io.support;ResourcePropertySource;true;ResourcePropertySource;(String,String,ClassLoader);;Argument[1];Argument[-1];taint",
        "org.springframework.core.io.support;ResourcePropertySource;true;ResourcePropertySource;(String,String,ClassLoader);;Argument[2];Argument[-1];taint",
        "org.springframework.core.io.support;ResourcePropertySource;true;withName;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.core.io.support;ResourcePropertySource;true;withName;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.core.io.support;ResourcePropertySource;true;withResourceName;();;Argument[-1];ReturnValue;value",
        "org.springframework.core.io.support;ResourceRegion;true;ResourceRegion;(Resource,long,long);;Argument[0];Argument[-1];taint",
        "org.springframework.core.io.support;ResourceRegion;true;getResource;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.io;AbstractResource;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.io;ByteArrayResource;true;ByteArrayResource;(byte[]);;Argument[0];Argument[-1];taint",
        "org.springframework.core.io;ByteArrayResource;true;ByteArrayResource;(byte[],String);;Argument[0];Argument[-1];taint",
        "org.springframework.core.io;ByteArrayResource;true;ByteArrayResource;(byte[],String);;Argument[1];Argument[-1];taint",
        "org.springframework.core.io;ByteArrayResource;true;getByteArray;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.io;ClassPathResource;true;ClassPathResource;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.core.io;ClassPathResource;true;ClassPathResource;(String,Class);;Argument[0];Argument[-1];taint",
        "org.springframework.core.io;ClassPathResource;true;ClassPathResource;(String,ClassLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.core.io;ClassPathResource;true;ClassPathResource;(String,ClassLoader);;Argument[1];Argument[-1];taint",
        "org.springframework.core.io;ClassPathResource;true;getClassLoader;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.io;ClassPathResource;true;getPath;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.io;ContextResource;true;getPathWithinContext;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.io;DefaultResourceLoader;true;DefaultResourceLoader;(ClassLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.core.io;DefaultResourceLoader;true;addProtocolResolver;(ProtocolResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.core.io;DefaultResourceLoader;true;getProtocolResolvers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.io;DefaultResourceLoader;true;getResourceCache;(Class);;Argument[-1];ReturnValue;taint",
        "org.springframework.core.io;DefaultResourceLoader;true;setClassLoader;(ClassLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.core.io;DescriptiveResource;true;DescriptiveResource;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.core.io;FileSystemResource;true;FileSystemResource;(File);;Argument[0];Argument[-1];taint",
        "org.springframework.core.io;FileSystemResource;true;FileSystemResource;(FileSystem,String);;Argument[1];Argument[-1];taint",
        "org.springframework.core.io;FileSystemResource;true;FileSystemResource;(Path);;Argument[0];Argument[-1];taint",
        "org.springframework.core.io;FileSystemResource;true;FileSystemResource;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.core.io;FileSystemResource;true;getPath;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.io;FileUrlResource;true;FileUrlResource;(URL);;Argument[0];Argument[-1];taint",
        "org.springframework.core.io;InputStreamResource;true;InputStreamResource;(InputStream);;Argument[0];Argument[-1];taint",
        "org.springframework.core.io;InputStreamResource;true;InputStreamResource;(InputStream,String);;Argument[0];Argument[-1];taint",
        "org.springframework.core.io;InputStreamResource;true;InputStreamResource;(InputStream,String);;Argument[1];Argument[-1];taint",
        "org.springframework.core.io;InputStreamSource;true;getInputStream;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.io;Resource;true;createRelative;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.core.io;Resource;true;getDescription;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.io;Resource;true;getFile;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.io;Resource;true;getFilename;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.io;Resource;true;getURI;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.io;Resource;true;getURL;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.io;ResourceEditor;true;ResourceEditor;(ResourceLoader,PropertyResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.core.io;ResourceEditor;true;ResourceEditor;(ResourceLoader,PropertyResolver);;Argument[1];Argument[-1];taint",
        "org.springframework.core.io;ResourceEditor;true;ResourceEditor;(ResourceLoader,PropertyResolver,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.core.io;ResourceEditor;true;ResourceEditor;(ResourceLoader,PropertyResolver,boolean);;Argument[1];Argument[-1];taint",
        "org.springframework.core.io;ResourceLoader;true;getClassLoader;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.io;ResourceLoader;true;getResource;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.core.io;UrlResource;true;UrlResource;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.core.io;UrlResource;true;UrlResource;(URI);;Argument[0];Argument[-1];taint",
        "org.springframework.core.io;UrlResource;true;UrlResource;(URL);;Argument[0];Argument[-1];taint",
        "org.springframework.core.io;VfsResource;true;VfsResource;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.core.log;LogAccessor;true;LogAccessor;(Log);;Argument[0];Argument[-1];taint",
        "org.springframework.core.log;LogAccessor;true;LogAccessor;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.core.log;LogAccessor;true;getLog;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.log;LogDelegateFactory;false;getCompositeLog;(Log,Log,Log[]);;Argument[0];ReturnValue;taint",
        "org.springframework.core.log;LogDelegateFactory;false;getCompositeLog;(Log,Log,Log[]);;Argument[1];ReturnValue;taint",
        "org.springframework.core.log;LogDelegateFactory;false;getCompositeLog;(Log,Log,Log[]);;ArrayElement of Argument[2];ReturnValue;taint",
        "org.springframework.core.log;LogDelegateFactory;false;getHiddenLog;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.core.log;LogFormatUtils;true;formatValue;(Object,boolean);;Argument[0];ReturnValue;taint",
        "org.springframework.core.log;LogMessage;true;format;(String,Object);;Argument[0];ReturnValue;taint",
        "org.springframework.core.log;LogMessage;true;format;(String,Object);;Argument[1];ReturnValue;taint",
        "org.springframework.core.log;LogMessage;true;format;(String,Object,Object);;Argument[0];ReturnValue;taint",
        "org.springframework.core.log;LogMessage;true;format;(String,Object,Object);;Argument[1];ReturnValue;taint",
        "org.springframework.core.log;LogMessage;true;format;(String,Object,Object);;Argument[2];ReturnValue;taint",
        "org.springframework.core.log;LogMessage;true;format;(String,Object,Object,Object);;Argument[0];ReturnValue;taint",
        "org.springframework.core.log;LogMessage;true;format;(String,Object,Object,Object);;Argument[1];ReturnValue;taint",
        "org.springframework.core.log;LogMessage;true;format;(String,Object,Object,Object);;Argument[2];ReturnValue;taint",
        "org.springframework.core.log;LogMessage;true;format;(String,Object,Object,Object);;Argument[3];ReturnValue;taint",
        "org.springframework.core.log;LogMessage;true;format;(String,Object,Object,Object,Object);;Argument[0];ReturnValue;taint",
        "org.springframework.core.log;LogMessage;true;format;(String,Object,Object,Object,Object);;Argument[1];ReturnValue;taint",
        "org.springframework.core.log;LogMessage;true;format;(String,Object,Object,Object,Object);;Argument[2];ReturnValue;taint",
        "org.springframework.core.log;LogMessage;true;format;(String,Object,Object,Object,Object);;Argument[3];ReturnValue;taint",
        "org.springframework.core.log;LogMessage;true;format;(String,Object,Object,Object,Object);;Argument[4];ReturnValue;taint",
        "org.springframework.core.log;LogMessage;true;format;(String,Object[]);;Argument[0];ReturnValue;taint",
        "org.springframework.core.log;LogMessage;true;format;(String,Object[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.core.log;LogMessage;true;of;(Supplier);;Argument[0];ReturnValue;taint",
        "org.springframework.core.log;LogMessage;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.metrics;ApplicationStartup;true;start;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.core.metrics;StartupStep$Tag;true;getKey;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.metrics;StartupStep$Tag;true;getValue;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.metrics;StartupStep;true;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.metrics;StartupStep;true;getTags;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.metrics;StartupStep;true;tag;(String,String);;Argument[-1];ReturnValue;value",
        "org.springframework.core.metrics;StartupStep;true;tag;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.core.metrics;StartupStep;true;tag;(String,String);;Argument[0];ReturnValue;taint",
        "org.springframework.core.metrics;StartupStep;true;tag;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.core.metrics;StartupStep;true;tag;(String,String);;Argument[1];ReturnValue;taint",
        "org.springframework.core.metrics;StartupStep;true;tag;(String,Supplier);;Argument[-1];ReturnValue;value",
        "org.springframework.core.metrics;StartupStep;true;tag;(String,Supplier);;Argument[0];Argument[-1];taint",
        "org.springframework.core.metrics;StartupStep;true;tag;(String,Supplier);;Argument[0];ReturnValue;taint",
        "org.springframework.core.serializer.support;DeserializingConverter;true;DeserializingConverter;(ClassLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.core.serializer.support;DeserializingConverter;true;DeserializingConverter;(Deserializer);;Argument[0];Argument[-1];taint",
        "org.springframework.core.serializer.support;SerializationDelegate;true;SerializationDelegate;(ClassLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.core.serializer.support;SerializationDelegate;true;SerializationDelegate;(Serializer,Deserializer);;Argument[0];Argument[-1];taint",
        "org.springframework.core.serializer.support;SerializationDelegate;true;SerializationDelegate;(Serializer,Deserializer);;Argument[1];Argument[-1];taint",
        "org.springframework.core.serializer.support;SerializingConverter;true;SerializingConverter;(Serializer);;Argument[0];Argument[-1];taint",
        "org.springframework.core.serializer;DefaultDeserializer;true;DefaultDeserializer;(ClassLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.core.serializer;Deserializer;true;deserializeFromByteArray;(byte[]);;Argument[0];ReturnValue;taint",
        "org.springframework.core.style;DefaultToStringStyler;true;DefaultToStringStyler;(ValueStyler);;Argument[0];Argument[-1];taint",
        "org.springframework.core.style;StylerUtils;true;style;(Object);;Argument[0];ReturnValue;taint",
        "org.springframework.core.style;ToStringCreator;true;ToStringCreator;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.core.style;ToStringCreator;true;ToStringCreator;(Object,ToStringStyler);;Argument[0];Argument[-1];taint",
        "org.springframework.core.style;ToStringCreator;true;ToStringCreator;(Object,ToStringStyler);;Argument[1];Argument[-1];taint",
        "org.springframework.core.style;ToStringCreator;true;ToStringCreator;(Object,ValueStyler);;Argument[0];Argument[-1];taint",
        "org.springframework.core.style;ToStringCreator;true;ToStringCreator;(Object,ValueStyler);;Argument[1];Argument[-1];taint",
        "org.springframework.core.style;ToStringCreator;true;append;(Object);;Argument[-1];ReturnValue;value",
        "org.springframework.core.style;ToStringCreator;true;append;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.core.style;ToStringCreator;true;append;(Object);;Argument[0];ReturnValue;taint",
        "org.springframework.core.style;ToStringCreator;true;append;(String,Object);;Argument[-1];ReturnValue;value",
        "org.springframework.core.style;ToStringCreator;true;append;(String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.core.style;ToStringCreator;true;append;(String,Object);;Argument[0];ReturnValue;taint",
        "org.springframework.core.style;ToStringCreator;true;append;(String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.core.style;ToStringCreator;true;append;(String,Object);;Argument[1];ReturnValue;taint",
        "org.springframework.core.style;ToStringCreator;true;append;(String,boolean);;Argument[-1];ReturnValue;taint",
        "org.springframework.core.style;ToStringCreator;true;append;(String,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.core.style;ToStringCreator;true;append;(String,boolean);;Argument[0];ReturnValue;taint",
        "org.springframework.core.style;ToStringCreator;true;append;(String,byte);;Argument[-1];ReturnValue;taint",
        "org.springframework.core.style;ToStringCreator;true;append;(String,byte);;Argument[0];Argument[-1];taint",
        "org.springframework.core.style;ToStringCreator;true;append;(String,byte);;Argument[0];ReturnValue;taint",
        "org.springframework.core.style;ToStringCreator;true;append;(String,double);;Argument[-1];ReturnValue;taint",
        "org.springframework.core.style;ToStringCreator;true;append;(String,double);;Argument[0];Argument[-1];taint",
        "org.springframework.core.style;ToStringCreator;true;append;(String,double);;Argument[0];ReturnValue;taint",
        "org.springframework.core.style;ToStringCreator;true;append;(String,float);;Argument[-1];ReturnValue;taint",
        "org.springframework.core.style;ToStringCreator;true;append;(String,float);;Argument[0];Argument[-1];taint",
        "org.springframework.core.style;ToStringCreator;true;append;(String,float);;Argument[0];ReturnValue;taint",
        "org.springframework.core.style;ToStringCreator;true;append;(String,int);;Argument[-1];ReturnValue;taint",
        "org.springframework.core.style;ToStringCreator;true;append;(String,int);;Argument[0];Argument[-1];taint",
        "org.springframework.core.style;ToStringCreator;true;append;(String,int);;Argument[0];ReturnValue;taint",
        "org.springframework.core.style;ToStringCreator;true;append;(String,long);;Argument[-1];ReturnValue;taint",
        "org.springframework.core.style;ToStringCreator;true;append;(String,long);;Argument[0];Argument[-1];taint",
        "org.springframework.core.style;ToStringCreator;true;append;(String,long);;Argument[0];ReturnValue;taint",
        "org.springframework.core.style;ToStringCreator;true;append;(String,short);;Argument[-1];ReturnValue;taint",
        "org.springframework.core.style;ToStringCreator;true;append;(String,short);;Argument[0];Argument[-1];taint",
        "org.springframework.core.style;ToStringCreator;true;append;(String,short);;Argument[0];ReturnValue;taint",
        "org.springframework.core.style;ToStringCreator;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.style;ValueStyler;true;style;(Object);;Argument[0];ReturnValue;taint",
        "org.springframework.core.task.support;ConcurrentExecutorAdapter;true;ConcurrentExecutorAdapter;(TaskExecutor);;Argument[0];Argument[-1];taint",
        "org.springframework.core.task.support;ExecutorServiceAdapter;true;ExecutorServiceAdapter;(TaskExecutor);;Argument[0];Argument[-1];taint",
        "org.springframework.core.task.support;TaskExecutorAdapter;true;TaskExecutorAdapter;(Executor);;Argument[0];Argument[-1];taint",
        "org.springframework.core.task.support;TaskExecutorAdapter;true;setTaskDecorator;(TaskDecorator);;Argument[0];Argument[-1];taint",
        "org.springframework.core.task;SimpleAsyncTaskExecutor;true;SimpleAsyncTaskExecutor;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.core.task;SimpleAsyncTaskExecutor;true;SimpleAsyncTaskExecutor;(ThreadFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.core.task;SimpleAsyncTaskExecutor;true;getThreadFactory;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.task;SimpleAsyncTaskExecutor;true;setTaskDecorator;(TaskDecorator);;Argument[0];Argument[-1];taint",
        "org.springframework.core.task;SimpleAsyncTaskExecutor;true;setThreadFactory;(ThreadFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.core.testfixture.env;MockPropertySource;true;MockPropertySource;(Properties);;Argument[0];Argument[-1];taint",
        "org.springframework.core.testfixture.env;MockPropertySource;true;MockPropertySource;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.core.testfixture.env;MockPropertySource;true;MockPropertySource;(String,Properties);;Argument[0];Argument[-1];taint",
        "org.springframework.core.testfixture.env;MockPropertySource;true;MockPropertySource;(String,Properties);;Argument[1];Argument[-1];taint",
        "org.springframework.core.testfixture.env;MockPropertySource;true;setProperty;(String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.core.testfixture.env;MockPropertySource;true;setProperty;(String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.core.testfixture.env;MockPropertySource;true;withProperty;(String,Object);;Argument[-1];ReturnValue;value",
        "org.springframework.core.testfixture.env;MockPropertySource;true;withProperty;(String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.core.testfixture.env;MockPropertySource;true;withProperty;(String,Object);;Argument[0];ReturnValue;taint",
        "org.springframework.core.testfixture.env;MockPropertySource;true;withProperty;(String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.core.testfixture.env;MockPropertySource;true;withProperty;(String,Object);;Argument[1];ReturnValue;taint",
        "org.springframework.core.testfixture.io.buffer;LeakAwareDataBufferFactory;true;LeakAwareDataBufferFactory;(DataBufferFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.core.testfixture.io;ResourceTestUtils;true;qualifiedResource;(Class,String);;Argument[1];ReturnValue;taint",
        "org.springframework.core.testfixture.io;SerializationTestUtils;true;serializeAndDeserialize;(Object);;Argument[0];ReturnValue;taint",
        "org.springframework.core.testfixture.security;TestPrincipal;true;TestPrincipal;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.core.testfixture.xml;XmlContent;true;from;(Object);;Argument[0];ReturnValue;taint",
        "org.springframework.core.testfixture.xml;XmlContent;true;of;(Object);;Argument[0];ReturnValue;taint",
        "org.springframework.core.testfixture.xml;XmlContentAssert;true;isSimilarTo;(Object);;Argument[-1];ReturnValue;value",
        "org.springframework.core.testfixture.xml;XmlContentAssert;true;isSimilarTo;(Object,Predicate);;Argument[-1];ReturnValue;value",
        "org.springframework.core.testfixture.xml;XmlContentAssert;true;isSimilarTo;(String,DifferenceEvaluator);;Argument[-1];ReturnValue;value",
        "org.springframework.core.testfixture.xml;XmlContentAssert;true;isSimilarToIgnoringWhitespace;(Object);;Argument[-1];ReturnValue;value",
        "org.springframework.core.testfixture.xml;XmlContentAssert;true;isSimilarToIgnoringWhitespace;(String,NodeMatcher);;Argument[-1];ReturnValue;value",
        "org.springframework.core.type.classreading;AnnotationMetadataReadingVisitor;true;AnnotationMetadataReadingVisitor;(ClassLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.core.type.classreading;CachingMetadataReaderFactory;true;CachingMetadataReaderFactory;(ClassLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.core.type.classreading;CachingMetadataReaderFactory;true;CachingMetadataReaderFactory;(ResourceLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.core.type.classreading;MetadataReader;true;getAnnotationMetadata;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.type.classreading;MetadataReader;true;getClassMetadata;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.type.classreading;MetadataReader;true;getResource;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.type.classreading;MetadataReaderFactory;true;getMetadataReader;(Resource);;Argument[-1];ReturnValue;taint",
        "org.springframework.core.type.classreading;MetadataReaderFactory;true;getMetadataReader;(Resource);;Argument[0];Argument[-1];taint",
        "org.springframework.core.type.classreading;MetadataReaderFactory;true;getMetadataReader;(Resource);;Argument[0];ReturnValue;taint",
        "org.springframework.core.type.classreading;MetadataReaderFactory;true;getMetadataReader;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.core.type.classreading;MethodMetadataReadingVisitor;true;MethodMetadataReadingVisitor;(String,int,String,String,ClassLoader,Set);;Argument[0];Argument[-1];taint",
        "org.springframework.core.type.classreading;MethodMetadataReadingVisitor;true;MethodMetadataReadingVisitor;(String,int,String,String,ClassLoader,Set);;Argument[2];Argument[-1];taint",
        "org.springframework.core.type.classreading;MethodMetadataReadingVisitor;true;MethodMetadataReadingVisitor;(String,int,String,String,ClassLoader,Set);;Argument[3];Argument[-1];taint",
        "org.springframework.core.type.classreading;MethodMetadataReadingVisitor;true;MethodMetadataReadingVisitor;(String,int,String,String,ClassLoader,Set);;Argument[4];Argument[-1];taint",
        "org.springframework.core.type.classreading;MethodMetadataReadingVisitor;true;MethodMetadataReadingVisitor;(String,int,String,String,ClassLoader,Set);;Argument[5];Argument[-1];taint",
        "org.springframework.core.type.classreading;SimpleMetadataReaderFactory;true;SimpleMetadataReaderFactory;(ClassLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.core.type.classreading;SimpleMetadataReaderFactory;true;SimpleMetadataReaderFactory;(ResourceLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.core.type.classreading;SimpleMetadataReaderFactory;true;getResourceLoader;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.type.filter;RegexPatternTypeFilter;true;RegexPatternTypeFilter;(Pattern);;Argument[0];Argument[-1];taint",
        "org.springframework.core.type;AnnotatedTypeMetadata;true;getAllAnnotationAttributes;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.core.type;AnnotatedTypeMetadata;true;getAllAnnotationAttributes;(String,boolean);;Argument[-1];ReturnValue;taint",
        "org.springframework.core.type;AnnotatedTypeMetadata;true;getAnnotationAttributes;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.core.type;AnnotatedTypeMetadata;true;getAnnotationAttributes;(String,boolean);;Argument[-1];ReturnValue;taint",
        "org.springframework.core.type;AnnotatedTypeMetadata;true;getAnnotations;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.type;AnnotationMetadata;true;getAnnotatedMethods;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.core.type;AnnotationMetadata;true;getAnnotationTypes;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.type;AnnotationMetadata;true;getMetaAnnotationTypes;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.core.type;ClassMetadata;true;getClassName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.type;ClassMetadata;true;getEnclosingClassName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.type;ClassMetadata;true;getInterfaceNames;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.type;ClassMetadata;true;getMemberClassNames;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.type;ClassMetadata;true;getSuperClassName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.type;MethodMetadata;true;getDeclaringClassName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.type;MethodMetadata;true;getMethodName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.type;MethodMetadata;true;getReturnTypeName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core.type;StandardMethodMetadata;true;StandardMethodMetadata;(Method);;Argument[0];Argument[-1];taint",
        "org.springframework.core.type;StandardMethodMetadata;true;StandardMethodMetadata;(Method,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.core.type;StandardMethodMetadata;true;getIntrospectedMethod;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core;AliasRegistry;true;getAliases;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.core;AliasRegistry;true;getAliases;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.core;AliasRegistry;true;registerAlias;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.core;AliasRegistry;true;registerAlias;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.core;AttributeAccessor;true;attributeNames;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core;AttributeAccessor;true;computeAttribute;(String,Function);;Argument[-1];ReturnValue;taint",
        "org.springframework.core;AttributeAccessor;true;computeAttribute;(String,Function);;Argument[0];Argument[-1];taint",
        "org.springframework.core;AttributeAccessor;true;getAttribute;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.core;AttributeAccessor;true;removeAttribute;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.core;AttributeAccessor;true;setAttribute;(String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.core;AttributeAccessor;true;setAttribute;(String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.core;BridgeMethodResolver;false;findBridgedMethod;(Method);;Argument[0];ReturnValue;taint",
        "org.springframework.core;CollectionFactory;false;createApproximateMap;(Object,int);;Argument[0];ReturnValue;taint",
        "org.springframework.core;CollectionFactory;false;createSortedProperties;(Properties,boolean);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.core;ConfigurableObjectInputStream;true;ConfigurableObjectInputStream;(InputStream,ClassLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.core;ConfigurableObjectInputStream;true;ConfigurableObjectInputStream;(InputStream,ClassLoader);;Argument[1];Argument[-1];taint",
        "org.springframework.core;ConfigurableObjectInputStream;true;ConfigurableObjectInputStream;(InputStream,ClassLoader,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.core;ConfigurableObjectInputStream;true;ConfigurableObjectInputStream;(InputStream,ClassLoader,boolean);;Argument[1];Argument[-1];taint",
        "org.springframework.core;Constants;true;asObject;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.core;Constants;true;getClassName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core;Constants;true;getNames;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.core;Constants;true;getNamesForProperty;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.core;Constants;true;getNamesForSuffix;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.core;Constants;true;toCode;(Object,String);;Argument[-1];ReturnValue;taint",
        "org.springframework.core;Constants;true;toCodeForProperty;(Object,String);;Argument[-1];ReturnValue;taint",
        "org.springframework.core;Constants;true;toCodeForSuffix;(Object,String);;Argument[-1];ReturnValue;taint",
        "org.springframework.core;Conventions;false;attributeNameToPropertyName;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.core;Conventions;false;getQualifiedAttributeName;(Class,String);;Argument[1];ReturnValue;taint",
        "org.springframework.core;DecoratingClassLoader;true;excludeClass;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.core;DecoratingClassLoader;true;excludePackage;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.core;GenericTypeResolver;false;resolveType;(Type,Class);;Argument[0];ReturnValue;taint",
        "org.springframework.core;MethodClassKey;false;MethodClassKey;(Method,Class);;Argument[0];Argument[-1];taint",
        "org.springframework.core;MethodClassKey;false;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core;MethodIntrospector;false;selectInvocableMethod;(Method,Class);;Argument[0];ReturnValue;taint",
        "org.springframework.core;MethodParameter;true;MethodParameter;(Constructor,int);;Argument[0];Argument[-1];taint",
        "org.springframework.core;MethodParameter;true;MethodParameter;(Constructor,int,int);;Argument[0];Argument[-1];taint",
        "org.springframework.core;MethodParameter;true;MethodParameter;(Method,int);;Argument[0];Argument[-1];taint",
        "org.springframework.core;MethodParameter;true;MethodParameter;(Method,int,int);;Argument[0];Argument[-1];taint",
        "org.springframework.core;MethodParameter;true;MethodParameter;(MethodParameter);;Argument[0];Argument[-1];taint",
        "org.springframework.core;MethodParameter;true;forExecutable;(Executable,int);;Argument[0];ReturnValue;taint",
        "org.springframework.core;MethodParameter;true;forMethodOrConstructor;(Object,int);;Argument[0];ReturnValue;taint",
        "org.springframework.core;MethodParameter;true;getAnnotatedElement;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core;MethodParameter;true;getConstructor;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core;MethodParameter;true;getExecutable;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core;MethodParameter;true;getGenericParameterType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core;MethodParameter;true;getMember;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core;MethodParameter;true;getMethod;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core;MethodParameter;true;getNestedGenericParameterType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core;MethodParameter;true;getParameter;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core;MethodParameter;true;getParameterAnnotation;(Class);;Argument[-1];ReturnValue;taint",
        "org.springframework.core;MethodParameter;true;getParameterAnnotations;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core;MethodParameter;true;getParameterName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core;MethodParameter;true;initParameterNameDiscovery;(ParameterNameDiscoverer);;Argument[0];Argument[-1];taint",
        "org.springframework.core;MethodParameter;true;nested;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core;MethodParameter;true;nested;(Integer);;Argument[-1];ReturnValue;taint",
        "org.springframework.core;MethodParameter;true;nestedIfOptional;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core;MethodParameter;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core;MethodParameter;true;withContainingClass;(Class);;Argument[-1];ReturnValue;taint",
        "org.springframework.core;MethodParameter;true;withTypeIndex;(int);;Argument[-1];ReturnValue;taint",
        "org.springframework.core;NamedInheritableThreadLocal;true;NamedInheritableThreadLocal;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.core;NamedInheritableThreadLocal;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core;NamedThreadLocal;true;NamedThreadLocal;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.core;NamedThreadLocal;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core;NestedCheckedException;true;getMostSpecificCause;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core;NestedExceptionUtils;true;buildMessage;(String,Throwable);;Argument[0];ReturnValue;taint",
        "org.springframework.core;NestedExceptionUtils;true;buildMessage;(String,Throwable);;Argument[1];ReturnValue;taint",
        "org.springframework.core;NestedExceptionUtils;true;getMostSpecificCause;(Throwable);;Argument[0];ReturnValue;taint",
        "org.springframework.core;NestedRuntimeException;true;getMostSpecificCause;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core;OverridingClassLoader;true;OverridingClassLoader;(ClassLoader,ClassLoader);;Argument[1];Argument[-1];taint",
        "org.springframework.core;ParameterNameDiscoverer;true;getParameterNames;(Constructor);;Argument[-1];ReturnValue;taint",
        "org.springframework.core;ParameterNameDiscoverer;true;getParameterNames;(Method);;Argument[-1];ReturnValue;taint",
        "org.springframework.core;ParameterizedTypeReference;true;forType;(Type);;Argument[0];ReturnValue;taint",
        "org.springframework.core;ParameterizedTypeReference;true;getType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core;ParameterizedTypeReference;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core;PrioritizedParameterNameDiscoverer;true;addDiscoverer;(ParameterNameDiscoverer);;Argument[0];Argument[-1];taint",
        "org.springframework.core;ReactiveAdapter;true;ReactiveAdapter;(ReactiveTypeDescriptor,Function,Function);;Argument[0];Argument[-1];taint",
        "org.springframework.core;ReactiveAdapter;true;ReactiveAdapter;(ReactiveTypeDescriptor,Function,Function);;Argument[1];Argument[-1];taint",
        "org.springframework.core;ReactiveAdapter;true;ReactiveAdapter;(ReactiveTypeDescriptor,Function,Function);;Argument[2];Argument[-1];taint",
        "org.springframework.core;ReactiveAdapter;true;fromPublisher;(Publisher);;Argument[0];ReturnValue;taint",
        "org.springframework.core;ReactiveAdapter;true;getDescriptor;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core;ReactiveAdapter;true;toPublisher;(Object);;Argument[-1];ReturnValue;taint",
        "org.springframework.core;ReactiveAdapter;true;toPublisher;(Object);;Argument[0];ReturnValue;taint",
        "org.springframework.core;ReactiveAdapterRegistry;true;getAdapter;(Class);;Argument[-1];ReturnValue;taint",
        "org.springframework.core;ReactiveAdapterRegistry;true;getAdapter;(Class,Object);;Argument[-1];ReturnValue;taint",
        "org.springframework.core;ReactiveAdapterRegistry;true;registerReactiveType;(ReactiveTypeDescriptor,Function,Function);;Argument[0];Argument[-1];taint",
        "org.springframework.core;ReactiveAdapterRegistry;true;registerReactiveType;(ReactiveTypeDescriptor,Function,Function);;Argument[1];Argument[-1];taint",
        "org.springframework.core;ReactiveAdapterRegistry;true;registerReactiveType;(ReactiveTypeDescriptor,Function,Function);;Argument[2];Argument[-1];taint",
        "org.springframework.core;ReactiveTypeDescriptor;false;getEmptyValue;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core;ReactiveTypeDescriptor;false;multiValue;(Class,Supplier);;Argument[1];ReturnValue;taint",
        "org.springframework.core;ReactiveTypeDescriptor;false;noValue;(Class,Supplier);;Argument[1];ReturnValue;taint",
        "org.springframework.core;ReactiveTypeDescriptor;false;nonDeferredAsyncValue;(Class,Supplier);;Argument[1];ReturnValue;taint",
        "org.springframework.core;ReactiveTypeDescriptor;false;singleOptionalValue;(Class,Supplier);;Argument[1];ReturnValue;taint",
        "org.springframework.core;ResolvableType;true;as;(Class);;Argument[-1];ReturnValue;value",
        "org.springframework.core;ResolvableType;true;asCollection;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core;ResolvableType;true;asMap;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core;ResolvableType;true;forArrayComponent;(ResolvableType);;Argument[0];ReturnValue;taint",
        "org.springframework.core;ResolvableType;true;forClassWithGenerics;(Class,Class[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.core;ResolvableType;true;forClassWithGenerics;(Class,ResolvableType[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.core;ResolvableType;true;forConstructorParameter;(Constructor,int);;Argument[0];ReturnValue;taint",
        "org.springframework.core;ResolvableType;true;forConstructorParameter;(Constructor,int,Class);;Argument[0];ReturnValue;taint",
        "org.springframework.core;ResolvableType;true;forField;(Field);;Argument[0];ReturnValue;taint",
        "org.springframework.core;ResolvableType;true;forField;(Field,Class);;Argument[0];ReturnValue;taint",
        "org.springframework.core;ResolvableType;true;forField;(Field,ResolvableType);;Argument[0];ReturnValue;taint",
        "org.springframework.core;ResolvableType;true;forField;(Field,ResolvableType);;Argument[1];ReturnValue;taint",
        "org.springframework.core;ResolvableType;true;forField;(Field,int);;Argument[0];ReturnValue;taint",
        "org.springframework.core;ResolvableType;true;forField;(Field,int,Class);;Argument[0];ReturnValue;taint",
        "org.springframework.core;ResolvableType;true;forMethodParameter;(Method,int);;Argument[0];ReturnValue;taint",
        "org.springframework.core;ResolvableType;true;forMethodParameter;(Method,int,Class);;Argument[0];ReturnValue;taint",
        "org.springframework.core;ResolvableType;true;forMethodParameter;(MethodParameter);;Argument[0];ReturnValue;taint",
        "org.springframework.core;ResolvableType;true;forMethodParameter;(MethodParameter,ResolvableType);;Argument[0];ReturnValue;taint",
        "org.springframework.core;ResolvableType;true;forMethodParameter;(MethodParameter,ResolvableType);;Argument[1];ReturnValue;taint",
        "org.springframework.core;ResolvableType;true;forMethodParameter;(MethodParameter,Type);;Argument[0];ReturnValue;taint",
        "org.springframework.core;ResolvableType;true;forMethodParameter;(MethodParameter,Type);;Argument[1];ReturnValue;taint",
        "org.springframework.core;ResolvableType;true;forMethodReturnType;(Method);;Argument[0];ReturnValue;taint",
        "org.springframework.core;ResolvableType;true;forMethodReturnType;(Method,Class);;Argument[0];ReturnValue;taint",
        "org.springframework.core;ResolvableType;true;forType;(Type);;Argument[0];ReturnValue;taint",
        "org.springframework.core;ResolvableType;true;forType;(Type,ResolvableType);;Argument[0];ReturnValue;taint",
        "org.springframework.core;ResolvableType;true;forType;(Type,ResolvableType);;Argument[1];ReturnValue;taint",
        "org.springframework.core;ResolvableType;true;getComponentType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core;ResolvableType;true;getGeneric;(int[]);;Argument[-1];ReturnValue;taint",
        "org.springframework.core;ResolvableType;true;getGenerics;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core;ResolvableType;true;getInterfaces;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core;ResolvableType;true;getNested;(int);;Argument[-1];ReturnValue;taint",
        "org.springframework.core;ResolvableType;true;getNested;(int,Map);;Argument[-1];ReturnValue;taint",
        "org.springframework.core;ResolvableType;true;getSource;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core;ResolvableType;true;getSuperType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core;ResolvableType;true;getType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core;ResolvableType;true;resolveGenerics;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core;ResolvableType;true;resolveGenerics;(Class);;Argument[-1];ReturnValue;taint",
        "org.springframework.core;ResolvableType;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core;ResolvableTypeProvider;true;getResolvableType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.core;SimpleAliasRegistry;true;canonicalName;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.core;SimpleAliasRegistry;true;canonicalName;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.core;SmartClassLoader;true;getOriginalClassLoader;();;Argument[-1];ReturnValue;taint",
        "org.springframework.dao.annotation;PersistenceExceptionTranslationAdvisor;true;PersistenceExceptionTranslationAdvisor;(PersistenceExceptionTranslator,Class);;Argument[0];Argument[-1];taint",
        "org.springframework.dao.support;ChainedPersistenceExceptionTranslator;true;addDelegate;(PersistenceExceptionTranslator);;Argument[0];Argument[-1];taint",
        "org.springframework.dao.support;ChainedPersistenceExceptionTranslator;true;getDelegates;();;Argument[-1];ReturnValue;taint",
        "org.springframework.dao.support;DataAccessUtils;true;nullableSingleResult;(Collection);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.dao.support;DataAccessUtils;true;objectResult;(Collection,Class);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.dao.support;DataAccessUtils;true;requiredSingleResult;(Collection);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.dao.support;DataAccessUtils;true;requiredUniqueResult;(Collection);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.dao.support;DataAccessUtils;true;singleResult;(Collection);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.dao.support;DataAccessUtils;true;translateIfNecessary;(RuntimeException,PersistenceExceptionTranslator);;Argument[0];ReturnValue;taint",
        "org.springframework.dao.support;DataAccessUtils;true;uniqueResult;(Collection);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.dao.support;PersistenceExceptionTranslationInterceptor;true;PersistenceExceptionTranslationInterceptor;(ListableBeanFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.dao.support;PersistenceExceptionTranslationInterceptor;true;PersistenceExceptionTranslationInterceptor;(PersistenceExceptionTranslator);;Argument[0];Argument[-1];taint",
        "org.springframework.dao.support;PersistenceExceptionTranslationInterceptor;true;setPersistenceExceptionTranslator;(PersistenceExceptionTranslator);;Argument[0];Argument[-1];taint",
        "org.springframework.expression.common;CompositeStringExpression;true;CompositeStringExpression;(String,Expression[]);;Argument[0];Argument[-1];taint",
        "org.springframework.expression.common;CompositeStringExpression;true;CompositeStringExpression;(String,Expression[]);;Argument[1];Argument[-1];taint",
        "org.springframework.expression.common;CompositeStringExpression;true;getExpressions;();;Argument[-1];ReturnValue;taint",
        "org.springframework.expression.common;LiteralExpression;true;LiteralExpression;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.expression.common;TemplateParserContext;true;TemplateParserContext;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.expression.common;TemplateParserContext;true;TemplateParserContext;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.expression.spel.ast;Assign;true;Assign;(int,int,SpelNodeImpl[]);;Argument[2];Argument[-1];taint",
        "org.springframework.expression.spel.ast;AstUtils;true;getPropertyAccessorsToTry;(Class,List);;Element of Argument[1];ReturnValue;taint",
        "org.springframework.expression.spel.ast;BeanReference;true;BeanReference;(int,int,String);;Argument[2];Argument[-1];taint",
        "org.springframework.expression.spel.ast;BooleanLiteral;true;BooleanLiteral;(String,int,int,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.expression.spel.ast;CompoundExpression;true;CompoundExpression;(int,int,SpelNodeImpl[]);;Argument[2];Argument[-1];taint",
        "org.springframework.expression.spel.ast;ConstructorReference;true;ConstructorReference;(int,int,SpelNodeImpl[]);;Argument[2];Argument[-1];taint",
        "org.springframework.expression.spel.ast;ConstructorReference;true;ConstructorReference;(int,int,SpelNodeImpl[],SpelNodeImpl[]);;Argument[2];Argument[-1];taint",
        "org.springframework.expression.spel.ast;ConstructorReference;true;ConstructorReference;(int,int,SpelNodeImpl[],SpelNodeImpl[]);;Argument[3];Argument[-1];taint",
        "org.springframework.expression.spel.ast;Elvis;true;Elvis;(int,int,SpelNodeImpl[]);;Argument[2];Argument[-1];taint",
        "org.springframework.expression.spel.ast;FloatLiteral;true;FloatLiteral;(String,int,int,float);;Argument[0];Argument[-1];taint",
        "org.springframework.expression.spel.ast;FunctionReference;true;FunctionReference;(String,int,int,SpelNodeImpl[]);;Argument[0];Argument[-1];taint",
        "org.springframework.expression.spel.ast;FunctionReference;true;FunctionReference;(String,int,int,SpelNodeImpl[]);;Argument[3];Argument[-1];taint",
        "org.springframework.expression.spel.ast;Identifier;true;Identifier;(String,int,int);;Argument[0];Argument[-1];taint",
        "org.springframework.expression.spel.ast;Indexer;true;Indexer;(int,int,SpelNodeImpl);;Argument[2];Argument[-1];taint",
        "org.springframework.expression.spel.ast;InlineList;true;InlineList;(int,int,SpelNodeImpl[]);;Argument[2];Argument[-1];taint",
        "org.springframework.expression.spel.ast;InlineList;true;getConstantValue;();;Argument[-1];ReturnValue;taint",
        "org.springframework.expression.spel.ast;InlineMap;true;InlineMap;(int,int,SpelNodeImpl[]);;Argument[2];Argument[-1];taint",
        "org.springframework.expression.spel.ast;InlineMap;true;getConstantValue;();;Argument[-1];ReturnValue;taint",
        "org.springframework.expression.spel.ast;IntLiteral;true;IntLiteral;(String,int,int,int);;Argument[0];Argument[-1];taint",
        "org.springframework.expression.spel.ast;Literal;true;Literal;(String,int,int);;Argument[0];Argument[-1];taint",
        "org.springframework.expression.spel.ast;Literal;true;getIntLiteral;(String,int,int,int);;Argument[0];ReturnValue;taint",
        "org.springframework.expression.spel.ast;Literal;true;getLiteralValue;();;Argument[-1];ReturnValue;taint",
        "org.springframework.expression.spel.ast;Literal;true;getLongLiteral;(String,int,int,int);;Argument[0];ReturnValue;taint",
        "org.springframework.expression.spel.ast;Literal;true;getOriginalValue;();;Argument[-1];ReturnValue;taint",
        "org.springframework.expression.spel.ast;Literal;true;getRealLiteral;(String,int,int,boolean);;Argument[0];ReturnValue;taint",
        "org.springframework.expression.spel.ast;LongLiteral;true;LongLiteral;(String,int,int,long);;Argument[0];Argument[-1];taint",
        "org.springframework.expression.spel.ast;MethodReference;true;MethodReference;(boolean,String,int,int,SpelNodeImpl[]);;Argument[1];Argument[-1];taint",
        "org.springframework.expression.spel.ast;MethodReference;true;MethodReference;(boolean,String,int,int,SpelNodeImpl[]);;Argument[4];Argument[-1];taint",
        "org.springframework.expression.spel.ast;MethodReference;true;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.expression.spel.ast;OpAnd;true;OpAnd;(int,int,SpelNodeImpl[]);;Argument[2];Argument[-1];taint",
        "org.springframework.expression.spel.ast;OpDec;true;OpDec;(int,int,boolean,SpelNodeImpl[]);;Argument[3];Argument[-1];taint",
        "org.springframework.expression.spel.ast;OpDivide;true;OpDivide;(int,int,SpelNodeImpl[]);;Argument[2];Argument[-1];taint",
        "org.springframework.expression.spel.ast;OpEQ;true;OpEQ;(int,int,SpelNodeImpl[]);;Argument[2];Argument[-1];taint",
        "org.springframework.expression.spel.ast;OpGE;true;OpGE;(int,int,SpelNodeImpl[]);;Argument[2];Argument[-1];taint",
        "org.springframework.expression.spel.ast;OpGT;true;OpGT;(int,int,SpelNodeImpl[]);;Argument[2];Argument[-1];taint",
        "org.springframework.expression.spel.ast;OpInc;true;OpInc;(int,int,boolean,SpelNodeImpl[]);;Argument[3];Argument[-1];taint",
        "org.springframework.expression.spel.ast;OpLE;true;OpLE;(int,int,SpelNodeImpl[]);;Argument[2];Argument[-1];taint",
        "org.springframework.expression.spel.ast;OpLT;true;OpLT;(int,int,SpelNodeImpl[]);;Argument[2];Argument[-1];taint",
        "org.springframework.expression.spel.ast;OpMinus;true;OpMinus;(int,int,SpelNodeImpl[]);;Argument[2];Argument[-1];taint",
        "org.springframework.expression.spel.ast;OpModulus;true;OpModulus;(int,int,SpelNodeImpl[]);;Argument[2];Argument[-1];taint",
        "org.springframework.expression.spel.ast;OpMultiply;true;OpMultiply;(int,int,SpelNodeImpl[]);;Argument[2];Argument[-1];taint",
        "org.springframework.expression.spel.ast;OpNE;true;OpNE;(int,int,SpelNodeImpl[]);;Argument[2];Argument[-1];taint",
        "org.springframework.expression.spel.ast;OpOr;true;OpOr;(int,int,SpelNodeImpl[]);;Argument[2];Argument[-1];taint",
        "org.springframework.expression.spel.ast;OpPlus;true;OpPlus;(int,int,SpelNodeImpl[]);;Argument[2];Argument[-1];taint",
        "org.springframework.expression.spel.ast;Operator;true;Operator;(String,int,int,SpelNodeImpl[]);;Argument[0];Argument[-1];taint",
        "org.springframework.expression.spel.ast;Operator;true;Operator;(String,int,int,SpelNodeImpl[]);;Argument[3];Argument[-1];taint",
        "org.springframework.expression.spel.ast;Operator;true;getLeftOperand;();;Argument[-1];ReturnValue;taint",
        "org.springframework.expression.spel.ast;Operator;true;getOperatorName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.expression.spel.ast;Operator;true;getRightOperand;();;Argument[-1];ReturnValue;taint",
        "org.springframework.expression.spel.ast;OperatorBetween;true;OperatorBetween;(int,int,SpelNodeImpl[]);;Argument[2];Argument[-1];taint",
        "org.springframework.expression.spel.ast;OperatorInstanceof;true;OperatorInstanceof;(int,int,SpelNodeImpl[]);;Argument[2];Argument[-1];taint",
        "org.springframework.expression.spel.ast;OperatorMatches;true;OperatorMatches;(int,int,SpelNodeImpl[]);;Argument[2];Argument[-1];taint",
        "org.springframework.expression.spel.ast;OperatorNot;true;OperatorNot;(int,int,SpelNodeImpl);;Argument[2];Argument[-1];taint",
        "org.springframework.expression.spel.ast;OperatorPower;true;OperatorPower;(int,int,SpelNodeImpl[]);;Argument[2];Argument[-1];taint",
        "org.springframework.expression.spel.ast;Projection;true;Projection;(boolean,int,int,SpelNodeImpl);;Argument[3];Argument[-1];taint",
        "org.springframework.expression.spel.ast;PropertyOrFieldReference;true;PropertyOrFieldReference;(boolean,String,int,int);;Argument[1];Argument[-1];taint",
        "org.springframework.expression.spel.ast;PropertyOrFieldReference;true;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.expression.spel.ast;QualifiedIdentifier;true;QualifiedIdentifier;(int,int,SpelNodeImpl[]);;Argument[2];Argument[-1];taint",
        "org.springframework.expression.spel.ast;RealLiteral;true;RealLiteral;(String,int,int,double);;Argument[0];Argument[-1];taint",
        "org.springframework.expression.spel.ast;Selection;true;Selection;(boolean,int,int,int,SpelNodeImpl);;Argument[4];Argument[-1];taint",
        "org.springframework.expression.spel.ast;SpelNodeImpl;true;SpelNodeImpl;(int,int,SpelNodeImpl[]);;Argument[2];Argument[-1];taint",
        "org.springframework.expression.spel.ast;SpelNodeImpl;true;getExitDescriptor;();;Argument[-1];ReturnValue;taint",
        "org.springframework.expression.spel.ast;SpelNodeImpl;true;getValueInternal;(ExpressionState);;Argument[-1];ReturnValue;taint",
        "org.springframework.expression.spel.ast;StringLiteral;true;StringLiteral;(String,int,int,String);;Argument[0];Argument[-1];taint",
        "org.springframework.expression.spel.ast;StringLiteral;true;StringLiteral;(String,int,int,String);;Argument[3];Argument[-1];taint",
        "org.springframework.expression.spel.ast;StringLiteral;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.expression.spel.ast;Ternary;true;Ternary;(int,int,SpelNodeImpl[]);;Argument[2];Argument[-1];taint",
        "org.springframework.expression.spel.ast;TypeReference;true;TypeReference;(int,int,SpelNodeImpl);;Argument[2];Argument[-1];taint",
        "org.springframework.expression.spel.ast;TypeReference;true;TypeReference;(int,int,SpelNodeImpl,int);;Argument[2];Argument[-1];taint",
        "org.springframework.expression.spel.ast;ValueRef$TypedValueHolderValueRef;true;TypedValueHolderValueRef;(TypedValue,SpelNodeImpl);;Argument[0];Argument[-1];taint",
        "org.springframework.expression.spel.ast;ValueRef$TypedValueHolderValueRef;true;TypedValueHolderValueRef;(TypedValue,SpelNodeImpl);;Argument[1];Argument[-1];taint",
        "org.springframework.expression.spel.ast;ValueRef;true;getValue;();;Argument[-1];ReturnValue;taint",
        "org.springframework.expression.spel.ast;ValueRef;true;setValue;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.expression.spel.ast;VariableReference;true;VariableReference;(String,int,int);;Argument[0];Argument[-1];taint",
        "org.springframework.expression.spel.standard;SpelExpression;true;SpelExpression;(String,SpelNodeImpl,SpelParserConfiguration);;Argument[0];Argument[-1];taint",
        "org.springframework.expression.spel.standard;SpelExpression;true;SpelExpression;(String,SpelNodeImpl,SpelParserConfiguration);;Argument[1];Argument[-1];taint",
        "org.springframework.expression.spel.standard;SpelExpression;true;SpelExpression;(String,SpelNodeImpl,SpelParserConfiguration);;Argument[2];Argument[-1];taint",
        "org.springframework.expression.spel.standard;SpelExpression;true;getAST;();;Argument[-1];ReturnValue;taint",
        "org.springframework.expression.spel.standard;SpelExpression;true;getEvaluationContext;();;Argument[-1];ReturnValue;taint",
        "org.springframework.expression.spel.standard;SpelExpression;true;setEvaluationContext;(EvaluationContext);;Argument[0];Argument[-1];taint",
        "org.springframework.expression.spel.standard;SpelExpression;true;toStringAST;();;Argument[-1];ReturnValue;taint",
        "org.springframework.expression.spel.standard;SpelExpressionParser;true;SpelExpressionParser;(SpelParserConfiguration);;Argument[0];Argument[-1];taint",
        "org.springframework.expression.spel.standard;SpelExpressionParser;true;parseRaw;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.expression.spel.support;ReflectionHelper;true;setupArgumentsForVarargsInvocation;(Class[],Object[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.expression.spel.support;ReflectiveConstructorExecutor;true;ReflectiveConstructorExecutor;(Constructor);;Argument[0];Argument[-1];taint",
        "org.springframework.expression.spel.support;ReflectiveConstructorExecutor;true;getConstructor;();;Argument[-1];ReturnValue;taint",
        "org.springframework.expression.spel.support;ReflectiveMethodExecutor;true;ReflectiveMethodExecutor;(Method);;Argument[0];Argument[-1];taint",
        "org.springframework.expression.spel.support;ReflectiveMethodExecutor;true;getMethod;();;Argument[-1];ReturnValue;taint",
        "org.springframework.expression.spel.support;ReflectiveMethodResolver;true;registerMethodFilter;(Class,MethodFilter);;Argument[1];Argument[-1];taint",
        "org.springframework.expression.spel.support;ReflectivePropertyAccessor;true;createOptimalAccessor;(EvaluationContext,Object,String);;Argument[-1];ReturnValue;value",
        "org.springframework.expression.spel.support;ReflectivePropertyAccessor;true;createOptimalAccessor;(EvaluationContext,Object,String);;Argument[1];Argument[-1];taint",
        "org.springframework.expression.spel.support;ReflectivePropertyAccessor;true;createOptimalAccessor;(EvaluationContext,Object,String);;Argument[1];ReturnValue;taint",
        "org.springframework.expression.spel.support;ReflectivePropertyAccessor;true;createOptimalAccessor;(EvaluationContext,Object,String);;Argument[2];Argument[-1];taint",
        "org.springframework.expression.spel.support;ReflectivePropertyAccessor;true;createOptimalAccessor;(EvaluationContext,Object,String);;Argument[2];ReturnValue;taint",
        "org.springframework.expression.spel.support;ReflectivePropertyAccessor;true;getLastReadInvokerPair;();;Argument[-1];ReturnValue;taint",
        "org.springframework.expression.spel.support;SimpleEvaluationContext$Builder;true;Builder;(PropertyAccessor[]);;Argument[0];Argument[-1];taint",
        "org.springframework.expression.spel.support;SimpleEvaluationContext$Builder;true;withConversionService;(ConversionService);;Argument[-1];ReturnValue;value",
        "org.springframework.expression.spel.support;SimpleEvaluationContext$Builder;true;withConversionService;(ConversionService);;Argument[0];Argument[-1];taint",
        "org.springframework.expression.spel.support;SimpleEvaluationContext$Builder;true;withConversionService;(ConversionService);;Argument[0];ReturnValue;taint",
        "org.springframework.expression.spel.support;SimpleEvaluationContext$Builder;true;withInstanceMethods;();;Argument[-1];ReturnValue;value",
        "org.springframework.expression.spel.support;SimpleEvaluationContext$Builder;true;withMethodResolvers;(MethodResolver[]);;Argument[-1];ReturnValue;value",
        "org.springframework.expression.spel.support;SimpleEvaluationContext$Builder;true;withMethodResolvers;(MethodResolver[]);;Argument[0];Argument[-1];taint",
        "org.springframework.expression.spel.support;SimpleEvaluationContext$Builder;true;withMethodResolvers;(MethodResolver[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.expression.spel.support;SimpleEvaluationContext$Builder;true;withRootObject;(Object);;Argument[-1];ReturnValue;value",
        "org.springframework.expression.spel.support;SimpleEvaluationContext$Builder;true;withRootObject;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.expression.spel.support;SimpleEvaluationContext$Builder;true;withRootObject;(Object);;Argument[0];ReturnValue;taint",
        "org.springframework.expression.spel.support;SimpleEvaluationContext$Builder;true;withTypeConverter;(TypeConverter);;Argument[-1];ReturnValue;value",
        "org.springframework.expression.spel.support;SimpleEvaluationContext$Builder;true;withTypeConverter;(TypeConverter);;Argument[0];Argument[-1];taint",
        "org.springframework.expression.spel.support;SimpleEvaluationContext$Builder;true;withTypeConverter;(TypeConverter);;Argument[0];ReturnValue;taint",
        "org.springframework.expression.spel.support;SimpleEvaluationContext$Builder;true;withTypedRootObject;(Object,TypeDescriptor);;Argument[-1];ReturnValue;value",
        "org.springframework.expression.spel.support;SimpleEvaluationContext$Builder;true;withTypedRootObject;(Object,TypeDescriptor);;Argument[0];Argument[-1];taint",
        "org.springframework.expression.spel.support;SimpleEvaluationContext$Builder;true;withTypedRootObject;(Object,TypeDescriptor);;Argument[0];ReturnValue;taint",
        "org.springframework.expression.spel.support;SimpleEvaluationContext$Builder;true;withTypedRootObject;(Object,TypeDescriptor);;Argument[1];Argument[-1];taint",
        "org.springframework.expression.spel.support;SimpleEvaluationContext$Builder;true;withTypedRootObject;(Object,TypeDescriptor);;Argument[1];ReturnValue;taint",
        "org.springframework.expression.spel.support;SimpleEvaluationContext;false;forPropertyAccessors;(PropertyAccessor[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.expression.spel.support;StandardEvaluationContext;true;StandardEvaluationContext;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.expression.spel.support;StandardEvaluationContext;true;addConstructorResolver;(ConstructorResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.expression.spel.support;StandardEvaluationContext;true;addMethodResolver;(MethodResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.expression.spel.support;StandardEvaluationContext;true;addPropertyAccessor;(PropertyAccessor);;Argument[0];Argument[-1];taint",
        "org.springframework.expression.spel.support;StandardEvaluationContext;true;registerFunction;(String,Method);;Argument[0];Argument[-1];taint",
        "org.springframework.expression.spel.support;StandardEvaluationContext;true;registerFunction;(String,Method);;Argument[1];Argument[-1];taint",
        "org.springframework.expression.spel.support;StandardEvaluationContext;true;setBeanResolver;(BeanResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.expression.spel.support;StandardEvaluationContext;true;setConstructorResolvers;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.expression.spel.support;StandardEvaluationContext;true;setMethodResolvers;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.expression.spel.support;StandardEvaluationContext;true;setOperatorOverloader;(OperatorOverloader);;Argument[0];Argument[-1];taint",
        "org.springframework.expression.spel.support;StandardEvaluationContext;true;setPropertyAccessors;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.expression.spel.support;StandardEvaluationContext;true;setRootObject;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.expression.spel.support;StandardEvaluationContext;true;setRootObject;(Object,TypeDescriptor);;Argument[0];Argument[-1];taint",
        "org.springframework.expression.spel.support;StandardEvaluationContext;true;setRootObject;(Object,TypeDescriptor);;Argument[1];Argument[-1];taint",
        "org.springframework.expression.spel.support;StandardEvaluationContext;true;setTypeComparator;(TypeComparator);;Argument[0];Argument[-1];taint",
        "org.springframework.expression.spel.support;StandardEvaluationContext;true;setTypeConverter;(TypeConverter);;Argument[0];Argument[-1];taint",
        "org.springframework.expression.spel.support;StandardEvaluationContext;true;setTypeLocator;(TypeLocator);;Argument[0];Argument[-1];taint",
        "org.springframework.expression.spel.support;StandardTypeConverter;true;StandardTypeConverter;(ConversionService);;Argument[0];Argument[-1];taint",
        "org.springframework.expression.spel.support;StandardTypeLocator;true;StandardTypeLocator;(ClassLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.expression.spel.support;StandardTypeLocator;true;getImportPrefixes;();;Argument[-1];ReturnValue;taint",
        "org.springframework.expression.spel.support;StandardTypeLocator;true;registerImport;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.expression.spel;CodeFlow;true;CodeFlow;(String,ClassWriter);;Argument[0];Argument[-1];taint",
        "org.springframework.expression.spel;CodeFlow;true;CodeFlow;(String,ClassWriter);;Argument[1];Argument[-1];taint",
        "org.springframework.expression.spel;CodeFlow;true;getClassName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.expression.spel;CodeFlow;true;lastDescriptor;();;Argument[-1];ReturnValue;taint",
        "org.springframework.expression.spel;CodeFlow;true;pushDescriptor;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.expression.spel;CodeFlow;true;registerNewClinit;(ClinitAdder);;Argument[0];Argument[-1];taint",
        "org.springframework.expression.spel;CodeFlow;true;registerNewField;(FieldAdder);;Argument[0];Argument[-1];taint",
        "org.springframework.expression.spel;ExpressionState;true;ExpressionState;(EvaluationContext);;Argument[0];Argument[-1];taint",
        "org.springframework.expression.spel;ExpressionState;true;ExpressionState;(EvaluationContext,SpelParserConfiguration);;Argument[0];Argument[-1];taint",
        "org.springframework.expression.spel;ExpressionState;true;ExpressionState;(EvaluationContext,SpelParserConfiguration);;Argument[1];Argument[-1];taint",
        "org.springframework.expression.spel;ExpressionState;true;ExpressionState;(EvaluationContext,TypedValue);;Argument[0];Argument[-1];taint",
        "org.springframework.expression.spel;ExpressionState;true;ExpressionState;(EvaluationContext,TypedValue);;Argument[1];Argument[-1];taint",
        "org.springframework.expression.spel;ExpressionState;true;ExpressionState;(EvaluationContext,TypedValue,SpelParserConfiguration);;Argument[0];Argument[-1];taint",
        "org.springframework.expression.spel;ExpressionState;true;ExpressionState;(EvaluationContext,TypedValue,SpelParserConfiguration);;Argument[1];Argument[-1];taint",
        "org.springframework.expression.spel;ExpressionState;true;ExpressionState;(EvaluationContext,TypedValue,SpelParserConfiguration);;Argument[2];Argument[-1];taint",
        "org.springframework.expression.spel;ExpressionState;true;convertValue;(Object,TypeDescriptor);;Argument[-1];ReturnValue;taint",
        "org.springframework.expression.spel;ExpressionState;true;convertValue;(Object,TypeDescriptor);;Argument[0];Argument[-1];taint",
        "org.springframework.expression.spel;ExpressionState;true;convertValue;(Object,TypeDescriptor);;Argument[0];ReturnValue;taint",
        "org.springframework.expression.spel;ExpressionState;true;convertValue;(Object,TypeDescriptor);;Argument[1];Argument[-1];taint",
        "org.springframework.expression.spel;ExpressionState;true;convertValue;(TypedValue,TypeDescriptor);;Argument[-1];ReturnValue;taint",
        "org.springframework.expression.spel;ExpressionState;true;convertValue;(TypedValue,TypeDescriptor);;Argument[1];Argument[-1];taint",
        "org.springframework.expression.spel;ExpressionState;true;enterScope;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.expression.spel;ExpressionState;true;enterScope;(String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.expression.spel;ExpressionState;true;enterScope;(String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.expression.spel;ExpressionState;true;getActiveContextObject;();;Argument[-1];ReturnValue;taint",
        "org.springframework.expression.spel;ExpressionState;true;getConfiguration;();;Argument[-1];ReturnValue;taint",
        "org.springframework.expression.spel;ExpressionState;true;getEvaluationContext;();;Argument[-1];ReturnValue;taint",
        "org.springframework.expression.spel;ExpressionState;true;getPropertyAccessors;();;Argument[-1];ReturnValue;taint",
        "org.springframework.expression.spel;ExpressionState;true;getRootContextObject;();;Argument[-1];ReturnValue;taint",
        "org.springframework.expression.spel;ExpressionState;true;getScopeRootContextObject;();;Argument[-1];ReturnValue;taint",
        "org.springframework.expression.spel;ExpressionState;true;getTypeComparator;();;Argument[-1];ReturnValue;taint",
        "org.springframework.expression.spel;ExpressionState;true;getTypeConverter;();;Argument[-1];ReturnValue;taint",
        "org.springframework.expression.spel;ExpressionState;true;lookupLocalVariable;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.expression.spel;ExpressionState;true;pushActiveContextObject;(TypedValue);;Argument[0];Argument[-1];taint",
        "org.springframework.expression.spel;ExpressionState;true;setLocalVariable;(String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.expression.spel;ExpressionState;true;setLocalVariable;(String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.expression.spel;ExpressionState;true;setVariable;(String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.expression.spel;ExpressionState;true;setVariable;(String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.expression.spel;SpelEvaluationException;true;SpelEvaluationException;(SpelMessage,Object[]);;Argument[1];Argument[-1];taint",
        "org.springframework.expression.spel;SpelEvaluationException;true;SpelEvaluationException;(Throwable,SpelMessage,Object[]);;Argument[2];Argument[-1];taint",
        "org.springframework.expression.spel;SpelEvaluationException;true;SpelEvaluationException;(int,SpelMessage,Object[]);;Argument[2];Argument[-1];taint",
        "org.springframework.expression.spel;SpelEvaluationException;true;SpelEvaluationException;(int,Throwable,SpelMessage,Object[]);;Argument[3];Argument[-1];taint",
        "org.springframework.expression.spel;SpelEvaluationException;true;getInserts;();;Argument[-1];ReturnValue;taint",
        "org.springframework.expression.spel;SpelNode;true;getChild;(int);;Argument[-1];ReturnValue;taint",
        "org.springframework.expression.spel;SpelNode;true;getTypedValue;(ExpressionState);;Argument[-1];ReturnValue;taint",
        "org.springframework.expression.spel;SpelNode;true;getValue;(ExpressionState);;Argument[-1];ReturnValue;taint",
        "org.springframework.expression.spel;SpelNode;true;toStringAST;();;Argument[-1];ReturnValue;taint",
        "org.springframework.expression.spel;SpelParseException;true;SpelParseException;(String,int,SpelMessage,Object[]);;Argument[0];Argument[-1];taint",
        "org.springframework.expression.spel;SpelParseException;true;SpelParseException;(String,int,SpelMessage,Object[]);;Argument[3];Argument[-1];taint",
        "org.springframework.expression.spel;SpelParseException;true;SpelParseException;(int,SpelMessage,Object[]);;Argument[2];Argument[-1];taint",
        "org.springframework.expression.spel;SpelParseException;true;SpelParseException;(int,Throwable,SpelMessage,Object[]);;Argument[3];Argument[-1];taint",
        "org.springframework.expression.spel;SpelParseException;true;getInserts;();;Argument[-1];ReturnValue;taint",
        "org.springframework.expression.spel;SpelParserConfiguration;true;SpelParserConfiguration;(SpelCompilerMode,ClassLoader);;Argument[1];Argument[-1];taint",
        "org.springframework.expression.spel;SpelParserConfiguration;true;SpelParserConfiguration;(SpelCompilerMode,ClassLoader,boolean,boolean,int);;Argument[1];Argument[-1];taint",
        "org.springframework.expression.spel;SpelParserConfiguration;true;getCompilerClassLoader;();;Argument[-1];ReturnValue;taint",
        "org.springframework.expression;BeanResolver;true;resolve;(EvaluationContext,String);;Argument[-1];ReturnValue;taint",
        "org.springframework.expression;BeanResolver;true;resolve;(EvaluationContext,String);;Argument[1];Argument[-1];taint",
        "org.springframework.expression;BeanResolver;true;resolve;(EvaluationContext,String);;Argument[1];ReturnValue;taint",
        "org.springframework.expression;EvaluationContext;true;getBeanResolver;();;Argument[-1];ReturnValue;taint",
        "org.springframework.expression;EvaluationContext;true;getConstructorResolvers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.expression;EvaluationContext;true;getMethodResolvers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.expression;EvaluationContext;true;getOperatorOverloader;();;Argument[-1];ReturnValue;taint",
        "org.springframework.expression;EvaluationContext;true;getPropertyAccessors;();;Argument[-1];ReturnValue;taint",
        "org.springframework.expression;EvaluationContext;true;getRootObject;();;Argument[-1];ReturnValue;taint",
        "org.springframework.expression;EvaluationContext;true;getTypeComparator;();;Argument[-1];ReturnValue;taint",
        "org.springframework.expression;EvaluationContext;true;getTypeConverter;();;Argument[-1];ReturnValue;taint",
        "org.springframework.expression;EvaluationContext;true;getTypeLocator;();;Argument[-1];ReturnValue;taint",
        "org.springframework.expression;EvaluationContext;true;lookupVariable;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.expression;EvaluationContext;true;setVariable;(String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.expression;EvaluationContext;true;setVariable;(String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.expression;EvaluationException;true;EvaluationException;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.expression;Expression;true;getExpressionString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.expression;Expression;true;getValue;();;Argument[-1];ReturnValue;taint",
        "org.springframework.expression;Expression;true;getValue;(Class);;Argument[-1];ReturnValue;taint",
        "org.springframework.expression;Expression;true;getValue;(EvaluationContext);;Argument[-1];ReturnValue;taint",
        "org.springframework.expression;Expression;true;getValue;(EvaluationContext,Class);;Argument[-1];ReturnValue;taint",
        "org.springframework.expression;Expression;true;getValue;(EvaluationContext,Object);;Argument[-1];ReturnValue;taint",
        "org.springframework.expression;Expression;true;getValue;(EvaluationContext,Object,Class);;Argument[-1];ReturnValue;taint",
        "org.springframework.expression;Expression;true;getValue;(Object);;Argument[-1];ReturnValue;taint",
        "org.springframework.expression;Expression;true;getValue;(Object,Class);;Argument[-1];ReturnValue;taint",
        "org.springframework.expression;Expression;true;getValueTypeDescriptor;();;Argument[-1];ReturnValue;taint",
        "org.springframework.expression;Expression;true;getValueTypeDescriptor;(EvaluationContext);;Argument[-1];ReturnValue;taint",
        "org.springframework.expression;Expression;true;getValueTypeDescriptor;(EvaluationContext,Object);;Argument[-1];ReturnValue;taint",
        "org.springframework.expression;Expression;true;getValueTypeDescriptor;(Object);;Argument[-1];ReturnValue;taint",
        "org.springframework.expression;ExpressionException;true;ExpressionException;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.expression;ExpressionException;true;ExpressionException;(String,int,String);;Argument[0];Argument[-1];taint",
        "org.springframework.expression;ExpressionException;true;getExpressionString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.expression;ExpressionException;true;toDetailedString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.expression;ExpressionInvocationTargetException;true;ExpressionInvocationTargetException;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.expression;ExpressionParser;true;parseExpression;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.expression;ExpressionParser;true;parseExpression;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.expression;ExpressionParser;true;parseExpression;(String,ParserContext);;Argument[0];Argument[-1];taint",
        "org.springframework.expression;ExpressionParser;true;parseExpression;(String,ParserContext);;Argument[0];ReturnValue;taint",
        "org.springframework.expression;ParseException;true;ParseException;(String,int,String);;Argument[0];Argument[-1];taint",
        "org.springframework.expression;ParserContext;true;getExpressionPrefix;();;Argument[-1];ReturnValue;taint",
        "org.springframework.expression;ParserContext;true;getExpressionSuffix;();;Argument[-1];ReturnValue;taint",
        "org.springframework.expression;PropertyAccessor;true;canRead;(EvaluationContext,Object,String);;Argument[1];Argument[-1];taint",
        "org.springframework.expression;PropertyAccessor;true;canRead;(EvaluationContext,Object,String);;Argument[2];Argument[-1];taint",
        "org.springframework.expression;PropertyAccessor;true;canWrite;(EvaluationContext,Object,String);;Argument[1];Argument[-1];taint",
        "org.springframework.expression;PropertyAccessor;true;canWrite;(EvaluationContext,Object,String);;Argument[2];Argument[-1];taint",
        "org.springframework.expression;PropertyAccessor;true;read;(EvaluationContext,Object,String);;Argument[1];Argument[-1];taint",
        "org.springframework.expression;PropertyAccessor;true;read;(EvaluationContext,Object,String);;Argument[1];ReturnValue;taint",
        "org.springframework.expression;PropertyAccessor;true;read;(EvaluationContext,Object,String);;Argument[2];Argument[-1];taint",
        "org.springframework.expression;PropertyAccessor;true;read;(EvaluationContext,Object,String);;Argument[2];ReturnValue;taint",
        "org.springframework.expression;PropertyAccessor;true;write;(EvaluationContext,Object,String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.expression;PropertyAccessor;true;write;(EvaluationContext,Object,String,Object);;Argument[2];Argument[-1];taint",
        "org.springframework.expression;TypeConverter;true;canConvert;(TypeDescriptor,TypeDescriptor);;Argument[0];Argument[-1];taint",
        "org.springframework.expression;TypeConverter;true;canConvert;(TypeDescriptor,TypeDescriptor);;Argument[1];Argument[-1];taint",
        "org.springframework.expression;TypeConverter;true;convertValue;(Object,TypeDescriptor,TypeDescriptor);;Argument[0];ReturnValue;taint",
        "org.springframework.expression;TypeConverter;true;convertValue;(Object,TypeDescriptor,TypeDescriptor);;Argument[1];Argument[-1];taint",
        "org.springframework.expression;TypeConverter;true;convertValue;(Object,TypeDescriptor,TypeDescriptor);;Argument[2];Argument[-1];taint",
        "org.springframework.expression;TypedValue;true;TypedValue;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.expression;TypedValue;true;TypedValue;(Object,TypeDescriptor);;Argument[0];Argument[-1];taint",
        "org.springframework.expression;TypedValue;true;TypedValue;(Object,TypeDescriptor);;Argument[1];Argument[-1];taint",
        "org.springframework.expression;TypedValue;true;getTypeDescriptor;();;Argument[-1];ReturnValue;taint",
        "org.springframework.expression;TypedValue;true;getValue;();;Argument[-1];ReturnValue;taint",
        "org.springframework.expression;TypedValue;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.format.datetime.joda;DateTimeFormatterFactory;true;DateTimeFormatterFactory;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.format.datetime.joda;DateTimeFormatterFactory;true;createDateTimeFormatter;(DateTimeFormatter);;Argument[0];ReturnValue;taint",
        "org.springframework.format.datetime.joda;DateTimeFormatterFactory;true;setPattern;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.format.datetime.joda;DateTimeFormatterFactory;true;setStyle;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.format.datetime.joda;DateTimeFormatterFactory;true;setTimeZone;(TimeZone);;Argument[0];Argument[-1];taint",
        "org.springframework.format.datetime.joda;DateTimeParser;false;DateTimeParser;(DateTimeFormatter);;Argument[0];Argument[-1];taint",
        "org.springframework.format.datetime.joda;JodaTimeContext;true;getChronology;();;Argument[-1];ReturnValue;taint",
        "org.springframework.format.datetime.joda;JodaTimeContext;true;getFormatter;(DateTimeFormatter);;Argument[0];ReturnValue;taint",
        "org.springframework.format.datetime.joda;JodaTimeContext;true;getTimeZone;();;Argument[-1];ReturnValue;taint",
        "org.springframework.format.datetime.joda;JodaTimeContext;true;setChronology;(Chronology);;Argument[0];Argument[-1];taint",
        "org.springframework.format.datetime.joda;JodaTimeContext;true;setTimeZone;(DateTimeZone);;Argument[0];Argument[-1];taint",
        "org.springframework.format.datetime.joda;JodaTimeContextHolder;false;getFormatter;(DateTimeFormatter,Locale);;Argument[0];ReturnValue;taint",
        "org.springframework.format.datetime.joda;JodaTimeFormatterRegistrar;true;setDateFormatter;(DateTimeFormatter);;Argument[0];Argument[-1];taint",
        "org.springframework.format.datetime.joda;JodaTimeFormatterRegistrar;true;setDateStyle;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.format.datetime.joda;JodaTimeFormatterRegistrar;true;setDateTimeFormatter;(DateTimeFormatter);;Argument[0];Argument[-1];taint",
        "org.springframework.format.datetime.joda;JodaTimeFormatterRegistrar;true;setDateTimeStyle;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.format.datetime.joda;JodaTimeFormatterRegistrar;true;setTimeFormatter;(DateTimeFormatter);;Argument[0];Argument[-1];taint",
        "org.springframework.format.datetime.joda;JodaTimeFormatterRegistrar;true;setTimeStyle;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.format.datetime.joda;LocalDateParser;false;LocalDateParser;(DateTimeFormatter);;Argument[0];Argument[-1];taint",
        "org.springframework.format.datetime.joda;LocalDateTimeParser;false;LocalDateTimeParser;(DateTimeFormatter);;Argument[0];Argument[-1];taint",
        "org.springframework.format.datetime.joda;LocalTimeParser;false;LocalTimeParser;(DateTimeFormatter);;Argument[0];Argument[-1];taint",
        "org.springframework.format.datetime.joda;MillisecondInstantPrinter;false;MillisecondInstantPrinter;(DateTimeFormatter);;Argument[0];Argument[-1];taint",
        "org.springframework.format.datetime.joda;ReadableInstantPrinter;false;ReadableInstantPrinter;(DateTimeFormatter);;Argument[0];Argument[-1];taint",
        "org.springframework.format.datetime.joda;ReadablePartialPrinter;false;ReadablePartialPrinter;(DateTimeFormatter);;Argument[0];Argument[-1];taint",
        "org.springframework.format.datetime.standard;DateTimeContext;true;getChronology;();;Argument[-1];ReturnValue;taint",
        "org.springframework.format.datetime.standard;DateTimeContext;true;getFormatter;(DateTimeFormatter);;Argument[0];ReturnValue;taint",
        "org.springframework.format.datetime.standard;DateTimeContext;true;getTimeZone;();;Argument[-1];ReturnValue;taint",
        "org.springframework.format.datetime.standard;DateTimeContext;true;setChronology;(Chronology);;Argument[0];Argument[-1];taint",
        "org.springframework.format.datetime.standard;DateTimeContext;true;setTimeZone;(ZoneId);;Argument[0];Argument[-1];taint",
        "org.springframework.format.datetime.standard;DateTimeContextHolder;false;getFormatter;(DateTimeFormatter,Locale);;Argument[0];ReturnValue;taint",
        "org.springframework.format.datetime.standard;DateTimeFormatterFactory;true;DateTimeFormatterFactory;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.format.datetime.standard;DateTimeFormatterFactory;true;createDateTimeFormatter;(DateTimeFormatter);;Argument[0];ReturnValue;taint",
        "org.springframework.format.datetime.standard;DateTimeFormatterFactory;true;setPattern;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.format.datetime.standard;DateTimeFormatterFactory;true;setTimeZone;(TimeZone);;Argument[0];Argument[-1];taint",
        "org.springframework.format.datetime.standard;DateTimeFormatterRegistrar;true;setDateFormatter;(DateTimeFormatter);;Argument[0];Argument[-1];taint",
        "org.springframework.format.datetime.standard;DateTimeFormatterRegistrar;true;setDateTimeFormatter;(DateTimeFormatter);;Argument[0];Argument[-1];taint",
        "org.springframework.format.datetime.standard;DateTimeFormatterRegistrar;true;setTimeFormatter;(DateTimeFormatter);;Argument[0];Argument[-1];taint",
        "org.springframework.format.datetime.standard;TemporalAccessorParser;false;TemporalAccessorParser;(Class,DateTimeFormatter);;Argument[1];Argument[-1];taint",
        "org.springframework.format.datetime.standard;TemporalAccessorPrinter;false;TemporalAccessorPrinter;(DateTimeFormatter);;Argument[0];Argument[-1];taint",
        "org.springframework.format.datetime;DateFormatter;true;DateFormatter;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.format.datetime;DateFormatter;true;setFallbackPatterns;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.format.datetime;DateFormatter;true;setPattern;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.format.datetime;DateFormatter;true;setSource;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.format.datetime;DateFormatter;true;setStylePattern;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.format.datetime;DateFormatter;true;setTimeZone;(TimeZone);;Argument[0];Argument[-1];taint",
        "org.springframework.format.datetime;DateFormatterRegistrar;true;setFormatter;(DateFormatter);;Argument[0];Argument[-1];taint",
        "org.springframework.format.number.money;MonetaryAmountFormatter;true;MonetaryAmountFormatter;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.format.number.money;MonetaryAmountFormatter;true;setFormatName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.format.number;CurrencyStyleFormatter;true;setCurrency;(Currency);;Argument[0];Argument[-1];taint",
        "org.springframework.format.number;CurrencyStyleFormatter;true;setPattern;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.format.number;NumberStyleFormatter;true;NumberStyleFormatter;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.format.number;NumberStyleFormatter;true;setPattern;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.format.support;DefaultFormattingConversionService;true;DefaultFormattingConversionService;(StringValueResolver,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.format.support;FormatterPropertyEditorAdapter;true;FormatterPropertyEditorAdapter;(Formatter);;Argument[0];Argument[-1];taint",
        "org.springframework.format.support;FormattingConversionServiceFactoryBean;true;setConverters;(Set);;Argument[0];Argument[-1];taint",
        "org.springframework.format.support;FormattingConversionServiceFactoryBean;true;setFormatterRegistrars;(Set);;Argument[0];Argument[-1];taint",
        "org.springframework.format.support;FormattingConversionServiceFactoryBean;true;setFormatters;(Set);;Argument[0];Argument[-1];taint",
        "org.springframework.format;FormatterRegistry;true;addFormatter;(Formatter);;Argument[0];Argument[-1];taint",
        "org.springframework.format;FormatterRegistry;true;addFormatterForFieldAnnotation;(AnnotationFormatterFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.format;FormatterRegistry;true;addFormatterForFieldType;(Class,Formatter);;Argument[1];Argument[-1];taint",
        "org.springframework.format;FormatterRegistry;true;addFormatterForFieldType;(Class,Printer,Parser);;Argument[1];Argument[-1];taint",
        "org.springframework.format;FormatterRegistry;true;addFormatterForFieldType;(Class,Printer,Parser);;Argument[2];Argument[-1];taint",
        "org.springframework.format;FormatterRegistry;true;addParser;(Parser);;Argument[0];Argument[-1];taint",
        "org.springframework.format;FormatterRegistry;true;addPrinter;(Printer);;Argument[0];Argument[-1];taint",
        "org.springframework.http.client.reactive;AbstractClientHttpRequest;true;AbstractClientHttpRequest;(HttpHeaders);;Argument[0];Argument[-1];taint",
        "org.springframework.http.client.reactive;ClientHttpRequest;true;getCookies;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.client.reactive;ClientHttpRequest;true;getNativeRequest;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.client.reactive;ClientHttpRequest;true;getURI;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.client.reactive;ClientHttpRequestDecorator;true;ClientHttpRequestDecorator;(ClientHttpRequest);;Argument[0];Argument[-1];taint",
        "org.springframework.http.client.reactive;ClientHttpRequestDecorator;true;getDelegate;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.client.reactive;ClientHttpRequestDecorator;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.client.reactive;ClientHttpResponse;true;getCookies;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.client.reactive;ClientHttpResponseDecorator;true;ClientHttpResponseDecorator;(ClientHttpResponse);;Argument[0];Argument[-1];taint",
        "org.springframework.http.client.reactive;ClientHttpResponseDecorator;true;getDelegate;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.client.reactive;ClientHttpResponseDecorator;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.client.reactive;HttpComponentsClientHttpConnector;true;HttpComponentsClientHttpConnector;(CloseableHttpAsyncClient);;Argument[0];Argument[-1];taint",
        "org.springframework.http.client.reactive;HttpComponentsClientHttpConnector;true;HttpComponentsClientHttpConnector;(CloseableHttpAsyncClient,BiFunction);;Argument[0];Argument[-1];taint",
        "org.springframework.http.client.reactive;HttpComponentsClientHttpConnector;true;HttpComponentsClientHttpConnector;(CloseableHttpAsyncClient,BiFunction);;Argument[1];Argument[-1];taint",
        "org.springframework.http.client.reactive;HttpComponentsClientHttpConnector;true;setBufferFactory;(DataBufferFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.http.client.reactive;JettyClientHttpConnector;true;JettyClientHttpConnector;(HttpClient);;Argument[0];Argument[-1];taint",
        "org.springframework.http.client.reactive;JettyClientHttpConnector;true;JettyClientHttpConnector;(HttpClient,JettyResourceFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.http.client.reactive;JettyClientHttpConnector;true;setBufferFactory;(DataBufferFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.http.client.reactive;JettyResourceFactory;true;getByteBufferPool;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.client.reactive;JettyResourceFactory;true;getExecutor;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.client.reactive;JettyResourceFactory;true;getScheduler;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.client.reactive;JettyResourceFactory;true;setByteBufferPool;(ByteBufferPool);;Argument[0];Argument[-1];taint",
        "org.springframework.http.client.reactive;JettyResourceFactory;true;setExecutor;(Executor);;Argument[0];Argument[-1];taint",
        "org.springframework.http.client.reactive;JettyResourceFactory;true;setScheduler;(Scheduler);;Argument[0];Argument[-1];taint",
        "org.springframework.http.client.reactive;JettyResourceFactory;true;setThreadPrefix;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.http.client.reactive;ReactorClientHttpConnector;true;ReactorClientHttpConnector;(HttpClient);;Argument[0];Argument[-1];taint",
        "org.springframework.http.client.reactive;ReactorResourceFactory;true;addGlobalResourcesConsumer;(Consumer);;Argument[0];Argument[-1];taint",
        "org.springframework.http.client.reactive;ReactorResourceFactory;true;getConnectionProvider;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.client.reactive;ReactorResourceFactory;true;getLoopResources;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.client.reactive;ReactorResourceFactory;true;setConnectionProvider;(ConnectionProvider);;Argument[0];Argument[-1];taint",
        "org.springframework.http.client.reactive;ReactorResourceFactory;true;setConnectionProviderSupplier;(Supplier);;Argument[0];Argument[-1];taint",
        "org.springframework.http.client.reactive;ReactorResourceFactory;true;setLoopResources;(LoopResources);;Argument[0];Argument[-1];taint",
        "org.springframework.http.client.reactive;ReactorResourceFactory;true;setLoopResourcesSupplier;(Supplier);;Argument[0];Argument[-1];taint",
        "org.springframework.http.client.reactive;ReactorResourceFactory;true;setShutdownQuietPeriod;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.http.client.reactive;ReactorResourceFactory;true;setShutdownTimeout;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.http.client.support;AsyncHttpAccessor;true;getAsyncRequestFactory;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.client.support;AsyncHttpAccessor;true;setAsyncRequestFactory;(AsyncClientHttpRequestFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.http.client.support;BasicAuthenticationInterceptor;true;BasicAuthenticationInterceptor;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.http.client.support;BasicAuthenticationInterceptor;true;BasicAuthenticationInterceptor;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.http.client.support;BasicAuthenticationInterceptor;true;BasicAuthenticationInterceptor;(String,String,Charset);;Argument[0];Argument[-1];taint",
        "org.springframework.http.client.support;BasicAuthenticationInterceptor;true;BasicAuthenticationInterceptor;(String,String,Charset);;Argument[1];Argument[-1];taint",
        "org.springframework.http.client.support;BasicAuthorizationInterceptor;true;BasicAuthorizationInterceptor;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.http.client.support;HttpAccessor;true;getClientHttpRequestInitializers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.client.support;HttpAccessor;true;getRequestFactory;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.client.support;HttpAccessor;true;setClientHttpRequestInitializers;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.http.client.support;HttpAccessor;true;setRequestFactory;(ClientHttpRequestFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.http.client.support;HttpRequestWrapper;true;HttpRequestWrapper;(HttpRequest);;Argument[0];Argument[-1];taint",
        "org.springframework.http.client.support;HttpRequestWrapper;true;getRequest;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.client.support;InterceptingAsyncHttpAccessor;true;getInterceptors;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.client.support;InterceptingAsyncHttpAccessor;true;setInterceptors;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.http.client.support;InterceptingHttpAccessor;true;getInterceptors;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.client.support;InterceptingHttpAccessor;true;setInterceptors;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.http.client.support;ProxyFactoryBean;true;setHostname;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.http.client;AsyncClientHttpRequestFactory;true;createAsyncRequest;(URI,HttpMethod);;Argument[0];ReturnValue;taint",
        "org.springframework.http.client;BufferingClientHttpRequestFactory;true;BufferingClientHttpRequestFactory;(ClientHttpRequestFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.http.client;ClientHttpRequest;true;execute;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.client;ClientHttpRequestFactory;true;createRequest;(URI,HttpMethod);;Argument[0];ReturnValue;taint",
        "org.springframework.http.client;HttpComponentsAsyncClientHttpRequestFactory;true;HttpComponentsAsyncClientHttpRequestFactory;(CloseableHttpAsyncClient);;Argument[0];Argument[-1];taint",
        "org.springframework.http.client;HttpComponentsAsyncClientHttpRequestFactory;true;HttpComponentsAsyncClientHttpRequestFactory;(CloseableHttpClient,CloseableHttpAsyncClient);;Argument[0];Argument[-1];taint",
        "org.springframework.http.client;HttpComponentsAsyncClientHttpRequestFactory;true;HttpComponentsAsyncClientHttpRequestFactory;(CloseableHttpClient,CloseableHttpAsyncClient);;Argument[1];Argument[-1];taint",
        "org.springframework.http.client;HttpComponentsAsyncClientHttpRequestFactory;true;HttpComponentsAsyncClientHttpRequestFactory;(HttpAsyncClient);;Argument[0];Argument[-1];taint",
        "org.springframework.http.client;HttpComponentsAsyncClientHttpRequestFactory;true;HttpComponentsAsyncClientHttpRequestFactory;(HttpClient,HttpAsyncClient);;Argument[0];Argument[-1];taint",
        "org.springframework.http.client;HttpComponentsAsyncClientHttpRequestFactory;true;HttpComponentsAsyncClientHttpRequestFactory;(HttpClient,HttpAsyncClient);;Argument[1];Argument[-1];taint",
        "org.springframework.http.client;HttpComponentsAsyncClientHttpRequestFactory;true;getAsyncClient;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.client;HttpComponentsAsyncClientHttpRequestFactory;true;getHttpAsyncClient;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.client;HttpComponentsAsyncClientHttpRequestFactory;true;setAsyncClient;(HttpAsyncClient);;Argument[0];Argument[-1];taint",
        "org.springframework.http.client;HttpComponentsAsyncClientHttpRequestFactory;true;setHttpAsyncClient;(CloseableHttpAsyncClient);;Argument[0];Argument[-1];taint",
        "org.springframework.http.client;HttpComponentsClientHttpRequestFactory;true;HttpComponentsClientHttpRequestFactory;(HttpClient);;Argument[0];Argument[-1];taint",
        "org.springframework.http.client;HttpComponentsClientHttpRequestFactory;true;getHttpClient;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.client;HttpComponentsClientHttpRequestFactory;true;setHttpClient;(HttpClient);;Argument[0];Argument[-1];taint",
        "org.springframework.http.client;HttpComponentsClientHttpRequestFactory;true;setHttpContextFactory;(BiFunction);;Argument[0];Argument[-1];taint",
        "org.springframework.http.client;InterceptingAsyncClientHttpRequestFactory;true;InterceptingAsyncClientHttpRequestFactory;(AsyncClientHttpRequestFactory,List);;Argument[0];Argument[-1];taint",
        "org.springframework.http.client;InterceptingAsyncClientHttpRequestFactory;true;InterceptingAsyncClientHttpRequestFactory;(AsyncClientHttpRequestFactory,List);;Argument[1];Argument[-1];taint",
        "org.springframework.http.client;InterceptingClientHttpRequestFactory;true;InterceptingClientHttpRequestFactory;(ClientHttpRequestFactory,List);;Argument[0];Argument[-1];taint",
        "org.springframework.http.client;InterceptingClientHttpRequestFactory;true;InterceptingClientHttpRequestFactory;(ClientHttpRequestFactory,List);;Argument[1];Argument[-1];taint",
        "org.springframework.http.client;MultipartBodyBuilder$PartBuilder;true;contentType;(MediaType);;Argument[-1];ReturnValue;value",
        "org.springframework.http.client;MultipartBodyBuilder$PartBuilder;true;filename;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.http.client;MultipartBodyBuilder$PartBuilder;true;filename;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.http.client;MultipartBodyBuilder$PartBuilder;true;filename;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.http.client;MultipartBodyBuilder$PartBuilder;true;header;(String,String[]);;Argument[-1];ReturnValue;value",
        "org.springframework.http.client;MultipartBodyBuilder$PartBuilder;true;header;(String,String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.http.client;MultipartBodyBuilder$PartBuilder;true;header;(String,String[]);;Argument[0];ReturnValue;taint",
        "org.springframework.http.client;MultipartBodyBuilder$PartBuilder;true;header;(String,String[]);;Argument[1];Argument[-1];taint",
        "org.springframework.http.client;MultipartBodyBuilder$PartBuilder;true;header;(String,String[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.http.client;MultipartBodyBuilder$PartBuilder;true;headers;(Consumer);;Argument[-1];ReturnValue;value",
        "org.springframework.http.client;MultipartBodyBuilder;false;asyncPart;(String,Publisher,Class);;Argument[0];Argument[-1];taint",
        "org.springframework.http.client;MultipartBodyBuilder;false;asyncPart;(String,Publisher,Class);;Argument[0];ReturnValue;taint",
        "org.springframework.http.client;MultipartBodyBuilder;false;asyncPart;(String,Publisher,Class);;Argument[1];Argument[-1];taint",
        "org.springframework.http.client;MultipartBodyBuilder;false;asyncPart;(String,Publisher,Class);;Argument[1];ReturnValue;taint",
        "org.springframework.http.client;MultipartBodyBuilder;false;asyncPart;(String,Publisher,ParameterizedTypeReference);;Argument[0];Argument[-1];taint",
        "org.springframework.http.client;MultipartBodyBuilder;false;asyncPart;(String,Publisher,ParameterizedTypeReference);;Argument[0];ReturnValue;taint",
        "org.springframework.http.client;MultipartBodyBuilder;false;asyncPart;(String,Publisher,ParameterizedTypeReference);;Argument[1];Argument[-1];taint",
        "org.springframework.http.client;MultipartBodyBuilder;false;asyncPart;(String,Publisher,ParameterizedTypeReference);;Argument[1];ReturnValue;taint",
        "org.springframework.http.client;MultipartBodyBuilder;false;build;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.client;MultipartBodyBuilder;false;part;(String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.http.client;MultipartBodyBuilder;false;part;(String,Object);;Argument[0];ReturnValue;taint",
        "org.springframework.http.client;MultipartBodyBuilder;false;part;(String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.http.client;MultipartBodyBuilder;false;part;(String,Object);;Argument[1];ReturnValue;taint",
        "org.springframework.http.client;MultipartBodyBuilder;false;part;(String,Object,MediaType);;Argument[0];Argument[-1];taint",
        "org.springframework.http.client;MultipartBodyBuilder;false;part;(String,Object,MediaType);;Argument[0];ReturnValue;taint",
        "org.springframework.http.client;MultipartBodyBuilder;false;part;(String,Object,MediaType);;Argument[1];Argument[-1];taint",
        "org.springframework.http.client;MultipartBodyBuilder;false;part;(String,Object,MediaType);;Argument[1];ReturnValue;taint",
        "org.springframework.http.client;Netty4ClientHttpRequestFactory;true;Netty4ClientHttpRequestFactory;(EventLoopGroup);;Argument[0];Argument[-1];taint",
        "org.springframework.http.client;Netty4ClientHttpRequestFactory;true;setSslContext;(SslContext);;Argument[0];Argument[-1];taint",
        "org.springframework.http.client;OkHttp3ClientHttpRequestFactory;true;OkHttp3ClientHttpRequestFactory;(OkHttpClient);;Argument[0];Argument[-1];taint",
        "org.springframework.http.client;SimpleClientHttpRequestFactory;true;setProxy;(Proxy);;Argument[0];Argument[-1];taint",
        "org.springframework.http.client;SimpleClientHttpRequestFactory;true;setTaskExecutor;(AsyncListenableTaskExecutor);;Argument[0];Argument[-1];taint",
        "org.springframework.http.codec.cbor;Jackson2CborDecoder;true;Jackson2CborDecoder;(ObjectMapper,MimeType[]);;Argument[0];Argument[-1];taint",
        "org.springframework.http.codec.cbor;Jackson2CborDecoder;true;Jackson2CborDecoder;(ObjectMapper,MimeType[]);;Argument[1];Argument[-1];taint",
        "org.springframework.http.codec.cbor;Jackson2CborEncoder;true;Jackson2CborEncoder;(ObjectMapper,MimeType[]);;Argument[0];Argument[-1];taint",
        "org.springframework.http.codec.cbor;Jackson2CborEncoder;true;Jackson2CborEncoder;(ObjectMapper,MimeType[]);;Argument[1];Argument[-1];taint",
        "org.springframework.http.codec.json;AbstractJackson2Encoder;true;setStreamingMediaTypes;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.http.codec.json;Jackson2CodecSupport;true;getObjectMapper;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.codec.json;Jackson2CodecSupport;true;getObjectMappersForType;(Class);;Argument[-1];ReturnValue;taint",
        "org.springframework.http.codec.json;Jackson2CodecSupport;true;setObjectMapper;(ObjectMapper);;Argument[0];Argument[-1];taint",
        "org.springframework.http.codec.json;Jackson2JsonDecoder;true;Jackson2JsonDecoder;(ObjectMapper,MimeType[]);;Argument[0];Argument[-1];taint",
        "org.springframework.http.codec.json;Jackson2JsonDecoder;true;Jackson2JsonDecoder;(ObjectMapper,MimeType[]);;Argument[1];Argument[-1];taint",
        "org.springframework.http.codec.json;Jackson2JsonEncoder;true;Jackson2JsonEncoder;(ObjectMapper,MimeType[]);;Argument[0];Argument[-1];taint",
        "org.springframework.http.codec.json;Jackson2JsonEncoder;true;Jackson2JsonEncoder;(ObjectMapper,MimeType[]);;Argument[1];Argument[-1];taint",
        "org.springframework.http.codec.json;Jackson2SmileDecoder;true;Jackson2SmileDecoder;(ObjectMapper,MimeType[]);;Argument[0];Argument[-1];taint",
        "org.springframework.http.codec.json;Jackson2SmileDecoder;true;Jackson2SmileDecoder;(ObjectMapper,MimeType[]);;Argument[1];Argument[-1];taint",
        "org.springframework.http.codec.json;Jackson2SmileEncoder;true;Jackson2SmileEncoder;(ObjectMapper,MimeType[]);;Argument[0];Argument[-1];taint",
        "org.springframework.http.codec.json;Jackson2SmileEncoder;true;Jackson2SmileEncoder;(ObjectMapper,MimeType[]);;Argument[1];Argument[-1];taint",
        "org.springframework.http.codec.json;KotlinSerializationJsonDecoder;true;KotlinSerializationJsonDecoder;(Json);;Argument[0];Argument[-1];taint",
        "org.springframework.http.codec.json;KotlinSerializationJsonEncoder;true;KotlinSerializationJsonEncoder;(Json);;Argument[0];Argument[-1];taint",
        "org.springframework.http.codec.multipart;DefaultPartHttpMessageReader;true;setBlockingOperationScheduler;(Scheduler);;Argument[0];Argument[-1];taint",
        "org.springframework.http.codec.multipart;FilePart;true;filename;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.codec.multipart;FormFieldPart;true;value;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.codec.multipart;MultipartHttpMessageReader;true;MultipartHttpMessageReader;(HttpMessageReader);;Argument[0];Argument[-1];taint",
        "org.springframework.http.codec.multipart;MultipartHttpMessageReader;true;getPartReader;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.codec.multipart;MultipartHttpMessageWriter;true;MultipartHttpMessageWriter;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.http.codec.multipart;MultipartHttpMessageWriter;true;MultipartHttpMessageWriter;(List,HttpMessageWriter);;Argument[0];Argument[-1];taint",
        "org.springframework.http.codec.multipart;MultipartHttpMessageWriter;true;MultipartHttpMessageWriter;(List,HttpMessageWriter);;Argument[1];Argument[-1];taint",
        "org.springframework.http.codec.multipart;MultipartHttpMessageWriter;true;getFormWriter;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.codec.multipart;MultipartHttpMessageWriter;true;getPartWriters;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.codec.multipart;MultipartParser$BodyToken;false;BodyToken;(DataBuffer);;Argument[0];Argument[-1];taint",
        "org.springframework.http.codec.multipart;MultipartParser$HeadersToken;false;HeadersToken;(HttpHeaders);;Argument[0];Argument[-1];taint",
        "org.springframework.http.codec.multipart;MultipartParser$Token;true;buffer;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.codec.multipart;MultipartParser$Token;true;headers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.codec.multipart;MultipartWriterSupport;true;getWritableMediaTypes;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.codec.multipart;Part;true;content;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.codec.multipart;Part;true;headers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.codec.multipart;Part;true;name;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.codec.protobuf;ProtobufDecoder;true;ProtobufDecoder;(ExtensionRegistry);;Argument[0];Argument[-1];taint",
        "org.springframework.http.codec.protobuf;ProtobufHttpMessageWriter;true;ProtobufHttpMessageWriter;(Encoder);;Argument[0];Argument[-1];taint",
        "org.springframework.http.codec.xml;Jaxb2XmlDecoder;true;Jaxb2XmlDecoder;(MimeType[]);;Argument[0];Argument[-1];taint",
        "org.springframework.http.codec.xml;Jaxb2XmlDecoder;true;getUnmarshallerProcessor;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.codec.xml;Jaxb2XmlEncoder;true;getMarshallerProcessor;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.codec;ClientCodecConfigurer$ClientDefaultCodecs;true;multipartCodecs;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.codec;ClientCodecConfigurer$ClientDefaultCodecs;true;serverSentEventDecoder;(Decoder);;Argument[0];Argument[-1];taint",
        "org.springframework.http.codec;ClientCodecConfigurer$MultipartCodecs;true;encoder;(Encoder);;Argument[-1];ReturnValue;value",
        "org.springframework.http.codec;ClientCodecConfigurer$MultipartCodecs;true;encoder;(Encoder);;Argument[0];Argument[-1];taint",
        "org.springframework.http.codec;ClientCodecConfigurer$MultipartCodecs;true;encoder;(Encoder);;Argument[0];ReturnValue;taint",
        "org.springframework.http.codec;ClientCodecConfigurer$MultipartCodecs;true;writer;(HttpMessageWriter);;Argument[-1];ReturnValue;value",
        "org.springframework.http.codec;ClientCodecConfigurer$MultipartCodecs;true;writer;(HttpMessageWriter);;Argument[0];Argument[-1];taint",
        "org.springframework.http.codec;ClientCodecConfigurer$MultipartCodecs;true;writer;(HttpMessageWriter);;Argument[0];ReturnValue;taint",
        "org.springframework.http.codec;CodecConfigurer$CustomCodecs;true;registerWithDefaultConfig;(Object,Consumer);;Argument[1];Argument[-1];taint",
        "org.springframework.http.codec;CodecConfigurer$CustomCodecs;true;withDefaultCodecConfig;(Consumer);;Argument[0];Argument[-1];taint",
        "org.springframework.http.codec;CodecConfigurer$DefaultCodecs;true;configureDefaultCodec;(Consumer);;Argument[0];Argument[-1];taint",
        "org.springframework.http.codec;CodecConfigurer$DefaultCodecs;true;jackson2JsonDecoder;(Decoder);;Argument[0];Argument[-1];taint",
        "org.springframework.http.codec;CodecConfigurer$DefaultCodecs;true;jackson2JsonEncoder;(Encoder);;Argument[0];Argument[-1];taint",
        "org.springframework.http.codec;CodecConfigurer$DefaultCodecs;true;jackson2SmileDecoder;(Decoder);;Argument[0];Argument[-1];taint",
        "org.springframework.http.codec;CodecConfigurer$DefaultCodecs;true;jackson2SmileEncoder;(Encoder);;Argument[0];Argument[-1];taint",
        "org.springframework.http.codec;CodecConfigurer$DefaultCodecs;true;jaxb2Decoder;(Decoder);;Argument[0];Argument[-1];taint",
        "org.springframework.http.codec;CodecConfigurer$DefaultCodecs;true;jaxb2Encoder;(Encoder);;Argument[0];Argument[-1];taint",
        "org.springframework.http.codec;CodecConfigurer$DefaultCodecs;true;kotlinSerializationJsonDecoder;(Decoder);;Argument[0];Argument[-1];taint",
        "org.springframework.http.codec;CodecConfigurer$DefaultCodecs;true;kotlinSerializationJsonEncoder;(Encoder);;Argument[0];Argument[-1];taint",
        "org.springframework.http.codec;CodecConfigurer$DefaultCodecs;true;protobufDecoder;(Decoder);;Argument[0];Argument[-1];taint",
        "org.springframework.http.codec;CodecConfigurer$DefaultCodecs;true;protobufEncoder;(Encoder);;Argument[0];Argument[-1];taint",
        "org.springframework.http.codec;CodecConfigurer;true;customCodecs;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.codec;CodecConfigurer;true;defaultCodecs;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.codec;CodecConfigurer;true;getReaders;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.codec;CodecConfigurer;true;getWriters;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.codec;DecoderHttpMessageReader;true;DecoderHttpMessageReader;(Decoder);;Argument[0];Argument[-1];taint",
        "org.springframework.http.codec;DecoderHttpMessageReader;true;getDecoder;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.codec;EncoderHttpMessageWriter;true;EncoderHttpMessageWriter;(Encoder);;Argument[0];Argument[-1];taint",
        "org.springframework.http.codec;EncoderHttpMessageWriter;true;getEncoder;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.codec;HttpMessageReader;true;getReadableMediaTypes;(ResolvableType);;Argument[-1];ReturnValue;taint",
        "org.springframework.http.codec;HttpMessageWriter;true;getWritableMediaTypes;(ResolvableType);;Argument[-1];ReturnValue;taint",
        "org.springframework.http.codec;ResourceHttpMessageReader;true;ResourceHttpMessageReader;(ResourceDecoder);;Argument[0];Argument[-1];taint",
        "org.springframework.http.codec;ServerCodecConfigurer$ServerDefaultCodecs;true;multipartReader;(HttpMessageReader);;Argument[0];Argument[-1];taint",
        "org.springframework.http.codec;ServerCodecConfigurer$ServerDefaultCodecs;true;serverSentEventEncoder;(Encoder);;Argument[0];Argument[-1];taint",
        "org.springframework.http.codec;ServerSentEvent;false;builder;(Object);;Argument[0];ReturnValue;taint",
        "org.springframework.http.codec;ServerSentEvent;false;comment;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.codec;ServerSentEvent;false;data;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.codec;ServerSentEvent;false;event;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.codec;ServerSentEvent;false;id;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.codec;ServerSentEvent;false;retry;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.codec;ServerSentEvent;false;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.codec;ServerSentEventHttpMessageReader;true;ServerSentEventHttpMessageReader;(Decoder);;Argument[0];Argument[-1];taint",
        "org.springframework.http.codec;ServerSentEventHttpMessageReader;true;getDecoder;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.codec;ServerSentEventHttpMessageWriter;true;ServerSentEventHttpMessageWriter;(Encoder);;Argument[0];Argument[-1];taint",
        "org.springframework.http.codec;ServerSentEventHttpMessageWriter;true;getEncoder;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.converter.cbor;MappingJackson2CborHttpMessageConverter;true;MappingJackson2CborHttpMessageConverter;(ObjectMapper);;Argument[0];Argument[-1];taint",
        "org.springframework.http.converter.json;AbstractJackson2HttpMessageConverter;true;getObjectMapper;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.converter.json;AbstractJackson2HttpMessageConverter;true;getObjectMappersForType;(Class);;Argument[-1];ReturnValue;taint",
        "org.springframework.http.converter.json;AbstractJackson2HttpMessageConverter;true;setObjectMapper;(ObjectMapper);;Argument[0];Argument[-1];taint",
        "org.springframework.http.converter.json;AbstractJsonHttpMessageConverter;true;setJsonPrefix;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.http.converter.json;GsonFactoryBean;true;setDateFormatPattern;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.http.converter.json;GsonHttpMessageConverter;true;GsonHttpMessageConverter;(Gson);;Argument[0];Argument[-1];taint",
        "org.springframework.http.converter.json;GsonHttpMessageConverter;true;getGson;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.converter.json;GsonHttpMessageConverter;true;setGson;(Gson);;Argument[0];Argument[-1];taint",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;annotationIntrospector;(AnnotationIntrospector);;Argument[-1];ReturnValue;value",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;annotationIntrospector;(AnnotationIntrospector);;Argument[0];Argument[-1];taint",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;annotationIntrospector;(AnnotationIntrospector);;Argument[0];ReturnValue;taint",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;annotationIntrospector;(Function);;Argument[-1];ReturnValue;value",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;applicationContext;(ApplicationContext);;Argument[-1];ReturnValue;value",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;applicationContext;(ApplicationContext);;Argument[0];Argument[-1];taint",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;applicationContext;(ApplicationContext);;Argument[0];ReturnValue;taint",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;autoDetectFields;(boolean);;Argument[-1];ReturnValue;value",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;autoDetectGettersSetters;(boolean);;Argument[-1];ReturnValue;value",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;createXmlMapper;(boolean);;Argument[-1];ReturnValue;value",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;dateFormat;(DateFormat);;Argument[-1];ReturnValue;value",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;dateFormat;(DateFormat);;Argument[0];Argument[-1];taint",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;dateFormat;(DateFormat);;Argument[0];ReturnValue;taint",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;defaultTyping;(TypeResolverBuilder);;Argument[-1];ReturnValue;value",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;defaultTyping;(TypeResolverBuilder);;Argument[0];Argument[-1];taint",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;defaultTyping;(TypeResolverBuilder);;Argument[0];ReturnValue;taint",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;defaultUseWrapper;(boolean);;Argument[-1];ReturnValue;value",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;defaultViewInclusion;(boolean);;Argument[-1];ReturnValue;value",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;deserializerByType;(Class,JsonDeserializer);;Argument[-1];ReturnValue;value",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;deserializerByType;(Class,JsonDeserializer);;Argument[1];Argument[-1];taint",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;deserializerByType;(Class,JsonDeserializer);;Argument[1];ReturnValue;taint",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;deserializers;(JsonDeserializer[]);;Argument[-1];ReturnValue;value",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;deserializers;(JsonDeserializer[]);;Argument[0];Argument[-1];taint",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;deserializers;(JsonDeserializer[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;deserializersByType;(Map);;Argument[-1];ReturnValue;value",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;deserializersByType;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;deserializersByType;(Map);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;factory;(JsonFactory);;Argument[-1];ReturnValue;value",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;factory;(JsonFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;factory;(JsonFactory);;Argument[0];ReturnValue;taint",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;failOnEmptyBeans;(boolean);;Argument[-1];ReturnValue;value",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;failOnUnknownProperties;(boolean);;Argument[-1];ReturnValue;value",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;featuresToDisable;(Object[]);;Argument[-1];ReturnValue;value",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;featuresToDisable;(Object[]);;Argument[0];Argument[-1];taint",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;featuresToDisable;(Object[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;featuresToEnable;(Object[]);;Argument[-1];ReturnValue;value",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;featuresToEnable;(Object[]);;Argument[0];Argument[-1];taint",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;featuresToEnable;(Object[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;filters;(FilterProvider);;Argument[-1];ReturnValue;value",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;filters;(FilterProvider);;Argument[0];Argument[-1];taint",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;filters;(FilterProvider);;Argument[0];ReturnValue;taint",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;findModulesViaServiceLoader;(boolean);;Argument[-1];ReturnValue;value",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;handlerInstantiator;(HandlerInstantiator);;Argument[-1];ReturnValue;value",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;handlerInstantiator;(HandlerInstantiator);;Argument[0];Argument[-1];taint",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;handlerInstantiator;(HandlerInstantiator);;Argument[0];ReturnValue;taint",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;indentOutput;(boolean);;Argument[-1];ReturnValue;value",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;locale;(Locale);;Argument[-1];ReturnValue;value",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;locale;(Locale);;Argument[0];Argument[-1];taint",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;locale;(Locale);;Argument[0];ReturnValue;taint",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;locale;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;mixIn;(Class,Class);;Argument[-1];ReturnValue;value",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;mixIns;(Map);;Argument[-1];ReturnValue;value",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;mixIns;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;mixIns;(Map);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;moduleClassLoader;(ClassLoader);;Argument[-1];ReturnValue;value",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;moduleClassLoader;(ClassLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;moduleClassLoader;(ClassLoader);;Argument[0];ReturnValue;taint",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;modules;(List);;Argument[-1];ReturnValue;value",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;modules;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;modules;(List);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;modules;(Module[]);;Argument[-1];ReturnValue;taint",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;modules;(Module[]);;Argument[0];Argument[-1];taint",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;modules;(Module[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;modulesToInstall;(Class[]);;Argument[-1];ReturnValue;value",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;modulesToInstall;(Class[]);;Argument[0];Argument[-1];taint",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;modulesToInstall;(Class[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;modulesToInstall;(Module[]);;Argument[-1];ReturnValue;value",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;modulesToInstall;(Module[]);;Argument[0];Argument[-1];taint",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;modulesToInstall;(Module[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;postConfigurer;(Consumer);;Argument[-1];ReturnValue;value",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;postConfigurer;(Consumer);;Argument[0];Argument[-1];taint",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;postConfigurer;(Consumer);;Argument[0];ReturnValue;taint",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;propertyNamingStrategy;(PropertyNamingStrategy);;Argument[-1];ReturnValue;value",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;propertyNamingStrategy;(PropertyNamingStrategy);;Argument[0];Argument[-1];taint",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;propertyNamingStrategy;(PropertyNamingStrategy);;Argument[0];ReturnValue;taint",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;serializationInclusion;(Include);;Argument[-1];ReturnValue;taint",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;serializationInclusion;(Value);;Argument[-1];ReturnValue;value",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;serializationInclusion;(Value);;Argument[0];Argument[-1];taint",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;serializationInclusion;(Value);;Argument[0];ReturnValue;taint",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;serializerByType;(Class,JsonSerializer);;Argument[-1];ReturnValue;value",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;serializerByType;(Class,JsonSerializer);;Argument[1];Argument[-1];taint",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;serializerByType;(Class,JsonSerializer);;Argument[1];ReturnValue;taint",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;serializers;(JsonSerializer[]);;Argument[-1];ReturnValue;value",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;serializers;(JsonSerializer[]);;Argument[0];Argument[-1];taint",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;serializers;(JsonSerializer[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;serializersByType;(Map);;Argument[-1];ReturnValue;value",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;serializersByType;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;serializersByType;(Map);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;simpleDateFormat;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;timeZone;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;timeZone;(TimeZone);;Argument[-1];ReturnValue;value",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;timeZone;(TimeZone);;Argument[0];Argument[-1];taint",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;timeZone;(TimeZone);;Argument[0];ReturnValue;taint",
        "org.springframework.http.converter.json;Jackson2ObjectMapperBuilder;true;visibility;(PropertyAccessor,Visibility);;Argument[-1];ReturnValue;value",
        "org.springframework.http.converter.json;Jackson2ObjectMapperFactoryBean;true;setAnnotationIntrospector;(AnnotationIntrospector);;Argument[0];Argument[-1];taint",
        "org.springframework.http.converter.json;Jackson2ObjectMapperFactoryBean;true;setDateFormat;(DateFormat);;Argument[0];Argument[-1];taint",
        "org.springframework.http.converter.json;Jackson2ObjectMapperFactoryBean;true;setDefaultTyping;(TypeResolverBuilder);;Argument[0];Argument[-1];taint",
        "org.springframework.http.converter.json;Jackson2ObjectMapperFactoryBean;true;setDeserializers;(JsonDeserializer[]);;Argument[0];Argument[-1];taint",
        "org.springframework.http.converter.json;Jackson2ObjectMapperFactoryBean;true;setDeserializersByType;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.http.converter.json;Jackson2ObjectMapperFactoryBean;true;setFactory;(JsonFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.http.converter.json;Jackson2ObjectMapperFactoryBean;true;setFeaturesToDisable;(Object[]);;Argument[0];Argument[-1];taint",
        "org.springframework.http.converter.json;Jackson2ObjectMapperFactoryBean;true;setFeaturesToEnable;(Object[]);;Argument[0];Argument[-1];taint",
        "org.springframework.http.converter.json;Jackson2ObjectMapperFactoryBean;true;setFilters;(FilterProvider);;Argument[0];Argument[-1];taint",
        "org.springframework.http.converter.json;Jackson2ObjectMapperFactoryBean;true;setHandlerInstantiator;(HandlerInstantiator);;Argument[0];Argument[-1];taint",
        "org.springframework.http.converter.json;Jackson2ObjectMapperFactoryBean;true;setLocale;(Locale);;Argument[0];Argument[-1];taint",
        "org.springframework.http.converter.json;Jackson2ObjectMapperFactoryBean;true;setMixIns;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.http.converter.json;Jackson2ObjectMapperFactoryBean;true;setModules;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.http.converter.json;Jackson2ObjectMapperFactoryBean;true;setModulesToInstall;(Class[]);;Argument[0];Argument[-1];taint",
        "org.springframework.http.converter.json;Jackson2ObjectMapperFactoryBean;true;setObjectMapper;(ObjectMapper);;Argument[0];Argument[-1];taint",
        "org.springframework.http.converter.json;Jackson2ObjectMapperFactoryBean;true;setPropertyNamingStrategy;(PropertyNamingStrategy);;Argument[0];Argument[-1];taint",
        "org.springframework.http.converter.json;Jackson2ObjectMapperFactoryBean;true;setSerializers;(JsonSerializer[]);;Argument[0];Argument[-1];taint",
        "org.springframework.http.converter.json;Jackson2ObjectMapperFactoryBean;true;setSerializersByType;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.http.converter.json;Jackson2ObjectMapperFactoryBean;true;setTimeZone;(TimeZone);;Argument[0];Argument[-1];taint",
        "org.springframework.http.converter.json;JsonbHttpMessageConverter;true;JsonbHttpMessageConverter;(Jsonb);;Argument[0];Argument[-1];taint",
        "org.springframework.http.converter.json;JsonbHttpMessageConverter;true;getJsonb;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.converter.json;JsonbHttpMessageConverter;true;setJsonb;(Jsonb);;Argument[0];Argument[-1];taint",
        "org.springframework.http.converter.json;KotlinSerializationJsonHttpMessageConverter;true;KotlinSerializationJsonHttpMessageConverter;(Json);;Argument[0];Argument[-1];taint",
        "org.springframework.http.converter.json;MappingJackson2HttpMessageConverter;true;MappingJackson2HttpMessageConverter;(ObjectMapper);;Argument[0];Argument[-1];taint",
        "org.springframework.http.converter.json;MappingJackson2HttpMessageConverter;true;setJsonPrefix;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.http.converter.json;MappingJacksonInputMessage;true;MappingJacksonInputMessage;(InputStream,HttpHeaders);;Argument[0];Argument[-1];taint",
        "org.springframework.http.converter.json;MappingJacksonInputMessage;true;MappingJacksonInputMessage;(InputStream,HttpHeaders);;Argument[1];Argument[-1];taint",
        "org.springframework.http.converter.json;MappingJacksonInputMessage;true;MappingJacksonInputMessage;(InputStream,HttpHeaders,Class);;Argument[0];Argument[-1];taint",
        "org.springframework.http.converter.json;MappingJacksonInputMessage;true;MappingJacksonInputMessage;(InputStream,HttpHeaders,Class);;Argument[1];Argument[-1];taint",
        "org.springframework.http.converter.json;MappingJacksonValue;true;MappingJacksonValue;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.http.converter.json;MappingJacksonValue;true;getFilters;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.converter.json;MappingJacksonValue;true;getValue;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.converter.json;MappingJacksonValue;true;setFilters;(FilterProvider);;Argument[0];Argument[-1];taint",
        "org.springframework.http.converter.json;MappingJacksonValue;true;setValue;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.http.converter.json;SpringHandlerInstantiator;true;SpringHandlerInstantiator;(AutowireCapableBeanFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.http.converter.protobuf;ProtobufHttpMessageConverter;true;ProtobufHttpMessageConverter;(ExtensionRegistry);;Argument[0];Argument[-1];taint",
        "org.springframework.http.converter.protobuf;ProtobufJsonFormatHttpMessageConverter;true;ProtobufJsonFormatHttpMessageConverter;(Parser,Printer);;Argument[0];Argument[-1];taint",
        "org.springframework.http.converter.protobuf;ProtobufJsonFormatHttpMessageConverter;true;ProtobufJsonFormatHttpMessageConverter;(Parser,Printer);;Argument[1];Argument[-1];taint",
        "org.springframework.http.converter.protobuf;ProtobufJsonFormatHttpMessageConverter;true;ProtobufJsonFormatHttpMessageConverter;(Parser,Printer,ExtensionRegistry);;Argument[0];Argument[-1];taint",
        "org.springframework.http.converter.protobuf;ProtobufJsonFormatHttpMessageConverter;true;ProtobufJsonFormatHttpMessageConverter;(Parser,Printer,ExtensionRegistry);;Argument[1];Argument[-1];taint",
        "org.springframework.http.converter.protobuf;ProtobufJsonFormatHttpMessageConverter;true;ProtobufJsonFormatHttpMessageConverter;(Parser,Printer,ExtensionRegistry);;Argument[2];Argument[-1];taint",
        "org.springframework.http.converter.protobuf;ProtobufJsonFormatHttpMessageConverter;true;ProtobufJsonFormatHttpMessageConverter;(Parser,Printer,ExtensionRegistryInitializer);;Argument[0];Argument[-1];taint",
        "org.springframework.http.converter.protobuf;ProtobufJsonFormatHttpMessageConverter;true;ProtobufJsonFormatHttpMessageConverter;(Parser,Printer,ExtensionRegistryInitializer);;Argument[1];Argument[-1];taint",
        "org.springframework.http.converter.smile;MappingJackson2SmileHttpMessageConverter;true;MappingJackson2SmileHttpMessageConverter;(ObjectMapper);;Argument[0];Argument[-1];taint",
        "org.springframework.http.converter.xml;MappingJackson2XmlHttpMessageConverter;true;MappingJackson2XmlHttpMessageConverter;(ObjectMapper);;Argument[0];Argument[-1];taint",
        "org.springframework.http.converter.xml;MarshallingHttpMessageConverter;true;MarshallingHttpMessageConverter;(Marshaller);;Argument[0];Argument[-1];taint",
        "org.springframework.http.converter.xml;MarshallingHttpMessageConverter;true;MarshallingHttpMessageConverter;(Marshaller,Unmarshaller);;Argument[0];Argument[-1];taint",
        "org.springframework.http.converter.xml;MarshallingHttpMessageConverter;true;MarshallingHttpMessageConverter;(Marshaller,Unmarshaller);;Argument[1];Argument[-1];taint",
        "org.springframework.http.converter.xml;MarshallingHttpMessageConverter;true;setMarshaller;(Marshaller);;Argument[0];Argument[-1];taint",
        "org.springframework.http.converter.xml;MarshallingHttpMessageConverter;true;setUnmarshaller;(Unmarshaller);;Argument[0];Argument[-1];taint",
        "org.springframework.http.converter;AbstractHttpMessageConverter;true;setSupportedMediaTypes;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.http.converter;BufferedImageHttpMessageConverter;true;getDefaultContentType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.converter;BufferedImageHttpMessageConverter;true;setCacheDir;(File);;Argument[0];Argument[-1];taint",
        "org.springframework.http.converter;BufferedImageHttpMessageConverter;true;setDefaultContentType;(MediaType);;Argument[0];Argument[-1];taint",
        "org.springframework.http.converter;FormHttpMessageConverter;true;addPartConverter;(HttpMessageConverter);;Argument[0];Argument[-1];taint",
        "org.springframework.http.converter;FormHttpMessageConverter;true;addSupportedMediaTypes;(MediaType[]);;Argument[0];Argument[-1];taint",
        "org.springframework.http.converter;FormHttpMessageConverter;true;getPartConverters;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.converter;FormHttpMessageConverter;true;setPartConverters;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.http.converter;FormHttpMessageConverter;true;setSupportedMediaTypes;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.http.converter;HttpMessageConverter;true;getSupportedMediaTypes;(Class);;Argument[-1];ReturnValue;taint",
        "org.springframework.http.converter;HttpMessageNotReadableException;true;HttpMessageNotReadableException;(String,HttpInputMessage);;Argument[1];Argument[-1];taint",
        "org.springframework.http.converter;HttpMessageNotReadableException;true;HttpMessageNotReadableException;(String,Throwable,HttpInputMessage);;Argument[2];Argument[-1];taint",
        "org.springframework.http.converter;HttpMessageNotReadableException;true;getHttpInputMessage;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.converter;ObjectToStringHttpMessageConverter;true;ObjectToStringHttpMessageConverter;(ConversionService);;Argument[0];Argument[-1];taint",
        "org.springframework.http.converter;ObjectToStringHttpMessageConverter;true;ObjectToStringHttpMessageConverter;(ConversionService,Charset);;Argument[0];Argument[-1];taint",
        "org.springframework.http.server.reactive;AbstractListenerReadPublisher;true;AbstractListenerReadPublisher;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.http.server.reactive;AbstractListenerReadPublisher;true;getLogPrefix;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.server.reactive;AbstractListenerServerHttpResponse;true;AbstractListenerServerHttpResponse;(DataBufferFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.http.server.reactive;AbstractListenerServerHttpResponse;true;AbstractListenerServerHttpResponse;(DataBufferFactory,HttpHeaders);;Argument[0];Argument[-1];taint",
        "org.springframework.http.server.reactive;AbstractListenerServerHttpResponse;true;AbstractListenerServerHttpResponse;(DataBufferFactory,HttpHeaders);;Argument[1];Argument[-1];taint",
        "org.springframework.http.server.reactive;AbstractListenerWriteFlushProcessor;true;AbstractListenerWriteFlushProcessor;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.http.server.reactive;AbstractListenerWriteFlushProcessor;true;getLogPrefix;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.server.reactive;AbstractListenerWriteProcessor;true;AbstractListenerWriteProcessor;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.http.server.reactive;AbstractListenerWriteProcessor;true;getLogPrefix;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.server.reactive;AbstractServerHttpRequest;true;AbstractServerHttpRequest;(URI,String,HttpHeaders);;Argument[0];Argument[-1];taint",
        "org.springframework.http.server.reactive;AbstractServerHttpRequest;true;AbstractServerHttpRequest;(URI,String,HttpHeaders);;Argument[2];Argument[-1];taint",
        "org.springframework.http.server.reactive;AbstractServerHttpRequest;true;AbstractServerHttpRequest;(URI,String,MultiValueMap);;Argument[0];Argument[-1];taint",
        "org.springframework.http.server.reactive;AbstractServerHttpRequest;true;AbstractServerHttpRequest;(URI,String,MultiValueMap);;Argument[2];Argument[-1];taint",
        "org.springframework.http.server.reactive;AbstractServerHttpRequest;true;getNativeRequest;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.server.reactive;AbstractServerHttpResponse;true;AbstractServerHttpResponse;(DataBufferFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.http.server.reactive;AbstractServerHttpResponse;true;AbstractServerHttpResponse;(DataBufferFactory,HttpHeaders);;Argument[0];Argument[-1];taint",
        "org.springframework.http.server.reactive;AbstractServerHttpResponse;true;AbstractServerHttpResponse;(DataBufferFactory,HttpHeaders);;Argument[1];Argument[-1];taint",
        "org.springframework.http.server.reactive;AbstractServerHttpResponse;true;getNativeResponse;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.server.reactive;ChannelSendOperator;true;ChannelSendOperator;(Publisher,Function);;Argument[1];Argument[-1];taint",
        "org.springframework.http.server.reactive;ContextPathCompositeHandler;true;ContextPathCompositeHandler;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.http.server.reactive;HttpHeadResponseDecorator;true;HttpHeadResponseDecorator;(ServerHttpResponse);;Argument[0];Argument[-1];taint",
        "org.springframework.http.server.reactive;JettyHttpHandlerAdapter;true;JettyHttpHandlerAdapter;(HttpHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.http.server.reactive;ReactorHttpHandlerAdapter;true;ReactorHttpHandlerAdapter;(HttpHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.http.server.reactive;ServerHttpRequest$Builder;true;contextPath;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.http.server.reactive;ServerHttpRequest$Builder;true;contextPath;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.http.server.reactive;ServerHttpRequest$Builder;true;contextPath;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.http.server.reactive;ServerHttpRequest$Builder;true;header;(String,String[]);;Argument[-1];ReturnValue;value",
        "org.springframework.http.server.reactive;ServerHttpRequest$Builder;true;header;(String,String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.http.server.reactive;ServerHttpRequest$Builder;true;header;(String,String[]);;Argument[0];ReturnValue;taint",
        "org.springframework.http.server.reactive;ServerHttpRequest$Builder;true;header;(String,String[]);;Argument[1];Argument[-1];taint",
        "org.springframework.http.server.reactive;ServerHttpRequest$Builder;true;header;(String,String[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.http.server.reactive;ServerHttpRequest$Builder;true;headers;(Consumer);;Argument[-1];ReturnValue;value",
        "org.springframework.http.server.reactive;ServerHttpRequest$Builder;true;method;(HttpMethod);;Argument[-1];ReturnValue;value",
        "org.springframework.http.server.reactive;ServerHttpRequest$Builder;true;path;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.http.server.reactive;ServerHttpRequest$Builder;true;path;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.http.server.reactive;ServerHttpRequest$Builder;true;path;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.http.server.reactive;ServerHttpRequest$Builder;true;remoteAddress;(InetSocketAddress);;Argument[-1];ReturnValue;value",
        "org.springframework.http.server.reactive;ServerHttpRequest$Builder;true;remoteAddress;(InetSocketAddress);;Argument[0];Argument[-1];taint",
        "org.springframework.http.server.reactive;ServerHttpRequest$Builder;true;remoteAddress;(InetSocketAddress);;Argument[0];ReturnValue;taint",
        "org.springframework.http.server.reactive;ServerHttpRequest$Builder;true;sslInfo;(SslInfo);;Argument[-1];ReturnValue;value",
        "org.springframework.http.server.reactive;ServerHttpRequest$Builder;true;sslInfo;(SslInfo);;Argument[0];Argument[-1];taint",
        "org.springframework.http.server.reactive;ServerHttpRequest$Builder;true;sslInfo;(SslInfo);;Argument[0];ReturnValue;taint",
        "org.springframework.http.server.reactive;ServerHttpRequest$Builder;true;uri;(URI);;Argument[-1];ReturnValue;value",
        "org.springframework.http.server.reactive;ServerHttpRequest$Builder;true;uri;(URI);;Argument[0];Argument[-1];taint",
        "org.springframework.http.server.reactive;ServerHttpRequest$Builder;true;uri;(URI);;Argument[0];ReturnValue;taint",
        "org.springframework.http.server.reactive;ServerHttpRequest;true;getCookies;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.server.reactive;ServerHttpRequest;true;getId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.server.reactive;ServerHttpRequest;true;getLocalAddress;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.server.reactive;ServerHttpRequest;true;getPath;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.server.reactive;ServerHttpRequest;true;getQueryParams;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.server.reactive;ServerHttpRequest;true;getRemoteAddress;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.server.reactive;ServerHttpRequest;true;getSslInfo;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.server.reactive;ServerHttpRequestDecorator;true;ServerHttpRequestDecorator;(ServerHttpRequest);;Argument[0];Argument[-1];taint",
        "org.springframework.http.server.reactive;ServerHttpRequestDecorator;true;getDelegate;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.server.reactive;ServerHttpRequestDecorator;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.server.reactive;ServerHttpResponse;true;addCookie;(ResponseCookie);;Argument[0];Argument[-1];taint",
        "org.springframework.http.server.reactive;ServerHttpResponse;true;getCookies;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.server.reactive;ServerHttpResponseDecorator;true;ServerHttpResponseDecorator;(ServerHttpResponse);;Argument[0];Argument[-1];taint",
        "org.springframework.http.server.reactive;ServerHttpResponseDecorator;true;getDelegate;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.server.reactive;ServerHttpResponseDecorator;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.server.reactive;ServletHttpHandlerAdapter;true;ServletHttpHandlerAdapter;(HttpHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.http.server.reactive;ServletHttpHandlerAdapter;true;getDataBufferFactory;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.server.reactive;ServletHttpHandlerAdapter;true;getServletPath;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.server.reactive;ServletHttpHandlerAdapter;true;setDataBufferFactory;(DataBufferFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.http.server.reactive;SslInfo;true;getPeerCertificates;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.server.reactive;SslInfo;true;getSessionId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.server.reactive;TomcatHttpHandlerAdapter;true;TomcatHttpHandlerAdapter;(HttpHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.http.server.reactive;UndertowHttpHandlerAdapter;true;UndertowHttpHandlerAdapter;(HttpHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.http.server.reactive;UndertowHttpHandlerAdapter;true;getDataBufferFactory;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.server.reactive;UndertowHttpHandlerAdapter;true;setDataBufferFactory;(DataBufferFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.http.server;DelegatingServerHttpResponse;true;DelegatingServerHttpResponse;(ServerHttpResponse);;Argument[0];Argument[-1];taint",
        "org.springframework.http.server;DelegatingServerHttpResponse;true;getDelegate;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.server;PathContainer$Element;true;value;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.server;PathContainer$PathSegment;true;parameters;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.server;PathContainer$PathSegment;true;valueToMatch;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.server;PathContainer$PathSegment;true;valueToMatchAsChars;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.server;PathContainer;true;elements;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.server;PathContainer;true;parsePath;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.http.server;PathContainer;true;parsePath;(String,Options);;Argument[0];ReturnValue;taint",
        "org.springframework.http.server;PathContainer;true;subPath;(int);;Argument[-1];ReturnValue;taint",
        "org.springframework.http.server;PathContainer;true;subPath;(int,int);;Argument[-1];ReturnValue;taint",
        "org.springframework.http.server;PathContainer;true;value;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.server;RequestPath;true;contextPath;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.server;RequestPath;true;parse;(String,String);;Argument[0];ReturnValue;taint",
        "org.springframework.http.server;RequestPath;true;pathWithinApplication;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.server;ServerHttpRequest;true;getAsyncRequestControl;(ServerHttpResponse);;Argument[-1];ReturnValue;taint",
        "org.springframework.http.server;ServerHttpRequest;true;getAsyncRequestControl;(ServerHttpResponse);;Argument[0];Argument[-1];taint",
        "org.springframework.http.server;ServerHttpRequest;true;getAsyncRequestControl;(ServerHttpResponse);;Argument[0];ReturnValue;taint",
        "org.springframework.http.server;ServerHttpRequest;true;getPrincipal;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.server;ServletServerHttpAsyncRequestControl;true;ServletServerHttpAsyncRequestControl;(ServletServerHttpRequest,ServletServerHttpResponse);;Argument[0];Argument[-1];taint",
        "org.springframework.http.server;ServletServerHttpAsyncRequestControl;true;ServletServerHttpAsyncRequestControl;(ServletServerHttpRequest,ServletServerHttpResponse);;Argument[1];Argument[-1];taint",
        "org.springframework.http.server;ServletServerHttpRequest;true;ServletServerHttpRequest;(HttpServletRequest);;Argument[0];Argument[-1];taint",
        "org.springframework.http.server;ServletServerHttpRequest;true;getServletRequest;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http.server;ServletServerHttpResponse;true;ServletServerHttpResponse;(HttpServletResponse);;Argument[0];Argument[-1];taint",
        "org.springframework.http.server;ServletServerHttpResponse;true;getServletResponse;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http;CacheControl;true;cachePrivate;();;Argument[-1];ReturnValue;value",
        "org.springframework.http;CacheControl;true;cachePublic;();;Argument[-1];ReturnValue;value",
        "org.springframework.http;CacheControl;true;maxAge;(Duration);;Argument[0];ReturnValue;taint",
        "org.springframework.http;CacheControl;true;mustRevalidate;();;Argument[-1];ReturnValue;value",
        "org.springframework.http;CacheControl;true;noTransform;();;Argument[-1];ReturnValue;value",
        "org.springframework.http;CacheControl;true;proxyRevalidate;();;Argument[-1];ReturnValue;value",
        "org.springframework.http;CacheControl;true;sMaxAge;(Duration);;Argument[-1];ReturnValue;value",
        "org.springframework.http;CacheControl;true;sMaxAge;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.http;CacheControl;true;sMaxAge;(Duration);;Argument[0];ReturnValue;taint",
        "org.springframework.http;CacheControl;true;sMaxAge;(long,TimeUnit);;Argument[-1];ReturnValue;taint",
        "org.springframework.http;CacheControl;true;staleIfError;(Duration);;Argument[-1];ReturnValue;value",
        "org.springframework.http;CacheControl;true;staleIfError;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.http;CacheControl;true;staleIfError;(Duration);;Argument[0];ReturnValue;taint",
        "org.springframework.http;CacheControl;true;staleIfError;(long,TimeUnit);;Argument[-1];ReturnValue;taint",
        "org.springframework.http;CacheControl;true;staleWhileRevalidate;(Duration);;Argument[-1];ReturnValue;value",
        "org.springframework.http;CacheControl;true;staleWhileRevalidate;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.http;CacheControl;true;staleWhileRevalidate;(Duration);;Argument[0];ReturnValue;taint",
        "org.springframework.http;CacheControl;true;staleWhileRevalidate;(long,TimeUnit);;Argument[-1];ReturnValue;taint",
        "org.springframework.http;ContentDisposition$Builder;true;creationDate;(ZonedDateTime);;Argument[-1];ReturnValue;value",
        "org.springframework.http;ContentDisposition$Builder;true;creationDate;(ZonedDateTime);;Argument[0];Argument[-1];taint",
        "org.springframework.http;ContentDisposition$Builder;true;creationDate;(ZonedDateTime);;Argument[0];ReturnValue;taint",
        "org.springframework.http;ContentDisposition$Builder;true;filename;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.http;ContentDisposition$Builder;true;filename;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.http;ContentDisposition$Builder;true;filename;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.http;ContentDisposition$Builder;true;filename;(String,Charset);;Argument[-1];ReturnValue;value",
        "org.springframework.http;ContentDisposition$Builder;true;filename;(String,Charset);;Argument[0];Argument[-1];taint",
        "org.springframework.http;ContentDisposition$Builder;true;filename;(String,Charset);;Argument[0];ReturnValue;taint",
        "org.springframework.http;ContentDisposition$Builder;true;modificationDate;(ZonedDateTime);;Argument[-1];ReturnValue;value",
        "org.springframework.http;ContentDisposition$Builder;true;modificationDate;(ZonedDateTime);;Argument[0];Argument[-1];taint",
        "org.springframework.http;ContentDisposition$Builder;true;modificationDate;(ZonedDateTime);;Argument[0];ReturnValue;taint",
        "org.springframework.http;ContentDisposition$Builder;true;name;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.http;ContentDisposition$Builder;true;name;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.http;ContentDisposition$Builder;true;name;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.http;ContentDisposition$Builder;true;readDate;(ZonedDateTime);;Argument[-1];ReturnValue;value",
        "org.springframework.http;ContentDisposition$Builder;true;readDate;(ZonedDateTime);;Argument[0];Argument[-1];taint",
        "org.springframework.http;ContentDisposition$Builder;true;readDate;(ZonedDateTime);;Argument[0];ReturnValue;taint",
        "org.springframework.http;ContentDisposition$Builder;true;size;(Long);;Argument[-1];ReturnValue;value",
        "org.springframework.http;ContentDisposition;false;builder;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.http;ContentDisposition;false;getCreationDate;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http;ContentDisposition;false;getFilename;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http;ContentDisposition;false;getModificationDate;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http;ContentDisposition;false;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http;ContentDisposition;false;getReadDate;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http;ContentDisposition;false;getType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http;ContentDisposition;false;parse;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.http;ContentDisposition;false;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http;HttpCookie;true;HttpCookie;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.http;HttpCookie;true;HttpCookie;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.http;HttpCookie;true;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http;HttpCookie;true;getValue;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http;HttpCookie;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http;HttpEntity;true;HttpEntity;(MultiValueMap);;Argument[0];Argument[-1];taint",
        "org.springframework.http;HttpEntity;true;HttpEntity;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.http;HttpEntity;true;HttpEntity;(Object,MultiValueMap);;Argument[0];Argument[-1];taint",
        "org.springframework.http;HttpEntity;true;HttpEntity;(Object,MultiValueMap);;Argument[1];Argument[-1];taint",
        "org.springframework.http;HttpEntity;true;getBody;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http;HttpEntity;true;getHeaders;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http;HttpEntity;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http;HttpHeaders;true;HttpHeaders;(MultiValueMap);;Argument[0];Argument[-1];taint",
        "org.springframework.http;HttpHeaders;true;encodeBasicAuth;(String,String,Charset);;Argument[1];ReturnValue;taint",
        "org.springframework.http;HttpHeaders;true;getAccept;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http;HttpHeaders;true;getAccessControlAllowHeaders;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http;HttpHeaders;true;getAccessControlAllowOrigin;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http;HttpHeaders;true;getAccessControlExposeHeaders;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http;HttpHeaders;true;getAccessControlRequestHeaders;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http;HttpHeaders;true;getCacheControl;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http;HttpHeaders;true;getConnection;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http;HttpHeaders;true;getContentType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http;HttpHeaders;true;getETag;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http;HttpHeaders;true;getIfMatch;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http;HttpHeaders;true;getIfNoneMatch;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http;HttpHeaders;true;getLocation;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http;HttpHeaders;true;getOrEmpty;(Object);;Argument[-1];ReturnValue;taint",
        "org.springframework.http;HttpHeaders;true;getOrigin;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http;HttpHeaders;true;getPragma;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http;HttpHeaders;true;getUpgrade;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http;HttpHeaders;true;getValuesAsList;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.http;HttpHeaders;true;getVary;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http;HttpHeaders;true;readOnlyHttpHeaders;(HttpHeaders);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.http;HttpHeaders;true;readOnlyHttpHeaders;(MultiValueMap);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.http;HttpHeaders;true;setAccessControlAllowMethods;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.http;HttpHeaders;true;setAccessControlAllowOrigin;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.http;HttpHeaders;true;setAllow;(Set);;Argument[0];Argument[-1];taint",
        "org.springframework.http;HttpHeaders;true;setBasicAuth;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.http;HttpHeaders;true;setBasicAuth;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.http;HttpHeaders;true;setBasicAuth;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.http;HttpHeaders;true;setBasicAuth;(String,String,Charset);;Argument[0];Argument[-1];taint",
        "org.springframework.http;HttpHeaders;true;setBasicAuth;(String,String,Charset);;Argument[1];Argument[-1];taint",
        "org.springframework.http;HttpHeaders;true;setBearerAuth;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.http;HttpHeaders;true;setCacheControl;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.http;HttpHeaders;true;setConnection;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.http;HttpHeaders;true;setContentDispositionFormData;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.http;HttpHeaders;true;setContentDispositionFormData;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.http;HttpHeaders;true;setDate;(String,long);;Argument[0];Argument[-1];taint",
        "org.springframework.http;HttpHeaders;true;setETag;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.http;HttpHeaders;true;setIfMatch;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.http;HttpHeaders;true;setIfNoneMatch;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.http;HttpHeaders;true;setInstant;(String,Instant);;Argument[0];Argument[-1];taint",
        "org.springframework.http;HttpHeaders;true;setOrigin;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.http;HttpHeaders;true;setPragma;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.http;HttpHeaders;true;setUpgrade;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.http;HttpHeaders;true;setZonedDateTime;(String,ZonedDateTime);;Argument[0];Argument[-1];taint",
        "org.springframework.http;HttpHeaders;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http;HttpHeaders;true;writableHttpHeaders;(HttpHeaders);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.http;HttpInputMessage;true;getBody;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http;HttpLogging;true;forLog;(Log);;Argument[0];ReturnValue;taint",
        "org.springframework.http;HttpMessage;true;getHeaders;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http;HttpOutputMessage;true;getBody;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http;HttpRange;true;parseRanges;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.http;HttpRange;true;toResourceRegion;(Resource);;Argument[0];ReturnValue;taint",
        "org.springframework.http;HttpRange;true;toResourceRegions;(List,Resource);;Argument[1];ReturnValue;taint",
        "org.springframework.http;HttpRequest;true;getMethodValue;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http;HttpRequest;true;getURI;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http;InvalidMediaTypeException;true;InvalidMediaTypeException;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.http;InvalidMediaTypeException;true;getMediaType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http;MediaType;true;asMediaType;(MimeType);;Argument[0];ReturnValue;taint",
        "org.springframework.http;MediaType;true;asMediaTypes;(List);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.http;MediaType;true;copyQualityValue;(MediaType);;Argument[-1];ReturnValue;value",
        "org.springframework.http;MediaType;true;removeQualityValue;();;Argument[-1];ReturnValue;value",
        "org.springframework.http;ReactiveHttpInputMessage;true;getBody;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http;ReactiveHttpOutputMessage;true;beforeCommit;(Supplier);;Argument[0];Argument[-1];taint",
        "org.springframework.http;ReactiveHttpOutputMessage;true;bufferFactory;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http;RequestEntity$BodyBuilder;true;body;(Object);;Argument[-1];ReturnValue;taint",
        "org.springframework.http;RequestEntity$BodyBuilder;true;body;(Object);;Argument[0];ReturnValue;taint",
        "org.springframework.http;RequestEntity$BodyBuilder;true;body;(Object,Type);;Argument[-1];ReturnValue;taint",
        "org.springframework.http;RequestEntity$BodyBuilder;true;body;(Object,Type);;Argument[0];ReturnValue;taint",
        "org.springframework.http;RequestEntity$BodyBuilder;true;body;(Object,Type);;Argument[1];ReturnValue;taint",
        "org.springframework.http;RequestEntity$BodyBuilder;true;contentLength;(long);;Argument[-1];ReturnValue;value",
        "org.springframework.http;RequestEntity$BodyBuilder;true;contentType;(MediaType);;Argument[-1];ReturnValue;value",
        "org.springframework.http;RequestEntity$UriTemplateRequestEntity;true;getUriTemplate;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http;RequestEntity$UriTemplateRequestEntity;true;getVars;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http;RequestEntity$UriTemplateRequestEntity;true;getVarsMap;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http;RequestEntity$UriTemplateRequestEntity;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http;RequestEntity;true;RequestEntity;(HttpMethod,URI);;Argument[1];Argument[-1];taint",
        "org.springframework.http;RequestEntity;true;RequestEntity;(MultiValueMap,HttpMethod,URI);;Argument[0];Argument[-1];taint",
        "org.springframework.http;RequestEntity;true;RequestEntity;(MultiValueMap,HttpMethod,URI);;Argument[2];Argument[-1];taint",
        "org.springframework.http;RequestEntity;true;RequestEntity;(Object,HttpMethod,URI);;Argument[0];Argument[-1];taint",
        "org.springframework.http;RequestEntity;true;RequestEntity;(Object,HttpMethod,URI);;Argument[2];Argument[-1];taint",
        "org.springframework.http;RequestEntity;true;RequestEntity;(Object,HttpMethod,URI,Type);;Argument[0];Argument[-1];taint",
        "org.springframework.http;RequestEntity;true;RequestEntity;(Object,HttpMethod,URI,Type);;Argument[2];Argument[-1];taint",
        "org.springframework.http;RequestEntity;true;RequestEntity;(Object,HttpMethod,URI,Type);;Argument[3];Argument[-1];taint",
        "org.springframework.http;RequestEntity;true;RequestEntity;(Object,MultiValueMap,HttpMethod,URI);;Argument[0];Argument[-1];taint",
        "org.springframework.http;RequestEntity;true;RequestEntity;(Object,MultiValueMap,HttpMethod,URI);;Argument[1];Argument[-1];taint",
        "org.springframework.http;RequestEntity;true;RequestEntity;(Object,MultiValueMap,HttpMethod,URI);;Argument[3];Argument[-1];taint",
        "org.springframework.http;RequestEntity;true;RequestEntity;(Object,MultiValueMap,HttpMethod,URI,Type);;Argument[0];Argument[-1];taint",
        "org.springframework.http;RequestEntity;true;RequestEntity;(Object,MultiValueMap,HttpMethod,URI,Type);;Argument[1];Argument[-1];taint",
        "org.springframework.http;RequestEntity;true;RequestEntity;(Object,MultiValueMap,HttpMethod,URI,Type);;Argument[3];Argument[-1];taint",
        "org.springframework.http;RequestEntity;true;RequestEntity;(Object,MultiValueMap,HttpMethod,URI,Type);;Argument[4];Argument[-1];taint",
        "org.springframework.http;RequestEntity;true;delete;(String,Object[]);;Argument[0];ReturnValue;taint",
        "org.springframework.http;RequestEntity;true;delete;(String,Object[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.http;RequestEntity;true;delete;(URI);;Argument[0];ReturnValue;taint",
        "org.springframework.http;RequestEntity;true;get;(String,Object[]);;Argument[0];ReturnValue;taint",
        "org.springframework.http;RequestEntity;true;get;(String,Object[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.http;RequestEntity;true;get;(URI);;Argument[0];ReturnValue;taint",
        "org.springframework.http;RequestEntity;true;getType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http;RequestEntity;true;getUrl;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http;RequestEntity;true;head;(String,Object[]);;Argument[0];ReturnValue;taint",
        "org.springframework.http;RequestEntity;true;head;(String,Object[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.http;RequestEntity;true;head;(URI);;Argument[0];ReturnValue;taint",
        "org.springframework.http;RequestEntity;true;method;(HttpMethod,String,Map);;Argument[1];ReturnValue;taint",
        "org.springframework.http;RequestEntity;true;method;(HttpMethod,String,Map);;Element of Argument[2];ReturnValue;taint",
        "org.springframework.http;RequestEntity;true;method;(HttpMethod,String,Object[]);;Argument[1];ReturnValue;taint",
        "org.springframework.http;RequestEntity;true;method;(HttpMethod,String,Object[]);;ArrayElement of Argument[2];ReturnValue;taint",
        "org.springframework.http;RequestEntity;true;method;(HttpMethod,URI);;Argument[1];ReturnValue;taint",
        "org.springframework.http;RequestEntity;true;options;(String,Object[]);;Argument[0];ReturnValue;taint",
        "org.springframework.http;RequestEntity;true;options;(String,Object[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.http;RequestEntity;true;options;(URI);;Argument[0];ReturnValue;taint",
        "org.springframework.http;RequestEntity;true;patch;(String,Object[]);;Argument[0];ReturnValue;taint",
        "org.springframework.http;RequestEntity;true;patch;(String,Object[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.http;RequestEntity;true;patch;(URI);;Argument[0];ReturnValue;taint",
        "org.springframework.http;RequestEntity;true;post;(String,Object[]);;Argument[0];ReturnValue;taint",
        "org.springframework.http;RequestEntity;true;post;(String,Object[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.http;RequestEntity;true;post;(URI);;Argument[0];ReturnValue;taint",
        "org.springframework.http;RequestEntity;true;put;(String,Object[]);;Argument[0];ReturnValue;taint",
        "org.springframework.http;RequestEntity;true;put;(String,Object[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.http;RequestEntity;true;put;(URI);;Argument[0];ReturnValue;taint",
        "org.springframework.http;RequestEntity;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http;ResponseCookie$ResponseCookieBuilder;true;domain;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.http;ResponseCookie$ResponseCookieBuilder;true;domain;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.http;ResponseCookie$ResponseCookieBuilder;true;domain;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.http;ResponseCookie$ResponseCookieBuilder;true;httpOnly;(boolean);;Argument[-1];ReturnValue;value",
        "org.springframework.http;ResponseCookie$ResponseCookieBuilder;true;maxAge;(Duration);;Argument[-1];ReturnValue;value",
        "org.springframework.http;ResponseCookie$ResponseCookieBuilder;true;maxAge;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.http;ResponseCookie$ResponseCookieBuilder;true;maxAge;(Duration);;Argument[0];ReturnValue;taint",
        "org.springframework.http;ResponseCookie$ResponseCookieBuilder;true;maxAge;(long);;Argument[-1];ReturnValue;value",
        "org.springframework.http;ResponseCookie$ResponseCookieBuilder;true;path;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.http;ResponseCookie$ResponseCookieBuilder;true;path;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.http;ResponseCookie$ResponseCookieBuilder;true;path;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.http;ResponseCookie$ResponseCookieBuilder;true;sameSite;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.http;ResponseCookie$ResponseCookieBuilder;true;sameSite;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.http;ResponseCookie$ResponseCookieBuilder;true;sameSite;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.http;ResponseCookie$ResponseCookieBuilder;true;secure;(boolean);;Argument[-1];ReturnValue;value",
        "org.springframework.http;ResponseCookie;false;getDomain;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http;ResponseCookie;false;getMaxAge;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http;ResponseCookie;false;getPath;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http;ResponseCookie;false;getSameSite;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http;ResponseCookie;false;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http;ResponseEntity$BodyBuilder;true;body;(Object);;Argument[-1];ReturnValue;taint",
        "org.springframework.http;ResponseEntity$BodyBuilder;true;body;(Object);;Argument[0];ReturnValue;taint",
        "org.springframework.http;ResponseEntity$BodyBuilder;true;contentLength;(long);;Argument[-1];ReturnValue;value",
        "org.springframework.http;ResponseEntity$BodyBuilder;true;contentType;(MediaType);;Argument[-1];ReturnValue;value",
        "org.springframework.http;ResponseEntity;true;ResponseEntity;(MultiValueMap,HttpStatus);;Argument[0];Argument[-1];taint",
        "org.springframework.http;ResponseEntity;true;ResponseEntity;(Object,HttpStatus);;Argument[0];Argument[-1];taint",
        "org.springframework.http;ResponseEntity;true;ResponseEntity;(Object,MultiValueMap,HttpStatus);;Argument[0];Argument[-1];taint",
        "org.springframework.http;ResponseEntity;true;ResponseEntity;(Object,MultiValueMap,HttpStatus);;Argument[1];Argument[-1];taint",
        "org.springframework.http;ResponseEntity;true;ResponseEntity;(Object,MultiValueMap,int);;Argument[0];Argument[-1];taint",
        "org.springframework.http;ResponseEntity;true;ResponseEntity;(Object,MultiValueMap,int);;Argument[1];Argument[-1];taint",
        "org.springframework.http;ResponseEntity;true;created;(URI);;Argument[0];ReturnValue;taint",
        "org.springframework.http;ResponseEntity;true;of;(Optional);;Argument[0];ReturnValue;taint",
        "org.springframework.http;ResponseEntity;true;ok;(Object);;Argument[0];ReturnValue;taint",
        "org.springframework.http;ResponseEntity;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.http;StreamingHttpOutputMessage;true;setBody;(Body);;Argument[0];Argument[-1];taint",
        "org.springframework.instrument.classloading.glassfish;GlassFishLoadTimeWeaver;true;GlassFishLoadTimeWeaver;(ClassLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.instrument.classloading.jboss;JBossLoadTimeWeaver;true;JBossLoadTimeWeaver;(ClassLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.instrument.classloading.tomcat;TomcatLoadTimeWeaver;true;TomcatLoadTimeWeaver;(ClassLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.instrument.classloading.weblogic;WebLogicLoadTimeWeaver;true;WebLogicLoadTimeWeaver;(ClassLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.instrument.classloading.websphere;WebSphereLoadTimeWeaver;true;WebSphereLoadTimeWeaver;(ClassLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.instrument.classloading;InstrumentationLoadTimeWeaver;true;InstrumentationLoadTimeWeaver;(ClassLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.instrument.classloading;LoadTimeWeaver;true;addTransformer;(ClassFileTransformer);;Argument[0];Argument[-1];taint",
        "org.springframework.instrument.classloading;LoadTimeWeaver;true;getInstrumentableClassLoader;();;Argument[-1];ReturnValue;taint",
        "org.springframework.instrument.classloading;ReflectiveLoadTimeWeaver;true;ReflectiveLoadTimeWeaver;(ClassLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.instrument.classloading;ResourceOverridingShadowingClassLoader;true;ResourceOverridingShadowingClassLoader;(ClassLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.instrument.classloading;ResourceOverridingShadowingClassLoader;true;override;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.instrument.classloading;ResourceOverridingShadowingClassLoader;true;override;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.instrument.classloading;ResourceOverridingShadowingClassLoader;true;suppress;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.instrument.classloading;ShadowingClassLoader;true;ShadowingClassLoader;(ClassLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.instrument.classloading;ShadowingClassLoader;true;ShadowingClassLoader;(ClassLoader,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.instrument.classloading;ShadowingClassLoader;true;addTransformer;(ClassFileTransformer);;Argument[0];Argument[-1];taint",
        "org.springframework.instrument.classloading;SimpleInstrumentableClassLoader;true;SimpleInstrumentableClassLoader;(ClassLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.instrument.classloading;SimpleInstrumentableClassLoader;true;addTransformer;(ClassFileTransformer);;Argument[0];Argument[-1];taint",
        "org.springframework.instrument.classloading;SimpleLoadTimeWeaver;true;SimpleLoadTimeWeaver;(SimpleInstrumentableClassLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.instrument.classloading;WeavingTransformer;true;WeavingTransformer;(ClassLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.instrument.classloading;WeavingTransformer;true;addTransformer;(ClassFileTransformer);;Argument[0];Argument[-1];taint",
        "org.springframework.instrument.classloading;WeavingTransformer;true;transformIfNecessary;(String,String,byte[],ProtectionDomain);;Argument[2];ReturnValue;taint",
        "org.springframework.instrument.classloading;WeavingTransformer;true;transformIfNecessary;(String,byte[]);;Argument[1];ReturnValue;taint",
        "org.springframework.jca.cci.connection;CciLocalTransactionManager;true;CciLocalTransactionManager;(ConnectionFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.jca.cci.connection;CciLocalTransactionManager;true;getConnectionFactory;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jca.cci.connection;CciLocalTransactionManager;true;setConnectionFactory;(ConnectionFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.jca.cci.connection;ConnectionHolder;true;ConnectionHolder;(Connection);;Argument[0];Argument[-1];taint",
        "org.springframework.jca.cci.connection;ConnectionHolder;true;getConnection;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jca.cci.connection;ConnectionSpecConnectionFactoryAdapter;true;setConnectionSpec;(ConnectionSpec);;Argument[0];Argument[-1];taint",
        "org.springframework.jca.cci.connection;DelegatingConnectionFactory;true;getTargetConnectionFactory;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jca.cci.connection;DelegatingConnectionFactory;true;setTargetConnectionFactory;(ConnectionFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.jca.cci.connection;SingleConnectionFactory;true;SingleConnectionFactory;(Connection);;Argument[0];Argument[-1];taint",
        "org.springframework.jca.cci.connection;SingleConnectionFactory;true;SingleConnectionFactory;(ConnectionFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.jca.cci.connection;TransactionAwareConnectionFactoryProxy;true;TransactionAwareConnectionFactoryProxy;(ConnectionFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.jca.cci.core.support;CciDaoSupport;true;getCciTemplate;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jca.cci.core.support;CciDaoSupport;true;getConnectionFactory;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jca.cci.core.support;CciDaoSupport;true;setCciTemplate;(CciTemplate);;Argument[0];Argument[-1];taint",
        "org.springframework.jca.cci.core.support;CommAreaRecord;true;CommAreaRecord;(byte[]);;Argument[0];Argument[-1];taint",
        "org.springframework.jca.cci.core.support;CommAreaRecord;true;toByteArray;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jca.cci.core;CciTemplate;true;CciTemplate;(ConnectionFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.jca.cci.core;CciTemplate;true;CciTemplate;(ConnectionFactory,ConnectionSpec);;Argument[0];Argument[-1];taint",
        "org.springframework.jca.cci.core;CciTemplate;true;CciTemplate;(ConnectionFactory,ConnectionSpec);;Argument[1];Argument[-1];taint",
        "org.springframework.jca.cci.core;CciTemplate;true;getConnectionFactory;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jca.cci.core;CciTemplate;true;getConnectionSpec;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jca.cci.core;CciTemplate;true;getDerivedTemplate;(ConnectionSpec);;Argument[0];ReturnValue;taint",
        "org.springframework.jca.cci.core;CciTemplate;true;getOutputRecordCreator;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jca.cci.core;CciTemplate;true;setConnectionFactory;(ConnectionFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.jca.cci.core;CciTemplate;true;setConnectionSpec;(ConnectionSpec);;Argument[0];Argument[-1];taint",
        "org.springframework.jca.cci.core;CciTemplate;true;setOutputRecordCreator;(RecordCreator);;Argument[0];Argument[-1];taint",
        "org.springframework.jca.cci.object;EisOperation;true;getCciTemplate;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jca.cci.object;EisOperation;true;getInteractionSpec;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jca.cci.object;EisOperation;true;setCciTemplate;(CciTemplate);;Argument[0];Argument[-1];taint",
        "org.springframework.jca.cci.object;EisOperation;true;setConnectionFactory;(ConnectionFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.jca.cci.object;EisOperation;true;setInteractionSpec;(InteractionSpec);;Argument[0];Argument[-1];taint",
        "org.springframework.jca.cci.object;MappingCommAreaOperation;true;MappingCommAreaOperation;(ConnectionFactory,InteractionSpec);;Argument[0];Argument[-1];taint",
        "org.springframework.jca.cci.object;MappingCommAreaOperation;true;MappingCommAreaOperation;(ConnectionFactory,InteractionSpec);;Argument[1];Argument[-1];taint",
        "org.springframework.jca.cci.object;MappingRecordOperation;true;MappingRecordOperation;(ConnectionFactory,InteractionSpec);;Argument[0];Argument[-1];taint",
        "org.springframework.jca.cci.object;MappingRecordOperation;true;MappingRecordOperation;(ConnectionFactory,InteractionSpec);;Argument[1];Argument[-1];taint",
        "org.springframework.jca.cci.object;MappingRecordOperation;true;setOutputRecordCreator;(RecordCreator);;Argument[0];Argument[-1];taint",
        "org.springframework.jca.cci.object;SimpleRecordOperation;true;SimpleRecordOperation;(ConnectionFactory,InteractionSpec);;Argument[0];Argument[-1];taint",
        "org.springframework.jca.cci.object;SimpleRecordOperation;true;SimpleRecordOperation;(ConnectionFactory,InteractionSpec);;Argument[1];Argument[-1];taint",
        "org.springframework.jca.context;ResourceAdapterApplicationContext;true;ResourceAdapterApplicationContext;(BootstrapContext);;Argument[0];Argument[-1];taint",
        "org.springframework.jca.context;SpringContextResourceAdapter;true;setContextConfigLocation;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jca.endpoint;AbstractMessageEndpointFactory;true;setTransactionFactory;(TransactionFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.jca.endpoint;AbstractMessageEndpointFactory;true;setTransactionManager;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.jca.endpoint;AbstractMessageEndpointFactory;true;setTransactionName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jca.endpoint;GenericMessageEndpointFactory;true;setMessageListener;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.jca.endpoint;GenericMessageEndpointManager;true;getActivationSpec;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jca.endpoint;GenericMessageEndpointManager;true;getMessageEndpointFactory;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jca.endpoint;GenericMessageEndpointManager;true;getResourceAdapter;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jca.endpoint;GenericMessageEndpointManager;true;setActivationSpec;(ActivationSpec);;Argument[0];Argument[-1];taint",
        "org.springframework.jca.endpoint;GenericMessageEndpointManager;true;setMessageEndpointFactory;(MessageEndpointFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.jca.endpoint;GenericMessageEndpointManager;true;setResourceAdapter;(ResourceAdapter);;Argument[0];Argument[-1];taint",
        "org.springframework.jca.support;LocalConnectionFactoryBean;true;setConnectionManager;(ConnectionManager);;Argument[0];Argument[-1];taint",
        "org.springframework.jca.support;LocalConnectionFactoryBean;true;setManagedConnectionFactory;(ManagedConnectionFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.jca.support;ResourceAdapterFactoryBean;true;setBootstrapContext;(BootstrapContext);;Argument[0];Argument[-1];taint",
        "org.springframework.jca.support;ResourceAdapterFactoryBean;true;setResourceAdapter;(ResourceAdapter);;Argument[0];Argument[-1];taint",
        "org.springframework.jca.support;ResourceAdapterFactoryBean;true;setWorkManager;(WorkManager);;Argument[0];Argument[-1];taint",
        "org.springframework.jca.support;ResourceAdapterFactoryBean;true;setXaTerminator;(XATerminator);;Argument[0];Argument[-1];taint",
        "org.springframework.jca.support;SimpleBootstrapContext;true;SimpleBootstrapContext;(WorkManager);;Argument[0];Argument[-1];taint",
        "org.springframework.jca.support;SimpleBootstrapContext;true;SimpleBootstrapContext;(WorkManager,XATerminator);;Argument[0];Argument[-1];taint",
        "org.springframework.jca.support;SimpleBootstrapContext;true;SimpleBootstrapContext;(WorkManager,XATerminator);;Argument[1];Argument[-1];taint",
        "org.springframework.jca.support;SimpleBootstrapContext;true;SimpleBootstrapContext;(WorkManager,XATerminator,TransactionSynchronizationRegistry);;Argument[0];Argument[-1];taint",
        "org.springframework.jca.support;SimpleBootstrapContext;true;SimpleBootstrapContext;(WorkManager,XATerminator,TransactionSynchronizationRegistry);;Argument[1];Argument[-1];taint",
        "org.springframework.jca.support;SimpleBootstrapContext;true;SimpleBootstrapContext;(WorkManager,XATerminator,TransactionSynchronizationRegistry);;Argument[2];Argument[-1];taint",
        "org.springframework.jca.work;DelegatingWork;true;DelegatingWork;(Runnable);;Argument[0];Argument[-1];taint",
        "org.springframework.jca.work;DelegatingWork;true;getDelegate;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jca.work;SimpleTaskWorkManager;true;setAsyncTaskExecutor;(AsyncTaskExecutor);;Argument[0];Argument[-1];taint",
        "org.springframework.jca.work;SimpleTaskWorkManager;true;setSyncTaskExecutor;(TaskExecutor);;Argument[0];Argument[-1];taint",
        "org.springframework.jca.work;WorkManagerTaskExecutor;true;WorkManagerTaskExecutor;(WorkManager);;Argument[0];Argument[-1];taint",
        "org.springframework.jca.work;WorkManagerTaskExecutor;true;setTaskDecorator;(TaskDecorator);;Argument[0];Argument[-1];taint",
        "org.springframework.jca.work;WorkManagerTaskExecutor;true;setWorkListener;(WorkListener);;Argument[0];Argument[-1];taint",
        "org.springframework.jca.work;WorkManagerTaskExecutor;true;setWorkManager;(WorkManager);;Argument[0];Argument[-1];taint",
        "org.springframework.jca.work;WorkManagerTaskExecutor;true;setWorkManagerName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.config;SortedResourcesFactoryBean;true;SortedResourcesFactoryBean;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.config;SortedResourcesFactoryBean;true;SortedResourcesFactoryBean;(ResourceLoader,List);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.config;SortedResourcesFactoryBean;true;SortedResourcesFactoryBean;(ResourceLoader,List);;Argument[1];Argument[-1];taint",
        "org.springframework.jdbc.core.metadata;CallMetaDataContext;true;createCallString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.core.metadata;CallMetaDataContext;true;createReturnResultSetParameter;(String,RowMapper);;Argument[0];ReturnValue;taint",
        "org.springframework.jdbc.core.metadata;CallMetaDataContext;true;createReturnResultSetParameter;(String,RowMapper);;Argument[1];ReturnValue;taint",
        "org.springframework.jdbc.core.metadata;CallMetaDataContext;true;getCallParameters;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.core.metadata;CallMetaDataContext;true;getCatalogName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.core.metadata;CallMetaDataContext;true;getFunctionReturnName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.core.metadata;CallMetaDataContext;true;getLimitedInParameterNames;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.core.metadata;CallMetaDataContext;true;getOutParameterNames;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.core.metadata;CallMetaDataContext;true;getProcedureName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.core.metadata;CallMetaDataContext;true;getScalarOutParameterName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.core.metadata;CallMetaDataContext;true;getSchemaName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.core.metadata;CallMetaDataContext;true;matchInParameterValuesWithCallParameters;(Map);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.jdbc.core.metadata;CallMetaDataContext;true;matchInParameterValuesWithCallParameters;(Object[]);;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.core.metadata;CallMetaDataContext;true;matchInParameterValuesWithCallParameters;(Object[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.jdbc.core.metadata;CallMetaDataContext;true;matchInParameterValuesWithCallParameters;(SqlParameterSource);;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.core.metadata;CallMetaDataContext;true;processParameters;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.metadata;CallMetaDataContext;true;setCatalogName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.metadata;CallMetaDataContext;true;setFunctionReturnName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.metadata;CallMetaDataContext;true;setLimitedInParameterNames;(Set);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.metadata;CallMetaDataContext;true;setOutParameterNames;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.metadata;CallMetaDataContext;true;setProcedureName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.metadata;CallMetaDataContext;true;setSchemaName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.metadata;CallMetaDataProvider;true;catalogNameToUse;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.jdbc.core.metadata;CallMetaDataProvider;true;createDefaultInOutParameter;(String,CallParameterMetaData);;Argument[0];ReturnValue;taint",
        "org.springframework.jdbc.core.metadata;CallMetaDataProvider;true;createDefaultInParameter;(String,CallParameterMetaData);;Argument[0];ReturnValue;taint",
        "org.springframework.jdbc.core.metadata;CallMetaDataProvider;true;createDefaultOutParameter;(String,CallParameterMetaData);;Argument[0];ReturnValue;taint",
        "org.springframework.jdbc.core.metadata;CallMetaDataProvider;true;getCallParameterMetaData;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.core.metadata;CallMetaDataProvider;true;getUserName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.core.metadata;CallMetaDataProvider;true;metaDataCatalogNameToUse;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.jdbc.core.metadata;CallMetaDataProvider;true;metaDataSchemaNameToUse;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.core.metadata;CallMetaDataProvider;true;metaDataSchemaNameToUse;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.jdbc.core.metadata;CallMetaDataProvider;true;parameterNameToUse;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.jdbc.core.metadata;CallMetaDataProvider;true;procedureNameToUse;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.jdbc.core.metadata;CallMetaDataProvider;true;schemaNameToUse;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.jdbc.core.metadata;CallParameterMetaData;true;CallParameterMetaData;(String,int,int,String,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.metadata;CallParameterMetaData;true;CallParameterMetaData;(String,int,int,String,boolean);;Argument[3];Argument[-1];taint",
        "org.springframework.jdbc.core.metadata;CallParameterMetaData;true;CallParameterMetaData;(boolean,String,int,int,String,boolean);;Argument[1];Argument[-1];taint",
        "org.springframework.jdbc.core.metadata;CallParameterMetaData;true;CallParameterMetaData;(boolean,String,int,int,String,boolean);;Argument[4];Argument[-1];taint",
        "org.springframework.jdbc.core.metadata;CallParameterMetaData;true;getParameterName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.core.metadata;CallParameterMetaData;true;getTypeName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.core.metadata;TableMetaDataContext;true;createInsertString;(String[]);;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.core.metadata;TableMetaDataContext;true;getCatalogName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.core.metadata;TableMetaDataContext;true;getSchemaName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.core.metadata;TableMetaDataContext;true;getSimpleQueryForGetGeneratedKey;(String,String);;Argument[0];ReturnValue;taint",
        "org.springframework.jdbc.core.metadata;TableMetaDataContext;true;getSimpleQueryForGetGeneratedKey;(String,String);;Argument[1];ReturnValue;taint",
        "org.springframework.jdbc.core.metadata;TableMetaDataContext;true;getSimulationQueryForGetGeneratedKey;(String,String);;Argument[0];ReturnValue;taint",
        "org.springframework.jdbc.core.metadata;TableMetaDataContext;true;getSimulationQueryForGetGeneratedKey;(String,String);;Argument[1];ReturnValue;taint",
        "org.springframework.jdbc.core.metadata;TableMetaDataContext;true;getTableColumns;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.core.metadata;TableMetaDataContext;true;getTableName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.core.metadata;TableMetaDataContext;true;matchInParameterValuesWithInsertColumns;(Map);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.jdbc.core.metadata;TableMetaDataContext;true;processMetaData;(DataSource,List,String[]);;Argument[1];Argument[-1];taint",
        "org.springframework.jdbc.core.metadata;TableMetaDataContext;true;setCatalogName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.metadata;TableMetaDataContext;true;setSchemaName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.metadata;TableMetaDataContext;true;setTableName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.metadata;TableMetaDataProvider;true;catalogNameToUse;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.jdbc.core.metadata;TableMetaDataProvider;true;getSimpleQueryForGetGeneratedKey;(String,String);;Argument[0];ReturnValue;taint",
        "org.springframework.jdbc.core.metadata;TableMetaDataProvider;true;getSimpleQueryForGetGeneratedKey;(String,String);;Argument[1];ReturnValue;taint",
        "org.springframework.jdbc.core.metadata;TableMetaDataProvider;true;getTableParameterMetaData;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.core.metadata;TableMetaDataProvider;true;metaDataCatalogNameToUse;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.jdbc.core.metadata;TableMetaDataProvider;true;metaDataSchemaNameToUse;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.core.metadata;TableMetaDataProvider;true;metaDataSchemaNameToUse;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.jdbc.core.metadata;TableMetaDataProvider;true;schemaNameToUse;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.jdbc.core.metadata;TableMetaDataProvider;true;tableNameToUse;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.jdbc.core.metadata;TableParameterMetaData;true;TableParameterMetaData;(String,int,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.metadata;TableParameterMetaData;true;getParameterName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.core.namedparam;AbstractSqlParameterSource;true;registerSqlType;(String,int);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.namedparam;AbstractSqlParameterSource;true;registerTypeName;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.namedparam;AbstractSqlParameterSource;true;registerTypeName;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.jdbc.core.namedparam;BeanPropertySqlParameterSource;true;BeanPropertySqlParameterSource;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.namedparam;BeanPropertySqlParameterSource;true;getReadablePropertyNames;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.core.namedparam;MapSqlParameterSource;true;MapSqlParameterSource;(String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.namedparam;MapSqlParameterSource;true;MapSqlParameterSource;(String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.jdbc.core.namedparam;MapSqlParameterSource;true;addValue;(String,Object);;Argument[-1];ReturnValue;value",
        "org.springframework.jdbc.core.namedparam;MapSqlParameterSource;true;addValue;(String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.namedparam;MapSqlParameterSource;true;addValue;(String,Object);;Argument[0];ReturnValue;taint",
        "org.springframework.jdbc.core.namedparam;MapSqlParameterSource;true;addValue;(String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.jdbc.core.namedparam;MapSqlParameterSource;true;addValue;(String,Object);;Argument[1];ReturnValue;taint",
        "org.springframework.jdbc.core.namedparam;MapSqlParameterSource;true;addValue;(String,Object,int);;Argument[-1];ReturnValue;value",
        "org.springframework.jdbc.core.namedparam;MapSqlParameterSource;true;addValue;(String,Object,int);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.namedparam;MapSqlParameterSource;true;addValue;(String,Object,int);;Argument[0];ReturnValue;taint",
        "org.springframework.jdbc.core.namedparam;MapSqlParameterSource;true;addValue;(String,Object,int);;Argument[1];Argument[-1];taint",
        "org.springframework.jdbc.core.namedparam;MapSqlParameterSource;true;addValue;(String,Object,int);;Argument[1];ReturnValue;taint",
        "org.springframework.jdbc.core.namedparam;MapSqlParameterSource;true;addValue;(String,Object,int,String);;Argument[-1];ReturnValue;value",
        "org.springframework.jdbc.core.namedparam;MapSqlParameterSource;true;addValue;(String,Object,int,String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.namedparam;MapSqlParameterSource;true;addValue;(String,Object,int,String);;Argument[0];ReturnValue;taint",
        "org.springframework.jdbc.core.namedparam;MapSqlParameterSource;true;addValue;(String,Object,int,String);;Argument[1];Argument[-1];taint",
        "org.springframework.jdbc.core.namedparam;MapSqlParameterSource;true;addValue;(String,Object,int,String);;Argument[1];ReturnValue;taint",
        "org.springframework.jdbc.core.namedparam;MapSqlParameterSource;true;addValue;(String,Object,int,String);;Argument[3];Argument[-1];taint",
        "org.springframework.jdbc.core.namedparam;MapSqlParameterSource;true;addValue;(String,Object,int,String);;Argument[3];ReturnValue;taint",
        "org.springframework.jdbc.core.namedparam;MapSqlParameterSource;true;addValues;(Map);;Argument[-1];ReturnValue;value",
        "org.springframework.jdbc.core.namedparam;MapSqlParameterSource;true;getValues;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.core.namedparam;NamedParameterJdbcDaoSupport;true;getNamedParameterJdbcTemplate;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.core.namedparam;NamedParameterJdbcOperations;true;batchUpdate;(String,Map[]);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.namedparam;NamedParameterJdbcOperations;true;batchUpdate;(String,SqlParameterSource[]);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.namedparam;NamedParameterJdbcOperations;true;execute;(String,Map,PreparedStatementCallback);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.namedparam;NamedParameterJdbcOperations;true;execute;(String,PreparedStatementCallback);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.namedparam;NamedParameterJdbcOperations;true;execute;(String,SqlParameterSource,PreparedStatementCallback);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.namedparam;NamedParameterJdbcOperations;true;getJdbcOperations;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.core.namedparam;NamedParameterJdbcOperations;true;query;(String,Map,ResultSetExtractor);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.namedparam;NamedParameterJdbcOperations;true;query;(String,Map,RowCallbackHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.namedparam;NamedParameterJdbcOperations;true;query;(String,Map,RowMapper);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.namedparam;NamedParameterJdbcOperations;true;query;(String,ResultSetExtractor);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.namedparam;NamedParameterJdbcOperations;true;query;(String,RowCallbackHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.namedparam;NamedParameterJdbcOperations;true;query;(String,RowMapper);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.namedparam;NamedParameterJdbcOperations;true;query;(String,SqlParameterSource,ResultSetExtractor);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.namedparam;NamedParameterJdbcOperations;true;query;(String,SqlParameterSource,RowCallbackHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.namedparam;NamedParameterJdbcOperations;true;query;(String,SqlParameterSource,RowMapper);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.namedparam;NamedParameterJdbcOperations;true;queryForList;(String,Map);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.namedparam;NamedParameterJdbcOperations;true;queryForList;(String,Map,Class);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.namedparam;NamedParameterJdbcOperations;true;queryForList;(String,SqlParameterSource);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.namedparam;NamedParameterJdbcOperations;true;queryForList;(String,SqlParameterSource,Class);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.namedparam;NamedParameterJdbcOperations;true;queryForMap;(String,Map);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.namedparam;NamedParameterJdbcOperations;true;queryForMap;(String,SqlParameterSource);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.namedparam;NamedParameterJdbcOperations;true;queryForObject;(String,Map,Class);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.namedparam;NamedParameterJdbcOperations;true;queryForObject;(String,Map,RowMapper);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.namedparam;NamedParameterJdbcOperations;true;queryForObject;(String,SqlParameterSource,Class);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.namedparam;NamedParameterJdbcOperations;true;queryForObject;(String,SqlParameterSource,RowMapper);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.namedparam;NamedParameterJdbcOperations;true;queryForRowSet;(String,Map);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.namedparam;NamedParameterJdbcOperations;true;queryForRowSet;(String,SqlParameterSource);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.namedparam;NamedParameterJdbcOperations;true;queryForStream;(String,Map,RowMapper);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.namedparam;NamedParameterJdbcOperations;true;queryForStream;(String,SqlParameterSource,RowMapper);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.namedparam;NamedParameterJdbcOperations;true;update;(String,Map);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.namedparam;NamedParameterJdbcOperations;true;update;(String,SqlParameterSource);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.namedparam;NamedParameterJdbcOperations;true;update;(String,SqlParameterSource,KeyHolder);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.namedparam;NamedParameterJdbcOperations;true;update;(String,SqlParameterSource,KeyHolder,String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.namedparam;NamedParameterJdbcTemplate;true;NamedParameterJdbcTemplate;(DataSource);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.namedparam;NamedParameterJdbcTemplate;true;NamedParameterJdbcTemplate;(JdbcOperations);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.namedparam;NamedParameterJdbcTemplate;true;getJdbcTemplate;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.core.namedparam;NamedParameterUtils;true;parseSqlStatement;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.jdbc.core.namedparam;NamedParameterUtils;true;parseSqlStatementIntoString;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.jdbc.core.namedparam;NamedParameterUtils;true;substituteNamedParameters;(String,SqlParameterSource);;Argument[0];ReturnValue;taint",
        "org.springframework.jdbc.core.namedparam;ParsedSql;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.core.namedparam;SqlParameterSource;true;getParameterNames;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.core.namedparam;SqlParameterSource;true;getSqlType;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.namedparam;SqlParameterSource;true;getTypeName;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.core.namedparam;SqlParameterSource;true;getValue;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.core.namedparam;SqlParameterSource;true;getValue;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.namedparam;SqlParameterSource;true;hasValue;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.namedparam;SqlParameterSourceUtils;true;createBatch;(Collection);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.jdbc.core.namedparam;SqlParameterSourceUtils;true;createBatch;(Object[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.jdbc.core.simple;AbstractJdbcCall;true;addDeclaredParameter;(SqlParameter);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.simple;AbstractJdbcCall;true;addDeclaredRowMapper;(String,RowMapper);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.simple;AbstractJdbcCall;true;addDeclaredRowMapper;(String,RowMapper);;Argument[1];Argument[-1];taint",
        "org.springframework.jdbc.core.simple;AbstractJdbcCall;true;getCallString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.core.simple;AbstractJdbcCall;true;getCatalogName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.core.simple;AbstractJdbcCall;true;getInParameterNames;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.core.simple;AbstractJdbcCall;true;getJdbcTemplate;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.core.simple;AbstractJdbcCall;true;getProcedureName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.core.simple;AbstractJdbcCall;true;getSchemaName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.core.simple;AbstractJdbcCall;true;setCatalogName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.simple;AbstractJdbcCall;true;setInParameterNames;(Set);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.simple;AbstractJdbcCall;true;setProcedureName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.simple;AbstractJdbcCall;true;setSchemaName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.simple;AbstractJdbcInsert;true;getCatalogName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.core.simple;AbstractJdbcInsert;true;getColumnNames;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.core.simple;AbstractJdbcInsert;true;getGeneratedKeyNames;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.core.simple;AbstractJdbcInsert;true;getInsertString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.core.simple;AbstractJdbcInsert;true;getJdbcTemplate;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.core.simple;AbstractJdbcInsert;true;getSchemaName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.core.simple;AbstractJdbcInsert;true;getTableName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.core.simple;AbstractJdbcInsert;true;setCatalogName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.simple;AbstractJdbcInsert;true;setColumnNames;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.simple;AbstractJdbcInsert;true;setGeneratedKeyName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.simple;AbstractJdbcInsert;true;setGeneratedKeyNames;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.simple;AbstractJdbcInsert;true;setSchemaName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.simple;AbstractJdbcInsert;true;setTableName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.simple;SimpleJdbcCall;true;SimpleJdbcCall;(DataSource);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.simple;SimpleJdbcCall;true;SimpleJdbcCall;(JdbcTemplate);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.simple;SimpleJdbcCallOperations;true;declareParameters;(SqlParameter[]);;Argument[-1];ReturnValue;value",
        "org.springframework.jdbc.core.simple;SimpleJdbcCallOperations;true;declareParameters;(SqlParameter[]);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.simple;SimpleJdbcCallOperations;true;declareParameters;(SqlParameter[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.jdbc.core.simple;SimpleJdbcCallOperations;true;returningResultSet;(String,RowMapper);;Argument[-1];ReturnValue;value",
        "org.springframework.jdbc.core.simple;SimpleJdbcCallOperations;true;returningResultSet;(String,RowMapper);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.simple;SimpleJdbcCallOperations;true;returningResultSet;(String,RowMapper);;Argument[0];ReturnValue;taint",
        "org.springframework.jdbc.core.simple;SimpleJdbcCallOperations;true;returningResultSet;(String,RowMapper);;Argument[1];Argument[-1];taint",
        "org.springframework.jdbc.core.simple;SimpleJdbcCallOperations;true;returningResultSet;(String,RowMapper);;Argument[1];ReturnValue;taint",
        "org.springframework.jdbc.core.simple;SimpleJdbcCallOperations;true;useInParameterNames;(String[]);;Argument[-1];ReturnValue;value",
        "org.springframework.jdbc.core.simple;SimpleJdbcCallOperations;true;useInParameterNames;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.simple;SimpleJdbcCallOperations;true;useInParameterNames;(String[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.jdbc.core.simple;SimpleJdbcCallOperations;true;withCatalogName;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.jdbc.core.simple;SimpleJdbcCallOperations;true;withCatalogName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.simple;SimpleJdbcCallOperations;true;withCatalogName;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.jdbc.core.simple;SimpleJdbcCallOperations;true;withFunctionName;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.jdbc.core.simple;SimpleJdbcCallOperations;true;withFunctionName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.simple;SimpleJdbcCallOperations;true;withFunctionName;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.jdbc.core.simple;SimpleJdbcCallOperations;true;withNamedBinding;();;Argument[-1];ReturnValue;value",
        "org.springframework.jdbc.core.simple;SimpleJdbcCallOperations;true;withProcedureName;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.jdbc.core.simple;SimpleJdbcCallOperations;true;withProcedureName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.simple;SimpleJdbcCallOperations;true;withProcedureName;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.jdbc.core.simple;SimpleJdbcCallOperations;true;withReturnValue;();;Argument[-1];ReturnValue;value",
        "org.springframework.jdbc.core.simple;SimpleJdbcCallOperations;true;withSchemaName;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.jdbc.core.simple;SimpleJdbcCallOperations;true;withSchemaName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.simple;SimpleJdbcCallOperations;true;withSchemaName;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.jdbc.core.simple;SimpleJdbcCallOperations;true;withoutProcedureColumnMetaDataAccess;();;Argument[-1];ReturnValue;value",
        "org.springframework.jdbc.core.simple;SimpleJdbcInsert;true;SimpleJdbcInsert;(DataSource);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.simple;SimpleJdbcInsert;true;SimpleJdbcInsert;(JdbcTemplate);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.simple;SimpleJdbcInsertOperations;true;includeSynonymsForTableColumnMetaData;();;Argument[-1];ReturnValue;value",
        "org.springframework.jdbc.core.simple;SimpleJdbcInsertOperations;true;usingColumns;(String[]);;Argument[-1];ReturnValue;value",
        "org.springframework.jdbc.core.simple;SimpleJdbcInsertOperations;true;usingColumns;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.simple;SimpleJdbcInsertOperations;true;usingColumns;(String[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.jdbc.core.simple;SimpleJdbcInsertOperations;true;usingGeneratedKeyColumns;(String[]);;Argument[-1];ReturnValue;value",
        "org.springframework.jdbc.core.simple;SimpleJdbcInsertOperations;true;usingGeneratedKeyColumns;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.simple;SimpleJdbcInsertOperations;true;usingGeneratedKeyColumns;(String[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.jdbc.core.simple;SimpleJdbcInsertOperations;true;withCatalogName;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.jdbc.core.simple;SimpleJdbcInsertOperations;true;withCatalogName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.simple;SimpleJdbcInsertOperations;true;withCatalogName;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.jdbc.core.simple;SimpleJdbcInsertOperations;true;withSchemaName;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.jdbc.core.simple;SimpleJdbcInsertOperations;true;withSchemaName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.simple;SimpleJdbcInsertOperations;true;withSchemaName;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.jdbc.core.simple;SimpleJdbcInsertOperations;true;withTableName;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.jdbc.core.simple;SimpleJdbcInsertOperations;true;withTableName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.simple;SimpleJdbcInsertOperations;true;withTableName;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.jdbc.core.simple;SimpleJdbcInsertOperations;true;withoutTableColumnMetaDataAccess;();;Argument[-1];ReturnValue;value",
        "org.springframework.jdbc.core.support;AbstractLobCreatingPreparedStatementCallback;true;AbstractLobCreatingPreparedStatementCallback;(LobHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.support;JdbcBeanDefinitionReader;true;JdbcBeanDefinitionReader;(BeanDefinitionRegistry);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.support;JdbcBeanDefinitionReader;true;JdbcBeanDefinitionReader;(PropertiesBeanDefinitionReader);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.support;JdbcBeanDefinitionReader;true;setDataSource;(DataSource);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.support;JdbcBeanDefinitionReader;true;setJdbcTemplate;(JdbcTemplate);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.support;JdbcDaoSupport;true;getDataSource;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.core.support;JdbcDaoSupport;true;getJdbcTemplate;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.core.support;JdbcDaoSupport;true;setDataSource;(DataSource);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.support;JdbcDaoSupport;true;setJdbcTemplate;(JdbcTemplate);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.support;SqlLobValue;true;SqlLobValue;(InputStream,int);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.support;SqlLobValue;true;SqlLobValue;(InputStream,int,LobHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.support;SqlLobValue;true;SqlLobValue;(Reader,int);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.support;SqlLobValue;true;SqlLobValue;(Reader,int,LobHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.support;SqlLobValue;true;SqlLobValue;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.support;SqlLobValue;true;SqlLobValue;(String,LobHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.support;SqlLobValue;true;SqlLobValue;(byte[]);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core.support;SqlLobValue;true;SqlLobValue;(byte[],LobHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core;ArgumentPreparedStatementSetter;true;ArgumentPreparedStatementSetter;(Object[]);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core;ArgumentTypePreparedStatementSetter;true;ArgumentTypePreparedStatementSetter;(Object[],int[]);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core;BeanPropertyRowMapper;true;getConversionService;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.core;BeanPropertyRowMapper;true;newInstance;(Class,ConversionService);;Argument[1];ReturnValue;taint",
        "org.springframework.jdbc.core;BeanPropertyRowMapper;true;setConversionService;(ConversionService);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core;CallableStatementCreatorFactory;true;CallableStatementCreatorFactory;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core;CallableStatementCreatorFactory;true;CallableStatementCreatorFactory;(String,List);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core;CallableStatementCreatorFactory;true;CallableStatementCreatorFactory;(String,List);;Argument[1];Argument[-1];taint",
        "org.springframework.jdbc.core;CallableStatementCreatorFactory;true;addParameter;(SqlParameter);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core;CallableStatementCreatorFactory;true;getCallString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.core;CallableStatementCreatorFactory;true;newCallableStatementCreator;(Map);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.jdbc.core;CallableStatementCreatorFactory;true;newCallableStatementCreator;(ParameterMapper);;Argument[0];ReturnValue;taint",
        "org.springframework.jdbc.core;DataClassRowMapper;true;newInstance;(Class,ConversionService);;Argument[1];ReturnValue;taint",
        "org.springframework.jdbc.core;JdbcTemplate;true;JdbcTemplate;(DataSource);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core;JdbcTemplate;true;JdbcTemplate;(DataSource,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core;PreparedStatementCreatorFactory;true;PreparedStatementCreatorFactory;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core;PreparedStatementCreatorFactory;true;PreparedStatementCreatorFactory;(String,List);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core;PreparedStatementCreatorFactory;true;PreparedStatementCreatorFactory;(String,List);;Argument[1];Argument[-1];taint",
        "org.springframework.jdbc.core;PreparedStatementCreatorFactory;true;PreparedStatementCreatorFactory;(String,int[]);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core;PreparedStatementCreatorFactory;true;addParameter;(SqlParameter);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core;PreparedStatementCreatorFactory;true;getSql;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.core;PreparedStatementCreatorFactory;true;newPreparedStatementCreator;(List);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.jdbc.core;PreparedStatementCreatorFactory;true;newPreparedStatementCreator;(Object[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.jdbc.core;PreparedStatementCreatorFactory;true;newPreparedStatementCreator;(String,Object[]);;Argument[0];ReturnValue;taint",
        "org.springframework.jdbc.core;PreparedStatementCreatorFactory;true;newPreparedStatementCreator;(String,Object[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.jdbc.core;PreparedStatementCreatorFactory;true;newPreparedStatementSetter;(List);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.jdbc.core;PreparedStatementCreatorFactory;true;newPreparedStatementSetter;(Object[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.jdbc.core;PreparedStatementCreatorFactory;true;setGeneratedKeysColumnNames;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core;ResultSetSupportingSqlParameter;true;ResultSetSupportingSqlParameter;(String,int);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core;ResultSetSupportingSqlParameter;true;ResultSetSupportingSqlParameter;(String,int,ResultSetExtractor);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core;ResultSetSupportingSqlParameter;true;ResultSetSupportingSqlParameter;(String,int,ResultSetExtractor);;Argument[2];Argument[-1];taint",
        "org.springframework.jdbc.core;ResultSetSupportingSqlParameter;true;ResultSetSupportingSqlParameter;(String,int,RowCallbackHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core;ResultSetSupportingSqlParameter;true;ResultSetSupportingSqlParameter;(String,int,RowCallbackHandler);;Argument[2];Argument[-1];taint",
        "org.springframework.jdbc.core;ResultSetSupportingSqlParameter;true;ResultSetSupportingSqlParameter;(String,int,RowMapper);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core;ResultSetSupportingSqlParameter;true;ResultSetSupportingSqlParameter;(String,int,RowMapper);;Argument[2];Argument[-1];taint",
        "org.springframework.jdbc.core;ResultSetSupportingSqlParameter;true;ResultSetSupportingSqlParameter;(String,int,String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core;ResultSetSupportingSqlParameter;true;ResultSetSupportingSqlParameter;(String,int,String);;Argument[2];Argument[-1];taint",
        "org.springframework.jdbc.core;ResultSetSupportingSqlParameter;true;ResultSetSupportingSqlParameter;(String,int,int);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core;ResultSetSupportingSqlParameter;true;getResultSetExtractor;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.core;ResultSetSupportingSqlParameter;true;getRowCallbackHandler;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.core;ResultSetSupportingSqlParameter;true;getRowMapper;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.core;RowCountCallbackHandler;true;getColumnNames;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.core;RowMapperResultSetExtractor;true;RowMapperResultSetExtractor;(RowMapper);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core;RowMapperResultSetExtractor;true;RowMapperResultSetExtractor;(RowMapper,int);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core;SingleColumnRowMapper;true;newInstance;(Class,ConversionService);;Argument[1];ReturnValue;taint",
        "org.springframework.jdbc.core;SingleColumnRowMapper;true;setConversionService;(ConversionService);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core;SqlInOutParameter;true;SqlInOutParameter;(String,int);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core;SqlInOutParameter;true;SqlInOutParameter;(String,int,ResultSetExtractor);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core;SqlInOutParameter;true;SqlInOutParameter;(String,int,ResultSetExtractor);;Argument[2];Argument[-1];taint",
        "org.springframework.jdbc.core;SqlInOutParameter;true;SqlInOutParameter;(String,int,RowCallbackHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core;SqlInOutParameter;true;SqlInOutParameter;(String,int,RowCallbackHandler);;Argument[2];Argument[-1];taint",
        "org.springframework.jdbc.core;SqlInOutParameter;true;SqlInOutParameter;(String,int,RowMapper);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core;SqlInOutParameter;true;SqlInOutParameter;(String,int,RowMapper);;Argument[2];Argument[-1];taint",
        "org.springframework.jdbc.core;SqlInOutParameter;true;SqlInOutParameter;(String,int,String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core;SqlInOutParameter;true;SqlInOutParameter;(String,int,String);;Argument[2];Argument[-1];taint",
        "org.springframework.jdbc.core;SqlInOutParameter;true;SqlInOutParameter;(String,int,String,SqlReturnType);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core;SqlInOutParameter;true;SqlInOutParameter;(String,int,String,SqlReturnType);;Argument[2];Argument[-1];taint",
        "org.springframework.jdbc.core;SqlInOutParameter;true;SqlInOutParameter;(String,int,String,SqlReturnType);;Argument[3];Argument[-1];taint",
        "org.springframework.jdbc.core;SqlInOutParameter;true;SqlInOutParameter;(String,int,int);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core;SqlOutParameter;true;SqlOutParameter;(String,int);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core;SqlOutParameter;true;SqlOutParameter;(String,int,ResultSetExtractor);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core;SqlOutParameter;true;SqlOutParameter;(String,int,ResultSetExtractor);;Argument[2];Argument[-1];taint",
        "org.springframework.jdbc.core;SqlOutParameter;true;SqlOutParameter;(String,int,RowCallbackHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core;SqlOutParameter;true;SqlOutParameter;(String,int,RowCallbackHandler);;Argument[2];Argument[-1];taint",
        "org.springframework.jdbc.core;SqlOutParameter;true;SqlOutParameter;(String,int,RowMapper);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core;SqlOutParameter;true;SqlOutParameter;(String,int,RowMapper);;Argument[2];Argument[-1];taint",
        "org.springframework.jdbc.core;SqlOutParameter;true;SqlOutParameter;(String,int,String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core;SqlOutParameter;true;SqlOutParameter;(String,int,String);;Argument[2];Argument[-1];taint",
        "org.springframework.jdbc.core;SqlOutParameter;true;SqlOutParameter;(String,int,String,SqlReturnType);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core;SqlOutParameter;true;SqlOutParameter;(String,int,String,SqlReturnType);;Argument[2];Argument[-1];taint",
        "org.springframework.jdbc.core;SqlOutParameter;true;SqlOutParameter;(String,int,String,SqlReturnType);;Argument[3];Argument[-1];taint",
        "org.springframework.jdbc.core;SqlOutParameter;true;SqlOutParameter;(String,int,int);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core;SqlOutParameter;true;getSqlReturnType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.core;SqlParameter;true;SqlParameter;(String,int);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core;SqlParameter;true;SqlParameter;(String,int,String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core;SqlParameter;true;SqlParameter;(String,int,String);;Argument[2];Argument[-1];taint",
        "org.springframework.jdbc.core;SqlParameter;true;SqlParameter;(String,int,int);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core;SqlParameter;true;SqlParameter;(int,String);;Argument[1];Argument[-1];taint",
        "org.springframework.jdbc.core;SqlParameter;true;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.core;SqlParameter;true;getTypeName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.core;SqlParameterValue;true;SqlParameterValue;(SqlParameter,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.jdbc.core;SqlParameterValue;true;SqlParameterValue;(int,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.jdbc.core;SqlParameterValue;true;SqlParameterValue;(int,String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.jdbc.core;SqlParameterValue;true;SqlParameterValue;(int,String,Object);;Argument[2];Argument[-1];taint",
        "org.springframework.jdbc.core;SqlParameterValue;true;SqlParameterValue;(int,int,Object);;Argument[2];Argument[-1];taint",
        "org.springframework.jdbc.core;SqlParameterValue;true;getValue;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.core;SqlProvider;true;getSql;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.core;SqlReturnResultSet;true;SqlReturnResultSet;(String,ResultSetExtractor);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core;SqlReturnResultSet;true;SqlReturnResultSet;(String,ResultSetExtractor);;Argument[1];Argument[-1];taint",
        "org.springframework.jdbc.core;SqlReturnResultSet;true;SqlReturnResultSet;(String,RowCallbackHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core;SqlReturnResultSet;true;SqlReturnResultSet;(String,RowCallbackHandler);;Argument[1];Argument[-1];taint",
        "org.springframework.jdbc.core;SqlReturnResultSet;true;SqlReturnResultSet;(String,RowMapper);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.core;SqlReturnResultSet;true;SqlReturnResultSet;(String,RowMapper);;Argument[1];Argument[-1];taint",
        "org.springframework.jdbc.core;SqlReturnUpdateCount;true;SqlReturnUpdateCount;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.datasource.embedded;DataSourceFactory;true;getDataSource;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.datasource.embedded;EmbeddedDatabaseBuilder;true;EmbeddedDatabaseBuilder;(ResourceLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.datasource.embedded;EmbeddedDatabaseBuilder;true;addDefaultScripts;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.datasource.embedded;EmbeddedDatabaseBuilder;true;addScript;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.jdbc.datasource.embedded;EmbeddedDatabaseBuilder;true;addScript;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.datasource.embedded;EmbeddedDatabaseBuilder;true;addScript;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.jdbc.datasource.embedded;EmbeddedDatabaseBuilder;true;addScripts;(String[]);;Argument[-1];ReturnValue;value",
        "org.springframework.jdbc.datasource.embedded;EmbeddedDatabaseBuilder;true;addScripts;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.datasource.embedded;EmbeddedDatabaseBuilder;true;addScripts;(String[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.jdbc.datasource.embedded;EmbeddedDatabaseBuilder;true;continueOnError;(boolean);;Argument[-1];ReturnValue;value",
        "org.springframework.jdbc.datasource.embedded;EmbeddedDatabaseBuilder;true;generateUniqueName;(boolean);;Argument[-1];ReturnValue;value",
        "org.springframework.jdbc.datasource.embedded;EmbeddedDatabaseBuilder;true;ignoreFailedDrops;(boolean);;Argument[-1];ReturnValue;value",
        "org.springframework.jdbc.datasource.embedded;EmbeddedDatabaseBuilder;true;setBlockCommentEndDelimiter;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.jdbc.datasource.embedded;EmbeddedDatabaseBuilder;true;setBlockCommentEndDelimiter;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.datasource.embedded;EmbeddedDatabaseBuilder;true;setBlockCommentEndDelimiter;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.jdbc.datasource.embedded;EmbeddedDatabaseBuilder;true;setBlockCommentStartDelimiter;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.jdbc.datasource.embedded;EmbeddedDatabaseBuilder;true;setBlockCommentStartDelimiter;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.datasource.embedded;EmbeddedDatabaseBuilder;true;setBlockCommentStartDelimiter;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.jdbc.datasource.embedded;EmbeddedDatabaseBuilder;true;setCommentPrefix;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.jdbc.datasource.embedded;EmbeddedDatabaseBuilder;true;setCommentPrefix;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.datasource.embedded;EmbeddedDatabaseBuilder;true;setCommentPrefix;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.jdbc.datasource.embedded;EmbeddedDatabaseBuilder;true;setCommentPrefixes;(String[]);;Argument[-1];ReturnValue;value",
        "org.springframework.jdbc.datasource.embedded;EmbeddedDatabaseBuilder;true;setCommentPrefixes;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.datasource.embedded;EmbeddedDatabaseBuilder;true;setCommentPrefixes;(String[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.jdbc.datasource.embedded;EmbeddedDatabaseBuilder;true;setDataSourceFactory;(DataSourceFactory);;Argument[-1];ReturnValue;value",
        "org.springframework.jdbc.datasource.embedded;EmbeddedDatabaseBuilder;true;setDataSourceFactory;(DataSourceFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.datasource.embedded;EmbeddedDatabaseBuilder;true;setDataSourceFactory;(DataSourceFactory);;Argument[0];ReturnValue;taint",
        "org.springframework.jdbc.datasource.embedded;EmbeddedDatabaseBuilder;true;setName;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.jdbc.datasource.embedded;EmbeddedDatabaseBuilder;true;setName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.datasource.embedded;EmbeddedDatabaseBuilder;true;setName;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.jdbc.datasource.embedded;EmbeddedDatabaseBuilder;true;setScriptEncoding;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.jdbc.datasource.embedded;EmbeddedDatabaseBuilder;true;setScriptEncoding;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.datasource.embedded;EmbeddedDatabaseBuilder;true;setScriptEncoding;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.jdbc.datasource.embedded;EmbeddedDatabaseBuilder;true;setSeparator;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.jdbc.datasource.embedded;EmbeddedDatabaseBuilder;true;setSeparator;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.datasource.embedded;EmbeddedDatabaseBuilder;true;setSeparator;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.jdbc.datasource.embedded;EmbeddedDatabaseBuilder;true;setType;(EmbeddedDatabaseType);;Argument[-1];ReturnValue;value",
        "org.springframework.jdbc.datasource.embedded;EmbeddedDatabaseFactory;true;setDataSourceFactory;(DataSourceFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.datasource.embedded;EmbeddedDatabaseFactory;true;setDatabaseConfigurer;(EmbeddedDatabaseConfigurer);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.datasource.embedded;EmbeddedDatabaseFactory;true;setDatabaseName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.datasource.embedded;EmbeddedDatabaseFactory;true;setDatabasePopulator;(DatabasePopulator);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.datasource.embedded;EmbeddedDatabaseFactoryBean;true;setDatabaseCleaner;(DatabasePopulator);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.datasource.init;CompositeDatabasePopulator;true;CompositeDatabasePopulator;(Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.datasource.init;CompositeDatabasePopulator;true;CompositeDatabasePopulator;(DatabasePopulator[]);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.datasource.init;CompositeDatabasePopulator;true;addPopulators;(DatabasePopulator[]);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.datasource.init;CompositeDatabasePopulator;true;setPopulators;(DatabasePopulator[]);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.datasource.init;DataSourceInitializer;true;setDataSource;(DataSource);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.datasource.init;DataSourceInitializer;true;setDatabaseCleaner;(DatabasePopulator);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.datasource.init;DataSourceInitializer;true;setDatabasePopulator;(DatabasePopulator);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.datasource.init;ResourceDatabasePopulator;true;ResourceDatabasePopulator;(boolean,boolean,String,Resource[]);;Argument[2];Argument[-1];taint",
        "org.springframework.jdbc.datasource.init;ResourceDatabasePopulator;true;addScript;(Resource);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.datasource.init;ResourceDatabasePopulator;true;setBlockCommentEndDelimiter;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.datasource.init;ResourceDatabasePopulator;true;setBlockCommentStartDelimiter;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.datasource.init;ResourceDatabasePopulator;true;setCommentPrefix;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.datasource.init;ResourceDatabasePopulator;true;setCommentPrefixes;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.datasource.init;ResourceDatabasePopulator;true;setSeparator;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.datasource.init;ResourceDatabasePopulator;true;setSqlScriptEncoding;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.datasource.init;ScriptStatementFailedException;true;buildErrorMessage;(String,int,EncodedResource);;Argument[0];ReturnValue;taint",
        "org.springframework.jdbc.datasource.init;ScriptStatementFailedException;true;buildErrorMessage;(String,int,EncodedResource);;Argument[2];ReturnValue;taint",
        "org.springframework.jdbc.datasource.init;ScriptUtils;true;readScript;(LineNumberReader,String,String,String);;Argument[0];ReturnValue;taint",
        "org.springframework.jdbc.datasource.init;ScriptUtils;true;readScript;(LineNumberReader,String,String,String);;Argument[2];ReturnValue;taint",
        "org.springframework.jdbc.datasource.init;ScriptUtils;true;readScript;(LineNumberReader,String[],String,String);;Argument[0];ReturnValue;taint",
        "org.springframework.jdbc.datasource.init;ScriptUtils;true;readScript;(LineNumberReader,String[],String,String);;Argument[2];ReturnValue;taint",
        "org.springframework.jdbc.datasource.lookup;AbstractRoutingDataSource;true;getResolvedDataSources;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.datasource.lookup;AbstractRoutingDataSource;true;getResolvedDefaultDataSource;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.datasource.lookup;AbstractRoutingDataSource;true;setDataSourceLookup;(DataSourceLookup);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.datasource.lookup;AbstractRoutingDataSource;true;setDefaultTargetDataSource;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.datasource.lookup;AbstractRoutingDataSource;true;setTargetDataSources;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.datasource.lookup;BeanFactoryDataSourceLookup;true;BeanFactoryDataSourceLookup;(BeanFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.datasource.lookup;DataSourceLookup;true;getDataSource;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.datasource.lookup;DataSourceLookup;true;getDataSource;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.datasource.lookup;DataSourceLookup;true;getDataSource;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.jdbc.datasource.lookup;MapDataSourceLookup;true;MapDataSourceLookup;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.datasource.lookup;MapDataSourceLookup;true;MapDataSourceLookup;(String,DataSource);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.datasource.lookup;MapDataSourceLookup;true;MapDataSourceLookup;(String,DataSource);;Argument[1];Argument[-1];taint",
        "org.springframework.jdbc.datasource.lookup;MapDataSourceLookup;true;addDataSource;(String,DataSource);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.datasource.lookup;MapDataSourceLookup;true;addDataSource;(String,DataSource);;Argument[1];Argument[-1];taint",
        "org.springframework.jdbc.datasource.lookup;MapDataSourceLookup;true;getDataSources;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.datasource.lookup;MapDataSourceLookup;true;setDataSources;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.datasource.lookup;SingleDataSourceLookup;true;SingleDataSourceLookup;(DataSource);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.datasource;AbstractDriverBasedDataSource;true;getCatalog;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.datasource;AbstractDriverBasedDataSource;true;getConnectionProperties;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.datasource;AbstractDriverBasedDataSource;true;getPassword;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.datasource;AbstractDriverBasedDataSource;true;getSchema;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.datasource;AbstractDriverBasedDataSource;true;getUrl;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.datasource;AbstractDriverBasedDataSource;true;getUsername;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.datasource;AbstractDriverBasedDataSource;true;setCatalog;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.datasource;AbstractDriverBasedDataSource;true;setConnectionProperties;(Properties);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.datasource;AbstractDriverBasedDataSource;true;setPassword;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.datasource;AbstractDriverBasedDataSource;true;setSchema;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.datasource;AbstractDriverBasedDataSource;true;setUrl;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.datasource;AbstractDriverBasedDataSource;true;setUsername;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.datasource;ConnectionHandle;true;getConnection;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.datasource;ConnectionHolder;true;ConnectionHolder;(Connection);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.datasource;ConnectionHolder;true;ConnectionHolder;(Connection,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.datasource;ConnectionHolder;true;ConnectionHolder;(ConnectionHandle);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.datasource;ConnectionHolder;true;getConnection;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.datasource;ConnectionHolder;true;getConnectionHandle;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.datasource;DataSourceTransactionManager;true;DataSourceTransactionManager;(DataSource);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.datasource;DataSourceTransactionManager;true;getDataSource;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.datasource;DataSourceTransactionManager;true;setDataSource;(DataSource);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.datasource;DataSourceUtils;true;getTargetConnection;(Connection);;Argument[0];ReturnValue;taint",
        "org.springframework.jdbc.datasource;DelegatingDataSource;true;DelegatingDataSource;(DataSource);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.datasource;DelegatingDataSource;true;getTargetDataSource;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.datasource;DelegatingDataSource;true;setTargetDataSource;(DataSource);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.datasource;DriverManagerDataSource;true;DriverManagerDataSource;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.datasource;DriverManagerDataSource;true;DriverManagerDataSource;(String,Properties);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.datasource;DriverManagerDataSource;true;DriverManagerDataSource;(String,Properties);;Argument[1];Argument[-1];taint",
        "org.springframework.jdbc.datasource;DriverManagerDataSource;true;DriverManagerDataSource;(String,String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.datasource;DriverManagerDataSource;true;DriverManagerDataSource;(String,String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.jdbc.datasource;DriverManagerDataSource;true;DriverManagerDataSource;(String,String,String);;Argument[2];Argument[-1];taint",
        "org.springframework.jdbc.datasource;JdbcTransactionObjectSupport;true;getConnectionHolder;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.datasource;JdbcTransactionObjectSupport;true;setConnectionHolder;(ConnectionHolder);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.datasource;LazyConnectionDataSourceProxy;true;LazyConnectionDataSourceProxy;(DataSource);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.datasource;SimpleConnectionHandle;true;SimpleConnectionHandle;(Connection);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.datasource;SimpleConnectionHandle;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.datasource;SimpleDriverDataSource;true;SimpleDriverDataSource;(Driver,String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.datasource;SimpleDriverDataSource;true;SimpleDriverDataSource;(Driver,String);;Argument[1];Argument[-1];taint",
        "org.springframework.jdbc.datasource;SimpleDriverDataSource;true;SimpleDriverDataSource;(Driver,String,Properties);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.datasource;SimpleDriverDataSource;true;SimpleDriverDataSource;(Driver,String,Properties);;Argument[1];Argument[-1];taint",
        "org.springframework.jdbc.datasource;SimpleDriverDataSource;true;SimpleDriverDataSource;(Driver,String,Properties);;Argument[2];Argument[-1];taint",
        "org.springframework.jdbc.datasource;SimpleDriverDataSource;true;SimpleDriverDataSource;(Driver,String,String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.datasource;SimpleDriverDataSource;true;SimpleDriverDataSource;(Driver,String,String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.jdbc.datasource;SimpleDriverDataSource;true;SimpleDriverDataSource;(Driver,String,String,String);;Argument[2];Argument[-1];taint",
        "org.springframework.jdbc.datasource;SimpleDriverDataSource;true;SimpleDriverDataSource;(Driver,String,String,String);;Argument[3];Argument[-1];taint",
        "org.springframework.jdbc.datasource;SimpleDriverDataSource;true;getDriver;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.datasource;SimpleDriverDataSource;true;setDriver;(Driver);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.datasource;SingleConnectionDataSource;true;SingleConnectionDataSource;(Connection,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.datasource;SingleConnectionDataSource;true;SingleConnectionDataSource;(String,String,String,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.datasource;SingleConnectionDataSource;true;SingleConnectionDataSource;(String,String,String,boolean);;Argument[1];Argument[-1];taint",
        "org.springframework.jdbc.datasource;SingleConnectionDataSource;true;SingleConnectionDataSource;(String,String,String,boolean);;Argument[2];Argument[-1];taint",
        "org.springframework.jdbc.datasource;SingleConnectionDataSource;true;SingleConnectionDataSource;(String,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.datasource;TransactionAwareDataSourceProxy;true;TransactionAwareDataSourceProxy;(DataSource);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.datasource;UserCredentialsDataSourceAdapter;true;setCatalog;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.datasource;UserCredentialsDataSourceAdapter;true;setPassword;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.datasource;UserCredentialsDataSourceAdapter;true;setSchema;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.datasource;UserCredentialsDataSourceAdapter;true;setUsername;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.object;BatchSqlUpdate;true;BatchSqlUpdate;(DataSource,String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.object;BatchSqlUpdate;true;BatchSqlUpdate;(DataSource,String);;Argument[1];Argument[-1];taint",
        "org.springframework.jdbc.object;BatchSqlUpdate;true;BatchSqlUpdate;(DataSource,String,int[]);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.object;BatchSqlUpdate;true;BatchSqlUpdate;(DataSource,String,int[]);;Argument[1];Argument[-1];taint",
        "org.springframework.jdbc.object;BatchSqlUpdate;true;BatchSqlUpdate;(DataSource,String,int[],int);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.object;BatchSqlUpdate;true;BatchSqlUpdate;(DataSource,String,int[],int);;Argument[1];Argument[-1];taint",
        "org.springframework.jdbc.object;GenericSqlQuery;true;setRowMapper;(RowMapper);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.object;MappingSqlQuery;true;MappingSqlQuery;(DataSource,String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.object;MappingSqlQuery;true;MappingSqlQuery;(DataSource,String);;Argument[1];Argument[-1];taint",
        "org.springframework.jdbc.object;MappingSqlQueryWithParameters;true;MappingSqlQueryWithParameters;(DataSource,String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.object;MappingSqlQueryWithParameters;true;MappingSqlQueryWithParameters;(DataSource,String);;Argument[1];Argument[-1];taint",
        "org.springframework.jdbc.object;RdbmsOperation;true;declareParameter;(SqlParameter);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.object;RdbmsOperation;true;getGeneratedKeysColumnNames;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.object;RdbmsOperation;true;getJdbcTemplate;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.object;RdbmsOperation;true;getSql;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.object;RdbmsOperation;true;setDataSource;(DataSource);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.object;RdbmsOperation;true;setGeneratedKeysColumnNames;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.object;RdbmsOperation;true;setJdbcTemplate;(JdbcTemplate);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.object;RdbmsOperation;true;setParameters;(SqlParameter[]);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.object;RdbmsOperation;true;setSql;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.object;SqlCall;true;SqlCall;(DataSource,String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.object;SqlCall;true;SqlCall;(DataSource,String);;Argument[1];Argument[-1];taint",
        "org.springframework.jdbc.object;SqlCall;true;getCallString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.object;SqlFunction;true;SqlFunction;(DataSource,String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.object;SqlFunction;true;SqlFunction;(DataSource,String);;Argument[1];Argument[-1];taint",
        "org.springframework.jdbc.object;SqlFunction;true;SqlFunction;(DataSource,String,int[]);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.object;SqlFunction;true;SqlFunction;(DataSource,String,int[]);;Argument[1];Argument[-1];taint",
        "org.springframework.jdbc.object;SqlFunction;true;SqlFunction;(DataSource,String,int[],Class);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.object;SqlFunction;true;SqlFunction;(DataSource,String,int[],Class);;Argument[1];Argument[-1];taint",
        "org.springframework.jdbc.object;SqlQuery;true;SqlQuery;(DataSource,String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.object;SqlQuery;true;SqlQuery;(DataSource,String);;Argument[1];Argument[-1];taint",
        "org.springframework.jdbc.object;SqlUpdate;true;SqlUpdate;(DataSource,String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.object;SqlUpdate;true;SqlUpdate;(DataSource,String);;Argument[1];Argument[-1];taint",
        "org.springframework.jdbc.object;SqlUpdate;true;SqlUpdate;(DataSource,String,int[]);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.object;SqlUpdate;true;SqlUpdate;(DataSource,String,int[]);;Argument[1];Argument[-1];taint",
        "org.springframework.jdbc.object;SqlUpdate;true;SqlUpdate;(DataSource,String,int[],int);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.object;SqlUpdate;true;SqlUpdate;(DataSource,String,int[],int);;Argument[1];Argument[-1];taint",
        "org.springframework.jdbc.object;SqlUpdate;true;update;(Object[]);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.object;SqlUpdate;true;update;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.object;SqlUpdate;true;update;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.object;SqlUpdate;true;update;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.jdbc.object;UpdatableSqlQuery;true;UpdatableSqlQuery;(DataSource,String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.object;UpdatableSqlQuery;true;UpdatableSqlQuery;(DataSource,String);;Argument[1];Argument[-1];taint",
        "org.springframework.jdbc.support.incrementer;AbstractColumnMaxValueIncrementer;true;AbstractColumnMaxValueIncrementer;(DataSource,String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.support.incrementer;AbstractColumnMaxValueIncrementer;true;AbstractColumnMaxValueIncrementer;(DataSource,String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.jdbc.support.incrementer;AbstractColumnMaxValueIncrementer;true;AbstractColumnMaxValueIncrementer;(DataSource,String,String);;Argument[2];Argument[-1];taint",
        "org.springframework.jdbc.support.incrementer;AbstractColumnMaxValueIncrementer;true;getColumnName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.support.incrementer;AbstractColumnMaxValueIncrementer;true;setColumnName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.support.incrementer;AbstractDataFieldMaxValueIncrementer;true;AbstractDataFieldMaxValueIncrementer;(DataSource,String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.support.incrementer;AbstractDataFieldMaxValueIncrementer;true;AbstractDataFieldMaxValueIncrementer;(DataSource,String);;Argument[1];Argument[-1];taint",
        "org.springframework.jdbc.support.incrementer;AbstractDataFieldMaxValueIncrementer;true;getDataSource;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.support.incrementer;AbstractDataFieldMaxValueIncrementer;true;getIncrementerName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.support.incrementer;AbstractDataFieldMaxValueIncrementer;true;setDataSource;(DataSource);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.support.incrementer;AbstractDataFieldMaxValueIncrementer;true;setIncrementerName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.support.incrementer;AbstractIdentityColumnMaxValueIncrementer;true;AbstractIdentityColumnMaxValueIncrementer;(DataSource,String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.support.incrementer;AbstractIdentityColumnMaxValueIncrementer;true;AbstractIdentityColumnMaxValueIncrementer;(DataSource,String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.jdbc.support.incrementer;AbstractIdentityColumnMaxValueIncrementer;true;AbstractIdentityColumnMaxValueIncrementer;(DataSource,String,String);;Argument[2];Argument[-1];taint",
        "org.springframework.jdbc.support.incrementer;AbstractSequenceMaxValueIncrementer;true;AbstractSequenceMaxValueIncrementer;(DataSource,String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.support.incrementer;AbstractSequenceMaxValueIncrementer;true;AbstractSequenceMaxValueIncrementer;(DataSource,String);;Argument[1];Argument[-1];taint",
        "org.springframework.jdbc.support.incrementer;DB2MainframeSequenceMaxValueIncrementer;true;DB2MainframeSequenceMaxValueIncrementer;(DataSource,String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.support.incrementer;DB2MainframeSequenceMaxValueIncrementer;true;DB2MainframeSequenceMaxValueIncrementer;(DataSource,String);;Argument[1];Argument[-1];taint",
        "org.springframework.jdbc.support.incrementer;DB2SequenceMaxValueIncrementer;true;DB2SequenceMaxValueIncrementer;(DataSource,String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.support.incrementer;DB2SequenceMaxValueIncrementer;true;DB2SequenceMaxValueIncrementer;(DataSource,String);;Argument[1];Argument[-1];taint",
        "org.springframework.jdbc.support.incrementer;Db2LuwMaxValueIncrementer;true;Db2LuwMaxValueIncrementer;(DataSource,String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.support.incrementer;Db2LuwMaxValueIncrementer;true;Db2LuwMaxValueIncrementer;(DataSource,String);;Argument[1];Argument[-1];taint",
        "org.springframework.jdbc.support.incrementer;Db2MainframeMaxValueIncrementer;true;Db2MainframeMaxValueIncrementer;(DataSource,String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.support.incrementer;Db2MainframeMaxValueIncrementer;true;Db2MainframeMaxValueIncrementer;(DataSource,String);;Argument[1];Argument[-1];taint",
        "org.springframework.jdbc.support.incrementer;DerbyMaxValueIncrementer;true;DerbyMaxValueIncrementer;(DataSource,String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.support.incrementer;DerbyMaxValueIncrementer;true;DerbyMaxValueIncrementer;(DataSource,String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.jdbc.support.incrementer;DerbyMaxValueIncrementer;true;DerbyMaxValueIncrementer;(DataSource,String,String);;Argument[2];Argument[-1];taint",
        "org.springframework.jdbc.support.incrementer;DerbyMaxValueIncrementer;true;DerbyMaxValueIncrementer;(DataSource,String,String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.support.incrementer;DerbyMaxValueIncrementer;true;DerbyMaxValueIncrementer;(DataSource,String,String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.jdbc.support.incrementer;DerbyMaxValueIncrementer;true;DerbyMaxValueIncrementer;(DataSource,String,String,String);;Argument[2];Argument[-1];taint",
        "org.springframework.jdbc.support.incrementer;DerbyMaxValueIncrementer;true;DerbyMaxValueIncrementer;(DataSource,String,String,String);;Argument[3];Argument[-1];taint",
        "org.springframework.jdbc.support.incrementer;DerbyMaxValueIncrementer;true;getDummyName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.support.incrementer;DerbyMaxValueIncrementer;true;setDummyName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.support.incrementer;H2SequenceMaxValueIncrementer;true;H2SequenceMaxValueIncrementer;(DataSource,String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.support.incrementer;H2SequenceMaxValueIncrementer;true;H2SequenceMaxValueIncrementer;(DataSource,String);;Argument[1];Argument[-1];taint",
        "org.springframework.jdbc.support.incrementer;HanaSequenceMaxValueIncrementer;true;HanaSequenceMaxValueIncrementer;(DataSource,String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.support.incrementer;HanaSequenceMaxValueIncrementer;true;HanaSequenceMaxValueIncrementer;(DataSource,String);;Argument[1];Argument[-1];taint",
        "org.springframework.jdbc.support.incrementer;HsqlMaxValueIncrementer;true;HsqlMaxValueIncrementer;(DataSource,String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.support.incrementer;HsqlMaxValueIncrementer;true;HsqlMaxValueIncrementer;(DataSource,String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.jdbc.support.incrementer;HsqlMaxValueIncrementer;true;HsqlMaxValueIncrementer;(DataSource,String,String);;Argument[2];Argument[-1];taint",
        "org.springframework.jdbc.support.incrementer;HsqlSequenceMaxValueIncrementer;true;HsqlSequenceMaxValueIncrementer;(DataSource,String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.support.incrementer;HsqlSequenceMaxValueIncrementer;true;HsqlSequenceMaxValueIncrementer;(DataSource,String);;Argument[1];Argument[-1];taint",
        "org.springframework.jdbc.support.incrementer;MySQLMaxValueIncrementer;true;MySQLMaxValueIncrementer;(DataSource,String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.support.incrementer;MySQLMaxValueIncrementer;true;MySQLMaxValueIncrementer;(DataSource,String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.jdbc.support.incrementer;MySQLMaxValueIncrementer;true;MySQLMaxValueIncrementer;(DataSource,String,String);;Argument[2];Argument[-1];taint",
        "org.springframework.jdbc.support.incrementer;OracleSequenceMaxValueIncrementer;true;OracleSequenceMaxValueIncrementer;(DataSource,String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.support.incrementer;OracleSequenceMaxValueIncrementer;true;OracleSequenceMaxValueIncrementer;(DataSource,String);;Argument[1];Argument[-1];taint",
        "org.springframework.jdbc.support.incrementer;PostgreSQLSequenceMaxValueIncrementer;true;PostgreSQLSequenceMaxValueIncrementer;(DataSource,String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.support.incrementer;PostgreSQLSequenceMaxValueIncrementer;true;PostgreSQLSequenceMaxValueIncrementer;(DataSource,String);;Argument[1];Argument[-1];taint",
        "org.springframework.jdbc.support.incrementer;PostgresSequenceMaxValueIncrementer;true;PostgresSequenceMaxValueIncrementer;(DataSource,String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.support.incrementer;PostgresSequenceMaxValueIncrementer;true;PostgresSequenceMaxValueIncrementer;(DataSource,String);;Argument[1];Argument[-1];taint",
        "org.springframework.jdbc.support.incrementer;SqlServerMaxValueIncrementer;true;SqlServerMaxValueIncrementer;(DataSource,String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.support.incrementer;SqlServerMaxValueIncrementer;true;SqlServerMaxValueIncrementer;(DataSource,String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.jdbc.support.incrementer;SqlServerMaxValueIncrementer;true;SqlServerMaxValueIncrementer;(DataSource,String,String);;Argument[2];Argument[-1];taint",
        "org.springframework.jdbc.support.incrementer;SybaseAnywhereMaxValueIncrementer;true;SybaseAnywhereMaxValueIncrementer;(DataSource,String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.support.incrementer;SybaseAnywhereMaxValueIncrementer;true;SybaseAnywhereMaxValueIncrementer;(DataSource,String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.jdbc.support.incrementer;SybaseAnywhereMaxValueIncrementer;true;SybaseAnywhereMaxValueIncrementer;(DataSource,String,String);;Argument[2];Argument[-1];taint",
        "org.springframework.jdbc.support.incrementer;SybaseMaxValueIncrementer;true;SybaseMaxValueIncrementer;(DataSource,String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.support.incrementer;SybaseMaxValueIncrementer;true;SybaseMaxValueIncrementer;(DataSource,String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.jdbc.support.incrementer;SybaseMaxValueIncrementer;true;SybaseMaxValueIncrementer;(DataSource,String,String);;Argument[2];Argument[-1];taint",
        "org.springframework.jdbc.support.rowset;ResultSetWrappingSqlRowSet;true;ResultSetWrappingSqlRowSet;(ResultSet);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.support.rowset;ResultSetWrappingSqlRowSet;true;getResultSet;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.support.rowset;ResultSetWrappingSqlRowSetMetaData;true;ResultSetWrappingSqlRowSetMetaData;(ResultSetMetaData);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.support.rowset;SqlRowSet;true;getMetaData;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.support.rowset;SqlRowSetMetaData;true;getColumnNames;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.support;AbstractFallbackSQLExceptionTranslator;true;getFallbackTranslator;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.support;AbstractFallbackSQLExceptionTranslator;true;setFallbackTranslator;(SQLExceptionTranslator);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.support;CustomSQLErrorCodesTranslation;true;getErrorCodes;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.support;CustomSQLErrorCodesTranslation;true;setErrorCodes;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.support;CustomSQLExceptionTranslatorRegistrar;true;setTranslators;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.support;CustomSQLExceptionTranslatorRegistry;false;findTranslatorForDatabase;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.support;CustomSQLExceptionTranslatorRegistry;false;registerTranslator;(String,SQLExceptionTranslator);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.support;CustomSQLExceptionTranslatorRegistry;false;registerTranslator;(String,SQLExceptionTranslator);;Argument[1];Argument[-1];taint",
        "org.springframework.jdbc.support;DatabaseStartupValidator;true;setDataSource;(DataSource);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.support;DatabaseStartupValidator;true;setValidationQuery;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.support;GeneratedKeyHolder;true;GeneratedKeyHolder;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.support;JdbcAccessor;true;getDataSource;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.support;JdbcAccessor;true;getExceptionTranslator;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.support;JdbcAccessor;true;setDataSource;(DataSource);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.support;JdbcAccessor;true;setExceptionTranslator;(SQLExceptionTranslator);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.support;JdbcTransactionManager;true;JdbcTransactionManager;(DataSource);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.support;JdbcTransactionManager;true;getExceptionTranslator;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.support;JdbcTransactionManager;true;setExceptionTranslator;(SQLExceptionTranslator);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.support;JdbcUtils;true;commonDatabaseName;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.jdbc.support;KeyHolder;true;getKeyList;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.support;KeyHolder;true;getKeys;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.support;SQLErrorCodeSQLExceptionTranslator;true;SQLErrorCodeSQLExceptionTranslator;(SQLErrorCodes);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.support;SQLErrorCodeSQLExceptionTranslator;true;getSqlErrorCodes;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.support;SQLErrorCodeSQLExceptionTranslator;true;setSqlErrorCodes;(SQLErrorCodes);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.support;SQLErrorCodes;true;getBadSqlGrammarCodes;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.support;SQLErrorCodes;true;getCannotAcquireLockCodes;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.support;SQLErrorCodes;true;getCannotSerializeTransactionCodes;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.support;SQLErrorCodes;true;getCustomSqlExceptionTranslator;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.support;SQLErrorCodes;true;getCustomTranslations;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.support;SQLErrorCodes;true;getDataAccessResourceFailureCodes;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.support;SQLErrorCodes;true;getDataIntegrityViolationCodes;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.support;SQLErrorCodes;true;getDatabaseProductName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.support;SQLErrorCodes;true;getDatabaseProductNames;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.support;SQLErrorCodes;true;getDeadlockLoserCodes;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.support;SQLErrorCodes;true;getDuplicateKeyCodes;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.support;SQLErrorCodes;true;getInvalidResultSetAccessCodes;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.support;SQLErrorCodes;true;getPermissionDeniedCodes;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.support;SQLErrorCodes;true;getTransientDataAccessResourceCodes;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.support;SQLErrorCodes;true;setBadSqlGrammarCodes;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.support;SQLErrorCodes;true;setCannotAcquireLockCodes;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.support;SQLErrorCodes;true;setCannotSerializeTransactionCodes;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.support;SQLErrorCodes;true;setCustomSqlExceptionTranslator;(SQLExceptionTranslator);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.support;SQLErrorCodes;true;setCustomTranslations;(CustomSQLErrorCodesTranslation[]);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.support;SQLErrorCodes;true;setDataAccessResourceFailureCodes;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.support;SQLErrorCodes;true;setDataIntegrityViolationCodes;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.support;SQLErrorCodes;true;setDatabaseProductName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.support;SQLErrorCodes;true;setDatabaseProductNames;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.support;SQLErrorCodes;true;setDeadlockLoserCodes;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.support;SQLErrorCodes;true;setDuplicateKeyCodes;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.support;SQLErrorCodes;true;setInvalidResultSetAccessCodes;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.support;SQLErrorCodes;true;setPermissionDeniedCodes;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.support;SQLErrorCodes;true;setTransientDataAccessResourceCodes;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.support;SQLErrorCodesFactory;true;getErrorCodes;(DataSource);;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.support;SQLErrorCodesFactory;true;getErrorCodes;(DataSource);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.support;SQLErrorCodesFactory;true;getErrorCodes;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.support;SQLErrorCodesFactory;true;registerDatabase;(DataSource,String);;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.support;SQLErrorCodesFactory;true;registerDatabase;(DataSource,String);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.support;SQLErrorCodesFactory;true;resolveErrorCodes;(DataSource);;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.support;SQLErrorCodesFactory;true;resolveErrorCodes;(DataSource);;Argument[0];Argument[-1];taint",
        "org.springframework.jdbc.support;SQLErrorCodesFactory;true;unregisterDatabase;(DataSource);;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc.support;SQLExceptionTranslator;true;translate;(String,String,SQLException);;Argument[1];ReturnValue;taint",
        "org.springframework.jdbc;BadSqlGrammarException;true;BadSqlGrammarException;(String,String,SQLException);;Argument[1];Argument[-1];taint",
        "org.springframework.jdbc;BadSqlGrammarException;true;getSql;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc;InvalidResultSetAccessException;true;InvalidResultSetAccessException;(String,String,SQLException);;Argument[1];Argument[-1];taint",
        "org.springframework.jdbc;InvalidResultSetAccessException;true;getSql;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jdbc;UncategorizedSQLException;true;UncategorizedSQLException;(String,String,SQLException);;Argument[1];Argument[-1];taint",
        "org.springframework.jdbc;UncategorizedSQLException;true;getSql;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jms.annotation;JmsListenerAnnotationBeanPostProcessor;true;setContainerFactoryBeanName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.annotation;JmsListenerAnnotationBeanPostProcessor;true;setEndpointRegistry;(JmsListenerEndpointRegistry);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.annotation;JmsListenerAnnotationBeanPostProcessor;true;setMessageHandlerMethodFactory;(MessageHandlerMethodFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.config;AbstractJmsListenerContainerFactory;true;setClientId;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.config;AbstractJmsListenerContainerFactory;true;setConnectionFactory;(ConnectionFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.config;AbstractJmsListenerContainerFactory;true;setDestinationResolver;(DestinationResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.config;AbstractJmsListenerContainerFactory;true;setErrorHandler;(ErrorHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.config;AbstractJmsListenerContainerFactory;true;setExceptionListener;(ExceptionListener);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.config;AbstractJmsListenerContainerFactory;true;setMessageConverter;(MessageConverter);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.config;AbstractJmsListenerContainerFactory;true;setReplyQosSettings;(QosSettings);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.config;AbstractJmsListenerEndpoint;true;getConcurrency;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jms.config;AbstractJmsListenerEndpoint;true;getDestination;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jms.config;AbstractJmsListenerEndpoint;true;getSelector;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jms.config;AbstractJmsListenerEndpoint;true;getSubscription;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jms.config;AbstractJmsListenerEndpoint;true;setConcurrency;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.config;AbstractJmsListenerEndpoint;true;setDestination;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.config;AbstractJmsListenerEndpoint;true;setId;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.config;AbstractJmsListenerEndpoint;true;setSelector;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.config;AbstractJmsListenerEndpoint;true;setSubscription;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.config;AbstractJmsListenerEndpoint;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jms.config;DefaultJcaListenerContainerFactory;true;setActivationSpecFactory;(JmsActivationSpecFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.config;DefaultJcaListenerContainerFactory;true;setDestinationResolver;(DestinationResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.config;DefaultJcaListenerContainerFactory;true;setResourceAdapter;(ResourceAdapter);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.config;DefaultJcaListenerContainerFactory;true;setTransactionManager;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.config;DefaultJmsListenerContainerFactory;true;setBackOff;(BackOff);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.config;DefaultJmsListenerContainerFactory;true;setCacheLevelName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.config;DefaultJmsListenerContainerFactory;true;setConcurrency;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.config;DefaultJmsListenerContainerFactory;true;setTaskExecutor;(Executor);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.config;DefaultJmsListenerContainerFactory;true;setTransactionManager;(PlatformTransactionManager);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.config;JmsListenerEndpoint;true;getId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jms.config;JmsListenerEndpointRegistrar;true;getEndpointRegistry;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jms.config;JmsListenerEndpointRegistrar;true;getMessageHandlerMethodFactory;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jms.config;JmsListenerEndpointRegistrar;true;registerEndpoint;(JmsListenerEndpoint);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.config;JmsListenerEndpointRegistrar;true;registerEndpoint;(JmsListenerEndpoint,JmsListenerContainerFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.config;JmsListenerEndpointRegistrar;true;registerEndpoint;(JmsListenerEndpoint,JmsListenerContainerFactory);;Argument[1];Argument[-1];taint",
        "org.springframework.jms.config;JmsListenerEndpointRegistrar;true;setContainerFactory;(JmsListenerContainerFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.config;JmsListenerEndpointRegistrar;true;setContainerFactoryBeanName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.config;JmsListenerEndpointRegistrar;true;setEndpointRegistry;(JmsListenerEndpointRegistry);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.config;JmsListenerEndpointRegistrar;true;setMessageHandlerMethodFactory;(MessageHandlerMethodFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.config;JmsListenerEndpointRegistry;true;getListenerContainer;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.jms.config;JmsListenerEndpointRegistry;true;getListenerContainerIds;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jms.config;JmsListenerEndpointRegistry;true;getListenerContainers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jms.config;JmsListenerEndpointRegistry;true;registerListenerContainer;(JmsListenerEndpoint,JmsListenerContainerFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.config;JmsListenerEndpointRegistry;true;registerListenerContainer;(JmsListenerEndpoint,JmsListenerContainerFactory);;Argument[1];Argument[-1];taint",
        "org.springframework.jms.config;JmsListenerEndpointRegistry;true;registerListenerContainer;(JmsListenerEndpoint,JmsListenerContainerFactory,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.config;JmsListenerEndpointRegistry;true;registerListenerContainer;(JmsListenerEndpoint,JmsListenerContainerFactory,boolean);;Argument[1];Argument[-1];taint",
        "org.springframework.jms.config;MethodJmsListenerEndpoint;true;getBean;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jms.config;MethodJmsListenerEndpoint;true;getMethod;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jms.config;MethodJmsListenerEndpoint;true;getMostSpecificMethod;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jms.config;MethodJmsListenerEndpoint;true;setBean;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.config;MethodJmsListenerEndpoint;true;setEmbeddedValueResolver;(StringValueResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.config;MethodJmsListenerEndpoint;true;setMessageHandlerMethodFactory;(MessageHandlerMethodFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.config;MethodJmsListenerEndpoint;true;setMethod;(Method);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.config;MethodJmsListenerEndpoint;true;setMostSpecificMethod;(Method);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.config;SimpleJmsListenerEndpoint;true;getMessageListener;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jms.config;SimpleJmsListenerEndpoint;true;setMessageListener;(MessageListener);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.connection;CachingConnectionFactory;true;CachingConnectionFactory;(ConnectionFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.connection;ChainedExceptionListener;true;addDelegate;(ExceptionListener);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.connection;ChainedExceptionListener;true;getDelegates;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jms.connection;ConnectionFactoryUtils;true;getTargetSession;(Session);;Argument[0];ReturnValue;taint",
        "org.springframework.jms.connection;DelegatingConnectionFactory;true;getTargetConnectionFactory;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jms.connection;DelegatingConnectionFactory;true;setTargetConnectionFactory;(ConnectionFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.connection;JmsResourceHolder;true;JmsResourceHolder;(Connection,Session);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.connection;JmsResourceHolder;true;JmsResourceHolder;(Connection,Session);;Argument[1];Argument[-1];taint",
        "org.springframework.jms.connection;JmsResourceHolder;true;JmsResourceHolder;(ConnectionFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.connection;JmsResourceHolder;true;JmsResourceHolder;(ConnectionFactory,Connection,Session);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.connection;JmsResourceHolder;true;JmsResourceHolder;(ConnectionFactory,Connection,Session);;Argument[1];Argument[-1];taint",
        "org.springframework.jms.connection;JmsResourceHolder;true;JmsResourceHolder;(ConnectionFactory,Connection,Session);;Argument[2];Argument[-1];taint",
        "org.springframework.jms.connection;JmsResourceHolder;true;JmsResourceHolder;(Session);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.connection;JmsResourceHolder;true;addConnection;(Connection);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.connection;JmsResourceHolder;true;addSession;(Session);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.connection;JmsResourceHolder;true;addSession;(Session,Connection);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.connection;JmsResourceHolder;true;getConnection;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jms.connection;JmsResourceHolder;true;getConnection;(Class);;Argument[-1];ReturnValue;taint",
        "org.springframework.jms.connection;JmsResourceHolder;true;getSession;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jms.connection;JmsResourceHolder;true;getSession;(Class);;Argument[-1];ReturnValue;taint",
        "org.springframework.jms.connection;JmsResourceHolder;true;getSession;(Class,Connection);;Argument[-1];ReturnValue;taint",
        "org.springframework.jms.connection;JmsTransactionManager;true;JmsTransactionManager;(ConnectionFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.connection;JmsTransactionManager;true;getConnectionFactory;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jms.connection;JmsTransactionManager;true;setConnectionFactory;(ConnectionFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.connection;SingleConnectionFactory;true;SingleConnectionFactory;(Connection);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.connection;SingleConnectionFactory;true;SingleConnectionFactory;(ConnectionFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.connection;SingleConnectionFactory;true;getTargetConnectionFactory;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jms.connection;SingleConnectionFactory;true;setClientId;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.connection;SingleConnectionFactory;true;setExceptionListener;(ExceptionListener);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.connection;SingleConnectionFactory;true;setTargetConnectionFactory;(ConnectionFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.connection;TransactionAwareConnectionFactoryProxy;true;TransactionAwareConnectionFactoryProxy;(ConnectionFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.connection;TransactionAwareConnectionFactoryProxy;true;setTargetConnectionFactory;(ConnectionFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.connection;UserCredentialsConnectionFactoryAdapter;true;setPassword;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.connection;UserCredentialsConnectionFactoryAdapter;true;setTargetConnectionFactory;(ConnectionFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.connection;UserCredentialsConnectionFactoryAdapter;true;setUsername;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.core.support;JmsGatewaySupport;true;getConnectionFactory;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jms.core.support;JmsGatewaySupport;true;getJmsTemplate;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jms.core.support;JmsGatewaySupport;true;setConnectionFactory;(ConnectionFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.core.support;JmsGatewaySupport;true;setJmsTemplate;(JmsTemplate);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.core;JmsMessagingTemplate;true;JmsMessagingTemplate;(ConnectionFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.core;JmsMessagingTemplate;true;JmsMessagingTemplate;(JmsTemplate);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.core;JmsMessagingTemplate;true;getConnectionFactory;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jms.core;JmsMessagingTemplate;true;getDefaultDestinationName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jms.core;JmsMessagingTemplate;true;getJmsMessageConverter;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jms.core;JmsMessagingTemplate;true;getJmsTemplate;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jms.core;JmsMessagingTemplate;true;setConnectionFactory;(ConnectionFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.core;JmsMessagingTemplate;true;setDefaultDestinationName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.core;JmsMessagingTemplate;true;setJmsMessageConverter;(MessageConverter);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.core;JmsMessagingTemplate;true;setJmsTemplate;(JmsTemplate);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.core;JmsTemplate;true;JmsTemplate;(ConnectionFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.core;JmsTemplate;true;getDefaultDestination;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jms.core;JmsTemplate;true;getDefaultDestinationName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jms.core;JmsTemplate;true;getMessageConverter;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jms.core;JmsTemplate;true;setDefaultDestination;(Destination);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.core;JmsTemplate;true;setDefaultDestinationName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.core;JmsTemplate;true;setMessageConverter;(MessageConverter);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.core;MessageCreator;true;createMessage;(Session);;Argument[-1];ReturnValue;taint",
        "org.springframework.jms.listener.adapter;AbstractAdaptableMessageListener;true;setDefaultResponseDestination;(Destination);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.listener.adapter;AbstractAdaptableMessageListener;true;setDefaultResponseQueueName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.listener.adapter;AbstractAdaptableMessageListener;true;setDefaultResponseTopicName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.listener.adapter;AbstractAdaptableMessageListener;true;setDestinationResolver;(DestinationResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.listener.adapter;AbstractAdaptableMessageListener;true;setHeaderMapper;(JmsHeaderMapper);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.listener.adapter;AbstractAdaptableMessageListener;true;setMessageConverter;(MessageConverter);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.listener.adapter;AbstractAdaptableMessageListener;true;setResponseQosSettings;(QosSettings);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.listener.adapter;JmsResponse;true;forDestination;(Object,Destination);;Argument[0];ReturnValue;taint",
        "org.springframework.jms.listener.adapter;JmsResponse;true;forDestination;(Object,Destination);;Argument[1];ReturnValue;taint",
        "org.springframework.jms.listener.adapter;JmsResponse;true;forQueue;(Object,String);;Argument[0];ReturnValue;taint",
        "org.springframework.jms.listener.adapter;JmsResponse;true;forQueue;(Object,String);;Argument[1];ReturnValue;taint",
        "org.springframework.jms.listener.adapter;JmsResponse;true;forTopic;(Object,String);;Argument[0];ReturnValue;taint",
        "org.springframework.jms.listener.adapter;JmsResponse;true;forTopic;(Object,String);;Argument[1];ReturnValue;taint",
        "org.springframework.jms.listener.adapter;JmsResponse;true;getResponse;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jms.listener.adapter;JmsResponse;true;resolveDestination;(DestinationResolver,Session);;Argument[-1];ReturnValue;taint",
        "org.springframework.jms.listener.adapter;JmsResponse;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jms.listener.adapter;MessageListenerAdapter;true;MessageListenerAdapter;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.listener.adapter;MessageListenerAdapter;true;setDefaultListenerMethod;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.listener.adapter;MessageListenerAdapter;true;setDelegate;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.listener.adapter;MessagingMessageListenerAdapter;true;setHandlerMethod;(InvocableHandlerMethod);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.listener.endpoint;JmsActivationSpecConfig;true;getClientId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jms.listener.endpoint;JmsActivationSpecConfig;true;getDestinationName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jms.listener.endpoint;JmsActivationSpecConfig;true;getDurableSubscriptionName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jms.listener.endpoint;JmsActivationSpecConfig;true;getMessageConverter;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jms.listener.endpoint;JmsActivationSpecConfig;true;getMessageSelector;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jms.listener.endpoint;JmsActivationSpecConfig;true;getReplyQosSettings;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jms.listener.endpoint;JmsActivationSpecConfig;true;getSubscriptionName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jms.listener.endpoint;JmsActivationSpecConfig;true;setClientId;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.listener.endpoint;JmsActivationSpecConfig;true;setConcurrency;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.listener.endpoint;JmsActivationSpecConfig;true;setDestinationName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.listener.endpoint;JmsActivationSpecConfig;true;setDurableSubscriptionName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.listener.endpoint;JmsActivationSpecConfig;true;setMessageConverter;(MessageConverter);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.listener.endpoint;JmsActivationSpecConfig;true;setMessageSelector;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.listener.endpoint;JmsActivationSpecConfig;true;setReplyQosSettings;(QosSettings);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.listener.endpoint;JmsActivationSpecConfig;true;setSubscriptionName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.listener.endpoint;JmsMessageEndpointFactory;true;setMessageListener;(MessageListener);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.listener.endpoint;JmsMessageEndpointManager;true;getActivationSpecConfig;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jms.listener.endpoint;JmsMessageEndpointManager;true;getMessageListener;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jms.listener.endpoint;JmsMessageEndpointManager;true;setActivationSpecConfig;(JmsActivationSpecConfig);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.listener.endpoint;JmsMessageEndpointManager;true;setActivationSpecFactory;(JmsActivationSpecFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.listener.endpoint;JmsMessageEndpointManager;true;setDestinationResolver;(DestinationResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.listener.endpoint;JmsMessageEndpointManager;true;setMessageListener;(MessageListener);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.listener.endpoint;JmsMessageEndpointManager;true;setTransactionManager;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.listener.endpoint;StandardJmsActivationSpecFactory;true;getDestinationResolver;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jms.listener.endpoint;StandardJmsActivationSpecFactory;true;setDefaultProperties;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.listener.endpoint;StandardJmsActivationSpecFactory;true;setDestinationResolver;(DestinationResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.listener;AbstractJmsListeningContainer;true;getClientId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jms.listener;AbstractJmsListeningContainer;true;setClientId;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.listener;AbstractMessageListenerContainer;true;getDestination;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jms.listener;AbstractMessageListenerContainer;true;getDestinationName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jms.listener;AbstractMessageListenerContainer;true;getDurableSubscriptionName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jms.listener;AbstractMessageListenerContainer;true;getErrorHandler;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jms.listener;AbstractMessageListenerContainer;true;getExceptionListener;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jms.listener;AbstractMessageListenerContainer;true;getMessageListener;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jms.listener;AbstractMessageListenerContainer;true;getMessageSelector;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jms.listener;AbstractMessageListenerContainer;true;getSubscriptionName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jms.listener;AbstractMessageListenerContainer;true;setConcurrency;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.listener;AbstractMessageListenerContainer;true;setDestination;(Destination);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.listener;AbstractMessageListenerContainer;true;setDestinationName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.listener;AbstractMessageListenerContainer;true;setDurableSubscriptionName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.listener;AbstractMessageListenerContainer;true;setErrorHandler;(ErrorHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.listener;AbstractMessageListenerContainer;true;setExceptionListener;(ExceptionListener);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.listener;AbstractMessageListenerContainer;true;setMessageConverter;(MessageConverter);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.listener;AbstractMessageListenerContainer;true;setMessageListener;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.listener;AbstractMessageListenerContainer;true;setMessageSelector;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.listener;AbstractMessageListenerContainer;true;setReplyQosSettings;(QosSettings);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.listener;AbstractMessageListenerContainer;true;setSubscriptionName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.listener;AbstractPollingMessageListenerContainer;true;setTransactionManager;(PlatformTransactionManager);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.listener;AbstractPollingMessageListenerContainer;true;setTransactionName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.listener;DefaultMessageListenerContainer;true;setBackOff;(BackOff);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.listener;DefaultMessageListenerContainer;true;setTaskExecutor;(Executor);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.listener;MessageListenerContainer;true;getDestinationResolver;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jms.listener;MessageListenerContainer;true;getMessageConverter;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jms.listener;MessageListenerContainer;true;getReplyQosSettings;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jms.listener;MessageListenerContainer;true;setupMessageListener;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.listener;SimpleMessageListenerContainer;true;setTaskExecutor;(Executor);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.remoting;JmsInvokerClientInterceptor;true;setConnectionFactory;(ConnectionFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.remoting;JmsInvokerClientInterceptor;true;setDestinationResolver;(DestinationResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.remoting;JmsInvokerClientInterceptor;true;setMessageConverter;(MessageConverter);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.remoting;JmsInvokerClientInterceptor;true;setQueue;(Queue);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.remoting;JmsInvokerClientInterceptor;true;setQueueName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.remoting;JmsInvokerClientInterceptor;true;setRemoteInvocationFactory;(RemoteInvocationFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.remoting;JmsInvokerServiceExporter;true;setMessageConverter;(MessageConverter);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.support.converter;MappingJackson2MessageConverter;true;setEncoding;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.support.converter;MappingJackson2MessageConverter;true;setEncodingPropertyName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.support.converter;MappingJackson2MessageConverter;true;setObjectMapper;(ObjectMapper);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.support.converter;MappingJackson2MessageConverter;true;setTypeIdPropertyName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.support.converter;MarshallingMessageConverter;true;MarshallingMessageConverter;(Marshaller);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.support.converter;MarshallingMessageConverter;true;MarshallingMessageConverter;(Marshaller,Unmarshaller);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.support.converter;MarshallingMessageConverter;true;MarshallingMessageConverter;(Marshaller,Unmarshaller);;Argument[1];Argument[-1];taint",
        "org.springframework.jms.support.converter;MarshallingMessageConverter;true;setMarshaller;(Marshaller);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.support.converter;MarshallingMessageConverter;true;setUnmarshaller;(Unmarshaller);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.support.converter;MessageConverter;true;fromMessage;(Message);;Argument[0];ReturnValue;taint",
        "org.springframework.jms.support.converter;MessageConverter;true;toMessage;(Object,Session);;Argument[0];ReturnValue;taint",
        "org.springframework.jms.support.converter;MessagingMessageConverter;true;MessagingMessageConverter;(MessageConverter);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.support.converter;MessagingMessageConverter;true;MessagingMessageConverter;(MessageConverter,JmsHeaderMapper);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.support.converter;MessagingMessageConverter;true;MessagingMessageConverter;(MessageConverter,JmsHeaderMapper);;Argument[1];Argument[-1];taint",
        "org.springframework.jms.support.converter;MessagingMessageConverter;true;setHeaderMapper;(JmsHeaderMapper);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.support.converter;MessagingMessageConverter;true;setPayloadConverter;(MessageConverter);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.support.destination;BeanFactoryDestinationResolver;true;BeanFactoryDestinationResolver;(BeanFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.support.destination;DestinationResolver;true;resolveDestinationName;(Session,String,boolean);;Argument[-1];ReturnValue;taint",
        "org.springframework.jms.support.destination;DestinationResolver;true;resolveDestinationName;(Session,String,boolean);;Argument[1];Argument[-1];taint",
        "org.springframework.jms.support.destination;DestinationResolver;true;resolveDestinationName;(Session,String,boolean);;Argument[1];ReturnValue;taint",
        "org.springframework.jms.support.destination;JmsDestinationAccessor;true;getDestinationResolver;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jms.support.destination;JmsDestinationAccessor;true;setDestinationResolver;(DestinationResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.support.destination;JndiDestinationResolver;true;setDynamicDestinationResolver;(DestinationResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.support;JmsAccessor;true;getConnectionFactory;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jms.support;JmsAccessor;true;setConnectionFactory;(ConnectionFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.jms.support;JmsMessageHeaderAccessor;true;getCorrelationId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jms.support;JmsMessageHeaderAccessor;true;getDestination;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jms.support;JmsMessageHeaderAccessor;true;getMessageId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jms.support;JmsMessageHeaderAccessor;true;getReplyTo;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jms.support;JmsMessageHeaderAccessor;true;getType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jmx.access;MBeanClientInterceptor;true;getEnvironment;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jmx.access;MBeanClientInterceptor;true;setAgentId;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jmx.access;MBeanClientInterceptor;true;setEnvironment;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.jmx.access;MBeanClientInterceptor;true;setObjectName;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.jmx.access;MBeanClientInterceptor;true;setServer;(MBeanServerConnection);;Argument[0];Argument[-1];taint",
        "org.springframework.jmx.access;NotificationListenerRegistrar;true;getEnvironment;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jmx.access;NotificationListenerRegistrar;true;setAgentId;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jmx.access;NotificationListenerRegistrar;true;setEnvironment;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.jmx.access;NotificationListenerRegistrar;true;setServer;(MBeanServerConnection);;Argument[0];Argument[-1];taint",
        "org.springframework.jmx.export.annotation;AnnotationMBeanExporter;true;setDefaultDomain;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jmx.export.assembler;AbstractReflectiveMBeanInfoAssembler;true;setParameterNameDiscoverer;(ParameterNameDiscoverer);;Argument[0];Argument[-1];taint",
        "org.springframework.jmx.export.assembler;InterfaceBasedMBeanInfoAssembler;true;setInterfaceMappings;(Properties);;Argument[0];Argument[-1];taint",
        "org.springframework.jmx.export.assembler;InterfaceBasedMBeanInfoAssembler;true;setManagedInterfaces;(Class[]);;Argument[0];Argument[-1];taint",
        "org.springframework.jmx.export.assembler;MetadataMBeanInfoAssembler;true;MetadataMBeanInfoAssembler;(JmxAttributeSource);;Argument[0];Argument[-1];taint",
        "org.springframework.jmx.export.assembler;MetadataMBeanInfoAssembler;true;setAttributeSource;(JmxAttributeSource);;Argument[0];Argument[-1];taint",
        "org.springframework.jmx.export.assembler;MethodExclusionMBeanInfoAssembler;true;setIgnoredMethodMappings;(Properties);;Argument[0];Argument[-1];taint",
        "org.springframework.jmx.export.assembler;MethodExclusionMBeanInfoAssembler;true;setIgnoredMethods;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.jmx.export.assembler;MethodNameBasedMBeanInfoAssembler;true;setManagedMethods;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.jmx.export.assembler;MethodNameBasedMBeanInfoAssembler;true;setMethodMappings;(Properties);;Argument[0];Argument[-1];taint",
        "org.springframework.jmx.export.metadata;AbstractJmxAttribute;true;getDescription;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jmx.export.metadata;AbstractJmxAttribute;true;setDescription;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jmx.export.metadata;JmxAttributeSource;true;getManagedAttribute;(Method);;Argument[0];ReturnValue;taint",
        "org.springframework.jmx.export.metadata;ManagedAttribute;true;getDefaultValue;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jmx.export.metadata;ManagedAttribute;true;getPersistPolicy;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jmx.export.metadata;ManagedAttribute;true;setDefaultValue;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.jmx.export.metadata;ManagedAttribute;true;setPersistPolicy;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jmx.export.metadata;ManagedMetric;true;getCategory;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jmx.export.metadata;ManagedMetric;true;getDisplayName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jmx.export.metadata;ManagedMetric;true;getPersistPolicy;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jmx.export.metadata;ManagedMetric;true;getUnit;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jmx.export.metadata;ManagedMetric;true;setCategory;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jmx.export.metadata;ManagedMetric;true;setDisplayName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jmx.export.metadata;ManagedMetric;true;setPersistPolicy;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jmx.export.metadata;ManagedMetric;true;setUnit;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jmx.export.metadata;ManagedNotification;true;getDescription;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jmx.export.metadata;ManagedNotification;true;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jmx.export.metadata;ManagedNotification;true;getNotificationTypes;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jmx.export.metadata;ManagedNotification;true;setDescription;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jmx.export.metadata;ManagedNotification;true;setName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jmx.export.metadata;ManagedNotification;true;setNotificationType;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jmx.export.metadata;ManagedNotification;true;setNotificationTypes;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.jmx.export.metadata;ManagedOperationParameter;true;getDescription;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jmx.export.metadata;ManagedOperationParameter;true;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jmx.export.metadata;ManagedOperationParameter;true;setDescription;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jmx.export.metadata;ManagedOperationParameter;true;setName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jmx.export.metadata;ManagedResource;true;getLogFile;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jmx.export.metadata;ManagedResource;true;getObjectName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jmx.export.metadata;ManagedResource;true;getPersistLocation;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jmx.export.metadata;ManagedResource;true;getPersistName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jmx.export.metadata;ManagedResource;true;getPersistPolicy;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jmx.export.metadata;ManagedResource;true;setLogFile;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jmx.export.metadata;ManagedResource;true;setObjectName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jmx.export.metadata;ManagedResource;true;setPersistLocation;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jmx.export.metadata;ManagedResource;true;setPersistName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jmx.export.metadata;ManagedResource;true;setPersistPolicy;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jmx.export.naming;KeyNamingStrategy;true;setMappingLocation;(Resource);;Argument[0];Argument[-1];taint",
        "org.springframework.jmx.export.naming;KeyNamingStrategy;true;setMappingLocations;(Resource[]);;Argument[0];Argument[-1];taint",
        "org.springframework.jmx.export.naming;KeyNamingStrategy;true;setMappings;(Properties);;Argument[0];Argument[-1];taint",
        "org.springframework.jmx.export.naming;MetadataNamingStrategy;true;MetadataNamingStrategy;(JmxAttributeSource);;Argument[0];Argument[-1];taint",
        "org.springframework.jmx.export.naming;MetadataNamingStrategy;true;setAttributeSource;(JmxAttributeSource);;Argument[0];Argument[-1];taint",
        "org.springframework.jmx.export.naming;MetadataNamingStrategy;true;setDefaultDomain;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jmx.export.notification;ModelMBeanNotificationPublisher;true;ModelMBeanNotificationPublisher;(ModelMBeanNotificationBroadcaster,ObjectName,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.jmx.export.notification;ModelMBeanNotificationPublisher;true;ModelMBeanNotificationPublisher;(ModelMBeanNotificationBroadcaster,ObjectName,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.jmx.export.notification;ModelMBeanNotificationPublisher;true;ModelMBeanNotificationPublisher;(ModelMBeanNotificationBroadcaster,ObjectName,Object);;Argument[2];Argument[-1];taint",
        "org.springframework.jmx.export;MBeanExportOperations;true;registerManagedResource;(Object,ObjectName);;Argument[1];Argument[-1];taint",
        "org.springframework.jmx.export;MBeanExporter;true;addExcludedBean;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jmx.export;MBeanExporter;true;setAssembler;(MBeanInfoAssembler);;Argument[0];Argument[-1];taint",
        "org.springframework.jmx.export;MBeanExporter;true;setBeans;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.jmx.export;MBeanExporter;true;setExcludedBeans;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.jmx.export;MBeanExporter;true;setListeners;(MBeanExporterListener[]);;Argument[0];Argument[-1];taint",
        "org.springframework.jmx.export;MBeanExporter;true;setNamingStrategy;(ObjectNamingStrategy);;Argument[0];Argument[-1];taint",
        "org.springframework.jmx.export;MBeanExporter;true;setNotificationListeners;(NotificationListenerBean[]);;Argument[0];Argument[-1];taint",
        "org.springframework.jmx.export;NotificationListenerBean;true;NotificationListenerBean;(NotificationListener);;Argument[0];Argument[-1];taint",
        "org.springframework.jmx.support;ConnectorServerFactoryBean;true;setEnvironment;(Properties);;Argument[0];Argument[-1];taint",
        "org.springframework.jmx.support;ConnectorServerFactoryBean;true;setEnvironmentMap;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.jmx.support;ConnectorServerFactoryBean;true;setForwarder;(MBeanServerForwarder);;Argument[0];Argument[-1];taint",
        "org.springframework.jmx.support;ConnectorServerFactoryBean;true;setObjectName;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.jmx.support;ConnectorServerFactoryBean;true;setServiceUrl;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jmx.support;MBeanRegistrationSupport;true;getServer;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jmx.support;MBeanRegistrationSupport;true;setServer;(MBeanServer);;Argument[0];Argument[-1];taint",
        "org.springframework.jmx.support;MBeanServerConnectionFactoryBean;true;setEnvironment;(Properties);;Argument[0];Argument[-1];taint",
        "org.springframework.jmx.support;MBeanServerConnectionFactoryBean;true;setEnvironmentMap;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.jmx.support;MBeanServerFactoryBean;true;setAgentId;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jmx.support;MBeanServerFactoryBean;true;setDefaultDomain;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jmx.support;NotificationListenerHolder;true;getHandback;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jmx.support;NotificationListenerHolder;true;getNotificationFilter;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jmx.support;NotificationListenerHolder;true;getNotificationListener;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jmx.support;NotificationListenerHolder;true;getResolvedObjectNames;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jmx.support;NotificationListenerHolder;true;setHandback;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.jmx.support;NotificationListenerHolder;true;setMappedObjectName;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.jmx.support;NotificationListenerHolder;true;setMappedObjectNames;(Object[]);;Argument[0];Argument[-1];taint",
        "org.springframework.jmx.support;NotificationListenerHolder;true;setNotificationFilter;(NotificationFilter);;Argument[0];Argument[-1];taint",
        "org.springframework.jmx.support;NotificationListenerHolder;true;setNotificationListener;(NotificationListener);;Argument[0];Argument[-1];taint",
        "org.springframework.jmx.support;ObjectNameManager;false;getInstance;(Object);;Argument[0];ReturnValue;taint",
        "org.springframework.jndi.support;SimpleJndiBeanFactory;true;addShareableResource;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jndi.support;SimpleJndiBeanFactory;true;setShareableResources;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.jndi;JndiAccessor;true;getJndiEnvironment;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jndi;JndiAccessor;true;getJndiTemplate;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jndi;JndiAccessor;true;setJndiEnvironment;(Properties);;Argument[0];Argument[-1];taint",
        "org.springframework.jndi;JndiAccessor;true;setJndiTemplate;(JndiTemplate);;Argument[0];Argument[-1];taint",
        "org.springframework.jndi;JndiLocatorSupport;true;lookup;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.jndi;JndiLocatorSupport;true;lookup;(String,Class);;Argument[-1];ReturnValue;taint",
        "org.springframework.jndi;JndiObjectFactoryBean;true;setDefaultObject;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.jndi;JndiObjectFactoryBean;true;setProxyInterfaces;(Class[]);;Argument[0];Argument[-1];taint",
        "org.springframework.jndi;JndiObjectLocator;true;getJndiName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jndi;JndiObjectLocator;true;setJndiName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jndi;JndiPropertySource;true;JndiPropertySource;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.jndi;JndiPropertySource;true;JndiPropertySource;(String,JndiLocatorDelegate);;Argument[0];Argument[-1];taint",
        "org.springframework.jndi;JndiPropertySource;true;JndiPropertySource;(String,JndiLocatorDelegate);;Argument[1];Argument[-1];taint",
        "org.springframework.jndi;JndiTemplate;true;JndiTemplate;(Properties);;Argument[0];Argument[-1];taint",
        "org.springframework.jndi;JndiTemplate;true;getEnvironment;();;Argument[-1];ReturnValue;taint",
        "org.springframework.jndi;JndiTemplate;true;lookup;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.jndi;JndiTemplate;true;lookup;(String,Class);;Argument[-1];ReturnValue;taint",
        "org.springframework.jndi;JndiTemplate;true;setEnvironment;(Properties);;Argument[0];Argument[-1];taint",
        "org.springframework.mail.javamail;ConfigurableMimeFileTypeMap;true;setMappingLocation;(Resource);;Argument[0];Argument[-1];taint",
        "org.springframework.mail.javamail;ConfigurableMimeFileTypeMap;true;setMappings;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.mail.javamail;JavaMailSenderImpl;true;getDefaultEncoding;();;Argument[-1];ReturnValue;taint",
        "org.springframework.mail.javamail;JavaMailSenderImpl;true;getDefaultFileTypeMap;();;Argument[-1];ReturnValue;taint",
        "org.springframework.mail.javamail;JavaMailSenderImpl;true;getHost;();;Argument[-1];ReturnValue;taint",
        "org.springframework.mail.javamail;JavaMailSenderImpl;true;getJavaMailProperties;();;Argument[-1];ReturnValue;taint",
        "org.springframework.mail.javamail;JavaMailSenderImpl;true;getPassword;();;Argument[-1];ReturnValue;taint",
        "org.springframework.mail.javamail;JavaMailSenderImpl;true;getProtocol;();;Argument[-1];ReturnValue;taint",
        "org.springframework.mail.javamail;JavaMailSenderImpl;true;getSession;();;Argument[-1];ReturnValue;taint",
        "org.springframework.mail.javamail;JavaMailSenderImpl;true;getUsername;();;Argument[-1];ReturnValue;taint",
        "org.springframework.mail.javamail;JavaMailSenderImpl;true;setDefaultEncoding;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.mail.javamail;JavaMailSenderImpl;true;setDefaultFileTypeMap;(FileTypeMap);;Argument[0];Argument[-1];taint",
        "org.springframework.mail.javamail;JavaMailSenderImpl;true;setHost;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.mail.javamail;JavaMailSenderImpl;true;setJavaMailProperties;(Properties);;Argument[0];Argument[-1];taint",
        "org.springframework.mail.javamail;JavaMailSenderImpl;true;setPassword;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.mail.javamail;JavaMailSenderImpl;true;setProtocol;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.mail.javamail;JavaMailSenderImpl;true;setSession;(Session);;Argument[0];Argument[-1];taint",
        "org.springframework.mail.javamail;JavaMailSenderImpl;true;setUsername;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.mail.javamail;MimeMailMessage;true;MimeMailMessage;(MimeMessage);;Argument[0];Argument[-1];taint",
        "org.springframework.mail.javamail;MimeMailMessage;true;MimeMailMessage;(MimeMessageHelper);;Argument[0];Argument[-1];taint",
        "org.springframework.mail.javamail;MimeMailMessage;true;getMimeMessage;();;Argument[-1];ReturnValue;taint",
        "org.springframework.mail.javamail;MimeMailMessage;true;getMimeMessageHelper;();;Argument[-1];ReturnValue;taint",
        "org.springframework.mail.javamail;MimeMessageHelper;true;MimeMessageHelper;(MimeMessage);;Argument[0];Argument[-1];taint",
        "org.springframework.mail.javamail;MimeMessageHelper;true;MimeMessageHelper;(MimeMessage,String);;Argument[0];Argument[-1];taint",
        "org.springframework.mail.javamail;MimeMessageHelper;true;MimeMessageHelper;(MimeMessage,String);;Argument[1];Argument[-1];taint",
        "org.springframework.mail.javamail;MimeMessageHelper;true;MimeMessageHelper;(MimeMessage,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.mail.javamail;MimeMessageHelper;true;MimeMessageHelper;(MimeMessage,boolean,String);;Argument[0];Argument[-1];taint",
        "org.springframework.mail.javamail;MimeMessageHelper;true;MimeMessageHelper;(MimeMessage,boolean,String);;Argument[2];Argument[-1];taint",
        "org.springframework.mail.javamail;MimeMessageHelper;true;MimeMessageHelper;(MimeMessage,int);;Argument[0];Argument[-1];taint",
        "org.springframework.mail.javamail;MimeMessageHelper;true;MimeMessageHelper;(MimeMessage,int,String);;Argument[0];Argument[-1];taint",
        "org.springframework.mail.javamail;MimeMessageHelper;true;MimeMessageHelper;(MimeMessage,int,String);;Argument[2];Argument[-1];taint",
        "org.springframework.mail.javamail;MimeMessageHelper;true;getEncoding;();;Argument[-1];ReturnValue;taint",
        "org.springframework.mail.javamail;MimeMessageHelper;true;getFileTypeMap;();;Argument[-1];ReturnValue;taint",
        "org.springframework.mail.javamail;MimeMessageHelper;true;getMimeMessage;();;Argument[-1];ReturnValue;taint",
        "org.springframework.mail.javamail;MimeMessageHelper;true;getMimeMultipart;();;Argument[-1];ReturnValue;taint",
        "org.springframework.mail.javamail;MimeMessageHelper;true;getRootMimeMultipart;();;Argument[-1];ReturnValue;taint",
        "org.springframework.mail.javamail;MimeMessageHelper;true;setFileTypeMap;(FileTypeMap);;Argument[0];Argument[-1];taint",
        "org.springframework.mail;MailMessage;true;setBcc;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.mail;MailMessage;true;setBcc;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.mail;MailMessage;true;setCc;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.mail;MailMessage;true;setCc;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.mail;MailMessage;true;setFrom;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.mail;MailMessage;true;setReplyTo;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.mail;MailMessage;true;setSentDate;(Date);;Argument[0];Argument[-1];taint",
        "org.springframework.mail;MailMessage;true;setSubject;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.mail;MailMessage;true;setText;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.mail;MailMessage;true;setTo;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.mail;MailMessage;true;setTo;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.mail;MailSendException;true;MailSendException;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.mail;MailSendException;true;MailSendException;(String,Throwable,Map);;Argument[2];Argument[-1];taint",
        "org.springframework.mail;MailSendException;true;getFailedMessages;();;Argument[-1];ReturnValue;taint",
        "org.springframework.mail;MailSendException;true;getMessageExceptions;();;Argument[-1];ReturnValue;taint",
        "org.springframework.mail;MailSendException;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.mail;SimpleMailMessage;true;getBcc;();;Argument[-1];ReturnValue;taint",
        "org.springframework.mail;SimpleMailMessage;true;getCc;();;Argument[-1];ReturnValue;taint",
        "org.springframework.mail;SimpleMailMessage;true;getFrom;();;Argument[-1];ReturnValue;taint",
        "org.springframework.mail;SimpleMailMessage;true;getReplyTo;();;Argument[-1];ReturnValue;taint",
        "org.springframework.mail;SimpleMailMessage;true;getSentDate;();;Argument[-1];ReturnValue;taint",
        "org.springframework.mail;SimpleMailMessage;true;getSubject;();;Argument[-1];ReturnValue;taint",
        "org.springframework.mail;SimpleMailMessage;true;getText;();;Argument[-1];ReturnValue;taint",
        "org.springframework.mail;SimpleMailMessage;true;getTo;();;Argument[-1];ReturnValue;taint",
        "org.springframework.mail;SimpleMailMessage;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.converter;AbstractMessageConverter;true;getContentTypeResolver;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.converter;AbstractMessageConverter;true;getSupportedMimeTypes;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.converter;AbstractMessageConverter;true;setContentTypeResolver;(ContentTypeResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.converter;CompositeMessageConverter;true;CompositeMessageConverter;(Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.converter;CompositeMessageConverter;true;getConverters;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.converter;CompositeMessageConverter;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.converter;ContentTypeResolver;true;resolve;(MessageHeaders);;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.converter;ContentTypeResolver;true;resolve;(MessageHeaders);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.messaging.converter;DefaultContentTypeResolver;true;getDefaultMimeType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.converter;DefaultContentTypeResolver;true;setDefaultMimeType;(MimeType);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.converter;DefaultContentTypeResolver;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.converter;GenericMessageConverter;true;GenericMessageConverter;(ConversionService);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.converter;GsonMessageConverter;true;GsonMessageConverter;(Gson);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.converter;GsonMessageConverter;true;getGson;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.converter;GsonMessageConverter;true;setGson;(Gson);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.converter;JsonbMessageConverter;true;JsonbMessageConverter;(Jsonb);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.converter;JsonbMessageConverter;true;getJsonb;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.converter;JsonbMessageConverter;true;setJsonb;(Jsonb);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.converter;KotlinSerializationJsonMessageConverter;true;KotlinSerializationJsonMessageConverter;(Json);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.converter;MappingJackson2MessageConverter;true;MappingJackson2MessageConverter;(MimeType[]);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.converter;MappingJackson2MessageConverter;true;getObjectMapper;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.converter;MappingJackson2MessageConverter;true;setObjectMapper;(ObjectMapper);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.converter;MarshallingMessageConverter;true;MarshallingMessageConverter;(Marshaller);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.converter;MarshallingMessageConverter;true;MarshallingMessageConverter;(MimeType[]);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.converter;MarshallingMessageConverter;true;getMarshaller;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.converter;MarshallingMessageConverter;true;getUnmarshaller;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.converter;MarshallingMessageConverter;true;setMarshaller;(Marshaller);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.converter;MarshallingMessageConverter;true;setUnmarshaller;(Unmarshaller);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.converter;MessageConversionException;true;MessageConversionException;(Message,String);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.converter;MessageConversionException;true;MessageConversionException;(Message,String,Throwable);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.converter;MessageConverter;true;toMessage;(Object,MessageHeaders);;Argument[0];ReturnValue;taint",
        "org.springframework.messaging.converter;ProtobufJsonFormatMessageConverter;true;ProtobufJsonFormatMessageConverter;(Parser,Printer);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.converter;ProtobufJsonFormatMessageConverter;true;ProtobufJsonFormatMessageConverter;(Parser,Printer);;Argument[1];Argument[-1];taint",
        "org.springframework.messaging.converter;ProtobufJsonFormatMessageConverter;true;ProtobufJsonFormatMessageConverter;(Parser,Printer,ExtensionRegistry);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.converter;ProtobufJsonFormatMessageConverter;true;ProtobufJsonFormatMessageConverter;(Parser,Printer,ExtensionRegistry);;Argument[1];Argument[-1];taint",
        "org.springframework.messaging.converter;ProtobufJsonFormatMessageConverter;true;ProtobufJsonFormatMessageConverter;(Parser,Printer,ExtensionRegistry);;Argument[2];Argument[-1];taint",
        "org.springframework.messaging.converter;ProtobufMessageConverter;true;ProtobufMessageConverter;(ExtensionRegistry);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.converter;SmartMessageConverter;true;toMessage;(Object,MessageHeaders,Object);;Argument[0];ReturnValue;taint",
        "org.springframework.messaging.core;AbstractDestinationResolvingMessagingTemplate;true;getDestinationResolver;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.core;AbstractDestinationResolvingMessagingTemplate;true;setDestinationResolver;(DestinationResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.core;AbstractMessageSendingTemplate;true;getDefaultDestination;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.core;AbstractMessageSendingTemplate;true;getMessageConverter;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.core;AbstractMessageSendingTemplate;true;setDefaultDestination;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.core;AbstractMessageSendingTemplate;true;setMessageConverter;(MessageConverter);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.core;BeanFactoryMessageChannelDestinationResolver;true;BeanFactoryMessageChannelDestinationResolver;(BeanFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.core;CachingDestinationResolverProxy;true;CachingDestinationResolverProxy;(DestinationResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.core;CachingDestinationResolverProxy;true;setTargetDestinationResolver;(DestinationResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.core;GenericMessagingTemplate;true;getReceiveTimeoutHeader;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.core;GenericMessagingTemplate;true;getSendTimeoutHeader;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.core;GenericMessagingTemplate;true;setReceiveTimeoutHeader;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.core;GenericMessagingTemplate;true;setSendTimeoutHeader;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.handler.annotation.reactive;DestinationVariableMethodArgumentResolver;true;DestinationVariableMethodArgumentResolver;(ConversionService);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.handler.annotation.reactive;HeaderMethodArgumentResolver;true;HeaderMethodArgumentResolver;(ConversionService,ConfigurableBeanFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.handler.annotation.reactive;HeaderMethodArgumentResolver;true;HeaderMethodArgumentResolver;(ConversionService,ConfigurableBeanFactory);;Argument[1];Argument[-1];taint",
        "org.springframework.messaging.handler.annotation.reactive;MessageMappingMessageHandler;true;getConversionService;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.handler.annotation.reactive;MessageMappingMessageHandler;true;getDecoders;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.handler.annotation.reactive;MessageMappingMessageHandler;true;getRouteMatcher;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.handler.annotation.reactive;MessageMappingMessageHandler;true;getValidator;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.handler.annotation.reactive;MessageMappingMessageHandler;true;registerMessagingAdvice;(MessagingAdviceBean);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.handler.annotation.reactive;MessageMappingMessageHandler;true;setConversionService;(ConversionService);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.handler.annotation.reactive;MessageMappingMessageHandler;true;setDecoders;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.handler.annotation.reactive;MessageMappingMessageHandler;true;setRouteMatcher;(RouteMatcher);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.handler.annotation.reactive;MessageMappingMessageHandler;true;setValidator;(Validator);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.handler.annotation.reactive;PayloadMethodArgumentResolver;true;PayloadMethodArgumentResolver;(List,Validator,ReactiveAdapterRegistry,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.handler.annotation.reactive;PayloadMethodArgumentResolver;true;PayloadMethodArgumentResolver;(List,Validator,ReactiveAdapterRegistry,boolean);;Argument[1];Argument[-1];taint",
        "org.springframework.messaging.handler.annotation.reactive;PayloadMethodArgumentResolver;true;PayloadMethodArgumentResolver;(List,Validator,ReactiveAdapterRegistry,boolean);;Argument[2];Argument[-1];taint",
        "org.springframework.messaging.handler.annotation.reactive;PayloadMethodArgumentResolver;true;getAdapterRegistry;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.handler.annotation.reactive;PayloadMethodArgumentResolver;true;getDecoders;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.handler.annotation.reactive;PayloadMethodArgumentResolver;true;getValidator;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.handler.annotation.support;DefaultMessageHandlerMethodFactory;true;setArgumentResolvers;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.handler.annotation.support;DefaultMessageHandlerMethodFactory;true;setConversionService;(ConversionService);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.handler.annotation.support;DefaultMessageHandlerMethodFactory;true;setCustomArgumentResolvers;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.handler.annotation.support;DefaultMessageHandlerMethodFactory;true;setMessageConverter;(MessageConverter);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.handler.annotation.support;DefaultMessageHandlerMethodFactory;true;setValidator;(Validator);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.handler.annotation.support;DestinationVariableMethodArgumentResolver;true;DestinationVariableMethodArgumentResolver;(ConversionService);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.handler.annotation.support;HeaderMethodArgumentResolver;true;HeaderMethodArgumentResolver;(ConversionService,ConfigurableBeanFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.handler.annotation.support;HeaderMethodArgumentResolver;true;HeaderMethodArgumentResolver;(ConversionService,ConfigurableBeanFactory);;Argument[1];Argument[-1];taint",
        "org.springframework.messaging.handler.annotation.support;MessageHandlerMethodFactory;true;createInvocableHandlerMethod;(Object,Method);;Argument[0];ReturnValue;taint",
        "org.springframework.messaging.handler.annotation.support;MessageHandlerMethodFactory;true;createInvocableHandlerMethod;(Object,Method);;Argument[1];ReturnValue;taint",
        "org.springframework.messaging.handler.annotation.support;MessageMethodArgumentResolver;true;MessageMethodArgumentResolver;(MessageConverter);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.handler.annotation.support;MethodArgumentNotValidException;true;MethodArgumentNotValidException;(Message,MethodParameter);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.handler.annotation.support;MethodArgumentNotValidException;true;MethodArgumentNotValidException;(Message,MethodParameter);;Argument[1];Argument[-1];taint",
        "org.springframework.messaging.handler.annotation.support;MethodArgumentNotValidException;true;MethodArgumentNotValidException;(Message,MethodParameter,BindingResult);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.handler.annotation.support;MethodArgumentNotValidException;true;MethodArgumentNotValidException;(Message,MethodParameter,BindingResult);;Argument[1];Argument[-1];taint",
        "org.springframework.messaging.handler.annotation.support;MethodArgumentNotValidException;true;MethodArgumentNotValidException;(Message,MethodParameter,BindingResult);;Argument[2];Argument[-1];taint",
        "org.springframework.messaging.handler.annotation.support;MethodArgumentNotValidException;true;getBindingResult;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.handler.annotation.support;MethodArgumentTypeMismatchException;true;MethodArgumentTypeMismatchException;(Message,MethodParameter,String);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.handler.annotation.support;MethodArgumentTypeMismatchException;true;MethodArgumentTypeMismatchException;(Message,MethodParameter,String);;Argument[1];Argument[-1];taint",
        "org.springframework.messaging.handler.annotation.support;PayloadArgumentResolver;true;PayloadArgumentResolver;(MessageConverter);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.handler.annotation.support;PayloadArgumentResolver;true;PayloadArgumentResolver;(MessageConverter,Validator);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.handler.annotation.support;PayloadArgumentResolver;true;PayloadArgumentResolver;(MessageConverter,Validator);;Argument[1];Argument[-1];taint",
        "org.springframework.messaging.handler.annotation.support;PayloadArgumentResolver;true;PayloadArgumentResolver;(MessageConverter,Validator,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.handler.annotation.support;PayloadArgumentResolver;true;PayloadArgumentResolver;(MessageConverter,Validator,boolean);;Argument[1];Argument[-1];taint",
        "org.springframework.messaging.handler.annotation.support;PayloadMethodArgumentResolver;true;PayloadMethodArgumentResolver;(MessageConverter);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.handler.annotation.support;PayloadMethodArgumentResolver;true;PayloadMethodArgumentResolver;(MessageConverter,Validator);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.handler.annotation.support;PayloadMethodArgumentResolver;true;PayloadMethodArgumentResolver;(MessageConverter,Validator);;Argument[1];Argument[-1];taint",
        "org.springframework.messaging.handler.annotation.support;PayloadMethodArgumentResolver;true;PayloadMethodArgumentResolver;(MessageConverter,Validator,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.handler.annotation.support;PayloadMethodArgumentResolver;true;PayloadMethodArgumentResolver;(MessageConverter,Validator,boolean);;Argument[1];Argument[-1];taint",
        "org.springframework.messaging.handler.invocation.reactive;AbstractEncoderMethodReturnValueHandler;true;getAdapterRegistry;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.handler.invocation.reactive;AbstractEncoderMethodReturnValueHandler;true;getEncoders;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.handler.invocation.reactive;AbstractMethodMessageHandler;true;getApplicationContext;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.handler.invocation.reactive;AbstractMethodMessageHandler;true;getArgumentResolverConfigurer;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.handler.invocation.reactive;AbstractMethodMessageHandler;true;getBeanName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.handler.invocation.reactive;AbstractMethodMessageHandler;true;getDestinationLookup;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.handler.invocation.reactive;AbstractMethodMessageHandler;true;getHandlerMethods;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.handler.invocation.reactive;AbstractMethodMessageHandler;true;getHandlerPredicate;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.handler.invocation.reactive;AbstractMethodMessageHandler;true;getReactiveAdapterRegistry;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.handler.invocation.reactive;AbstractMethodMessageHandler;true;getReturnValueHandlerConfigurer;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.handler.invocation.reactive;AbstractMethodMessageHandler;true;registerHandlerMethod;(Object,Method,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.handler.invocation.reactive;AbstractMethodMessageHandler;true;registerHandlerMethod;(Object,Method,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.messaging.handler.invocation.reactive;AbstractMethodMessageHandler;true;registerHandlerMethod;(Object,Method,Object);;Argument[2];Argument[-1];taint",
        "org.springframework.messaging.handler.invocation.reactive;AbstractMethodMessageHandler;true;setArgumentResolverConfigurer;(ArgumentResolverConfigurer);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.handler.invocation.reactive;AbstractMethodMessageHandler;true;setHandlerPredicate;(Predicate);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.handler.invocation.reactive;AbstractMethodMessageHandler;true;setHandlers;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.handler.invocation.reactive;AbstractMethodMessageHandler;true;setReactiveAdapterRegistry;(ReactiveAdapterRegistry);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.handler.invocation.reactive;AbstractMethodMessageHandler;true;setReturnValueHandlerConfigurer;(ReturnValueHandlerConfigurer);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.handler.invocation.reactive;ArgumentResolverConfigurer;true;addCustomResolver;(HandlerMethodArgumentResolver[]);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.handler.invocation.reactive;ArgumentResolverConfigurer;true;getCustomResolvers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.handler.invocation.reactive;HandlerMethodArgumentResolver;true;resolveArgument;(MethodParameter,Message);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.handler.invocation.reactive;HandlerMethodArgumentResolver;true;supportsParameter;(MethodParameter);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.handler.invocation.reactive;HandlerMethodArgumentResolverComposite;true;addResolver;(HandlerMethodArgumentResolver);;Argument[-1];ReturnValue;value",
        "org.springframework.messaging.handler.invocation.reactive;HandlerMethodArgumentResolverComposite;true;addResolver;(HandlerMethodArgumentResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.handler.invocation.reactive;HandlerMethodArgumentResolverComposite;true;addResolver;(HandlerMethodArgumentResolver);;Argument[0];ReturnValue;taint",
        "org.springframework.messaging.handler.invocation.reactive;HandlerMethodArgumentResolverComposite;true;addResolvers;(HandlerMethodArgumentResolver[]);;Argument[-1];ReturnValue;value",
        "org.springframework.messaging.handler.invocation.reactive;HandlerMethodArgumentResolverComposite;true;addResolvers;(HandlerMethodArgumentResolver[]);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.handler.invocation.reactive;HandlerMethodArgumentResolverComposite;true;addResolvers;(HandlerMethodArgumentResolver[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.messaging.handler.invocation.reactive;HandlerMethodArgumentResolverComposite;true;addResolvers;(List);;Argument[-1];ReturnValue;value",
        "org.springframework.messaging.handler.invocation.reactive;HandlerMethodArgumentResolverComposite;true;addResolvers;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.handler.invocation.reactive;HandlerMethodArgumentResolverComposite;true;addResolvers;(List);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.messaging.handler.invocation.reactive;HandlerMethodArgumentResolverComposite;true;getArgumentResolver;(MethodParameter);;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.handler.invocation.reactive;HandlerMethodArgumentResolverComposite;true;getArgumentResolver;(MethodParameter);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.handler.invocation.reactive;HandlerMethodArgumentResolverComposite;true;getArgumentResolver;(MethodParameter);;Argument[0];ReturnValue;taint",
        "org.springframework.messaging.handler.invocation.reactive;HandlerMethodArgumentResolverComposite;true;getResolvers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.handler.invocation.reactive;HandlerMethodReturnValueHandlerComposite;true;addHandler;(HandlerMethodReturnValueHandler);;Argument[-1];ReturnValue;value",
        "org.springframework.messaging.handler.invocation.reactive;HandlerMethodReturnValueHandlerComposite;true;addHandler;(HandlerMethodReturnValueHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.handler.invocation.reactive;HandlerMethodReturnValueHandlerComposite;true;addHandler;(HandlerMethodReturnValueHandler);;Argument[0];ReturnValue;taint",
        "org.springframework.messaging.handler.invocation.reactive;HandlerMethodReturnValueHandlerComposite;true;addHandlers;(List);;Argument[-1];ReturnValue;value",
        "org.springframework.messaging.handler.invocation.reactive;HandlerMethodReturnValueHandlerComposite;true;addHandlers;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.handler.invocation.reactive;HandlerMethodReturnValueHandlerComposite;true;addHandlers;(List);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.messaging.handler.invocation.reactive;HandlerMethodReturnValueHandlerComposite;true;getReturnValueHandlers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.handler.invocation.reactive;InvocableHandlerMethod;true;InvocableHandlerMethod;(Object,Method);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.handler.invocation.reactive;InvocableHandlerMethod;true;InvocableHandlerMethod;(Object,Method);;Argument[1];Argument[-1];taint",
        "org.springframework.messaging.handler.invocation.reactive;InvocableHandlerMethod;true;getParameterNameDiscoverer;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.handler.invocation.reactive;InvocableHandlerMethod;true;getResolvers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.handler.invocation.reactive;InvocableHandlerMethod;true;setArgumentResolvers;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.handler.invocation.reactive;InvocableHandlerMethod;true;setParameterNameDiscoverer;(ParameterNameDiscoverer);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.handler.invocation.reactive;InvocableHandlerMethod;true;setReactiveAdapterRegistry;(ReactiveAdapterRegistry);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.handler.invocation.reactive;ReturnValueHandlerConfigurer;true;addCustomHandler;(HandlerMethodReturnValueHandler[]);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.handler.invocation.reactive;ReturnValueHandlerConfigurer;true;getCustomHandlers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.handler.invocation.reactive;SyncHandlerMethodArgumentResolver;true;resolveArgumentValue;(MethodParameter,Message);;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.handler.invocation.reactive;SyncHandlerMethodArgumentResolver;true;resolveArgumentValue;(MethodParameter,Message);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.handler.invocation;AbstractExceptionHandlerMethodResolver;true;resolveMethod;(Throwable);;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.handler.invocation;AbstractExceptionHandlerMethodResolver;true;resolveMethodByExceptionType;(Class);;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.handler.invocation;AbstractMethodMessageHandler;true;getApplicationContext;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.handler.invocation;AbstractMethodMessageHandler;true;getArgumentResolvers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.handler.invocation;AbstractMethodMessageHandler;true;getCustomArgumentResolvers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.handler.invocation;AbstractMethodMessageHandler;true;getCustomReturnValueHandlers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.handler.invocation;AbstractMethodMessageHandler;true;getDestinationPrefixes;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.handler.invocation;AbstractMethodMessageHandler;true;getHandlerMethods;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.handler.invocation;AbstractMethodMessageHandler;true;getReturnValueHandlers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.handler.invocation;AbstractMethodMessageHandler;true;setArgumentResolvers;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.handler.invocation;AbstractMethodMessageHandler;true;setCustomArgumentResolvers;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.handler.invocation;AbstractMethodMessageHandler;true;setCustomReturnValueHandlers;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.handler.invocation;AbstractMethodMessageHandler;true;setDestinationPrefixes;(Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.handler.invocation;AbstractMethodMessageHandler;true;setReturnValueHandlers;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.handler.invocation;AbstractMethodMessageHandler;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.handler.invocation;AsyncHandlerMethodReturnValueHandler;true;toListenableFuture;(Object,MethodParameter);;Argument[0];ReturnValue;taint",
        "org.springframework.messaging.handler.invocation;HandlerMethodArgumentResolver;true;resolveArgument;(MethodParameter,Message);;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.handler.invocation;HandlerMethodArgumentResolver;true;resolveArgument;(MethodParameter,Message);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.handler.invocation;HandlerMethodArgumentResolver;true;resolveArgument;(MethodParameter,Message);;Argument[1];ReturnValue;taint",
        "org.springframework.messaging.handler.invocation;HandlerMethodArgumentResolver;true;supportsParameter;(MethodParameter);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.handler.invocation;HandlerMethodArgumentResolverComposite;true;addResolver;(HandlerMethodArgumentResolver);;Argument[-1];ReturnValue;value",
        "org.springframework.messaging.handler.invocation;HandlerMethodArgumentResolverComposite;true;addResolver;(HandlerMethodArgumentResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.handler.invocation;HandlerMethodArgumentResolverComposite;true;addResolver;(HandlerMethodArgumentResolver);;Argument[0];ReturnValue;taint",
        "org.springframework.messaging.handler.invocation;HandlerMethodArgumentResolverComposite;true;addResolvers;(HandlerMethodArgumentResolver[]);;Argument[-1];ReturnValue;value",
        "org.springframework.messaging.handler.invocation;HandlerMethodArgumentResolverComposite;true;addResolvers;(HandlerMethodArgumentResolver[]);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.handler.invocation;HandlerMethodArgumentResolverComposite;true;addResolvers;(HandlerMethodArgumentResolver[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.messaging.handler.invocation;HandlerMethodArgumentResolverComposite;true;addResolvers;(List);;Argument[-1];ReturnValue;value",
        "org.springframework.messaging.handler.invocation;HandlerMethodArgumentResolverComposite;true;addResolvers;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.handler.invocation;HandlerMethodArgumentResolverComposite;true;addResolvers;(List);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.messaging.handler.invocation;HandlerMethodArgumentResolverComposite;true;getResolvers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.handler.invocation;HandlerMethodReturnValueHandler;true;handleReturnValue;(Object,MethodParameter,Message);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.handler.invocation;HandlerMethodReturnValueHandlerComposite;true;addHandler;(HandlerMethodReturnValueHandler);;Argument[-1];ReturnValue;value",
        "org.springframework.messaging.handler.invocation;HandlerMethodReturnValueHandlerComposite;true;addHandler;(HandlerMethodReturnValueHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.handler.invocation;HandlerMethodReturnValueHandlerComposite;true;addHandler;(HandlerMethodReturnValueHandler);;Argument[0];ReturnValue;taint",
        "org.springframework.messaging.handler.invocation;HandlerMethodReturnValueHandlerComposite;true;addHandlers;(List);;Argument[-1];ReturnValue;value",
        "org.springframework.messaging.handler.invocation;HandlerMethodReturnValueHandlerComposite;true;addHandlers;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.handler.invocation;HandlerMethodReturnValueHandlerComposite;true;addHandlers;(List);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.messaging.handler.invocation;HandlerMethodReturnValueHandlerComposite;true;getLogger;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.handler.invocation;HandlerMethodReturnValueHandlerComposite;true;getReturnValueHandlers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.handler.invocation;HandlerMethodReturnValueHandlerComposite;true;setLogger;(Log);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.handler.invocation;InvocableHandlerMethod;true;InvocableHandlerMethod;(Object,Method);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.handler.invocation;InvocableHandlerMethod;true;InvocableHandlerMethod;(Object,Method);;Argument[1];Argument[-1];taint",
        "org.springframework.messaging.handler.invocation;InvocableHandlerMethod;true;InvocableHandlerMethod;(Object,String,Class[]);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.handler.invocation;InvocableHandlerMethod;true;setMessageMethodArgumentResolvers;(HandlerMethodArgumentResolverComposite);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.handler.invocation;InvocableHandlerMethod;true;setParameterNameDiscoverer;(ParameterNameDiscoverer);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.handler.invocation;MethodArgumentResolutionException;true;MethodArgumentResolutionException;(Message,MethodParameter);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.handler.invocation;MethodArgumentResolutionException;true;MethodArgumentResolutionException;(Message,MethodParameter);;Argument[1];Argument[-1];taint",
        "org.springframework.messaging.handler.invocation;MethodArgumentResolutionException;true;MethodArgumentResolutionException;(Message,MethodParameter,String);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.handler.invocation;MethodArgumentResolutionException;true;MethodArgumentResolutionException;(Message,MethodParameter,String);;Argument[1];Argument[-1];taint",
        "org.springframework.messaging.handler.invocation;MethodArgumentResolutionException;true;MethodArgumentResolutionException;(Message,MethodParameter,String,Throwable);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.handler.invocation;MethodArgumentResolutionException;true;MethodArgumentResolutionException;(Message,MethodParameter,String,Throwable);;Argument[1];Argument[-1];taint",
        "org.springframework.messaging.handler.invocation;MethodArgumentResolutionException;true;getMethodParameter;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.handler.invocation;ReactiveReturnValueHandler;true;ReactiveReturnValueHandler;(ReactiveAdapterRegistry);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.handler;CompositeMessageCondition;true;CompositeMessageCondition;(MessageCondition[]);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.handler;CompositeMessageCondition;true;getCondition;(Class);;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.handler;CompositeMessageCondition;true;getMessageConditions;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.handler;DestinationPatternsMessageCondition;true;DestinationPatternsMessageCondition;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.handler;DestinationPatternsMessageCondition;true;DestinationPatternsMessageCondition;(String[],PathMatcher);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.handler;DestinationPatternsMessageCondition;true;DestinationPatternsMessageCondition;(String[],PathMatcher);;Argument[1];Argument[-1];taint",
        "org.springframework.messaging.handler;DestinationPatternsMessageCondition;true;DestinationPatternsMessageCondition;(String[],RouteMatcher);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.handler;DestinationPatternsMessageCondition;true;DestinationPatternsMessageCondition;(String[],RouteMatcher);;Argument[1];Argument[-1];taint",
        "org.springframework.messaging.handler;DestinationPatternsMessageCondition;true;getPatterns;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.handler;HandlerMethod;true;HandlerMethod;(Object,Method);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.handler;HandlerMethod;true;HandlerMethod;(Object,Method);;Argument[1];Argument[-1];taint",
        "org.springframework.messaging.handler;HandlerMethod;true;HandlerMethod;(Object,String,Class[]);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.handler;HandlerMethod;true;HandlerMethod;(String,BeanFactory,Method);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.handler;HandlerMethod;true;HandlerMethod;(String,BeanFactory,Method);;Argument[1];Argument[-1];taint",
        "org.springframework.messaging.handler;HandlerMethod;true;HandlerMethod;(String,BeanFactory,Method);;Argument[2];Argument[-1];taint",
        "org.springframework.messaging.handler;HandlerMethod;true;getBean;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.handler;HandlerMethod;true;getLogger;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.handler;HandlerMethod;true;getMethod;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.handler;HandlerMethod;true;getMethodParameters;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.handler;HandlerMethod;true;getResolvedFromHandlerMethod;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.handler;HandlerMethod;true;getReturnValueType;(Object);;Argument[0];ReturnValue;taint",
        "org.springframework.messaging.handler;HandlerMethod;true;setLogger;(Log);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.handler;MessagingAdviceBean;true;resolveBean;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.rsocket.annotation.support;RSocketFrameTypeMessageCondition;true;RSocketFrameTypeMessageCondition;(Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.rsocket.annotation.support;RSocketFrameTypeMessageCondition;true;getFrameTypes;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.rsocket.annotation.support;RSocketMessageHandler;true;getDefaultDataMimeType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.rsocket.annotation.support;RSocketMessageHandler;true;getDefaultMetadataMimeType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.rsocket.annotation.support;RSocketMessageHandler;true;getEncoders;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.rsocket.annotation.support;RSocketMessageHandler;true;getMetadataExtractor;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.rsocket.annotation.support;RSocketMessageHandler;true;getRSocketStrategies;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.rsocket.annotation.support;RSocketMessageHandler;true;setDefaultDataMimeType;(MimeType);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.rsocket.annotation.support;RSocketMessageHandler;true;setDefaultMetadataMimeType;(MimeType);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.rsocket.annotation.support;RSocketMessageHandler;true;setEncoders;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.rsocket.annotation.support;RSocketMessageHandler;true;setMetadataExtractor;(MetadataExtractor);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.rsocket.annotation.support;RSocketMessageHandler;true;setRSocketStrategies;(RSocketStrategies);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.rsocket.annotation.support;RSocketPayloadReturnValueHandler;true;RSocketPayloadReturnValueHandler;(List,ReactiveAdapterRegistry);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.rsocket.annotation.support;RSocketPayloadReturnValueHandler;true;RSocketPayloadReturnValueHandler;(List,ReactiveAdapterRegistry);;Argument[1];Argument[-1];taint",
        "org.springframework.messaging.rsocket;DefaultMetadataExtractor;true;DefaultMetadataExtractor;(Decoder[]);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.rsocket;DefaultMetadataExtractor;true;DefaultMetadataExtractor;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.rsocket;DefaultMetadataExtractor;true;getDecoders;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.rsocket;MetadataExtractorRegistry;true;metadataToExtract;(MimeType,Class,BiConsumer);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.rsocket;MetadataExtractorRegistry;true;metadataToExtract;(MimeType,Class,BiConsumer);;Argument[2];Argument[-1];taint",
        "org.springframework.messaging.rsocket;MetadataExtractorRegistry;true;metadataToExtract;(MimeType,Class,String);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.rsocket;MetadataExtractorRegistry;true;metadataToExtract;(MimeType,ParameterizedTypeReference,BiConsumer);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.rsocket;MetadataExtractorRegistry;true;metadataToExtract;(MimeType,ParameterizedTypeReference,BiConsumer);;Argument[2];Argument[-1];taint",
        "org.springframework.messaging.rsocket;MetadataExtractorRegistry;true;metadataToExtract;(MimeType,ParameterizedTypeReference,String);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.rsocket;PayloadUtils;true;retainDataAndReleasePayload;(Payload,DataBufferFactory);;Argument[1];ReturnValue;taint",
        "org.springframework.messaging.rsocket;RSocketRequester$Builder;true;apply;(Consumer);;Argument[-1];ReturnValue;value",
        "org.springframework.messaging.rsocket;RSocketRequester$Builder;true;dataMimeType;(MimeType);;Argument[-1];ReturnValue;value",
        "org.springframework.messaging.rsocket;RSocketRequester$Builder;true;dataMimeType;(MimeType);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.rsocket;RSocketRequester$Builder;true;dataMimeType;(MimeType);;Argument[0];ReturnValue;taint",
        "org.springframework.messaging.rsocket;RSocketRequester$Builder;true;metadataMimeType;(MimeType);;Argument[-1];ReturnValue;value",
        "org.springframework.messaging.rsocket;RSocketRequester$Builder;true;metadataMimeType;(MimeType);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.rsocket;RSocketRequester$Builder;true;metadataMimeType;(MimeType);;Argument[0];ReturnValue;taint",
        "org.springframework.messaging.rsocket;RSocketRequester$Builder;true;rsocketConnector;(RSocketConnectorConfigurer);;Argument[-1];ReturnValue;value",
        "org.springframework.messaging.rsocket;RSocketRequester$Builder;true;rsocketConnector;(RSocketConnectorConfigurer);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.rsocket;RSocketRequester$Builder;true;rsocketConnector;(RSocketConnectorConfigurer);;Argument[0];ReturnValue;taint",
        "org.springframework.messaging.rsocket;RSocketRequester$Builder;true;rsocketStrategies;(Consumer);;Argument[-1];ReturnValue;value",
        "org.springframework.messaging.rsocket;RSocketRequester$Builder;true;rsocketStrategies;(Consumer);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.rsocket;RSocketRequester$Builder;true;rsocketStrategies;(Consumer);;Argument[0];ReturnValue;taint",
        "org.springframework.messaging.rsocket;RSocketRequester$Builder;true;rsocketStrategies;(RSocketStrategies);;Argument[-1];ReturnValue;value",
        "org.springframework.messaging.rsocket;RSocketRequester$Builder;true;rsocketStrategies;(RSocketStrategies);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.rsocket;RSocketRequester$Builder;true;rsocketStrategies;(RSocketStrategies);;Argument[0];ReturnValue;taint",
        "org.springframework.messaging.rsocket;RSocketRequester$Builder;true;setupData;(Object);;Argument[-1];ReturnValue;value",
        "org.springframework.messaging.rsocket;RSocketRequester$Builder;true;setupData;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.rsocket;RSocketRequester$Builder;true;setupData;(Object);;Argument[0];ReturnValue;taint",
        "org.springframework.messaging.rsocket;RSocketRequester$Builder;true;setupMetadata;(Object,MimeType);;Argument[-1];ReturnValue;value",
        "org.springframework.messaging.rsocket;RSocketRequester$Builder;true;setupMetadata;(Object,MimeType);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.rsocket;RSocketRequester$Builder;true;setupMetadata;(Object,MimeType);;Argument[0];ReturnValue;taint",
        "org.springframework.messaging.rsocket;RSocketRequester$Builder;true;setupMetadata;(Object,MimeType);;Argument[1];Argument[-1];taint",
        "org.springframework.messaging.rsocket;RSocketRequester$Builder;true;setupMetadata;(Object,MimeType);;Argument[1];ReturnValue;taint",
        "org.springframework.messaging.rsocket;RSocketRequester$Builder;true;setupRoute;(String,Object[]);;Argument[-1];ReturnValue;value",
        "org.springframework.messaging.rsocket;RSocketRequester$Builder;true;setupRoute;(String,Object[]);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.rsocket;RSocketRequester$Builder;true;setupRoute;(String,Object[]);;Argument[0];ReturnValue;taint",
        "org.springframework.messaging.rsocket;RSocketRequester$Builder;true;setupRoute;(String,Object[]);;Argument[1];Argument[-1];taint",
        "org.springframework.messaging.rsocket;RSocketRequester$Builder;true;setupRoute;(String,Object[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.messaging.rsocket;RSocketRequester$RequestSpec;true;data;(Object);;Argument[-1];ReturnValue;value",
        "org.springframework.messaging.rsocket;RSocketRequester$RequestSpec;true;data;(Object,Class);;Argument[-1];ReturnValue;value",
        "org.springframework.messaging.rsocket;RSocketRequester$RequestSpec;true;data;(Object,ParameterizedTypeReference);;Argument[-1];ReturnValue;value",
        "org.springframework.messaging.rsocket;RSocketRequester$RequestSpec;true;metadata;(Consumer);;Argument[-1];ReturnValue;value",
        "org.springframework.messaging.rsocket;RSocketRequester;true;dataMimeType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.rsocket;RSocketRequester;true;metadata;(Object,MimeType);;Argument[0];ReturnValue;taint",
        "org.springframework.messaging.rsocket;RSocketRequester;true;metadata;(Object,MimeType);;Argument[1];ReturnValue;taint",
        "org.springframework.messaging.rsocket;RSocketRequester;true;metadataMimeType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.rsocket;RSocketRequester;true;route;(String,Object[]);;Argument[0];ReturnValue;taint",
        "org.springframework.messaging.rsocket;RSocketRequester;true;rsocket;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.rsocket;RSocketRequester;true;rsocketClient;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.rsocket;RSocketRequester;true;wrap;(RSocket,MimeType,MimeType,RSocketStrategies);;Argument[0];ReturnValue;taint",
        "org.springframework.messaging.rsocket;RSocketRequester;true;wrap;(RSocket,MimeType,MimeType,RSocketStrategies);;Argument[1];ReturnValue;taint",
        "org.springframework.messaging.rsocket;RSocketRequester;true;wrap;(RSocket,MimeType,MimeType,RSocketStrategies);;Argument[2];ReturnValue;taint",
        "org.springframework.messaging.rsocket;RSocketRequester;true;wrap;(RSocket,MimeType,MimeType,RSocketStrategies);;Argument[3];ReturnValue;taint",
        "org.springframework.messaging.rsocket;RSocketStrategies$Builder;true;dataBufferFactory;(DataBufferFactory);;Argument[-1];ReturnValue;value",
        "org.springframework.messaging.rsocket;RSocketStrategies$Builder;true;dataBufferFactory;(DataBufferFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.rsocket;RSocketStrategies$Builder;true;dataBufferFactory;(DataBufferFactory);;Argument[0];ReturnValue;taint",
        "org.springframework.messaging.rsocket;RSocketStrategies$Builder;true;decoder;(Decoder[]);;Argument[-1];ReturnValue;value",
        "org.springframework.messaging.rsocket;RSocketStrategies$Builder;true;decoder;(Decoder[]);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.rsocket;RSocketStrategies$Builder;true;decoder;(Decoder[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.messaging.rsocket;RSocketStrategies$Builder;true;decoders;(Consumer);;Argument[-1];ReturnValue;value",
        "org.springframework.messaging.rsocket;RSocketStrategies$Builder;true;encoder;(Encoder[]);;Argument[-1];ReturnValue;value",
        "org.springframework.messaging.rsocket;RSocketStrategies$Builder;true;encoder;(Encoder[]);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.rsocket;RSocketStrategies$Builder;true;encoder;(Encoder[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.messaging.rsocket;RSocketStrategies$Builder;true;encoders;(Consumer);;Argument[-1];ReturnValue;value",
        "org.springframework.messaging.rsocket;RSocketStrategies$Builder;true;metadataExtractor;(MetadataExtractor);;Argument[-1];ReturnValue;value",
        "org.springframework.messaging.rsocket;RSocketStrategies$Builder;true;metadataExtractor;(MetadataExtractor);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.rsocket;RSocketStrategies$Builder;true;metadataExtractor;(MetadataExtractor);;Argument[0];ReturnValue;taint",
        "org.springframework.messaging.rsocket;RSocketStrategies$Builder;true;metadataExtractorRegistry;(Consumer);;Argument[-1];ReturnValue;value",
        "org.springframework.messaging.rsocket;RSocketStrategies$Builder;true;metadataExtractorRegistry;(Consumer);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.rsocket;RSocketStrategies$Builder;true;metadataExtractorRegistry;(Consumer);;Argument[0];ReturnValue;taint",
        "org.springframework.messaging.rsocket;RSocketStrategies$Builder;true;reactiveAdapterStrategy;(ReactiveAdapterRegistry);;Argument[-1];ReturnValue;value",
        "org.springframework.messaging.rsocket;RSocketStrategies$Builder;true;reactiveAdapterStrategy;(ReactiveAdapterRegistry);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.rsocket;RSocketStrategies$Builder;true;reactiveAdapterStrategy;(ReactiveAdapterRegistry);;Argument[0];ReturnValue;taint",
        "org.springframework.messaging.rsocket;RSocketStrategies$Builder;true;routeMatcher;(RouteMatcher);;Argument[-1];ReturnValue;value",
        "org.springframework.messaging.rsocket;RSocketStrategies$Builder;true;routeMatcher;(RouteMatcher);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.rsocket;RSocketStrategies$Builder;true;routeMatcher;(RouteMatcher);;Argument[0];ReturnValue;taint",
        "org.springframework.messaging.rsocket;RSocketStrategies;true;dataBufferFactory;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.rsocket;RSocketStrategies;true;decoder;(ResolvableType,MimeType);;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.rsocket;RSocketStrategies;true;decoders;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.rsocket;RSocketStrategies;true;encoder;(ResolvableType,MimeType);;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.rsocket;RSocketStrategies;true;encoders;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.rsocket;RSocketStrategies;true;metadataExtractor;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.rsocket;RSocketStrategies;true;reactiveAdapterRegistry;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.rsocket;RSocketStrategies;true;routeMatcher;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.annotation.support;MissingSessionUserException;true;MissingSessionUserException;(Message);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.annotation.support;SendToMethodReturnValueHandler;true;SendToMethodReturnValueHandler;(SimpMessageSendingOperations,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.annotation.support;SendToMethodReturnValueHandler;true;getDefaultDestinationPrefix;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.annotation.support;SendToMethodReturnValueHandler;true;getDefaultUserDestinationPrefix;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.annotation.support;SendToMethodReturnValueHandler;true;getHeaderInitializer;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.annotation.support;SendToMethodReturnValueHandler;true;setDefaultDestinationPrefix;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.annotation.support;SendToMethodReturnValueHandler;true;setDefaultUserDestinationPrefix;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.annotation.support;SendToMethodReturnValueHandler;true;setHeaderInitializer;(MessageHeaderInitializer);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.annotation.support;SimpAnnotationMethodMessageHandler;true;SimpAnnotationMethodMessageHandler;(SubscribableChannel,MessageChannel,SimpMessageSendingOperations);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.annotation.support;SimpAnnotationMethodMessageHandler;true;SimpAnnotationMethodMessageHandler;(SubscribableChannel,MessageChannel,SimpMessageSendingOperations);;Argument[1];Argument[-1];taint",
        "org.springframework.messaging.simp.annotation.support;SimpAnnotationMethodMessageHandler;true;SimpAnnotationMethodMessageHandler;(SubscribableChannel,MessageChannel,SimpMessageSendingOperations);;Argument[2];Argument[-1];taint",
        "org.springframework.messaging.simp.annotation.support;SimpAnnotationMethodMessageHandler;true;getConversionService;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.annotation.support;SimpAnnotationMethodMessageHandler;true;getHeaderInitializer;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.annotation.support;SimpAnnotationMethodMessageHandler;true;getMessageConverter;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.annotation.support;SimpAnnotationMethodMessageHandler;true;getPathMatcher;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.annotation.support;SimpAnnotationMethodMessageHandler;true;getValidator;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.annotation.support;SimpAnnotationMethodMessageHandler;true;setConversionService;(ConversionService);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.annotation.support;SimpAnnotationMethodMessageHandler;true;setHeaderInitializer;(MessageHeaderInitializer);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.annotation.support;SimpAnnotationMethodMessageHandler;true;setMessageConverter;(MessageConverter);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.annotation.support;SimpAnnotationMethodMessageHandler;true;setPathMatcher;(PathMatcher);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.annotation.support;SimpAnnotationMethodMessageHandler;true;setValidator;(Validator);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.annotation.support;SubscriptionMethodReturnValueHandler;true;SubscriptionMethodReturnValueHandler;(MessageSendingOperations);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.annotation.support;SubscriptionMethodReturnValueHandler;true;getHeaderInitializer;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.annotation.support;SubscriptionMethodReturnValueHandler;true;setHeaderInitializer;(MessageHeaderInitializer);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.broker;AbstractBrokerMessageHandler;true;AbstractBrokerMessageHandler;(SubscribableChannel,MessageChannel,SubscribableChannel);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.broker;AbstractBrokerMessageHandler;true;AbstractBrokerMessageHandler;(SubscribableChannel,MessageChannel,SubscribableChannel);;Argument[1];Argument[-1];taint",
        "org.springframework.messaging.simp.broker;AbstractBrokerMessageHandler;true;AbstractBrokerMessageHandler;(SubscribableChannel,MessageChannel,SubscribableChannel);;Argument[2];Argument[-1];taint",
        "org.springframework.messaging.simp.broker;AbstractBrokerMessageHandler;true;AbstractBrokerMessageHandler;(SubscribableChannel,MessageChannel,SubscribableChannel,Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.broker;AbstractBrokerMessageHandler;true;AbstractBrokerMessageHandler;(SubscribableChannel,MessageChannel,SubscribableChannel,Collection);;Argument[1];Argument[-1];taint",
        "org.springframework.messaging.simp.broker;AbstractBrokerMessageHandler;true;AbstractBrokerMessageHandler;(SubscribableChannel,MessageChannel,SubscribableChannel,Collection);;Argument[2];Argument[-1];taint",
        "org.springframework.messaging.simp.broker;AbstractBrokerMessageHandler;true;AbstractBrokerMessageHandler;(SubscribableChannel,MessageChannel,SubscribableChannel,Collection);;Argument[3];Argument[-1];taint",
        "org.springframework.messaging.simp.broker;AbstractBrokerMessageHandler;true;getApplicationEventPublisher;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.broker;AbstractBrokerMessageHandler;true;getBrokerChannel;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.broker;AbstractBrokerMessageHandler;true;getClientInboundChannel;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.broker;AbstractBrokerMessageHandler;true;getClientOutboundChannel;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.broker;AbstractBrokerMessageHandler;true;getDestinationPrefixes;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.broker;AbstractBrokerMessageHandler;true;setUserDestinationPredicate;(Predicate);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.broker;DefaultSubscriptionRegistry;true;getPathMatcher;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.broker;DefaultSubscriptionRegistry;true;getSelectorHeaderName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.broker;DefaultSubscriptionRegistry;true;setPathMatcher;(PathMatcher);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.broker;DefaultSubscriptionRegistry;true;setSelectorHeaderName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.broker;OrderedMessageChannelDecorator;true;OrderedMessageChannelDecorator;(MessageChannel,Log);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.broker;OrderedMessageChannelDecorator;true;OrderedMessageChannelDecorator;(MessageChannel,Log);;Argument[1];Argument[-1];taint",
        "org.springframework.messaging.simp.broker;SimpleBrokerMessageHandler;true;SimpleBrokerMessageHandler;(SubscribableChannel,MessageChannel,SubscribableChannel,Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.broker;SimpleBrokerMessageHandler;true;SimpleBrokerMessageHandler;(SubscribableChannel,MessageChannel,SubscribableChannel,Collection);;Argument[1];Argument[-1];taint",
        "org.springframework.messaging.simp.broker;SimpleBrokerMessageHandler;true;SimpleBrokerMessageHandler;(SubscribableChannel,MessageChannel,SubscribableChannel,Collection);;Argument[2];Argument[-1];taint",
        "org.springframework.messaging.simp.broker;SimpleBrokerMessageHandler;true;SimpleBrokerMessageHandler;(SubscribableChannel,MessageChannel,SubscribableChannel,Collection);;Argument[3];Argument[-1];taint",
        "org.springframework.messaging.simp.broker;SimpleBrokerMessageHandler;true;getHeaderInitializer;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.broker;SimpleBrokerMessageHandler;true;getSubscriptionRegistry;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.broker;SimpleBrokerMessageHandler;true;getTaskScheduler;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.broker;SimpleBrokerMessageHandler;true;setHeaderInitializer;(MessageHeaderInitializer);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.broker;SimpleBrokerMessageHandler;true;setPathMatcher;(PathMatcher);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.broker;SimpleBrokerMessageHandler;true;setSelectorHeaderName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.broker;SimpleBrokerMessageHandler;true;setSubscriptionRegistry;(SubscriptionRegistry);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.broker;SimpleBrokerMessageHandler;true;setTaskScheduler;(TaskScheduler);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.broker;SimpleBrokerMessageHandler;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.broker;SubscriptionRegistry;true;findSubscriptions;(Message);;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.config;AbstractBrokerRegistration;true;AbstractBrokerRegistration;(SubscribableChannel,MessageChannel,String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.config;AbstractBrokerRegistration;true;AbstractBrokerRegistration;(SubscribableChannel,MessageChannel,String[]);;Argument[1];Argument[-1];taint",
        "org.springframework.messaging.simp.config;AbstractBrokerRegistration;true;AbstractBrokerRegistration;(SubscribableChannel,MessageChannel,String[]);;Argument[2];Argument[-1];taint",
        "org.springframework.messaging.simp.config;AbstractMessageBrokerConfiguration;true;brokerChannel;(AbstractSubscribableChannel,AbstractSubscribableChannel,TaskExecutor);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.config;AbstractMessageBrokerConfiguration;true;brokerChannel;(AbstractSubscribableChannel,AbstractSubscribableChannel,TaskExecutor);;Argument[1];Argument[-1];taint",
        "org.springframework.messaging.simp.config;AbstractMessageBrokerConfiguration;true;brokerChannel;(AbstractSubscribableChannel,AbstractSubscribableChannel,TaskExecutor);;Argument[2];ReturnValue;taint",
        "org.springframework.messaging.simp.config;AbstractMessageBrokerConfiguration;true;brokerChannelExecutor;(AbstractSubscribableChannel,AbstractSubscribableChannel);;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.config;AbstractMessageBrokerConfiguration;true;brokerChannelExecutor;(AbstractSubscribableChannel,AbstractSubscribableChannel);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.config;AbstractMessageBrokerConfiguration;true;brokerChannelExecutor;(AbstractSubscribableChannel,AbstractSubscribableChannel);;Argument[1];Argument[-1];taint",
        "org.springframework.messaging.simp.config;AbstractMessageBrokerConfiguration;true;brokerMessagingTemplate;(AbstractSubscribableChannel,AbstractSubscribableChannel,AbstractSubscribableChannel,CompositeMessageConverter);;Argument[0];ReturnValue;taint",
        "org.springframework.messaging.simp.config;AbstractMessageBrokerConfiguration;true;brokerMessagingTemplate;(AbstractSubscribableChannel,AbstractSubscribableChannel,AbstractSubscribableChannel,CompositeMessageConverter);;Argument[1];Argument[-1];taint",
        "org.springframework.messaging.simp.config;AbstractMessageBrokerConfiguration;true;brokerMessagingTemplate;(AbstractSubscribableChannel,AbstractSubscribableChannel,AbstractSubscribableChannel,CompositeMessageConverter);;Argument[2];Argument[-1];taint",
        "org.springframework.messaging.simp.config;AbstractMessageBrokerConfiguration;true;brokerMessagingTemplate;(AbstractSubscribableChannel,AbstractSubscribableChannel,AbstractSubscribableChannel,CompositeMessageConverter);;Argument[3];ReturnValue;taint",
        "org.springframework.messaging.simp.config;AbstractMessageBrokerConfiguration;true;clientInboundChannel;(TaskExecutor);;Argument[0];ReturnValue;taint",
        "org.springframework.messaging.simp.config;AbstractMessageBrokerConfiguration;true;clientInboundChannelExecutor;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.config;AbstractMessageBrokerConfiguration;true;clientOutboundChannel;(TaskExecutor);;Argument[0];ReturnValue;taint",
        "org.springframework.messaging.simp.config;AbstractMessageBrokerConfiguration;true;clientOutboundChannelExecutor;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.config;AbstractMessageBrokerConfiguration;true;getApplicationContext;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.config;AbstractMessageBrokerConfiguration;true;getPathMatcher;(AbstractSubscribableChannel,AbstractSubscribableChannel);;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.config;AbstractMessageBrokerConfiguration;true;getPathMatcher;(AbstractSubscribableChannel,AbstractSubscribableChannel);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.config;AbstractMessageBrokerConfiguration;true;getPathMatcher;(AbstractSubscribableChannel,AbstractSubscribableChannel);;Argument[1];Argument[-1];taint",
        "org.springframework.messaging.simp.config;AbstractMessageBrokerConfiguration;true;simpAnnotationMethodMessageHandler;(AbstractSubscribableChannel,AbstractSubscribableChannel,SimpMessagingTemplate,CompositeMessageConverter);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.config;AbstractMessageBrokerConfiguration;true;simpAnnotationMethodMessageHandler;(AbstractSubscribableChannel,AbstractSubscribableChannel,SimpMessagingTemplate,CompositeMessageConverter);;Argument[0];ReturnValue;taint",
        "org.springframework.messaging.simp.config;AbstractMessageBrokerConfiguration;true;simpAnnotationMethodMessageHandler;(AbstractSubscribableChannel,AbstractSubscribableChannel,SimpMessagingTemplate,CompositeMessageConverter);;Argument[1];Argument[-1];taint",
        "org.springframework.messaging.simp.config;AbstractMessageBrokerConfiguration;true;simpAnnotationMethodMessageHandler;(AbstractSubscribableChannel,AbstractSubscribableChannel,SimpMessagingTemplate,CompositeMessageConverter);;Argument[1];ReturnValue;taint",
        "org.springframework.messaging.simp.config;AbstractMessageBrokerConfiguration;true;simpAnnotationMethodMessageHandler;(AbstractSubscribableChannel,AbstractSubscribableChannel,SimpMessagingTemplate,CompositeMessageConverter);;Argument[2];ReturnValue;taint",
        "org.springframework.messaging.simp.config;AbstractMessageBrokerConfiguration;true;simpAnnotationMethodMessageHandler;(AbstractSubscribableChannel,AbstractSubscribableChannel,SimpMessagingTemplate,CompositeMessageConverter);;Argument[3];ReturnValue;taint",
        "org.springframework.messaging.simp.config;AbstractMessageBrokerConfiguration;true;simpleBrokerMessageHandler;(AbstractSubscribableChannel,AbstractSubscribableChannel,AbstractSubscribableChannel,UserDestinationResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.config;AbstractMessageBrokerConfiguration;true;simpleBrokerMessageHandler;(AbstractSubscribableChannel,AbstractSubscribableChannel,AbstractSubscribableChannel,UserDestinationResolver);;Argument[1];Argument[-1];taint",
        "org.springframework.messaging.simp.config;AbstractMessageBrokerConfiguration;true;simpleBrokerMessageHandler;(AbstractSubscribableChannel,AbstractSubscribableChannel,AbstractSubscribableChannel,UserDestinationResolver);;Argument[2];ReturnValue;taint",
        "org.springframework.messaging.simp.config;AbstractMessageBrokerConfiguration;true;stompBrokerRelayMessageHandler;(AbstractSubscribableChannel,AbstractSubscribableChannel,AbstractSubscribableChannel,UserDestinationMessageHandler,MessageHandler,UserDestinationResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.config;AbstractMessageBrokerConfiguration;true;stompBrokerRelayMessageHandler;(AbstractSubscribableChannel,AbstractSubscribableChannel,AbstractSubscribableChannel,UserDestinationMessageHandler,MessageHandler,UserDestinationResolver);;Argument[1];Argument[-1];taint",
        "org.springframework.messaging.simp.config;AbstractMessageBrokerConfiguration;true;stompBrokerRelayMessageHandler;(AbstractSubscribableChannel,AbstractSubscribableChannel,AbstractSubscribableChannel,UserDestinationMessageHandler,MessageHandler,UserDestinationResolver);;Argument[2];ReturnValue;taint",
        "org.springframework.messaging.simp.config;AbstractMessageBrokerConfiguration;true;stompBrokerRelayMessageHandler;(AbstractSubscribableChannel,AbstractSubscribableChannel,AbstractSubscribableChannel,UserDestinationMessageHandler,MessageHandler,UserDestinationResolver);;Argument[3];ReturnValue;taint",
        "org.springframework.messaging.simp.config;AbstractMessageBrokerConfiguration;true;stompBrokerRelayMessageHandler;(AbstractSubscribableChannel,AbstractSubscribableChannel,AbstractSubscribableChannel,UserDestinationMessageHandler,MessageHandler,UserDestinationResolver);;Argument[4];ReturnValue;taint",
        "org.springframework.messaging.simp.config;AbstractMessageBrokerConfiguration;true;userDestinationMessageHandler;(AbstractSubscribableChannel,AbstractSubscribableChannel,AbstractSubscribableChannel,UserDestinationResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.config;AbstractMessageBrokerConfiguration;true;userDestinationMessageHandler;(AbstractSubscribableChannel,AbstractSubscribableChannel,AbstractSubscribableChannel,UserDestinationResolver);;Argument[0];ReturnValue;taint",
        "org.springframework.messaging.simp.config;AbstractMessageBrokerConfiguration;true;userDestinationMessageHandler;(AbstractSubscribableChannel,AbstractSubscribableChannel,AbstractSubscribableChannel,UserDestinationResolver);;Argument[1];Argument[-1];taint",
        "org.springframework.messaging.simp.config;AbstractMessageBrokerConfiguration;true;userDestinationMessageHandler;(AbstractSubscribableChannel,AbstractSubscribableChannel,AbstractSubscribableChannel,UserDestinationResolver);;Argument[2];ReturnValue;taint",
        "org.springframework.messaging.simp.config;AbstractMessageBrokerConfiguration;true;userDestinationMessageHandler;(AbstractSubscribableChannel,AbstractSubscribableChannel,AbstractSubscribableChannel,UserDestinationResolver);;Argument[3];ReturnValue;taint",
        "org.springframework.messaging.simp.config;AbstractMessageBrokerConfiguration;true;userDestinationResolver;(SimpUserRegistry,AbstractSubscribableChannel,AbstractSubscribableChannel);;Argument[0];ReturnValue;taint",
        "org.springframework.messaging.simp.config;AbstractMessageBrokerConfiguration;true;userDestinationResolver;(SimpUserRegistry,AbstractSubscribableChannel,AbstractSubscribableChannel);;Argument[1];Argument[-1];taint",
        "org.springframework.messaging.simp.config;AbstractMessageBrokerConfiguration;true;userDestinationResolver;(SimpUserRegistry,AbstractSubscribableChannel,AbstractSubscribableChannel);;Argument[2];Argument[-1];taint",
        "org.springframework.messaging.simp.config;AbstractMessageBrokerConfiguration;true;userRegistry;(AbstractSubscribableChannel,AbstractSubscribableChannel);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.config;AbstractMessageBrokerConfiguration;true;userRegistry;(AbstractSubscribableChannel,AbstractSubscribableChannel);;Argument[1];Argument[-1];taint",
        "org.springframework.messaging.simp.config;AbstractMessageBrokerConfiguration;true;userRegistryMessageHandler;(AbstractSubscribableChannel,AbstractSubscribableChannel,SimpUserRegistry,SimpMessagingTemplate,TaskScheduler);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.config;AbstractMessageBrokerConfiguration;true;userRegistryMessageHandler;(AbstractSubscribableChannel,AbstractSubscribableChannel,SimpUserRegistry,SimpMessagingTemplate,TaskScheduler);;Argument[1];Argument[-1];taint",
        "org.springframework.messaging.simp.config;AbstractMessageBrokerConfiguration;true;userRegistryMessageHandler;(AbstractSubscribableChannel,AbstractSubscribableChannel,SimpUserRegistry,SimpMessagingTemplate,TaskScheduler);;Argument[2];ReturnValue;taint",
        "org.springframework.messaging.simp.config;AbstractMessageBrokerConfiguration;true;userRegistryMessageHandler;(AbstractSubscribableChannel,AbstractSubscribableChannel,SimpUserRegistry,SimpMessagingTemplate,TaskScheduler);;Argument[3];ReturnValue;taint",
        "org.springframework.messaging.simp.config;AbstractMessageBrokerConfiguration;true;userRegistryMessageHandler;(AbstractSubscribableChannel,AbstractSubscribableChannel,SimpUserRegistry,SimpMessagingTemplate,TaskScheduler);;Argument[4];ReturnValue;taint",
        "org.springframework.messaging.simp.config;ChannelRegistration;true;interceptors;(ChannelInterceptor[]);;Argument[-1];ReturnValue;value",
        "org.springframework.messaging.simp.config;ChannelRegistration;true;interceptors;(ChannelInterceptor[]);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.config;ChannelRegistration;true;interceptors;(ChannelInterceptor[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.messaging.simp.config;ChannelRegistration;true;setInterceptors;(ChannelInterceptor[]);;Argument[-1];ReturnValue;value",
        "org.springframework.messaging.simp.config;ChannelRegistration;true;setInterceptors;(ChannelInterceptor[]);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.config;ChannelRegistration;true;setInterceptors;(ChannelInterceptor[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.messaging.simp.config;ChannelRegistration;true;taskExecutor;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.config;ChannelRegistration;true;taskExecutor;(ThreadPoolTaskExecutor);;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.config;ChannelRegistration;true;taskExecutor;(ThreadPoolTaskExecutor);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.config;ChannelRegistration;true;taskExecutor;(ThreadPoolTaskExecutor);;Argument[0];ReturnValue;taint",
        "org.springframework.messaging.simp.config;MessageBrokerRegistry;true;MessageBrokerRegistry;(SubscribableChannel,MessageChannel);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.config;MessageBrokerRegistry;true;MessageBrokerRegistry;(SubscribableChannel,MessageChannel);;Argument[1];Argument[-1];taint",
        "org.springframework.messaging.simp.config;MessageBrokerRegistry;true;configureBrokerChannel;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.config;MessageBrokerRegistry;true;enableSimpleBroker;(String[]);;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.config;MessageBrokerRegistry;true;enableSimpleBroker;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.config;MessageBrokerRegistry;true;enableSimpleBroker;(String[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.messaging.simp.config;MessageBrokerRegistry;true;enableStompBrokerRelay;(String[]);;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.config;MessageBrokerRegistry;true;enableStompBrokerRelay;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.config;MessageBrokerRegistry;true;enableStompBrokerRelay;(String[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.messaging.simp.config;MessageBrokerRegistry;true;setApplicationDestinationPrefixes;(String[]);;Argument[-1];ReturnValue;value",
        "org.springframework.messaging.simp.config;MessageBrokerRegistry;true;setApplicationDestinationPrefixes;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.config;MessageBrokerRegistry;true;setApplicationDestinationPrefixes;(String[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.messaging.simp.config;MessageBrokerRegistry;true;setCacheLimit;(int);;Argument[-1];ReturnValue;value",
        "org.springframework.messaging.simp.config;MessageBrokerRegistry;true;setPathMatcher;(PathMatcher);;Argument[-1];ReturnValue;value",
        "org.springframework.messaging.simp.config;MessageBrokerRegistry;true;setPathMatcher;(PathMatcher);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.config;MessageBrokerRegistry;true;setPathMatcher;(PathMatcher);;Argument[0];ReturnValue;taint",
        "org.springframework.messaging.simp.config;MessageBrokerRegistry;true;setPreservePublishOrder;(boolean);;Argument[-1];ReturnValue;value",
        "org.springframework.messaging.simp.config;MessageBrokerRegistry;true;setUserDestinationPrefix;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.messaging.simp.config;MessageBrokerRegistry;true;setUserDestinationPrefix;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.config;MessageBrokerRegistry;true;setUserDestinationPrefix;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.messaging.simp.config;SimpleBrokerRegistration;true;SimpleBrokerRegistration;(SubscribableChannel,MessageChannel,String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.config;SimpleBrokerRegistration;true;SimpleBrokerRegistration;(SubscribableChannel,MessageChannel,String[]);;Argument[1];Argument[-1];taint",
        "org.springframework.messaging.simp.config;SimpleBrokerRegistration;true;SimpleBrokerRegistration;(SubscribableChannel,MessageChannel,String[]);;Argument[2];Argument[-1];taint",
        "org.springframework.messaging.simp.config;SimpleBrokerRegistration;true;setHeartbeatValue;(long[]);;Argument[-1];ReturnValue;value",
        "org.springframework.messaging.simp.config;SimpleBrokerRegistration;true;setSelectorHeaderName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.config;SimpleBrokerRegistration;true;setTaskScheduler;(TaskScheduler);;Argument[-1];ReturnValue;value",
        "org.springframework.messaging.simp.config;SimpleBrokerRegistration;true;setTaskScheduler;(TaskScheduler);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.config;SimpleBrokerRegistration;true;setTaskScheduler;(TaskScheduler);;Argument[0];ReturnValue;taint",
        "org.springframework.messaging.simp.config;StompBrokerRelayRegistration;true;StompBrokerRelayRegistration;(SubscribableChannel,MessageChannel,String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.config;StompBrokerRelayRegistration;true;StompBrokerRelayRegistration;(SubscribableChannel,MessageChannel,String[]);;Argument[1];Argument[-1];taint",
        "org.springframework.messaging.simp.config;StompBrokerRelayRegistration;true;StompBrokerRelayRegistration;(SubscribableChannel,MessageChannel,String[]);;Argument[2];Argument[-1];taint",
        "org.springframework.messaging.simp.config;StompBrokerRelayRegistration;true;setAutoStartup;(boolean);;Argument[-1];ReturnValue;value",
        "org.springframework.messaging.simp.config;StompBrokerRelayRegistration;true;setClientLogin;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.messaging.simp.config;StompBrokerRelayRegistration;true;setClientLogin;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.config;StompBrokerRelayRegistration;true;setClientLogin;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.messaging.simp.config;StompBrokerRelayRegistration;true;setClientPasscode;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.messaging.simp.config;StompBrokerRelayRegistration;true;setClientPasscode;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.config;StompBrokerRelayRegistration;true;setClientPasscode;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.messaging.simp.config;StompBrokerRelayRegistration;true;setRelayHost;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.messaging.simp.config;StompBrokerRelayRegistration;true;setRelayHost;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.config;StompBrokerRelayRegistration;true;setRelayHost;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.messaging.simp.config;StompBrokerRelayRegistration;true;setRelayPort;(int);;Argument[-1];ReturnValue;value",
        "org.springframework.messaging.simp.config;StompBrokerRelayRegistration;true;setSystemHeartbeatReceiveInterval;(long);;Argument[-1];ReturnValue;value",
        "org.springframework.messaging.simp.config;StompBrokerRelayRegistration;true;setSystemHeartbeatSendInterval;(long);;Argument[-1];ReturnValue;value",
        "org.springframework.messaging.simp.config;StompBrokerRelayRegistration;true;setSystemLogin;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.messaging.simp.config;StompBrokerRelayRegistration;true;setSystemLogin;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.config;StompBrokerRelayRegistration;true;setSystemLogin;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.messaging.simp.config;StompBrokerRelayRegistration;true;setSystemPasscode;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.messaging.simp.config;StompBrokerRelayRegistration;true;setSystemPasscode;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.config;StompBrokerRelayRegistration;true;setSystemPasscode;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.messaging.simp.config;StompBrokerRelayRegistration;true;setTaskScheduler;(TaskScheduler);;Argument[-1];ReturnValue;value",
        "org.springframework.messaging.simp.config;StompBrokerRelayRegistration;true;setTaskScheduler;(TaskScheduler);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.config;StompBrokerRelayRegistration;true;setTaskScheduler;(TaskScheduler);;Argument[0];ReturnValue;taint",
        "org.springframework.messaging.simp.config;StompBrokerRelayRegistration;true;setTcpClient;(TcpOperations);;Argument[-1];ReturnValue;value",
        "org.springframework.messaging.simp.config;StompBrokerRelayRegistration;true;setTcpClient;(TcpOperations);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.config;StompBrokerRelayRegistration;true;setTcpClient;(TcpOperations);;Argument[0];ReturnValue;taint",
        "org.springframework.messaging.simp.config;StompBrokerRelayRegistration;true;setUserDestinationBroadcast;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.messaging.simp.config;StompBrokerRelayRegistration;true;setUserDestinationBroadcast;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.config;StompBrokerRelayRegistration;true;setUserDestinationBroadcast;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.messaging.simp.config;StompBrokerRelayRegistration;true;setUserRegistryBroadcast;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.messaging.simp.config;StompBrokerRelayRegistration;true;setUserRegistryBroadcast;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.config;StompBrokerRelayRegistration;true;setUserRegistryBroadcast;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.messaging.simp.config;StompBrokerRelayRegistration;true;setVirtualHost;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.messaging.simp.config;StompBrokerRelayRegistration;true;setVirtualHost;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.config;StompBrokerRelayRegistration;true;setVirtualHost;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.messaging.simp.config;TaskExecutorRegistration;true;TaskExecutorRegistration;(ThreadPoolTaskExecutor);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.config;TaskExecutorRegistration;true;corePoolSize;(int);;Argument[-1];ReturnValue;value",
        "org.springframework.messaging.simp.config;TaskExecutorRegistration;true;keepAliveSeconds;(int);;Argument[-1];ReturnValue;value",
        "org.springframework.messaging.simp.config;TaskExecutorRegistration;true;maxPoolSize;(int);;Argument[-1];ReturnValue;value",
        "org.springframework.messaging.simp.config;TaskExecutorRegistration;true;queueCapacity;(int);;Argument[-1];ReturnValue;value",
        "org.springframework.messaging.simp.stomp;BufferingStompDecoder;true;BufferingStompDecoder;(StompDecoder,int);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.stomp;BufferingStompDecoder;true;decode;(ByteBuffer);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.stomp;BufferingStompDecoder;true;decode;(ByteBuffer);;Argument[0];ReturnValue;taint",
        "org.springframework.messaging.simp.stomp;BufferingStompDecoder;true;getStompDecoder;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.stomp;ConnectionHandlingStompSession;true;getSessionFuture;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.stomp;DefaultStompSession;true;DefaultStompSession;(StompSessionHandler,StompHeaders);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.stomp;DefaultStompSession;true;DefaultStompSession;(StompSessionHandler,StompHeaders);;Argument[1];Argument[-1];taint",
        "org.springframework.messaging.simp.stomp;DefaultStompSession;true;getMessageConverter;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.stomp;DefaultStompSession;true;getSessionHandler;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.stomp;DefaultStompSession;true;getTaskScheduler;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.stomp;DefaultStompSession;true;setMessageConverter;(MessageConverter);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.stomp;DefaultStompSession;true;setTaskScheduler;(TaskScheduler);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.stomp;ReactorNettyTcpStompClient;true;ReactorNettyTcpStompClient;(TcpOperations);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.stomp;ReactorNettyTcpStompClient;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.stomp;StompBrokerRelayMessageHandler;true;StompBrokerRelayMessageHandler;(SubscribableChannel,MessageChannel,SubscribableChannel,Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.stomp;StompBrokerRelayMessageHandler;true;StompBrokerRelayMessageHandler;(SubscribableChannel,MessageChannel,SubscribableChannel,Collection);;Argument[1];Argument[-1];taint",
        "org.springframework.messaging.simp.stomp;StompBrokerRelayMessageHandler;true;StompBrokerRelayMessageHandler;(SubscribableChannel,MessageChannel,SubscribableChannel,Collection);;Argument[2];Argument[-1];taint",
        "org.springframework.messaging.simp.stomp;StompBrokerRelayMessageHandler;true;StompBrokerRelayMessageHandler;(SubscribableChannel,MessageChannel,SubscribableChannel,Collection);;Argument[3];Argument[-1];taint",
        "org.springframework.messaging.simp.stomp;StompBrokerRelayMessageHandler;true;getClientLogin;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.stomp;StompBrokerRelayMessageHandler;true;getClientPasscode;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.stomp;StompBrokerRelayMessageHandler;true;getHeaderInitializer;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.stomp;StompBrokerRelayMessageHandler;true;getRelayHost;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.stomp;StompBrokerRelayMessageHandler;true;getStats;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.stomp;StompBrokerRelayMessageHandler;true;getSystemLogin;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.stomp;StompBrokerRelayMessageHandler;true;getSystemPasscode;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.stomp;StompBrokerRelayMessageHandler;true;getSystemSubscriptions;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.stomp;StompBrokerRelayMessageHandler;true;getTaskScheduler;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.stomp;StompBrokerRelayMessageHandler;true;getTcpClient;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.stomp;StompBrokerRelayMessageHandler;true;getVirtualHost;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.stomp;StompBrokerRelayMessageHandler;true;setClientLogin;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.stomp;StompBrokerRelayMessageHandler;true;setClientPasscode;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.stomp;StompBrokerRelayMessageHandler;true;setHeaderInitializer;(MessageHeaderInitializer);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.stomp;StompBrokerRelayMessageHandler;true;setRelayHost;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.stomp;StompBrokerRelayMessageHandler;true;setSystemLogin;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.stomp;StompBrokerRelayMessageHandler;true;setSystemPasscode;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.stomp;StompBrokerRelayMessageHandler;true;setSystemSubscriptions;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.stomp;StompBrokerRelayMessageHandler;true;setTaskScheduler;(TaskScheduler);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.stomp;StompBrokerRelayMessageHandler;true;setTcpClient;(TcpOperations);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.stomp;StompBrokerRelayMessageHandler;true;setVirtualHost;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.stomp;StompBrokerRelayMessageHandler;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.stomp;StompClientSupport;true;getMessageConverter;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.stomp;StompClientSupport;true;getTaskScheduler;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.stomp;StompClientSupport;true;setMessageConverter;(MessageConverter);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.stomp;StompClientSupport;true;setTaskScheduler;(TaskScheduler);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.stomp;StompDecoder;true;decode;(ByteBuffer);;Argument[0];ReturnValue;taint",
        "org.springframework.messaging.simp.stomp;StompDecoder;true;decode;(ByteBuffer,MultiValueMap);;Argument[0];ReturnValue;taint",
        "org.springframework.messaging.simp.stomp;StompDecoder;true;getHeaderInitializer;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.stomp;StompDecoder;true;setHeaderInitializer;(MessageHeaderInitializer);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.stomp;StompEncoder;true;encode;(Map,byte[]);;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.stomp;StompEncoder;true;encode;(Map,byte[]);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.stomp;StompEncoder;true;encode;(Map,byte[]);;Argument[1];ReturnValue;taint",
        "org.springframework.messaging.simp.stomp;StompEncoder;true;encode;(Map,byte[]);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.messaging.simp.stomp;StompEncoder;true;encode;(Message);;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.stomp;StompHeaderAccessor;true;create;(StompCommand,Map);;Element of Argument[1];ReturnValue;taint",
        "org.springframework.messaging.simp.stomp;StompHeaderAccessor;true;getAcceptVersion;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.stomp;StompHeaderAccessor;true;getAck;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.stomp;StompHeaderAccessor;true;getHost;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.stomp;StompHeaderAccessor;true;getLogin;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.stomp;StompHeaderAccessor;true;getMessage;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.stomp;StompHeaderAccessor;true;getMessageId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.stomp;StompHeaderAccessor;true;getNack;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.stomp;StompHeaderAccessor;true;getPasscode;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.stomp;StompHeaderAccessor;true;getReceipt;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.stomp;StompHeaderAccessor;true;getReceiptId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.stomp;StompHeaderAccessor;true;getVersion;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.stomp;StompHeaders;true;getAcceptVersion;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.stomp;StompHeaders;true;getAck;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.stomp;StompHeaders;true;getContentType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.stomp;StompHeaders;true;getDestination;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.stomp;StompHeaders;true;getHost;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.stomp;StompHeaders;true;getId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.stomp;StompHeaders;true;getLogin;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.stomp;StompHeaders;true;getMessageId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.stomp;StompHeaders;true;getPasscode;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.stomp;StompHeaders;true;getReceipt;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.stomp;StompHeaders;true;getReceiptId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.stomp;StompHeaders;true;getServer;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.stomp;StompHeaders;true;getSession;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.stomp;StompHeaders;true;getSubscription;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.stomp;StompHeaders;true;setAcceptVersion;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.stomp;StompHeaders;true;setAck;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.stomp;StompHeaders;true;setDestination;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.stomp;StompHeaders;true;setHost;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.stomp;StompHeaders;true;setId;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.stomp;StompHeaders;true;setLogin;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.stomp;StompHeaders;true;setMessageId;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.stomp;StompHeaders;true;setPasscode;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.stomp;StompHeaders;true;setReceipt;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.stomp;StompHeaders;true;setReceiptId;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.stomp;StompHeaders;true;setServer;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.stomp;StompHeaders;true;setSession;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.stomp;StompHeaders;true;setSubscription;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.stomp;StompHeaders;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.stomp;StompReactorNettyCodec;true;StompReactorNettyCodec;(StompDecoder);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.stomp;StompReactorNettyCodec;true;StompReactorNettyCodec;(StompDecoder,StompEncoder);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.stomp;StompReactorNettyCodec;true;StompReactorNettyCodec;(StompDecoder,StompEncoder);;Argument[1];Argument[-1];taint",
        "org.springframework.messaging.simp.stomp;StompSession$Receiptable;true;addReceiptLostTask;(Runnable);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.stomp;StompSession$Receiptable;true;addReceiptTask;(Runnable);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.stomp;StompSession$Receiptable;true;getReceiptId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.stomp;StompSession$Subscription;true;getSubscriptionHeaders;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.stomp;StompSession$Subscription;true;getSubscriptionId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.stomp;StompSession;true;acknowledge;(StompHeaders,boolean);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.messaging.simp.stomp;StompSession;true;acknowledge;(String,boolean);;Argument[0];ReturnValue;taint",
        "org.springframework.messaging.simp.stomp;StompSession;true;getSessionId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.stomp;StompSession;true;send;(StompHeaders,Object);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.messaging.simp.stomp;StompSession;true;send;(String,Object);;Argument[0];ReturnValue;taint",
        "org.springframework.messaging.simp.stomp;StompSession;true;subscribe;(StompHeaders,StompFrameHandler);;Argument[1];ReturnValue;taint",
        "org.springframework.messaging.simp.stomp;StompSession;true;subscribe;(StompHeaders,StompFrameHandler);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.messaging.simp.stomp;StompSession;true;subscribe;(String,StompFrameHandler);;Argument[0];ReturnValue;taint",
        "org.springframework.messaging.simp.stomp;StompSession;true;subscribe;(String,StompFrameHandler);;Argument[1];ReturnValue;taint",
        "org.springframework.messaging.simp.stomp;StompTcpConnectionHandler<byte[]>;true;getSessionId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.user;DefaultUserDestinationResolver;true;DefaultUserDestinationResolver;(SimpUserRegistry);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.user;DefaultUserDestinationResolver;true;getDestinationPrefix;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.user;DefaultUserDestinationResolver;true;getSimpUserRegistry;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.user;DefaultUserDestinationResolver;true;setUserDestinationPrefix;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.user;DefaultUserDestinationResolver;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.user;MultiServerUserRegistry;true;MultiServerUserRegistry;(SimpUserRegistry);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.user;MultiServerUserRegistry;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.user;SimpSession;true;getId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.user;SimpSession;true;getSubscriptions;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.user;SimpSession;true;getUser;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.user;SimpSubscription;true;getDestination;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.user;SimpSubscription;true;getId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.user;SimpSubscription;true;getSession;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.user;SimpUser;true;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.user;SimpUser;true;getPrincipal;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.user;SimpUser;true;getSession;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.user;SimpUser;true;getSessions;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.user;SimpUserRegistry;true;findSubscriptions;(SimpSubscriptionMatcher);;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.user;SimpUserRegistry;true;getUser;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.user;SimpUserRegistry;true;getUsers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.user;UserDestinationMessageHandler;true;UserDestinationMessageHandler;(SubscribableChannel,SubscribableChannel,UserDestinationResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.user;UserDestinationMessageHandler;true;UserDestinationMessageHandler;(SubscribableChannel,SubscribableChannel,UserDestinationResolver);;Argument[1];Argument[-1];taint",
        "org.springframework.messaging.simp.user;UserDestinationMessageHandler;true;UserDestinationMessageHandler;(SubscribableChannel,SubscribableChannel,UserDestinationResolver);;Argument[2];Argument[-1];taint",
        "org.springframework.messaging.simp.user;UserDestinationMessageHandler;true;getBroadcastDestination;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.user;UserDestinationMessageHandler;true;getBrokerMessagingTemplate;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.user;UserDestinationMessageHandler;true;getHeaderInitializer;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.user;UserDestinationMessageHandler;true;getUserDestinationResolver;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.user;UserDestinationMessageHandler;true;setBroadcastDestination;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.user;UserDestinationMessageHandler;true;setHeaderInitializer;(MessageHeaderInitializer);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.user;UserDestinationMessageHandler;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.user;UserDestinationResult;true;UserDestinationResult;(String,Set,String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.user;UserDestinationResult;true;UserDestinationResult;(String,Set,String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.messaging.simp.user;UserDestinationResult;true;UserDestinationResult;(String,Set,String,String);;Argument[2];Argument[-1];taint",
        "org.springframework.messaging.simp.user;UserDestinationResult;true;UserDestinationResult;(String,Set,String,String);;Argument[3];Argument[-1];taint",
        "org.springframework.messaging.simp.user;UserDestinationResult;true;getSourceDestination;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.user;UserDestinationResult;true;getSubscribeDestination;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.user;UserDestinationResult;true;getTargetDestinations;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.user;UserDestinationResult;true;getUser;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.user;UserDestinationResult;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp.user;UserRegistryMessageHandler;true;UserRegistryMessageHandler;(MultiServerUserRegistry,SimpMessagingTemplate,String,TaskScheduler);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp.user;UserRegistryMessageHandler;true;UserRegistryMessageHandler;(MultiServerUserRegistry,SimpMessagingTemplate,String,TaskScheduler);;Argument[1];Argument[-1];taint",
        "org.springframework.messaging.simp.user;UserRegistryMessageHandler;true;UserRegistryMessageHandler;(MultiServerUserRegistry,SimpMessagingTemplate,String,TaskScheduler);;Argument[2];Argument[-1];taint",
        "org.springframework.messaging.simp.user;UserRegistryMessageHandler;true;UserRegistryMessageHandler;(MultiServerUserRegistry,SimpMessagingTemplate,String,TaskScheduler);;Argument[3];Argument[-1];taint",
        "org.springframework.messaging.simp.user;UserRegistryMessageHandler;true;getBroadcastDestination;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp;SimpAttributes;true;SimpAttributes;(String,Map);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp;SimpAttributes;true;SimpAttributes;(String,Map);;Argument[1];Argument[-1];taint",
        "org.springframework.messaging.simp;SimpAttributes;true;getAttribute;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp;SimpAttributes;true;getAttributeNames;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp;SimpAttributes;true;getSessionId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp;SimpAttributes;true;getSessionMutex;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp;SimpAttributes;true;registerDestructionCallback;(String,Runnable);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp;SimpAttributes;true;registerDestructionCallback;(String,Runnable);;Argument[1];Argument[-1];taint",
        "org.springframework.messaging.simp;SimpAttributes;true;setAttribute;(String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp;SimpAttributes;true;setAttribute;(String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.messaging.simp;SimpLogging;true;forLog;(Log);;Argument[0];ReturnValue;taint",
        "org.springframework.messaging.simp;SimpMessageHeaderAccessor;true;getDestination;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp;SimpMessageHeaderAccessor;true;getDestination;(Map);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.messaging.simp;SimpMessageHeaderAccessor;true;getSessionAttributes;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp;SimpMessageHeaderAccessor;true;getSessionAttributes;(Map);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.messaging.simp;SimpMessageHeaderAccessor;true;getSessionId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp;SimpMessageHeaderAccessor;true;getSessionId;(Map);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.messaging.simp;SimpMessageHeaderAccessor;true;getSubscriptionId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp;SimpMessageHeaderAccessor;true;getSubscriptionId;(Map);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.messaging.simp;SimpMessageHeaderAccessor;true;getUser;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp;SimpMessageHeaderAccessor;true;getUser;(Map);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.messaging.simp;SimpMessageHeaderAccessor;true;setDestination;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp;SimpMessageHeaderAccessor;true;setSessionAttributes;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp;SimpMessageHeaderAccessor;true;setSessionId;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp;SimpMessageHeaderAccessor;true;setSubscriptionId;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp;SimpMessageHeaderAccessor;true;setUser;(Principal);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp;SimpMessageHeaderAccessor;true;setUserChangeCallback;(Consumer);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp;SimpMessageMappingInfo;true;SimpMessageMappingInfo;(SimpMessageTypeMessageCondition,DestinationPatternsMessageCondition);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp;SimpMessageMappingInfo;true;SimpMessageMappingInfo;(SimpMessageTypeMessageCondition,DestinationPatternsMessageCondition);;Argument[1];Argument[-1];taint",
        "org.springframework.messaging.simp;SimpMessageMappingInfo;true;getDestinationConditions;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp;SimpMessageMappingInfo;true;getMessageTypeMessageCondition;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp;SimpMessageSendingOperations;true;convertAndSendToUser;(String,String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp;SimpMessageSendingOperations;true;convertAndSendToUser;(String,String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.messaging.simp;SimpMessageSendingOperations;true;convertAndSendToUser;(String,String,Object);;Argument[2];Argument[-1];taint",
        "org.springframework.messaging.simp;SimpMessageSendingOperations;true;convertAndSendToUser;(String,String,Object,Map);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp;SimpMessageSendingOperations;true;convertAndSendToUser;(String,String,Object,Map);;Argument[1];Argument[-1];taint",
        "org.springframework.messaging.simp;SimpMessageSendingOperations;true;convertAndSendToUser;(String,String,Object,Map);;Argument[2];Argument[-1];taint",
        "org.springframework.messaging.simp;SimpMessageSendingOperations;true;convertAndSendToUser;(String,String,Object,Map,MessagePostProcessor);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp;SimpMessageSendingOperations;true;convertAndSendToUser;(String,String,Object,Map,MessagePostProcessor);;Argument[1];Argument[-1];taint",
        "org.springframework.messaging.simp;SimpMessageSendingOperations;true;convertAndSendToUser;(String,String,Object,Map,MessagePostProcessor);;Argument[2];Argument[-1];taint",
        "org.springframework.messaging.simp;SimpMessageSendingOperations;true;convertAndSendToUser;(String,String,Object,MessagePostProcessor);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp;SimpMessageSendingOperations;true;convertAndSendToUser;(String,String,Object,MessagePostProcessor);;Argument[1];Argument[-1];taint",
        "org.springframework.messaging.simp;SimpMessageSendingOperations;true;convertAndSendToUser;(String,String,Object,MessagePostProcessor);;Argument[2];Argument[-1];taint",
        "org.springframework.messaging.simp;SimpMessagingTemplate;true;SimpMessagingTemplate;(MessageChannel);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp;SimpMessagingTemplate;true;getHeaderInitializer;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp;SimpMessagingTemplate;true;getMessageChannel;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp;SimpMessagingTemplate;true;getUserDestinationPrefix;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.simp;SimpMessagingTemplate;true;setHeaderInitializer;(MessageHeaderInitializer);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.simp;SimpMessagingTemplate;true;setUserDestinationPrefix;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.support;AbstractHeaderMapper;true;setInboundPrefix;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.support;AbstractHeaderMapper;true;setOutboundPrefix;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.support;AbstractMessageChannel;true;getBeanName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.support;AbstractMessageChannel;true;getLogger;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.support;AbstractMessageChannel;true;setLogger;(Log);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.support;AbstractMessageChannel;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.support;AbstractSubscribableChannel;true;getSubscribers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.support;ChannelInterceptor;true;postReceive;(Message,MessageChannel);;Argument[0];ReturnValue;taint",
        "org.springframework.messaging.support;ChannelInterceptor;true;preSend;(Message,MessageChannel);;Argument[0];ReturnValue;taint",
        "org.springframework.messaging.support;ErrorMessage;true;ErrorMessage;(Throwable);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.support;ErrorMessage;true;ErrorMessage;(Throwable,Map);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.support;ErrorMessage;true;ErrorMessage;(Throwable,Map);;Argument[1];Argument[-1];taint",
        "org.springframework.messaging.support;ErrorMessage;true;ErrorMessage;(Throwable,Map,Message);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.support;ErrorMessage;true;ErrorMessage;(Throwable,Map,Message);;Argument[1];Argument[-1];taint",
        "org.springframework.messaging.support;ErrorMessage;true;ErrorMessage;(Throwable,Map,Message);;Argument[2];Argument[-1];taint",
        "org.springframework.messaging.support;ErrorMessage;true;ErrorMessage;(Throwable,Message);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.support;ErrorMessage;true;ErrorMessage;(Throwable,Message);;Argument[1];Argument[-1];taint",
        "org.springframework.messaging.support;ErrorMessage;true;ErrorMessage;(Throwable,MessageHeaders);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.support;ErrorMessage;true;ErrorMessage;(Throwable,MessageHeaders);;Argument[1];Argument[-1];taint",
        "org.springframework.messaging.support;ErrorMessage;true;ErrorMessage;(Throwable,MessageHeaders,Message);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.support;ErrorMessage;true;ErrorMessage;(Throwable,MessageHeaders,Message);;Argument[1];Argument[-1];taint",
        "org.springframework.messaging.support;ErrorMessage;true;ErrorMessage;(Throwable,MessageHeaders,Message);;Argument[2];Argument[-1];taint",
        "org.springframework.messaging.support;ErrorMessage;true;getOriginalMessage;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.support;ErrorMessage;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.support;ExecutorChannelInterceptor;true;beforeHandle;(Message,MessageChannel,MessageHandler);;Argument[0];ReturnValue;taint",
        "org.springframework.messaging.support;ExecutorSubscribableChannel;true;ExecutorSubscribableChannel;(Executor);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.support;ExecutorSubscribableChannel;true;getExecutor;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.support;GenericMessage;true;GenericMessage;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.support;GenericMessage;true;GenericMessage;(Object,Map);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.support;GenericMessage;true;GenericMessage;(Object,Map);;Argument[1];Argument[-1];taint",
        "org.springframework.messaging.support;GenericMessage;true;GenericMessage;(Object,MessageHeaders);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.support;GenericMessage;true;GenericMessage;(Object,MessageHeaders);;Argument[1];Argument[-1];taint",
        "org.springframework.messaging.support;GenericMessage;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.support;IdTimestampMessageHeaderInitializer;true;getIdGenerator;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.support;IdTimestampMessageHeaderInitializer;true;setIdGenerator;(IdGenerator);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.support;InterceptableChannel;true;addInterceptor;(ChannelInterceptor);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.support;InterceptableChannel;true;addInterceptor;(int,ChannelInterceptor);;Argument[1];Argument[-1];taint",
        "org.springframework.messaging.support;InterceptableChannel;true;getInterceptors;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.support;InterceptableChannel;true;removeInterceptor;(int);;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.support;InterceptableChannel;true;setInterceptors;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.support;MessageBuilder;false;build;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.support;MessageBuilder;false;copyHeaders;(Map);;Argument[-1];ReturnValue;value",
        "org.springframework.messaging.support;MessageBuilder;false;copyHeadersIfAbsent;(Map);;Argument[-1];ReturnValue;value",
        "org.springframework.messaging.support;MessageBuilder;false;createMessage;(Object,MessageHeaders);;Argument[0];ReturnValue;taint",
        "org.springframework.messaging.support;MessageBuilder;false;createMessage;(Object,MessageHeaders);;Element of Argument[1];ReturnValue;taint",
        "org.springframework.messaging.support;MessageBuilder;false;fromMessage;(Message);;Argument[0];ReturnValue;taint",
        "org.springframework.messaging.support;MessageBuilder;false;removeHeader;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.messaging.support;MessageBuilder;false;removeHeader;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.support;MessageBuilder;false;removeHeader;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.messaging.support;MessageBuilder;false;removeHeaders;(String[]);;Argument[-1];ReturnValue;value",
        "org.springframework.messaging.support;MessageBuilder;false;removeHeaders;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.support;MessageBuilder;false;removeHeaders;(String[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.messaging.support;MessageBuilder;false;setErrorChannel;(MessageChannel);;Argument[-1];ReturnValue;value",
        "org.springframework.messaging.support;MessageBuilder;false;setErrorChannel;(MessageChannel);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.support;MessageBuilder;false;setErrorChannel;(MessageChannel);;Argument[0];ReturnValue;taint",
        "org.springframework.messaging.support;MessageBuilder;false;setErrorChannelName;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.messaging.support;MessageBuilder;false;setErrorChannelName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.support;MessageBuilder;false;setErrorChannelName;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.messaging.support;MessageBuilder;false;setHeader;(String,Object);;Argument[-1];ReturnValue;value",
        "org.springframework.messaging.support;MessageBuilder;false;setHeader;(String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.support;MessageBuilder;false;setHeader;(String,Object);;Argument[0];ReturnValue;taint",
        "org.springframework.messaging.support;MessageBuilder;false;setHeader;(String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.messaging.support;MessageBuilder;false;setHeader;(String,Object);;Argument[1];ReturnValue;taint",
        "org.springframework.messaging.support;MessageBuilder;false;setHeaderIfAbsent;(String,Object);;Argument[-1];ReturnValue;value",
        "org.springframework.messaging.support;MessageBuilder;false;setHeaderIfAbsent;(String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.support;MessageBuilder;false;setHeaderIfAbsent;(String,Object);;Argument[0];ReturnValue;taint",
        "org.springframework.messaging.support;MessageBuilder;false;setHeaderIfAbsent;(String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.messaging.support;MessageBuilder;false;setHeaderIfAbsent;(String,Object);;Argument[1];ReturnValue;taint",
        "org.springframework.messaging.support;MessageBuilder;false;setHeaders;(MessageHeaderAccessor);;Argument[-1];ReturnValue;value",
        "org.springframework.messaging.support;MessageBuilder;false;setHeaders;(MessageHeaderAccessor);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.support;MessageBuilder;false;setHeaders;(MessageHeaderAccessor);;Argument[0];ReturnValue;taint",
        "org.springframework.messaging.support;MessageBuilder;false;setReplyChannel;(MessageChannel);;Argument[-1];ReturnValue;value",
        "org.springframework.messaging.support;MessageBuilder;false;setReplyChannel;(MessageChannel);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.support;MessageBuilder;false;setReplyChannel;(MessageChannel);;Argument[0];ReturnValue;taint",
        "org.springframework.messaging.support;MessageBuilder;false;setReplyChannelName;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.messaging.support;MessageBuilder;false;setReplyChannelName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.support;MessageBuilder;false;setReplyChannelName;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.messaging.support;MessageBuilder;false;withPayload;(Object);;Argument[0];ReturnValue;taint",
        "org.springframework.messaging.support;MessageHandlingRunnable;true;getMessage;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.support;MessageHandlingRunnable;true;getMessageHandler;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.support;MessageHeaderAccessor;true;getContentType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.support;MessageHeaderAccessor;true;getDetailedLogMessage;(Object);;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.support;MessageHeaderAccessor;true;getDetailedLogMessage;(Object);;Argument[0];ReturnValue;taint",
        "org.springframework.messaging.support;MessageHeaderAccessor;true;getErrorChannel;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.support;MessageHeaderAccessor;true;getHeader;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.support;MessageHeaderAccessor;true;getId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.support;MessageHeaderAccessor;true;getMessageHeaders;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.support;MessageHeaderAccessor;true;getReplyChannel;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.support;MessageHeaderAccessor;true;getShortLogMessage;(Object);;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.support;MessageHeaderAccessor;true;getShortLogMessage;(Object);;Argument[0];ReturnValue;taint",
        "org.springframework.messaging.support;MessageHeaderAccessor;true;removeHeader;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.support;MessageHeaderAccessor;true;removeHeaders;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.support;MessageHeaderAccessor;true;setContentType;(MimeType);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.support;MessageHeaderAccessor;true;setErrorChannel;(MessageChannel);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.support;MessageHeaderAccessor;true;setErrorChannelName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.support;MessageHeaderAccessor;true;setHeader;(String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.support;MessageHeaderAccessor;true;setHeader;(String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.messaging.support;MessageHeaderAccessor;true;setHeaderIfAbsent;(String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.support;MessageHeaderAccessor;true;setHeaderIfAbsent;(String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.messaging.support;MessageHeaderAccessor;true;setReplyChannel;(MessageChannel);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.support;MessageHeaderAccessor;true;setReplyChannelName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.support;MessageHeaderAccessor;true;toMap;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.support;MessageHeaderAccessor;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.support;NativeMessageHeaderAccessor;true;getFirstNativeHeader;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.support;NativeMessageHeaderAccessor;true;getFirstNativeHeader;(String,Map);;Element of Argument[1];ReturnValue;taint",
        "org.springframework.messaging.support;NativeMessageHeaderAccessor;true;getNativeHeader;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.support;NativeMessageHeaderAccessor;true;removeNativeHeader;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.support;NativeMessageHeaderAccessor;true;toNativeHeaderMap;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.tcp.reactor;ReactorNettyTcpClient;true;ReactorNettyTcpClient;(Function,ReactorNettyCodec);;Argument[1];Argument[-1];taint",
        "org.springframework.messaging.tcp.reactor;ReactorNettyTcpClient;true;ReactorNettyTcpClient;(String,int,ReactorNettyCodec);;Argument[2];Argument[-1];taint",
        "org.springframework.messaging.tcp.reactor;ReactorNettyTcpClient;true;ReactorNettyTcpClient;(TcpClient,ReactorNettyCodec);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.tcp.reactor;ReactorNettyTcpClient;true;ReactorNettyTcpClient;(TcpClient,ReactorNettyCodec);;Argument[1];Argument[-1];taint",
        "org.springframework.messaging.tcp.reactor;ReactorNettyTcpClient;true;getLogger;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.tcp.reactor;ReactorNettyTcpClient;true;setLogger;(Log);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.tcp.reactor;ReactorNettyTcpClient;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging.tcp.reactor;ReactorNettyTcpConnection;true;ReactorNettyTcpConnection;(NettyInbound,NettyOutbound,ReactorNettyCodec,Empty);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging.tcp.reactor;ReactorNettyTcpConnection;true;ReactorNettyTcpConnection;(NettyInbound,NettyOutbound,ReactorNettyCodec,Empty);;Argument[1];Argument[-1];taint",
        "org.springframework.messaging.tcp.reactor;ReactorNettyTcpConnection;true;ReactorNettyTcpConnection;(NettyInbound,NettyOutbound,ReactorNettyCodec,Empty);;Argument[2];Argument[-1];taint",
        "org.springframework.messaging.tcp.reactor;ReactorNettyTcpConnection;true;ReactorNettyTcpConnection;(NettyInbound,NettyOutbound,ReactorNettyCodec,Empty);;Argument[3];Argument[-1];taint",
        "org.springframework.messaging;MessageChannel;true;send;(Message);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging;MessageChannel;true;send;(Message,long);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging;MessageDeliveryException;true;MessageDeliveryException;(Message);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging;MessageDeliveryException;true;MessageDeliveryException;(Message,String);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging;MessageDeliveryException;true;MessageDeliveryException;(Message,String,Throwable);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging;MessageDeliveryException;true;MessageDeliveryException;(Message,Throwable);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging;MessageHandler;true;handleMessage;(Message);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging;MessageHandlingException;true;MessageHandlingException;(Message);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging;MessageHandlingException;true;MessageHandlingException;(Message,String);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging;MessageHandlingException;true;MessageHandlingException;(Message,String,Throwable);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging;MessageHandlingException;true;MessageHandlingException;(Message,Throwable);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging;MessageHeaders;true;MessageHeaders;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging;MessageHeaders;true;get;(Object,Class);;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging;MessageHeaders;true;getErrorChannel;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging;MessageHeaders;true;getId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging;MessageHeaders;true;getRawHeaders;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging;MessageHeaders;true;getReplyChannel;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging;MessageHeaders;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging;MessagingException;true;MessagingException;(Message);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging;MessagingException;true;MessagingException;(Message,String);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging;MessagingException;true;MessagingException;(Message,String,Throwable);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging;MessagingException;true;MessagingException;(Message,Throwable);;Argument[0];Argument[-1];taint",
        "org.springframework.messaging;MessagingException;true;getFailedMessage;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging;MessagingException;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging;PollableChannel;true;receive;();;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging;PollableChannel;true;receive;(long);;Argument[-1];ReturnValue;taint",
        "org.springframework.messaging;SubscribableChannel;true;subscribe;(MessageHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.env;MockPropertySource;true;MockPropertySource;(Properties);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.env;MockPropertySource;true;MockPropertySource;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.env;MockPropertySource;true;MockPropertySource;(String,Properties);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.env;MockPropertySource;true;MockPropertySource;(String,Properties);;Argument[1];Argument[-1];taint",
        "org.springframework.mock.env;MockPropertySource;true;setProperty;(String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.env;MockPropertySource;true;setProperty;(String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.mock.env;MockPropertySource;true;withProperty;(String,Object);;Argument[-1];ReturnValue;value",
        "org.springframework.mock.env;MockPropertySource;true;withProperty;(String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.env;MockPropertySource;true;withProperty;(String,Object);;Argument[0];ReturnValue;taint",
        "org.springframework.mock.env;MockPropertySource;true;withProperty;(String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.mock.env;MockPropertySource;true;withProperty;(String,Object);;Argument[1];ReturnValue;taint",
        "org.springframework.mock.http.client.reactive;MockClientHttpRequest;true;MockClientHttpRequest;(HttpMethod,String,Object[]);;Argument[1];Argument[-1];taint",
        "org.springframework.mock.http.client.reactive;MockClientHttpRequest;true;MockClientHttpRequest;(HttpMethod,String,Object[]);;Argument[2];Argument[-1];taint",
        "org.springframework.mock.http.client.reactive;MockClientHttpRequest;true;MockClientHttpRequest;(HttpMethod,URI);;Argument[1];Argument[-1];taint",
        "org.springframework.mock.http.client.reactive;MockClientHttpRequest;true;getBody;();;Argument[-1];ReturnValue;taint",
        "org.springframework.mock.http.client.reactive;MockClientHttpRequest;true;setWriteHandler;(Function);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.http.client.reactive;MockClientHttpResponse;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.mock.http.client;MockAsyncClientHttpRequest;true;MockAsyncClientHttpRequest;(HttpMethod,URI);;Argument[1];Argument[-1];taint",
        "org.springframework.mock.http.client;MockClientHttpRequest;true;MockClientHttpRequest;(HttpMethod,URI);;Argument[1];Argument[-1];taint",
        "org.springframework.mock.http.client;MockClientHttpRequest;true;setResponse;(ClientHttpResponse);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.http.client;MockClientHttpRequest;true;setURI;(URI);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.http.client;MockClientHttpRequest;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.mock.http.client;MockClientHttpResponse;true;MockClientHttpResponse;(InputStream,HttpStatus);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.http.client;MockClientHttpResponse;true;MockClientHttpResponse;(byte[],HttpStatus);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.http.server.reactive;MockServerHttpRequest$BodyBuilder;true;contentLength;(long);;Argument[-1];ReturnValue;value",
        "org.springframework.mock.http.server.reactive;MockServerHttpRequest$BodyBuilder;true;contentType;(MediaType);;Argument[-1];ReturnValue;value",
        "org.springframework.mock.http.server.reactive;MockServerHttpRequest;false;delete;(String,Object[]);;Argument[0];ReturnValue;taint",
        "org.springframework.mock.http.server.reactive;MockServerHttpRequest;false;delete;(String,Object[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.mock.http.server.reactive;MockServerHttpRequest;false;get;(String,Object[]);;Argument[0];ReturnValue;taint",
        "org.springframework.mock.http.server.reactive;MockServerHttpRequest;false;get;(String,Object[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.mock.http.server.reactive;MockServerHttpRequest;false;head;(String,Object[]);;Argument[0];ReturnValue;taint",
        "org.springframework.mock.http.server.reactive;MockServerHttpRequest;false;head;(String,Object[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.mock.http.server.reactive;MockServerHttpRequest;false;method;(HttpMethod,String,Object[]);;Argument[1];ReturnValue;taint",
        "org.springframework.mock.http.server.reactive;MockServerHttpRequest;false;method;(HttpMethod,String,Object[]);;ArrayElement of Argument[2];ReturnValue;taint",
        "org.springframework.mock.http.server.reactive;MockServerHttpRequest;false;method;(HttpMethod,URI);;Argument[1];ReturnValue;taint",
        "org.springframework.mock.http.server.reactive;MockServerHttpRequest;false;method;(String,String,Object[]);;Argument[0];ReturnValue;taint",
        "org.springframework.mock.http.server.reactive;MockServerHttpRequest;false;method;(String,String,Object[]);;Argument[1];ReturnValue;taint",
        "org.springframework.mock.http.server.reactive;MockServerHttpRequest;false;method;(String,String,Object[]);;ArrayElement of Argument[2];ReturnValue;taint",
        "org.springframework.mock.http.server.reactive;MockServerHttpRequest;false;options;(String,Object[]);;Argument[0];ReturnValue;taint",
        "org.springframework.mock.http.server.reactive;MockServerHttpRequest;false;options;(String,Object[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.mock.http.server.reactive;MockServerHttpRequest;false;patch;(String,Object[]);;Argument[0];ReturnValue;taint",
        "org.springframework.mock.http.server.reactive;MockServerHttpRequest;false;patch;(String,Object[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.mock.http.server.reactive;MockServerHttpRequest;false;post;(String,Object[]);;Argument[0];ReturnValue;taint",
        "org.springframework.mock.http.server.reactive;MockServerHttpRequest;false;post;(String,Object[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.mock.http.server.reactive;MockServerHttpRequest;false;put;(String,Object[]);;Argument[0];ReturnValue;taint",
        "org.springframework.mock.http.server.reactive;MockServerHttpRequest;false;put;(String,Object[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.mock.http.server.reactive;MockServerHttpResponse;true;MockServerHttpResponse;(DataBufferFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.http.server.reactive;MockServerHttpResponse;true;getBody;();;Argument[-1];ReturnValue;taint",
        "org.springframework.mock.http.server.reactive;MockServerHttpResponse;true;setWriteHandler;(Function);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.http;MockHttpInputMessage;true;MockHttpInputMessage;(InputStream);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.http;MockHttpInputMessage;true;MockHttpInputMessage;(byte[]);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.http;MockHttpOutputMessage;true;getBodyAsBytes;();;Argument[-1];ReturnValue;taint",
        "org.springframework.mock.http;MockHttpOutputMessage;true;getBodyAsString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.mock.http;MockHttpOutputMessage;true;getBodyAsString;(Charset);;Argument[-1];ReturnValue;taint",
        "org.springframework.mock.jndi;ExpectedLookupTemplate;true;ExpectedLookupTemplate;(String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.jndi;ExpectedLookupTemplate;true;ExpectedLookupTemplate;(String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.mock.jndi;ExpectedLookupTemplate;true;addObject;(String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.jndi;ExpectedLookupTemplate;true;addObject;(String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.mock.jndi;SimpleNamingContext;true;SimpleNamingContext;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.jndi;SimpleNamingContext;true;SimpleNamingContext;(String,Hashtable,Hashtable);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.jndi;SimpleNamingContext;true;SimpleNamingContext;(String,Hashtable,Hashtable);;Argument[1];Argument[-1];taint",
        "org.springframework.mock.jndi;SimpleNamingContext;true;SimpleNamingContext;(String,Hashtable,Hashtable);;Argument[2];Argument[-1];taint",
        "org.springframework.mock.jndi;SimpleNamingContextBuilder;true;bind;(String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.jndi;SimpleNamingContextBuilder;true;bind;(String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.mock.web.reactive.function.server;MockServerRequest$Builder;true;attribute;(String,Object);;Argument[-1];ReturnValue;value",
        "org.springframework.mock.web.reactive.function.server;MockServerRequest$Builder;true;attribute;(String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web.reactive.function.server;MockServerRequest$Builder;true;attribute;(String,Object);;Argument[0];ReturnValue;taint",
        "org.springframework.mock.web.reactive.function.server;MockServerRequest$Builder;true;attribute;(String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.mock.web.reactive.function.server;MockServerRequest$Builder;true;attribute;(String,Object);;Argument[1];ReturnValue;taint",
        "org.springframework.mock.web.reactive.function.server;MockServerRequest$Builder;true;attributes;(Map);;Argument[-1];ReturnValue;value",
        "org.springframework.mock.web.reactive.function.server;MockServerRequest$Builder;true;attributes;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web.reactive.function.server;MockServerRequest$Builder;true;attributes;(Map);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.mock.web.reactive.function.server;MockServerRequest$Builder;true;body;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web.reactive.function.server;MockServerRequest$Builder;true;body;(Object);;Argument[0];ReturnValue;taint",
        "org.springframework.mock.web.reactive.function.server;MockServerRequest$Builder;true;contextPath;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.mock.web.reactive.function.server;MockServerRequest$Builder;true;contextPath;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web.reactive.function.server;MockServerRequest$Builder;true;contextPath;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.mock.web.reactive.function.server;MockServerRequest$Builder;true;cookie;(HttpCookie[]);;Argument[-1];ReturnValue;value",
        "org.springframework.mock.web.reactive.function.server;MockServerRequest$Builder;true;cookies;(MultiValueMap);;Argument[-1];ReturnValue;value",
        "org.springframework.mock.web.reactive.function.server;MockServerRequest$Builder;true;cookies;(MultiValueMap);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web.reactive.function.server;MockServerRequest$Builder;true;cookies;(MultiValueMap);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.mock.web.reactive.function.server;MockServerRequest$Builder;true;exchange;(ServerWebExchange);;Argument[-1];ReturnValue;value",
        "org.springframework.mock.web.reactive.function.server;MockServerRequest$Builder;true;exchange;(ServerWebExchange);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web.reactive.function.server;MockServerRequest$Builder;true;exchange;(ServerWebExchange);;Argument[0];ReturnValue;taint",
        "org.springframework.mock.web.reactive.function.server;MockServerRequest$Builder;true;header;(String,String);;Argument[-1];ReturnValue;value",
        "org.springframework.mock.web.reactive.function.server;MockServerRequest$Builder;true;header;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web.reactive.function.server;MockServerRequest$Builder;true;header;(String,String);;Argument[0];ReturnValue;taint",
        "org.springframework.mock.web.reactive.function.server;MockServerRequest$Builder;true;header;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.mock.web.reactive.function.server;MockServerRequest$Builder;true;header;(String,String);;Argument[1];ReturnValue;taint",
        "org.springframework.mock.web.reactive.function.server;MockServerRequest$Builder;true;headers;(HttpHeaders);;Argument[-1];ReturnValue;value",
        "org.springframework.mock.web.reactive.function.server;MockServerRequest$Builder;true;headers;(HttpHeaders);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web.reactive.function.server;MockServerRequest$Builder;true;headers;(HttpHeaders);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.mock.web.reactive.function.server;MockServerRequest$Builder;true;localAddress;(InetSocketAddress);;Argument[-1];ReturnValue;value",
        "org.springframework.mock.web.reactive.function.server;MockServerRequest$Builder;true;localAddress;(InetSocketAddress);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web.reactive.function.server;MockServerRequest$Builder;true;localAddress;(InetSocketAddress);;Argument[0];ReturnValue;taint",
        "org.springframework.mock.web.reactive.function.server;MockServerRequest$Builder;true;messageReaders;(List);;Argument[-1];ReturnValue;value",
        "org.springframework.mock.web.reactive.function.server;MockServerRequest$Builder;true;messageReaders;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web.reactive.function.server;MockServerRequest$Builder;true;messageReaders;(List);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.mock.web.reactive.function.server;MockServerRequest$Builder;true;method;(HttpMethod);;Argument[-1];ReturnValue;value",
        "org.springframework.mock.web.reactive.function.server;MockServerRequest$Builder;true;pathVariable;(String,String);;Argument[-1];ReturnValue;value",
        "org.springframework.mock.web.reactive.function.server;MockServerRequest$Builder;true;pathVariable;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web.reactive.function.server;MockServerRequest$Builder;true;pathVariable;(String,String);;Argument[0];ReturnValue;taint",
        "org.springframework.mock.web.reactive.function.server;MockServerRequest$Builder;true;pathVariable;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.mock.web.reactive.function.server;MockServerRequest$Builder;true;pathVariable;(String,String);;Argument[1];ReturnValue;taint",
        "org.springframework.mock.web.reactive.function.server;MockServerRequest$Builder;true;pathVariables;(Map);;Argument[-1];ReturnValue;value",
        "org.springframework.mock.web.reactive.function.server;MockServerRequest$Builder;true;pathVariables;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web.reactive.function.server;MockServerRequest$Builder;true;pathVariables;(Map);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.mock.web.reactive.function.server;MockServerRequest$Builder;true;principal;(Principal);;Argument[-1];ReturnValue;value",
        "org.springframework.mock.web.reactive.function.server;MockServerRequest$Builder;true;principal;(Principal);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web.reactive.function.server;MockServerRequest$Builder;true;principal;(Principal);;Argument[0];ReturnValue;taint",
        "org.springframework.mock.web.reactive.function.server;MockServerRequest$Builder;true;queryParam;(String,String);;Argument[-1];ReturnValue;value",
        "org.springframework.mock.web.reactive.function.server;MockServerRequest$Builder;true;queryParam;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web.reactive.function.server;MockServerRequest$Builder;true;queryParam;(String,String);;Argument[0];ReturnValue;taint",
        "org.springframework.mock.web.reactive.function.server;MockServerRequest$Builder;true;queryParam;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.mock.web.reactive.function.server;MockServerRequest$Builder;true;queryParam;(String,String);;Argument[1];ReturnValue;taint",
        "org.springframework.mock.web.reactive.function.server;MockServerRequest$Builder;true;queryParams;(MultiValueMap);;Argument[-1];ReturnValue;value",
        "org.springframework.mock.web.reactive.function.server;MockServerRequest$Builder;true;queryParams;(MultiValueMap);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web.reactive.function.server;MockServerRequest$Builder;true;queryParams;(MultiValueMap);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.mock.web.reactive.function.server;MockServerRequest$Builder;true;remoteAddress;(InetSocketAddress);;Argument[-1];ReturnValue;value",
        "org.springframework.mock.web.reactive.function.server;MockServerRequest$Builder;true;remoteAddress;(InetSocketAddress);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web.reactive.function.server;MockServerRequest$Builder;true;remoteAddress;(InetSocketAddress);;Argument[0];ReturnValue;taint",
        "org.springframework.mock.web.reactive.function.server;MockServerRequest$Builder;true;session;(Principal);;Argument[-1];ReturnValue;taint",
        "org.springframework.mock.web.reactive.function.server;MockServerRequest$Builder;true;session;(Principal);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web.reactive.function.server;MockServerRequest$Builder;true;session;(Principal);;Argument[0];ReturnValue;taint",
        "org.springframework.mock.web.reactive.function.server;MockServerRequest$Builder;true;session;(WebSession);;Argument[-1];ReturnValue;value",
        "org.springframework.mock.web.reactive.function.server;MockServerRequest$Builder;true;session;(WebSession);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web.reactive.function.server;MockServerRequest$Builder;true;session;(WebSession);;Argument[0];ReturnValue;taint",
        "org.springframework.mock.web.reactive.function.server;MockServerRequest$Builder;true;uri;(URI);;Argument[-1];ReturnValue;value",
        "org.springframework.mock.web.reactive.function.server;MockServerRequest$Builder;true;uri;(URI);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web.reactive.function.server;MockServerRequest$Builder;true;uri;(URI);;Argument[0];ReturnValue;taint",
        "org.springframework.mock.web.server;MockServerWebExchange$Builder;true;Builder;(MockServerHttpRequest);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web.server;MockServerWebExchange$Builder;true;session;(WebSession);;Argument[-1];ReturnValue;value",
        "org.springframework.mock.web.server;MockServerWebExchange$Builder;true;sessionManager;(WebSessionManager);;Argument[-1];ReturnValue;value",
        "org.springframework.mock.web.server;MockServerWebExchange$Builder;true;sessionManager;(WebSessionManager);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web.server;MockServerWebExchange$Builder;true;sessionManager;(WebSessionManager);;Argument[0];ReturnValue;taint",
        "org.springframework.mock.web.server;MockServerWebExchange;false;builder;(MockServerHttpRequest);;Argument[0];ReturnValue;taint",
        "org.springframework.mock.web.server;MockServerWebExchange;false;from;(MockServerHttpRequest);;Argument[0];ReturnValue;taint",
        "org.springframework.mock.web;DelegatingServletInputStream;true;DelegatingServletInputStream;(InputStream);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;DelegatingServletInputStream;true;getSourceStream;();;Argument[-1];ReturnValue;taint",
        "org.springframework.mock.web;DelegatingServletOutputStream;true;DelegatingServletOutputStream;(OutputStream);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;DelegatingServletOutputStream;true;getTargetStream;();;Argument[-1];ReturnValue;taint",
        "org.springframework.mock.web;MockAsyncContext;true;MockAsyncContext;(ServletRequest,ServletResponse);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockAsyncContext;true;MockAsyncContext;(ServletRequest,ServletResponse);;Argument[1];Argument[-1];taint",
        "org.springframework.mock.web;MockAsyncContext;true;addDispatchHandler;(Runnable);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockAsyncContext;true;getDispatchedPath;();;Argument[-1];ReturnValue;taint",
        "org.springframework.mock.web;MockAsyncContext;true;getListeners;();;Argument[-1];ReturnValue;taint",
        "org.springframework.mock.web;MockBodyContent;true;MockBodyContent;(String,HttpServletResponse);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockBodyContent;true;MockBodyContent;(String,HttpServletResponse,Writer);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockBodyContent;true;MockBodyContent;(String,Writer);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockCookie;true;MockCookie;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockCookie;true;MockCookie;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.mock.web;MockCookie;true;getExpires;();;Argument[-1];ReturnValue;taint",
        "org.springframework.mock.web;MockCookie;true;getSameSite;();;Argument[-1];ReturnValue;taint",
        "org.springframework.mock.web;MockCookie;true;parse;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.mock.web;MockCookie;true;setExpires;(ZonedDateTime);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockCookie;true;setSameSite;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockCookie;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.mock.web;MockExpressionEvaluator;true;MockExpressionEvaluator;(PageContext);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockFilterChain;true;MockFilterChain;(Servlet);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockFilterChain;true;MockFilterChain;(Servlet,Filter[]);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockFilterChain;true;MockFilterChain;(Servlet,Filter[]);;Argument[1];Argument[-1];taint",
        "org.springframework.mock.web;MockFilterChain;true;getRequest;();;Argument[-1];ReturnValue;taint",
        "org.springframework.mock.web;MockFilterChain;true;getResponse;();;Argument[-1];ReturnValue;taint",
        "org.springframework.mock.web;MockFilterConfig;true;MockFilterConfig;(ServletContext);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockFilterConfig;true;MockFilterConfig;(ServletContext,String);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockFilterConfig;true;MockFilterConfig;(ServletContext,String);;Argument[1];Argument[-1];taint",
        "org.springframework.mock.web;MockFilterConfig;true;MockFilterConfig;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockFilterConfig;true;addInitParameter;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockFilterConfig;true;addInitParameter;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.mock.web;MockHttpServletMapping;true;MockHttpServletMapping;(String,String,String,MappingMatch);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockHttpServletMapping;true;MockHttpServletMapping;(String,String,String,MappingMatch);;Argument[1];Argument[-1];taint",
        "org.springframework.mock.web;MockHttpServletMapping;true;MockHttpServletMapping;(String,String,String,MappingMatch);;Argument[2];Argument[-1];taint",
        "org.springframework.mock.web;MockHttpServletMapping;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.mock.web;MockHttpServletRequest;true;MockHttpServletRequest;(ServletContext);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockHttpServletRequest;true;MockHttpServletRequest;(ServletContext,String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockHttpServletRequest;true;MockHttpServletRequest;(ServletContext,String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.mock.web;MockHttpServletRequest;true;MockHttpServletRequest;(ServletContext,String,String);;Argument[2];Argument[-1];taint",
        "org.springframework.mock.web;MockHttpServletRequest;true;MockHttpServletRequest;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockHttpServletRequest;true;MockHttpServletRequest;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.mock.web;MockHttpServletRequest;true;addHeader;(String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockHttpServletRequest;true;addParameter;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockHttpServletRequest;true;addParameter;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.mock.web;MockHttpServletRequest;true;addParameter;(String,String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockHttpServletRequest;true;addParameter;(String,String[]);;Argument[1];Argument[-1];taint",
        "org.springframework.mock.web;MockHttpServletRequest;true;addPart;(Part);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockHttpServletRequest;true;addPreferredLocale;(Locale);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockHttpServletRequest;true;addUserRole;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockHttpServletRequest;true;getContentAsByteArray;();;Argument[-1];ReturnValue;taint",
        "org.springframework.mock.web;MockHttpServletRequest;true;getContentAsString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.mock.web;MockHttpServletRequest;true;setAsyncContext;(MockAsyncContext);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockHttpServletRequest;true;setAuthType;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockHttpServletRequest;true;setContent;(byte[]);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockHttpServletRequest;true;setContentType;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockHttpServletRequest;true;setContextPath;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockHttpServletRequest;true;setCookies;(Cookie[]);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockHttpServletRequest;true;setLocalAddr;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockHttpServletRequest;true;setLocalName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockHttpServletRequest;true;setMethod;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockHttpServletRequest;true;setParameter;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockHttpServletRequest;true;setParameter;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.mock.web;MockHttpServletRequest;true;setParameter;(String,String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockHttpServletRequest;true;setParameter;(String,String[]);;Argument[1];Argument[-1];taint",
        "org.springframework.mock.web;MockHttpServletRequest;true;setPathInfo;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockHttpServletRequest;true;setPreferredLocales;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockHttpServletRequest;true;setProtocol;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockHttpServletRequest;true;setQueryString;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockHttpServletRequest;true;setRemoteAddr;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockHttpServletRequest;true;setRemoteHost;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockHttpServletRequest;true;setRemoteUser;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockHttpServletRequest;true;setRequestURI;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockHttpServletRequest;true;setRequestedSessionId;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockHttpServletRequest;true;setScheme;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockHttpServletRequest;true;setServerName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockHttpServletRequest;true;setServletPath;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockHttpServletRequest;true;setSession;(HttpSession);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockHttpServletRequest;true;setUserPrincipal;(Principal);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockHttpServletResponse;true;addIncludedUrl;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockHttpServletResponse;true;getContentAsByteArray;();;Argument[-1];ReturnValue;taint",
        "org.springframework.mock.web;MockHttpServletResponse;true;getContentAsString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.mock.web;MockHttpServletResponse;true;getContentAsString;(Charset);;Argument[-1];ReturnValue;taint",
        "org.springframework.mock.web;MockHttpServletResponse;true;getCookie;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.mock.web;MockHttpServletResponse;true;getCookies;();;Argument[-1];ReturnValue;taint",
        "org.springframework.mock.web;MockHttpServletResponse;true;getErrorMessage;();;Argument[-1];ReturnValue;taint",
        "org.springframework.mock.web;MockHttpServletResponse;true;getForwardedUrl;();;Argument[-1];ReturnValue;taint",
        "org.springframework.mock.web;MockHttpServletResponse;true;getHeaderValue;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.mock.web;MockHttpServletResponse;true;getHeaderValues;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.mock.web;MockHttpServletResponse;true;getIncludedUrl;();;Argument[-1];ReturnValue;taint",
        "org.springframework.mock.web;MockHttpServletResponse;true;getIncludedUrls;();;Argument[-1];ReturnValue;taint",
        "org.springframework.mock.web;MockHttpServletResponse;true;setDefaultCharacterEncoding;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockHttpServletResponse;true;setForwardedUrl;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockHttpServletResponse;true;setIncludedUrl;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockHttpSession;true;MockHttpSession;(ServletContext);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockHttpSession;true;MockHttpSession;(ServletContext,String);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockHttpSession;true;MockHttpSession;(ServletContext,String);;Argument[1];Argument[-1];taint",
        "org.springframework.mock.web;MockHttpSession;true;changeSessionId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.mock.web;MockHttpSession;true;deserializeState;(Serializable);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockHttpSession;true;serializeState;();;Argument[-1];ReturnValue;taint",
        "org.springframework.mock.web;MockJspWriter;true;MockJspWriter;(HttpServletResponse);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockJspWriter;true;MockJspWriter;(HttpServletResponse,Writer);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockJspWriter;true;MockJspWriter;(HttpServletResponse,Writer);;Argument[1];Argument[-1];taint",
        "org.springframework.mock.web;MockJspWriter;true;MockJspWriter;(Writer);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockMultipartFile;true;MockMultipartFile;(String,InputStream);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockMultipartFile;true;MockMultipartFile;(String,InputStream);;Argument[1];Argument[-1];taint",
        "org.springframework.mock.web;MockMultipartFile;true;MockMultipartFile;(String,String,String,InputStream);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockMultipartFile;true;MockMultipartFile;(String,String,String,InputStream);;Argument[1];Argument[-1];taint",
        "org.springframework.mock.web;MockMultipartFile;true;MockMultipartFile;(String,String,String,InputStream);;Argument[2];Argument[-1];taint",
        "org.springframework.mock.web;MockMultipartFile;true;MockMultipartFile;(String,String,String,InputStream);;Argument[3];Argument[-1];taint",
        "org.springframework.mock.web;MockMultipartFile;true;MockMultipartFile;(String,String,String,byte[]);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockMultipartFile;true;MockMultipartFile;(String,String,String,byte[]);;Argument[1];Argument[-1];taint",
        "org.springframework.mock.web;MockMultipartFile;true;MockMultipartFile;(String,String,String,byte[]);;Argument[2];Argument[-1];taint",
        "org.springframework.mock.web;MockMultipartFile;true;MockMultipartFile;(String,String,String,byte[]);;Argument[3];Argument[-1];taint",
        "org.springframework.mock.web;MockMultipartFile;true;MockMultipartFile;(String,byte[]);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockMultipartFile;true;MockMultipartFile;(String,byte[]);;Argument[1];Argument[-1];taint",
        "org.springframework.mock.web;MockMultipartHttpServletRequest;true;MockMultipartHttpServletRequest;(ServletContext);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockMultipartHttpServletRequest;true;addFile;(MultipartFile);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockPageContext;true;MockPageContext;(ServletContext);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockPageContext;true;MockPageContext;(ServletContext,HttpServletRequest);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockPageContext;true;MockPageContext;(ServletContext,HttpServletRequest);;Argument[1];Argument[-1];taint",
        "org.springframework.mock.web;MockPageContext;true;MockPageContext;(ServletContext,HttpServletRequest,HttpServletResponse);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockPageContext;true;MockPageContext;(ServletContext,HttpServletRequest,HttpServletResponse);;Argument[1];Argument[-1];taint",
        "org.springframework.mock.web;MockPageContext;true;MockPageContext;(ServletContext,HttpServletRequest,HttpServletResponse);;Argument[2];Argument[-1];taint",
        "org.springframework.mock.web;MockPageContext;true;MockPageContext;(ServletContext,HttpServletRequest,HttpServletResponse,ServletConfig);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockPageContext;true;MockPageContext;(ServletContext,HttpServletRequest,HttpServletResponse,ServletConfig);;Argument[1];Argument[-1];taint",
        "org.springframework.mock.web;MockPageContext;true;MockPageContext;(ServletContext,HttpServletRequest,HttpServletResponse,ServletConfig);;Argument[2];Argument[-1];taint",
        "org.springframework.mock.web;MockPageContext;true;MockPageContext;(ServletContext,HttpServletRequest,HttpServletResponse,ServletConfig);;Argument[3];Argument[-1];taint",
        "org.springframework.mock.web;MockPageContext;true;getAttributeNames;();;Argument[-1];ReturnValue;taint",
        "org.springframework.mock.web;MockPageContext;true;getContentAsByteArray;();;Argument[-1];ReturnValue;taint",
        "org.springframework.mock.web;MockPageContext;true;getContentAsString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.mock.web;MockPart;true;MockPart;(String,String,byte[]);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockPart;true;MockPart;(String,String,byte[]);;Argument[1];Argument[-1];taint",
        "org.springframework.mock.web;MockPart;true;MockPart;(String,String,byte[]);;Argument[2];Argument[-1];taint",
        "org.springframework.mock.web;MockPart;true;MockPart;(String,byte[]);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockPart;true;MockPart;(String,byte[]);;Argument[1];Argument[-1];taint",
        "org.springframework.mock.web;MockPart;true;getHeaders;();;Argument[-1];ReturnValue;taint",
        "org.springframework.mock.web;MockRequestDispatcher;true;MockRequestDispatcher;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockServletConfig;true;MockServletConfig;(ServletContext);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockServletConfig;true;MockServletConfig;(ServletContext,String);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockServletConfig;true;MockServletConfig;(ServletContext,String);;Argument[1];Argument[-1];taint",
        "org.springframework.mock.web;MockServletConfig;true;MockServletConfig;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockServletConfig;true;addInitParameter;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockServletConfig;true;addInitParameter;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.mock.web;MockServletContext;true;MockServletContext;(ResourceLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockServletContext;true;MockServletContext;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockServletContext;true;MockServletContext;(String,ResourceLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockServletContext;true;MockServletContext;(String,ResourceLoader);;Argument[1];Argument[-1];taint",
        "org.springframework.mock.web;MockServletContext;true;addInitParameter;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockServletContext;true;addInitParameter;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.mock.web;MockServletContext;true;addMimeType;(String,MediaType);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockServletContext;true;addMimeType;(String,MediaType);;Argument[1];Argument[-1];taint",
        "org.springframework.mock.web;MockServletContext;true;getDeclaredRoles;();;Argument[-1];ReturnValue;taint",
        "org.springframework.mock.web;MockServletContext;true;getDefaultServletName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.mock.web;MockServletContext;true;registerContext;(String,ServletContext);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockServletContext;true;registerContext;(String,ServletContext);;Argument[1];Argument[-1];taint",
        "org.springframework.mock.web;MockServletContext;true;registerNamedDispatcher;(String,RequestDispatcher);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockServletContext;true;registerNamedDispatcher;(String,RequestDispatcher);;Argument[1];Argument[-1];taint",
        "org.springframework.mock.web;MockServletContext;true;setContextPath;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockServletContext;true;setDefaultServletName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;MockServletContext;true;setServletContextName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;PassThroughFilterChain;true;PassThroughFilterChain;(Filter,FilterChain);;Argument[0];Argument[-1];taint",
        "org.springframework.mock.web;PassThroughFilterChain;true;PassThroughFilterChain;(Filter,FilterChain);;Argument[1];Argument[-1];taint",
        "org.springframework.mock.web;PassThroughFilterChain;true;PassThroughFilterChain;(Servlet);;Argument[0];Argument[-1];taint",
        "org.springframework.objenesis;SpringObjenesis;true;SpringObjenesis;(InstantiatorStrategy);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.hibernate5.support;HibernateDaoSupport;true;getHibernateTemplate;();;Argument[-1];ReturnValue;taint",
        "org.springframework.orm.hibernate5.support;HibernateDaoSupport;true;getSessionFactory;();;Argument[-1];ReturnValue;taint",
        "org.springframework.orm.hibernate5.support;HibernateDaoSupport;true;setHibernateTemplate;(HibernateTemplate);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.hibernate5.support;OpenSessionInViewFilter;true;setSessionFactoryBeanName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.hibernate5.support;OpenSessionInViewInterceptor;true;getSessionFactory;();;Argument[-1];ReturnValue;taint",
        "org.springframework.orm.hibernate5.support;OpenSessionInViewInterceptor;true;setSessionFactory;(SessionFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.hibernate5.support;OpenSessionInterceptor;true;getSessionFactory;();;Argument[-1];ReturnValue;taint",
        "org.springframework.orm.hibernate5.support;OpenSessionInterceptor;true;setSessionFactory;(SessionFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.hibernate5;HibernateExceptionTranslator;true;setJdbcExceptionTranslator;(SQLExceptionTranslator);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.hibernate5;HibernateTemplate;true;HibernateTemplate;(SessionFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.hibernate5;HibernateTemplate;true;getFilterNames;();;Argument[-1];ReturnValue;taint",
        "org.springframework.orm.hibernate5;HibernateTemplate;true;getQueryCacheRegion;();;Argument[-1];ReturnValue;taint",
        "org.springframework.orm.hibernate5;HibernateTemplate;true;getSessionFactory;();;Argument[-1];ReturnValue;taint",
        "org.springframework.orm.hibernate5;HibernateTemplate;true;setFilterNames;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.hibernate5;HibernateTemplate;true;setQueryCacheRegion;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.hibernate5;HibernateTemplate;true;setSessionFactory;(SessionFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.hibernate5;HibernateTransactionManager;true;HibernateTransactionManager;(SessionFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.hibernate5;HibernateTransactionManager;true;getDataSource;();;Argument[-1];ReturnValue;taint",
        "org.springframework.orm.hibernate5;HibernateTransactionManager;true;getEntityInterceptor;();;Argument[-1];ReturnValue;taint",
        "org.springframework.orm.hibernate5;HibernateTransactionManager;true;getSessionFactory;();;Argument[-1];ReturnValue;taint",
        "org.springframework.orm.hibernate5;HibernateTransactionManager;true;setDataSource;(DataSource);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.hibernate5;HibernateTransactionManager;true;setEntityInterceptor;(Interceptor);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.hibernate5;HibernateTransactionManager;true;setEntityInterceptorBeanName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.hibernate5;HibernateTransactionManager;true;setSessionFactory;(SessionFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.hibernate5;HibernateTransactionManager;true;setSessionInitializer;(Consumer);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.hibernate5;LocalSessionFactoryBean;true;getConfiguration;();;Argument[-1];ReturnValue;taint",
        "org.springframework.orm.hibernate5;LocalSessionFactoryBean;true;getHibernateProperties;();;Argument[-1];ReturnValue;taint",
        "org.springframework.orm.hibernate5;LocalSessionFactoryBean;true;getMetadataSources;();;Argument[-1];ReturnValue;taint",
        "org.springframework.orm.hibernate5;LocalSessionFactoryBean;true;getResourceLoader;();;Argument[-1];ReturnValue;taint",
        "org.springframework.orm.hibernate5;LocalSessionFactoryBean;true;setAnnotatedClasses;(Class[]);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.hibernate5;LocalSessionFactoryBean;true;setAnnotatedPackages;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.hibernate5;LocalSessionFactoryBean;true;setBootstrapExecutor;(AsyncTaskExecutor);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.hibernate5;LocalSessionFactoryBean;true;setCacheRegionFactory;(RegionFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.hibernate5;LocalSessionFactoryBean;true;setCacheableMappingLocations;(Resource[]);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.hibernate5;LocalSessionFactoryBean;true;setConfigLocation;(Resource);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.hibernate5;LocalSessionFactoryBean;true;setConfigLocations;(Resource[]);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.hibernate5;LocalSessionFactoryBean;true;setCurrentTenantIdentifierResolver;(CurrentTenantIdentifierResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.hibernate5;LocalSessionFactoryBean;true;setDataSource;(DataSource);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.hibernate5;LocalSessionFactoryBean;true;setEntityInterceptor;(Interceptor);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.hibernate5;LocalSessionFactoryBean;true;setEntityTypeFilters;(TypeFilter[]);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.hibernate5;LocalSessionFactoryBean;true;setHibernateIntegrators;(Integrator[]);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.hibernate5;LocalSessionFactoryBean;true;setHibernateProperties;(Properties);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.hibernate5;LocalSessionFactoryBean;true;setImplicitNamingStrategy;(ImplicitNamingStrategy);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.hibernate5;LocalSessionFactoryBean;true;setJtaTransactionManager;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.hibernate5;LocalSessionFactoryBean;true;setMappingDirectoryLocations;(Resource[]);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.hibernate5;LocalSessionFactoryBean;true;setMappingJarLocations;(Resource[]);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.hibernate5;LocalSessionFactoryBean;true;setMappingLocations;(Resource[]);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.hibernate5;LocalSessionFactoryBean;true;setMappingResources;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.hibernate5;LocalSessionFactoryBean;true;setMetadataSources;(MetadataSources);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.hibernate5;LocalSessionFactoryBean;true;setMultiTenantConnectionProvider;(MultiTenantConnectionProvider);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.hibernate5;LocalSessionFactoryBean;true;setPackagesToScan;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.hibernate5;LocalSessionFactoryBean;true;setPhysicalNamingStrategy;(PhysicalNamingStrategy);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.hibernate5;LocalSessionFactoryBuilder;true;LocalSessionFactoryBuilder;(DataSource,ClassLoader);;Argument[1];Argument[-1];taint",
        "org.springframework.orm.hibernate5;LocalSessionFactoryBuilder;true;LocalSessionFactoryBuilder;(DataSource,ResourceLoader);;Argument[1];Argument[-1];taint",
        "org.springframework.orm.hibernate5;LocalSessionFactoryBuilder;true;LocalSessionFactoryBuilder;(DataSource,ResourceLoader,MetadataSources);;Argument[1];Argument[-1];taint",
        "org.springframework.orm.hibernate5;LocalSessionFactoryBuilder;true;addAnnotatedClasses;(Class[]);;Argument[-1];ReturnValue;value",
        "org.springframework.orm.hibernate5;LocalSessionFactoryBuilder;true;addPackages;(String[]);;Argument[-1];ReturnValue;value",
        "org.springframework.orm.hibernate5;LocalSessionFactoryBuilder;true;scanPackages;(String[]);;Argument[-1];ReturnValue;value",
        "org.springframework.orm.hibernate5;LocalSessionFactoryBuilder;true;setBeanContainer;(ConfigurableListableBeanFactory);;Argument[-1];ReturnValue;value",
        "org.springframework.orm.hibernate5;LocalSessionFactoryBuilder;true;setCacheRegionFactory;(RegionFactory);;Argument[-1];ReturnValue;value",
        "org.springframework.orm.hibernate5;LocalSessionFactoryBuilder;true;setEntityTypeFilters;(TypeFilter[]);;Argument[-1];ReturnValue;value",
        "org.springframework.orm.hibernate5;LocalSessionFactoryBuilder;true;setEntityTypeFilters;(TypeFilter[]);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.hibernate5;LocalSessionFactoryBuilder;true;setEntityTypeFilters;(TypeFilter[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.orm.hibernate5;LocalSessionFactoryBuilder;true;setJtaTransactionManager;(Object);;Argument[-1];ReturnValue;value",
        "org.springframework.orm.hibernate5;LocalSessionFactoryBuilder;true;setMultiTenantConnectionProvider;(MultiTenantConnectionProvider);;Argument[-1];ReturnValue;value",
        "org.springframework.orm.hibernate5;SessionHolder;true;SessionHolder;(Session);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.hibernate5;SessionHolder;true;getSession;();;Argument[-1];ReturnValue;taint",
        "org.springframework.orm.hibernate5;SessionHolder;true;getTransaction;();;Argument[-1];ReturnValue;taint",
        "org.springframework.orm.hibernate5;SessionHolder;true;setTransaction;(Transaction);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.hibernate5;SpringBeanContainer;false;SpringBeanContainer;(ConfigurableListableBeanFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.hibernate5;SpringFlushSynchronization;true;SpringFlushSynchronization;(Session);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.hibernate5;SpringSessionContext;true;SpringSessionContext;(SessionFactoryImplementor);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.hibernate5;SpringSessionSynchronization;true;SpringSessionSynchronization;(SessionHolder,SessionFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.hibernate5;SpringSessionSynchronization;true;SpringSessionSynchronization;(SessionHolder,SessionFactory);;Argument[1];Argument[-1];taint",
        "org.springframework.orm.hibernate5;SpringSessionSynchronization;true;SpringSessionSynchronization;(SessionHolder,SessionFactory,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.hibernate5;SpringSessionSynchronization;true;SpringSessionSynchronization;(SessionHolder,SessionFactory,boolean);;Argument[1];Argument[-1];taint",
        "org.springframework.orm.jpa.persistenceunit;DefaultPersistenceUnitManager;true;getDataSourceLookup;();;Argument[-1];ReturnValue;taint",
        "org.springframework.orm.jpa.persistenceunit;DefaultPersistenceUnitManager;true;getDefaultDataSource;();;Argument[-1];ReturnValue;taint",
        "org.springframework.orm.jpa.persistenceunit;DefaultPersistenceUnitManager;true;getDefaultJtaDataSource;();;Argument[-1];ReturnValue;taint",
        "org.springframework.orm.jpa.persistenceunit;DefaultPersistenceUnitManager;true;getLoadTimeWeaver;();;Argument[-1];ReturnValue;taint",
        "org.springframework.orm.jpa.persistenceunit;DefaultPersistenceUnitManager;true;getPersistenceUnitPostProcessors;();;Argument[-1];ReturnValue;taint",
        "org.springframework.orm.jpa.persistenceunit;DefaultPersistenceUnitManager;true;setDataSourceLookup;(DataSourceLookup);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.jpa.persistenceunit;DefaultPersistenceUnitManager;true;setDataSources;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.jpa.persistenceunit;DefaultPersistenceUnitManager;true;setDefaultDataSource;(DataSource);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.jpa.persistenceunit;DefaultPersistenceUnitManager;true;setDefaultJtaDataSource;(DataSource);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.jpa.persistenceunit;DefaultPersistenceUnitManager;true;setDefaultPersistenceUnitName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.jpa.persistenceunit;DefaultPersistenceUnitManager;true;setDefaultPersistenceUnitRootLocation;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.jpa.persistenceunit;DefaultPersistenceUnitManager;true;setMappingResources;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.jpa.persistenceunit;DefaultPersistenceUnitManager;true;setPackagesToScan;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.jpa.persistenceunit;DefaultPersistenceUnitManager;true;setPersistenceUnitPostProcessors;(PersistenceUnitPostProcessor[]);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.jpa.persistenceunit;DefaultPersistenceUnitManager;true;setPersistenceXmlLocation;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.jpa.persistenceunit;DefaultPersistenceUnitManager;true;setPersistenceXmlLocations;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.jpa.persistenceunit;MutablePersistenceUnitInfo;true;addJarFileUrl;(URL);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.jpa.persistenceunit;MutablePersistenceUnitInfo;true;addManagedClassName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.jpa.persistenceunit;MutablePersistenceUnitInfo;true;addManagedPackage;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.jpa.persistenceunit;MutablePersistenceUnitInfo;true;addMappingFileName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.jpa.persistenceunit;MutablePersistenceUnitInfo;true;getPersistenceProviderPackageName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.orm.jpa.persistenceunit;MutablePersistenceUnitInfo;true;setJtaDataSource;(DataSource);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.jpa.persistenceunit;MutablePersistenceUnitInfo;true;setNonJtaDataSource;(DataSource);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.jpa.persistenceunit;MutablePersistenceUnitInfo;true;setPersistenceProviderClassName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.jpa.persistenceunit;MutablePersistenceUnitInfo;true;setPersistenceUnitName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.jpa.persistenceunit;MutablePersistenceUnitInfo;true;setPersistenceUnitRootUrl;(URL);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.jpa.persistenceunit;MutablePersistenceUnitInfo;true;setPersistenceXMLSchemaVersion;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.jpa.persistenceunit;MutablePersistenceUnitInfo;true;setProperties;(Properties);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.jpa.persistenceunit;MutablePersistenceUnitInfo;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.orm.jpa.persistenceunit;PersistenceUnitManager;true;obtainDefaultPersistenceUnitInfo;();;Argument[-1];ReturnValue;taint",
        "org.springframework.orm.jpa.persistenceunit;PersistenceUnitManager;true;obtainPersistenceUnitInfo;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.orm.jpa.persistenceunit;SmartPersistenceUnitInfo;true;getManagedPackages;();;Argument[-1];ReturnValue;taint",
        "org.springframework.orm.jpa.persistenceunit;SmartPersistenceUnitInfo;true;setPersistenceProviderPackageName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.jpa.support;OpenEntityManagerInViewFilter;true;setEntityManagerFactoryBeanName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.jpa.support;OpenEntityManagerInViewFilter;true;setPersistenceUnitName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.jpa.support;PersistenceAnnotationBeanPostProcessor;true;setDefaultPersistenceUnitName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.jpa.support;PersistenceAnnotationBeanPostProcessor;true;setExtendedPersistenceContexts;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.jpa.support;PersistenceAnnotationBeanPostProcessor;true;setJndiEnvironment;(Properties);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.jpa.support;PersistenceAnnotationBeanPostProcessor;true;setJndiTemplate;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.jpa.support;PersistenceAnnotationBeanPostProcessor;true;setPersistenceContexts;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.jpa.support;PersistenceAnnotationBeanPostProcessor;true;setPersistenceUnits;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.jpa.vendor;AbstractJpaVendorAdapter;true;setDatabasePlatform;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.jpa.vendor;HibernateJpaDialect;true;setJdbcExceptionTranslator;(SQLExceptionTranslator);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.jpa;AbstractEntityManagerFactoryBean;true;getBootstrapExecutor;();;Argument[-1];ReturnValue;taint",
        "org.springframework.orm.jpa;AbstractEntityManagerFactoryBean;true;getJpaPropertyMap;();;Argument[-1];ReturnValue;taint",
        "org.springframework.orm.jpa;AbstractEntityManagerFactoryBean;true;getJpaVendorAdapter;();;Argument[-1];ReturnValue;taint",
        "org.springframework.orm.jpa;AbstractEntityManagerFactoryBean;true;setBootstrapExecutor;(AsyncTaskExecutor);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.jpa;AbstractEntityManagerFactoryBean;true;setEntityManagerInitializer;(Consumer);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.jpa;AbstractEntityManagerFactoryBean;true;setJpaDialect;(JpaDialect);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.jpa;AbstractEntityManagerFactoryBean;true;setJpaProperties;(Properties);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.jpa;AbstractEntityManagerFactoryBean;true;setJpaPropertyMap;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.jpa;AbstractEntityManagerFactoryBean;true;setJpaVendorAdapter;(JpaVendorAdapter);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.jpa;AbstractEntityManagerFactoryBean;true;setPersistenceProvider;(PersistenceProvider);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.jpa;AbstractEntityManagerFactoryBean;true;setPersistenceUnitName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.jpa;EntityManagerFactoryAccessor;true;getEntityManagerFactory;();;Argument[-1];ReturnValue;taint",
        "org.springframework.orm.jpa;EntityManagerFactoryAccessor;true;getJpaPropertyMap;();;Argument[-1];ReturnValue;taint",
        "org.springframework.orm.jpa;EntityManagerFactoryAccessor;true;getPersistenceUnitName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.orm.jpa;EntityManagerFactoryAccessor;true;setEntityManagerFactory;(EntityManagerFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.jpa;EntityManagerFactoryAccessor;true;setJpaProperties;(Properties);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.jpa;EntityManagerFactoryAccessor;true;setJpaPropertyMap;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.jpa;EntityManagerFactoryAccessor;true;setPersistenceUnitName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.jpa;EntityManagerFactoryInfo;true;getBeanClassLoader;();;Argument[-1];ReturnValue;taint",
        "org.springframework.orm.jpa;EntityManagerFactoryInfo;true;getDataSource;();;Argument[-1];ReturnValue;taint",
        "org.springframework.orm.jpa;EntityManagerFactoryInfo;true;getJpaDialect;();;Argument[-1];ReturnValue;taint",
        "org.springframework.orm.jpa;EntityManagerFactoryInfo;true;getNativeEntityManagerFactory;();;Argument[-1];ReturnValue;taint",
        "org.springframework.orm.jpa;EntityManagerFactoryInfo;true;getPersistenceProvider;();;Argument[-1];ReturnValue;taint",
        "org.springframework.orm.jpa;EntityManagerFactoryInfo;true;getPersistenceUnitInfo;();;Argument[-1];ReturnValue;taint",
        "org.springframework.orm.jpa;EntityManagerFactoryInfo;true;getPersistenceUnitName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.orm.jpa;EntityManagerFactoryUtils;true;findEntityManagerFactory;(ListableBeanFactory,String);;Argument[0];ReturnValue;taint",
        "org.springframework.orm.jpa;EntityManagerFactoryUtils;true;findEntityManagerFactory;(ListableBeanFactory,String);;Argument[1];ReturnValue;taint",
        "org.springframework.orm.jpa;EntityManagerHolder;true;EntityManagerHolder;(EntityManager);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.jpa;EntityManagerHolder;true;getEntityManager;();;Argument[-1];ReturnValue;taint",
        "org.springframework.orm.jpa;JpaDialect;true;getJdbcConnection;(EntityManager,boolean);;Argument[0];ReturnValue;taint",
        "org.springframework.orm.jpa;JpaTransactionManager;true;JpaTransactionManager;(EntityManagerFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.jpa;JpaTransactionManager;true;getDataSource;();;Argument[-1];ReturnValue;taint",
        "org.springframework.orm.jpa;JpaTransactionManager;true;getEntityManagerFactory;();;Argument[-1];ReturnValue;taint",
        "org.springframework.orm.jpa;JpaTransactionManager;true;getJpaDialect;();;Argument[-1];ReturnValue;taint",
        "org.springframework.orm.jpa;JpaTransactionManager;true;getJpaPropertyMap;();;Argument[-1];ReturnValue;taint",
        "org.springframework.orm.jpa;JpaTransactionManager;true;getPersistenceUnitName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.orm.jpa;JpaTransactionManager;true;setDataSource;(DataSource);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.jpa;JpaTransactionManager;true;setEntityManagerFactory;(EntityManagerFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.jpa;JpaTransactionManager;true;setEntityManagerInitializer;(Consumer);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.jpa;JpaTransactionManager;true;setJpaDialect;(JpaDialect);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.jpa;JpaTransactionManager;true;setJpaProperties;(Properties);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.jpa;JpaTransactionManager;true;setJpaPropertyMap;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.jpa;JpaTransactionManager;true;setPersistenceUnitName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.jpa;JpaVendorAdapter;true;getJpaDialect;();;Argument[-1];ReturnValue;taint",
        "org.springframework.orm.jpa;JpaVendorAdapter;true;getJpaPropertyMap;();;Argument[-1];ReturnValue;taint",
        "org.springframework.orm.jpa;JpaVendorAdapter;true;getJpaPropertyMap;(PersistenceUnitInfo);;Argument[-1];ReturnValue;taint",
        "org.springframework.orm.jpa;JpaVendorAdapter;true;getPersistenceProvider;();;Argument[-1];ReturnValue;taint",
        "org.springframework.orm.jpa;LocalContainerEntityManagerFactoryBean;true;setDataSource;(DataSource);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.jpa;LocalContainerEntityManagerFactoryBean;true;setJtaDataSource;(DataSource);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.jpa;LocalContainerEntityManagerFactoryBean;true;setMappingResources;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.jpa;LocalContainerEntityManagerFactoryBean;true;setPackagesToScan;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.jpa;LocalContainerEntityManagerFactoryBean;true;setPersistenceUnitManager;(PersistenceUnitManager);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.jpa;LocalContainerEntityManagerFactoryBean;true;setPersistenceUnitPostProcessors;(PersistenceUnitPostProcessor[]);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.jpa;LocalContainerEntityManagerFactoryBean;true;setPersistenceUnitRootLocation;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.orm.jpa;LocalContainerEntityManagerFactoryBean;true;setPersistenceXmlLocation;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.orm;ObjectOptimisticLockingFailureException;true;ObjectOptimisticLockingFailureException;(Class,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.orm;ObjectOptimisticLockingFailureException;true;ObjectOptimisticLockingFailureException;(Class,Object,String,Throwable);;Argument[1];Argument[-1];taint",
        "org.springframework.orm;ObjectOptimisticLockingFailureException;true;ObjectOptimisticLockingFailureException;(Class,Object,Throwable);;Argument[1];Argument[-1];taint",
        "org.springframework.orm;ObjectOptimisticLockingFailureException;true;ObjectOptimisticLockingFailureException;(String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.orm;ObjectOptimisticLockingFailureException;true;ObjectOptimisticLockingFailureException;(String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.orm;ObjectOptimisticLockingFailureException;true;ObjectOptimisticLockingFailureException;(String,Object,String,Throwable);;Argument[0];Argument[-1];taint",
        "org.springframework.orm;ObjectOptimisticLockingFailureException;true;ObjectOptimisticLockingFailureException;(String,Object,String,Throwable);;Argument[1];Argument[-1];taint",
        "org.springframework.orm;ObjectOptimisticLockingFailureException;true;ObjectOptimisticLockingFailureException;(String,Object,Throwable);;Argument[0];Argument[-1];taint",
        "org.springframework.orm;ObjectOptimisticLockingFailureException;true;ObjectOptimisticLockingFailureException;(String,Object,Throwable);;Argument[1];Argument[-1];taint",
        "org.springframework.orm;ObjectOptimisticLockingFailureException;true;getIdentifier;();;Argument[-1];ReturnValue;taint",
        "org.springframework.orm;ObjectRetrievalFailureException;true;ObjectRetrievalFailureException;(Class,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.orm;ObjectRetrievalFailureException;true;ObjectRetrievalFailureException;(Class,Object,String,Throwable);;Argument[1];Argument[-1];taint",
        "org.springframework.orm;ObjectRetrievalFailureException;true;ObjectRetrievalFailureException;(String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.orm;ObjectRetrievalFailureException;true;ObjectRetrievalFailureException;(String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.orm;ObjectRetrievalFailureException;true;ObjectRetrievalFailureException;(String,Object,String,Throwable);;Argument[0];Argument[-1];taint",
        "org.springframework.orm;ObjectRetrievalFailureException;true;ObjectRetrievalFailureException;(String,Object,String,Throwable);;Argument[1];Argument[-1];taint",
        "org.springframework.orm;ObjectRetrievalFailureException;true;getIdentifier;();;Argument[-1];ReturnValue;taint",
        "org.springframework.oxm.jaxb.test;Flights;true;getFlight;();;Argument[-1];ReturnValue;taint",
        "org.springframework.oxm.jaxb;Jaxb2Marshaller;true;getClassesToBeBound;();;Argument[-1];ReturnValue;taint",
        "org.springframework.oxm.jaxb;Jaxb2Marshaller;true;getContextPath;();;Argument[-1];ReturnValue;taint",
        "org.springframework.oxm.jaxb;Jaxb2Marshaller;true;getJaxbContext;();;Argument[-1];ReturnValue;taint",
        "org.springframework.oxm.jaxb;Jaxb2Marshaller;true;getPackagesToScan;();;Argument[-1];ReturnValue;taint",
        "org.springframework.oxm.jaxb;Jaxb2Marshaller;true;setAdapters;(XmlAdapter[]);;Argument[0];Argument[-1];taint",
        "org.springframework.oxm.jaxb;Jaxb2Marshaller;true;setClassesToBeBound;(Class[]);;Argument[0];Argument[-1];taint",
        "org.springframework.oxm.jaxb;Jaxb2Marshaller;true;setContextPath;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.oxm.jaxb;Jaxb2Marshaller;true;setContextPaths;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.oxm.jaxb;Jaxb2Marshaller;true;setJaxbContextProperties;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.oxm.jaxb;Jaxb2Marshaller;true;setMarshallerListener;(Listener);;Argument[0];Argument[-1];taint",
        "org.springframework.oxm.jaxb;Jaxb2Marshaller;true;setMarshallerProperties;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.oxm.jaxb;Jaxb2Marshaller;true;setPackagesToScan;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.oxm.jaxb;Jaxb2Marshaller;true;setSchema;(Resource);;Argument[0];Argument[-1];taint",
        "org.springframework.oxm.jaxb;Jaxb2Marshaller;true;setSchemaLanguage;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.oxm.jaxb;Jaxb2Marshaller;true;setSchemaResourceResolver;(LSResourceResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.oxm.jaxb;Jaxb2Marshaller;true;setSchemas;(Resource[]);;Argument[0];Argument[-1];taint",
        "org.springframework.oxm.jaxb;Jaxb2Marshaller;true;setUnmarshallerListener;(Listener);;Argument[0];Argument[-1];taint",
        "org.springframework.oxm.jaxb;Jaxb2Marshaller;true;setUnmarshallerProperties;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.oxm.jaxb;Jaxb2Marshaller;true;setValidationEventHandler;(ValidationEventHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.oxm.jibx;JibxMarshaller;true;setBindingName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.oxm.jibx;JibxMarshaller;true;setDocTypeInternalSubset;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.oxm.jibx;JibxMarshaller;true;setDocTypePublicId;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.oxm.jibx;JibxMarshaller;true;setDocTypeRootElementName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.oxm.jibx;JibxMarshaller;true;setDocTypeSystemId;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.oxm.jibx;JibxMarshaller;true;setEncoding;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.oxm.jibx;JibxMarshaller;true;setTargetPackage;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.oxm.support;MarshallingSource;true;MarshallingSource;(Marshaller,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.oxm.support;MarshallingSource;true;MarshallingSource;(Marshaller,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.oxm.support;MarshallingSource;true;getContent;();;Argument[-1];ReturnValue;taint",
        "org.springframework.oxm.support;MarshallingSource;true;getMarshaller;();;Argument[-1];ReturnValue;taint",
        "org.springframework.oxm.support;SaxResourceUtils;true;createInputSource;(Resource);;Argument[0];ReturnValue;taint",
        "org.springframework.oxm.xstream;XStreamMarshaller;true;getXStream;();;Argument[-1];ReturnValue;taint",
        "org.springframework.oxm.xstream;XStreamMarshaller;true;setAliases;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.oxm.xstream;XStreamMarshaller;true;setAliasesByType;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.oxm.xstream;XStreamMarshaller;true;setAnnotatedClasses;(Class[]);;Argument[0];Argument[-1];taint",
        "org.springframework.oxm.xstream;XStreamMarshaller;true;setConverterLookup;(ConverterLookup);;Argument[0];Argument[-1];taint",
        "org.springframework.oxm.xstream;XStreamMarshaller;true;setConverterRegistry;(ConverterRegistry);;Argument[0];Argument[-1];taint",
        "org.springframework.oxm.xstream;XStreamMarshaller;true;setConverters;(ConverterMatcher[]);;Argument[0];Argument[-1];taint",
        "org.springframework.oxm.xstream;XStreamMarshaller;true;setEncoding;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.oxm.xstream;XStreamMarshaller;true;setFieldAliases;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.oxm.xstream;XStreamMarshaller;true;setImplicitCollections;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.oxm.xstream;XStreamMarshaller;true;setMapper;(Mapper);;Argument[0];Argument[-1];taint",
        "org.springframework.oxm.xstream;XStreamMarshaller;true;setMapperWrappers;(Class[]);;Argument[0];Argument[-1];taint",
        "org.springframework.oxm.xstream;XStreamMarshaller;true;setMarshallingStrategy;(MarshallingStrategy);;Argument[0];Argument[-1];taint",
        "org.springframework.oxm.xstream;XStreamMarshaller;true;setNameCoder;(NameCoder);;Argument[0];Argument[-1];taint",
        "org.springframework.oxm.xstream;XStreamMarshaller;true;setOmittedFields;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.oxm.xstream;XStreamMarshaller;true;setReflectionProvider;(ReflectionProvider);;Argument[0];Argument[-1];taint",
        "org.springframework.oxm.xstream;XStreamMarshaller;true;setStreamDriver;(HierarchicalStreamDriver);;Argument[0];Argument[-1];taint",
        "org.springframework.oxm.xstream;XStreamMarshaller;true;setSupportedClasses;(Class[]);;Argument[0];Argument[-1];taint",
        "org.springframework.oxm.xstream;XStreamMarshaller;true;setTypePermissions;(TypePermission[]);;Argument[0];Argument[-1];taint",
        "org.springframework.oxm.xstream;XStreamMarshaller;true;setUseAttributeFor;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.oxm.xstream;XStreamMarshaller;true;setUseAttributeForTypes;(Class[]);;Argument[0];Argument[-1];taint",
        "org.springframework.r2dbc.connection.init;CompositeDatabasePopulator;true;CompositeDatabasePopulator;(Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.r2dbc.connection.init;CompositeDatabasePopulator;true;CompositeDatabasePopulator;(DatabasePopulator[]);;Argument[0];Argument[-1];taint",
        "org.springframework.r2dbc.connection.init;CompositeDatabasePopulator;true;addPopulators;(DatabasePopulator[]);;Argument[0];Argument[-1];taint",
        "org.springframework.r2dbc.connection.init;CompositeDatabasePopulator;true;setPopulators;(DatabasePopulator[]);;Argument[0];Argument[-1];taint",
        "org.springframework.r2dbc.connection.init;ConnectionFactoryInitializer;true;setConnectionFactory;(ConnectionFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.r2dbc.connection.init;ConnectionFactoryInitializer;true;setDatabaseCleaner;(DatabasePopulator);;Argument[0];Argument[-1];taint",
        "org.springframework.r2dbc.connection.init;ConnectionFactoryInitializer;true;setDatabasePopulator;(DatabasePopulator);;Argument[0];Argument[-1];taint",
        "org.springframework.r2dbc.connection.init;ResourceDatabasePopulator;true;addScript;(Resource);;Argument[0];Argument[-1];taint",
        "org.springframework.r2dbc.connection.init;ResourceDatabasePopulator;true;setBlockCommentEndDelimiter;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.r2dbc.connection.init;ResourceDatabasePopulator;true;setBlockCommentStartDelimiter;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.r2dbc.connection.init;ResourceDatabasePopulator;true;setCommentPrefix;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.r2dbc.connection.init;ResourceDatabasePopulator;true;setCommentPrefixes;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.r2dbc.connection.init;ResourceDatabasePopulator;true;setDataBufferFactory;(DataBufferFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.r2dbc.connection.init;ResourceDatabasePopulator;true;setSeparator;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.r2dbc.connection.init;ScriptStatementFailedException;true;buildErrorMessage;(String,int,EncodedResource);;Argument[0];ReturnValue;taint",
        "org.springframework.r2dbc.connection.init;ScriptStatementFailedException;true;buildErrorMessage;(String,int,EncodedResource);;Argument[2];ReturnValue;taint",
        "org.springframework.r2dbc.connection.lookup;AbstractRoutingConnectionFactory;true;setConnectionFactoryLookup;(ConnectionFactoryLookup);;Argument[0];Argument[-1];taint",
        "org.springframework.r2dbc.connection.lookup;AbstractRoutingConnectionFactory;true;setDefaultTargetConnectionFactory;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.r2dbc.connection.lookup;AbstractRoutingConnectionFactory;true;setTargetConnectionFactories;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.r2dbc.connection.lookup;BeanFactoryConnectionFactoryLookup;true;BeanFactoryConnectionFactoryLookup;(BeanFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.r2dbc.connection.lookup;ConnectionFactoryLookup;true;getConnectionFactory;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.r2dbc.connection.lookup;ConnectionFactoryLookup;true;getConnectionFactory;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.r2dbc.connection.lookup;ConnectionFactoryLookup;true;getConnectionFactory;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.r2dbc.connection.lookup;MapConnectionFactoryLookup;true;MapConnectionFactoryLookup;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.r2dbc.connection.lookup;MapConnectionFactoryLookup;true;MapConnectionFactoryLookup;(String,ConnectionFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.r2dbc.connection.lookup;MapConnectionFactoryLookup;true;MapConnectionFactoryLookup;(String,ConnectionFactory);;Argument[1];Argument[-1];taint",
        "org.springframework.r2dbc.connection.lookup;MapConnectionFactoryLookup;true;addConnectionFactory;(String,ConnectionFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.r2dbc.connection.lookup;MapConnectionFactoryLookup;true;addConnectionFactory;(String,ConnectionFactory);;Argument[1];Argument[-1];taint",
        "org.springframework.r2dbc.connection.lookup;MapConnectionFactoryLookup;true;getConnectionFactories;();;Argument[-1];ReturnValue;taint",
        "org.springframework.r2dbc.connection.lookup;MapConnectionFactoryLookup;true;setConnectionFactories;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.r2dbc.connection.lookup;SingleConnectionFactoryLookup;true;SingleConnectionFactoryLookup;(ConnectionFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.r2dbc.connection;ConnectionFactoryUtils;true;convertR2dbcException;(String,String,R2dbcException);;Argument[1];ReturnValue;taint",
        "org.springframework.r2dbc.connection;ConnectionFactoryUtils;true;getTargetConnection;(Connection);;Argument[0];ReturnValue;taint",
        "org.springframework.r2dbc.connection;ConnectionHolder;true;ConnectionHolder;(Connection);;Argument[0];Argument[-1];taint",
        "org.springframework.r2dbc.connection;ConnectionHolder;true;ConnectionHolder;(Connection,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.r2dbc.connection;ConnectionHolder;true;getConnection;();;Argument[-1];ReturnValue;taint",
        "org.springframework.r2dbc.connection;DelegatingConnectionFactory;true;DelegatingConnectionFactory;(ConnectionFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.r2dbc.connection;DelegatingConnectionFactory;true;getTargetConnectionFactory;();;Argument[-1];ReturnValue;taint",
        "org.springframework.r2dbc.connection;R2dbcTransactionManager;true;R2dbcTransactionManager;(ConnectionFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.r2dbc.connection;R2dbcTransactionManager;true;getConnectionFactory;();;Argument[-1];ReturnValue;taint",
        "org.springframework.r2dbc.connection;R2dbcTransactionManager;true;setConnectionFactory;(ConnectionFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.r2dbc.connection;SingleConnectionFactory;true;SingleConnectionFactory;(Connection,ConnectionFactoryMetadata,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.r2dbc.connection;SingleConnectionFactory;true;SingleConnectionFactory;(ConnectionFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.r2dbc.connection;TransactionAwareConnectionFactoryProxy;true;TransactionAwareConnectionFactoryProxy;(ConnectionFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.r2dbc.core.binding;BindMarker;true;getPlaceholder;();;Argument[-1];ReturnValue;taint",
        "org.springframework.r2dbc.core.binding;Bindings$Binding;true;getBindMarker;();;Argument[-1];ReturnValue;taint",
        "org.springframework.r2dbc.core.binding;Bindings$Binding;true;getValue;();;Argument[-1];ReturnValue;taint",
        "org.springframework.r2dbc.core.binding;MutableBindings;true;MutableBindings;(BindMarkers);;Argument[0];Argument[-1];taint",
        "org.springframework.r2dbc.core.binding;MutableBindings;true;bind;(BindMarker,Object);;Argument[-1];ReturnValue;value",
        "org.springframework.r2dbc.core.binding;MutableBindings;true;bind;(BindMarker,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.r2dbc.core.binding;MutableBindings;true;bind;(BindMarker,Object);;Argument[0];ReturnValue;taint",
        "org.springframework.r2dbc.core.binding;MutableBindings;true;bind;(BindMarker,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.r2dbc.core.binding;MutableBindings;true;bind;(BindMarker,Object);;Argument[1];ReturnValue;taint",
        "org.springframework.r2dbc.core.binding;MutableBindings;true;bind;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.r2dbc.core.binding;MutableBindings;true;bindNull;(BindMarker,Class);;Argument[-1];ReturnValue;value",
        "org.springframework.r2dbc.core.binding;MutableBindings;true;bindNull;(BindMarker,Class);;Argument[0];Argument[-1];taint",
        "org.springframework.r2dbc.core.binding;MutableBindings;true;bindNull;(BindMarker,Class);;Argument[0];ReturnValue;taint",
        "org.springframework.r2dbc.core;DatabaseClient$Builder;true;apply;(Consumer);;Argument[-1];ReturnValue;value",
        "org.springframework.r2dbc.core;DatabaseClient$Builder;true;bindMarkers;(BindMarkersFactory);;Argument[-1];ReturnValue;value",
        "org.springframework.r2dbc.core;DatabaseClient$Builder;true;bindMarkers;(BindMarkersFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.r2dbc.core;DatabaseClient$Builder;true;bindMarkers;(BindMarkersFactory);;Argument[0];ReturnValue;taint",
        "org.springframework.r2dbc.core;DatabaseClient$Builder;true;connectionFactory;(ConnectionFactory);;Argument[-1];ReturnValue;value",
        "org.springframework.r2dbc.core;DatabaseClient$Builder;true;connectionFactory;(ConnectionFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.r2dbc.core;DatabaseClient$Builder;true;connectionFactory;(ConnectionFactory);;Argument[0];ReturnValue;taint",
        "org.springframework.r2dbc.core;DatabaseClient$Builder;true;executeFunction;(ExecuteFunction);;Argument[-1];ReturnValue;value",
        "org.springframework.r2dbc.core;DatabaseClient$Builder;true;executeFunction;(ExecuteFunction);;Argument[0];Argument[-1];taint",
        "org.springframework.r2dbc.core;DatabaseClient$Builder;true;executeFunction;(ExecuteFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.r2dbc.core;DatabaseClient$Builder;true;namedParameters;(boolean);;Argument[-1];ReturnValue;value",
        "org.springframework.r2dbc.core;DatabaseClient$GenericExecuteSpec;true;bind;(String,Object);;Argument[0];ReturnValue;taint",
        "org.springframework.r2dbc.core;DatabaseClient$GenericExecuteSpec;true;bind;(String,Object);;Argument[1];ReturnValue;taint",
        "org.springframework.r2dbc.core;DatabaseClient$GenericExecuteSpec;true;bind;(int,Object);;Argument[1];ReturnValue;taint",
        "org.springframework.r2dbc.core;DatabaseClient$GenericExecuteSpec;true;bindNull;(String,Class);;Argument[0];ReturnValue;taint",
        "org.springframework.r2dbc.core;DatabaseClient$GenericExecuteSpec;true;map;(BiFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.r2dbc.core;DatabaseClient;true;create;(ConnectionFactory);;Argument[0];ReturnValue;taint",
        "org.springframework.r2dbc.core;DatabaseClient;true;getConnectionFactory;();;Argument[-1];ReturnValue;taint",
        "org.springframework.r2dbc.core;DatabaseClient;true;sql;(Supplier);;Argument[0];ReturnValue;taint",
        "org.springframework.r2dbc.core;Parameter;false;from;(Object);;Argument[0];ReturnValue;taint",
        "org.springframework.r2dbc.core;Parameter;false;fromOrEmpty;(Object,Class);;Argument[0];ReturnValue;taint",
        "org.springframework.r2dbc.core;Parameter;false;getValue;();;Argument[-1];ReturnValue;taint",
        "org.springframework.r2dbc.core;Parameter;false;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.r2dbc.core;QueryOperation;true;toQuery;();;Argument[-1];ReturnValue;taint",
        "org.springframework.r2dbc.core;SqlProvider;true;getSql;();;Argument[-1];ReturnValue;taint",
        "org.springframework.r2dbc;BadSqlGrammarException;true;BadSqlGrammarException;(String,String,R2dbcException);;Argument[1];Argument[-1];taint",
        "org.springframework.r2dbc;BadSqlGrammarException;true;getSql;();;Argument[-1];ReturnValue;taint",
        "org.springframework.r2dbc;UncategorizedR2dbcException;true;UncategorizedR2dbcException;(String,String,R2dbcException);;Argument[1];Argument[-1];taint",
        "org.springframework.r2dbc;UncategorizedR2dbcException;true;getSql;();;Argument[-1];ReturnValue;taint",
        "org.springframework.remoting.caucho;HessianClientInterceptor;true;setProxyFactory;(HessianProxyFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.remoting.caucho;HessianExporter;true;setRemoteResolver;(HessianRemoteResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.remoting.caucho;HessianExporter;true;setSerializerFactory;(SerializerFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.remoting.httpinvoker;AbstractHttpInvokerRequestExecutor;true;getContentType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.remoting.httpinvoker;AbstractHttpInvokerRequestExecutor;true;setContentType;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.remoting.httpinvoker;HttpComponentsHttpInvokerRequestExecutor;true;HttpComponentsHttpInvokerRequestExecutor;(HttpClient);;Argument[0];Argument[-1];taint",
        "org.springframework.remoting.httpinvoker;HttpComponentsHttpInvokerRequestExecutor;true;getHttpClient;();;Argument[-1];ReturnValue;taint",
        "org.springframework.remoting.httpinvoker;HttpComponentsHttpInvokerRequestExecutor;true;setHttpClient;(HttpClient);;Argument[0];Argument[-1];taint",
        "org.springframework.remoting.httpinvoker;HttpInvokerClientConfiguration;true;getCodebaseUrl;();;Argument[-1];ReturnValue;taint",
        "org.springframework.remoting.httpinvoker;HttpInvokerClientInterceptor;true;getHttpInvokerRequestExecutor;();;Argument[-1];ReturnValue;taint",
        "org.springframework.remoting.httpinvoker;HttpInvokerClientInterceptor;true;setCodebaseUrl;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.remoting.httpinvoker;HttpInvokerClientInterceptor;true;setHttpInvokerRequestExecutor;(HttpInvokerRequestExecutor);;Argument[0];Argument[-1];taint",
        "org.springframework.remoting.jaxws;AbstractJaxWsServiceExporter;true;setBindingType;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.remoting.jaxws;AbstractJaxWsServiceExporter;true;setEndpointFeatures;(WebServiceFeature[]);;Argument[0];Argument[-1];taint",
        "org.springframework.remoting.jaxws;AbstractJaxWsServiceExporter;true;setEndpointProperties;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.remoting.jaxws;AbstractJaxWsServiceExporter;true;setExecutor;(Executor);;Argument[0];Argument[-1];taint",
        "org.springframework.remoting.jaxws;JaxWsPortClientInterceptor;true;addCustomProperty;(String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.remoting.jaxws;JaxWsPortClientInterceptor;true;addCustomProperty;(String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.remoting.jaxws;JaxWsPortClientInterceptor;true;getCustomProperties;();;Argument[-1];ReturnValue;taint",
        "org.springframework.remoting.jaxws;JaxWsPortClientInterceptor;true;getEndpointAddress;();;Argument[-1];ReturnValue;taint",
        "org.springframework.remoting.jaxws;JaxWsPortClientInterceptor;true;getJaxWsService;();;Argument[-1];ReturnValue;taint",
        "org.springframework.remoting.jaxws;JaxWsPortClientInterceptor;true;getPassword;();;Argument[-1];ReturnValue;taint",
        "org.springframework.remoting.jaxws;JaxWsPortClientInterceptor;true;getPortName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.remoting.jaxws;JaxWsPortClientInterceptor;true;getSoapActionUri;();;Argument[-1];ReturnValue;taint",
        "org.springframework.remoting.jaxws;JaxWsPortClientInterceptor;true;getUsername;();;Argument[-1];ReturnValue;taint",
        "org.springframework.remoting.jaxws;JaxWsPortClientInterceptor;true;setCustomProperties;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.remoting.jaxws;JaxWsPortClientInterceptor;true;setEndpointAddress;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.remoting.jaxws;JaxWsPortClientInterceptor;true;setJaxWsService;(Service);;Argument[0];Argument[-1];taint",
        "org.springframework.remoting.jaxws;JaxWsPortClientInterceptor;true;setPassword;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.remoting.jaxws;JaxWsPortClientInterceptor;true;setPortFeatures;(WebServiceFeature[]);;Argument[0];Argument[-1];taint",
        "org.springframework.remoting.jaxws;JaxWsPortClientInterceptor;true;setPortName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.remoting.jaxws;JaxWsPortClientInterceptor;true;setSoapActionUri;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.remoting.jaxws;JaxWsPortClientInterceptor;true;setUsername;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.remoting.jaxws;LocalJaxWsServiceFactory;true;getNamespaceUri;();;Argument[-1];ReturnValue;taint",
        "org.springframework.remoting.jaxws;LocalJaxWsServiceFactory;true;getServiceName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.remoting.jaxws;LocalJaxWsServiceFactory;true;getWsdlDocumentUrl;();;Argument[-1];ReturnValue;taint",
        "org.springframework.remoting.jaxws;LocalJaxWsServiceFactory;true;setExecutor;(Executor);;Argument[0];Argument[-1];taint",
        "org.springframework.remoting.jaxws;LocalJaxWsServiceFactory;true;setHandlerResolver;(HandlerResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.remoting.jaxws;LocalJaxWsServiceFactory;true;setNamespaceUri;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.remoting.jaxws;LocalJaxWsServiceFactory;true;setServiceFeatures;(WebServiceFeature[]);;Argument[0];Argument[-1];taint",
        "org.springframework.remoting.jaxws;LocalJaxWsServiceFactory;true;setServiceName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.remoting.jaxws;LocalJaxWsServiceFactory;true;setWsdlDocumentResource;(Resource);;Argument[0];Argument[-1];taint",
        "org.springframework.remoting.jaxws;LocalJaxWsServiceFactory;true;setWsdlDocumentUrl;(URL);;Argument[0];Argument[-1];taint",
        "org.springframework.remoting.jaxws;SimpleHttpServerJaxWsServiceExporter;true;setAuthenticator;(Authenticator);;Argument[0];Argument[-1];taint",
        "org.springframework.remoting.jaxws;SimpleHttpServerJaxWsServiceExporter;true;setBasePath;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.remoting.jaxws;SimpleHttpServerJaxWsServiceExporter;true;setFilters;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.remoting.jaxws;SimpleHttpServerJaxWsServiceExporter;true;setHostname;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.remoting.jaxws;SimpleHttpServerJaxWsServiceExporter;true;setServer;(HttpServer);;Argument[0];Argument[-1];taint",
        "org.springframework.remoting.jaxws;SimpleJaxWsServiceExporter;true;setBaseAddress;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.remoting.rmi;CodebaseAwareObjectInputStream;true;CodebaseAwareObjectInputStream;(InputStream,ClassLoader,String);;Argument[0];Argument[-1];taint",
        "org.springframework.remoting.rmi;CodebaseAwareObjectInputStream;true;CodebaseAwareObjectInputStream;(InputStream,ClassLoader,String);;Argument[1];Argument[-1];taint",
        "org.springframework.remoting.rmi;CodebaseAwareObjectInputStream;true;CodebaseAwareObjectInputStream;(InputStream,ClassLoader,String);;Argument[2];Argument[-1];taint",
        "org.springframework.remoting.rmi;CodebaseAwareObjectInputStream;true;CodebaseAwareObjectInputStream;(InputStream,ClassLoader,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.remoting.rmi;CodebaseAwareObjectInputStream;true;CodebaseAwareObjectInputStream;(InputStream,ClassLoader,boolean);;Argument[1];Argument[-1];taint",
        "org.springframework.remoting.rmi;CodebaseAwareObjectInputStream;true;CodebaseAwareObjectInputStream;(InputStream,String);;Argument[0];Argument[-1];taint",
        "org.springframework.remoting.rmi;CodebaseAwareObjectInputStream;true;CodebaseAwareObjectInputStream;(InputStream,String);;Argument[1];Argument[-1];taint",
        "org.springframework.remoting.rmi;JndiRmiClientInterceptor;true;getRemoteInvocationFactory;();;Argument[-1];ReturnValue;taint",
        "org.springframework.remoting.rmi;JndiRmiClientInterceptor;true;setRemoteInvocationFactory;(RemoteInvocationFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.remoting.rmi;JndiRmiServiceExporter;true;setJndiEnvironment;(Properties);;Argument[0];Argument[-1];taint",
        "org.springframework.remoting.rmi;JndiRmiServiceExporter;true;setJndiName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.remoting.rmi;JndiRmiServiceExporter;true;setJndiTemplate;(JndiTemplate);;Argument[0];Argument[-1];taint",
        "org.springframework.remoting.rmi;RemoteInvocationSerializingExporter;true;getContentType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.remoting.rmi;RemoteInvocationSerializingExporter;true;setContentType;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.remoting.rmi;RmiClientInterceptor;true;setRegistryClientSocketFactory;(RMIClientSocketFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.remoting.rmi;RmiClientInterceptorUtils;true;convertRmiAccessException;(Method,RemoteException,String);;Argument[1];ReturnValue;taint",
        "org.springframework.remoting.rmi;RmiClientInterceptorUtils;true;convertRmiAccessException;(Method,RemoteException,boolean,String);;Argument[1];ReturnValue;taint",
        "org.springframework.remoting.rmi;RmiRegistryFactoryBean;true;getHost;();;Argument[-1];ReturnValue;taint",
        "org.springframework.remoting.rmi;RmiRegistryFactoryBean;true;setClientSocketFactory;(RMIClientSocketFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.remoting.rmi;RmiRegistryFactoryBean;true;setHost;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.remoting.rmi;RmiRegistryFactoryBean;true;setServerSocketFactory;(RMIServerSocketFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.remoting.rmi;RmiServiceExporter;true;setClientSocketFactory;(RMIClientSocketFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.remoting.rmi;RmiServiceExporter;true;setRegistry;(Registry);;Argument[0];Argument[-1];taint",
        "org.springframework.remoting.rmi;RmiServiceExporter;true;setRegistryClientSocketFactory;(RMIClientSocketFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.remoting.rmi;RmiServiceExporter;true;setRegistryHost;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.remoting.rmi;RmiServiceExporter;true;setRegistryServerSocketFactory;(RMIServerSocketFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.remoting.rmi;RmiServiceExporter;true;setServerSocketFactory;(RMIServerSocketFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.remoting.rmi;RmiServiceExporter;true;setServiceName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.remoting.support;RemoteExporter;true;getService;();;Argument[-1];ReturnValue;taint",
        "org.springframework.remoting.support;RemoteExporter;true;setInterceptors;(Object[]);;Argument[0];Argument[-1];taint",
        "org.springframework.remoting.support;RemoteExporter;true;setService;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.remoting.support;RemoteInvocation;true;RemoteInvocation;(String,Class[],Object[]);;Argument[0];Argument[-1];taint",
        "org.springframework.remoting.support;RemoteInvocation;true;RemoteInvocation;(String,Class[],Object[]);;Argument[1];Argument[-1];taint",
        "org.springframework.remoting.support;RemoteInvocation;true;RemoteInvocation;(String,Class[],Object[]);;Argument[2];Argument[-1];taint",
        "org.springframework.remoting.support;RemoteInvocation;true;addAttribute;(String,Serializable);;Argument[0];Argument[-1];taint",
        "org.springframework.remoting.support;RemoteInvocation;true;addAttribute;(String,Serializable);;Argument[1];Argument[-1];taint",
        "org.springframework.remoting.support;RemoteInvocation;true;getArguments;();;Argument[-1];ReturnValue;taint",
        "org.springframework.remoting.support;RemoteInvocation;true;getAttribute;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.remoting.support;RemoteInvocation;true;getAttributes;();;Argument[-1];ReturnValue;taint",
        "org.springframework.remoting.support;RemoteInvocation;true;getMethodName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.remoting.support;RemoteInvocation;true;getParameterTypes;();;Argument[-1];ReturnValue;taint",
        "org.springframework.remoting.support;RemoteInvocation;true;setArguments;(Object[]);;Argument[0];Argument[-1];taint",
        "org.springframework.remoting.support;RemoteInvocation;true;setAttributes;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.remoting.support;RemoteInvocation;true;setMethodName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.remoting.support;RemoteInvocation;true;setParameterTypes;(Class[]);;Argument[0];Argument[-1];taint",
        "org.springframework.remoting.support;RemoteInvocation;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.remoting.support;RemoteInvocationBasedAccessor;true;getRemoteInvocationFactory;();;Argument[-1];ReturnValue;taint",
        "org.springframework.remoting.support;RemoteInvocationBasedAccessor;true;setRemoteInvocationFactory;(RemoteInvocationFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.remoting.support;RemoteInvocationBasedExporter;true;getRemoteInvocationExecutor;();;Argument[-1];ReturnValue;taint",
        "org.springframework.remoting.support;RemoteInvocationBasedExporter;true;setRemoteInvocationExecutor;(RemoteInvocationExecutor);;Argument[0];Argument[-1];taint",
        "org.springframework.remoting.support;RemoteInvocationResult;true;RemoteInvocationResult;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.remoting.support;RemoteInvocationResult;true;RemoteInvocationResult;(Throwable);;Argument[0];Argument[-1];taint",
        "org.springframework.remoting.support;RemoteInvocationResult;true;getException;();;Argument[-1];ReturnValue;taint",
        "org.springframework.remoting.support;RemoteInvocationResult;true;getValue;();;Argument[-1];ReturnValue;taint",
        "org.springframework.remoting.support;RemoteInvocationResult;true;recreate;();;Argument[-1];ReturnValue;taint",
        "org.springframework.remoting.support;RemoteInvocationResult;true;setException;(Throwable);;Argument[0];Argument[-1];taint",
        "org.springframework.remoting.support;RemoteInvocationResult;true;setValue;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.remoting.support;RemoteInvocationTraceInterceptor;true;RemoteInvocationTraceInterceptor;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.remoting.support;SimpleHttpServerFactoryBean;true;setAuthenticator;(Authenticator);;Argument[0];Argument[-1];taint",
        "org.springframework.remoting.support;SimpleHttpServerFactoryBean;true;setContexts;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.remoting.support;SimpleHttpServerFactoryBean;true;setExecutor;(Executor);;Argument[0];Argument[-1];taint",
        "org.springframework.remoting.support;SimpleHttpServerFactoryBean;true;setFilters;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.remoting.support;SimpleHttpServerFactoryBean;true;setHostname;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.remoting.support;UrlBasedRemoteAccessor;true;getServiceUrl;();;Argument[-1];ReturnValue;taint",
        "org.springframework.remoting.support;UrlBasedRemoteAccessor;true;setServiceUrl;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.annotation;AnnotationAsyncExecutionInterceptor;true;AnnotationAsyncExecutionInterceptor;(Executor);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.annotation;AnnotationAsyncExecutionInterceptor;true;AnnotationAsyncExecutionInterceptor;(Executor,AsyncUncaughtExceptionHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.annotation;AnnotationAsyncExecutionInterceptor;true;AnnotationAsyncExecutionInterceptor;(Executor,AsyncUncaughtExceptionHandler);;Argument[1];Argument[-1];taint",
        "org.springframework.scheduling.annotation;AsyncAnnotationAdvisor;true;AsyncAnnotationAdvisor;(Executor,AsyncUncaughtExceptionHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.annotation;AsyncAnnotationAdvisor;true;AsyncAnnotationAdvisor;(Executor,AsyncUncaughtExceptionHandler);;Argument[1];Argument[-1];taint",
        "org.springframework.scheduling.annotation;AsyncAnnotationAdvisor;true;AsyncAnnotationAdvisor;(Supplier,Supplier);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.annotation;AsyncAnnotationAdvisor;true;AsyncAnnotationAdvisor;(Supplier,Supplier);;Argument[1];Argument[-1];taint",
        "org.springframework.scheduling.annotation;AsyncAnnotationBeanPostProcessor;true;configure;(Supplier,Supplier);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.annotation;AsyncAnnotationBeanPostProcessor;true;configure;(Supplier,Supplier);;Argument[1];Argument[-1];taint",
        "org.springframework.scheduling.annotation;AsyncAnnotationBeanPostProcessor;true;setExceptionHandler;(AsyncUncaughtExceptionHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.annotation;AsyncAnnotationBeanPostProcessor;true;setExecutor;(Executor);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.annotation;AsyncResult;true;AsyncResult;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.annotation;AsyncResult;true;forExecutionException;(Throwable);;Argument[0];ReturnValue;taint",
        "org.springframework.scheduling.annotation;AsyncResult;true;forValue;(Object);;Argument[0];ReturnValue;taint",
        "org.springframework.scheduling.annotation;ScheduledAnnotationBeanPostProcessor;true;ScheduledAnnotationBeanPostProcessor;(ScheduledTaskRegistrar);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.annotation;ScheduledAnnotationBeanPostProcessor;true;setScheduler;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.commonj;DelegatingTimerListener;true;DelegatingTimerListener;(Runnable);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.commonj;DelegatingWork;true;DelegatingWork;(Runnable);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.commonj;DelegatingWork;true;getDelegate;();;Argument[-1];ReturnValue;taint",
        "org.springframework.scheduling.commonj;ScheduledTimerListener;true;ScheduledTimerListener;(Runnable);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.commonj;ScheduledTimerListener;true;ScheduledTimerListener;(Runnable,long);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.commonj;ScheduledTimerListener;true;ScheduledTimerListener;(Runnable,long,long,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.commonj;ScheduledTimerListener;true;ScheduledTimerListener;(TimerListener);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.commonj;ScheduledTimerListener;true;ScheduledTimerListener;(TimerListener,long);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.commonj;ScheduledTimerListener;true;ScheduledTimerListener;(TimerListener,long,long,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.commonj;ScheduledTimerListener;true;getTimerListener;();;Argument[-1];ReturnValue;taint",
        "org.springframework.scheduling.commonj;ScheduledTimerListener;true;setRunnable;(Runnable);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.commonj;ScheduledTimerListener;true;setTimerListener;(TimerListener);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.commonj;TimerManagerAccessor;true;setTimerManager;(TimerManager);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.commonj;TimerManagerAccessor;true;setTimerManagerName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.commonj;TimerManagerFactoryBean;true;setScheduledTimerListeners;(ScheduledTimerListener[]);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.commonj;TimerManagerTaskScheduler;true;setErrorHandler;(ErrorHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.commonj;WorkManagerTaskExecutor;true;setTaskDecorator;(TaskDecorator);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.commonj;WorkManagerTaskExecutor;true;setWorkListener;(WorkListener);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.commonj;WorkManagerTaskExecutor;true;setWorkManager;(WorkManager);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.commonj;WorkManagerTaskExecutor;true;setWorkManagerName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.concurrent;ConcurrentTaskExecutor;true;ConcurrentTaskExecutor;(Executor);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.concurrent;ConcurrentTaskExecutor;true;getConcurrentExecutor;();;Argument[-1];ReturnValue;taint",
        "org.springframework.scheduling.concurrent;ConcurrentTaskExecutor;true;setConcurrentExecutor;(Executor);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.concurrent;ConcurrentTaskExecutor;true;setTaskDecorator;(TaskDecorator);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.concurrent;ConcurrentTaskScheduler;true;ConcurrentTaskScheduler;(Executor,ScheduledExecutorService);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.concurrent;ConcurrentTaskScheduler;true;ConcurrentTaskScheduler;(Executor,ScheduledExecutorService);;Argument[1];Argument[-1];taint",
        "org.springframework.scheduling.concurrent;ConcurrentTaskScheduler;true;ConcurrentTaskScheduler;(ScheduledExecutorService);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.concurrent;ConcurrentTaskScheduler;true;setClock;(Clock);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.concurrent;ConcurrentTaskScheduler;true;setErrorHandler;(ErrorHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.concurrent;ConcurrentTaskScheduler;true;setScheduledExecutor;(ScheduledExecutorService);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.concurrent;CustomizableThreadFactory;true;CustomizableThreadFactory;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.concurrent;DefaultManagedAwareThreadFactory;true;setJndiEnvironment;(Properties);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.concurrent;DefaultManagedAwareThreadFactory;true;setJndiName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.concurrent;DefaultManagedAwareThreadFactory;true;setJndiTemplate;(JndiTemplate);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.concurrent;DefaultManagedTaskExecutor;true;setJndiEnvironment;(Properties);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.concurrent;DefaultManagedTaskExecutor;true;setJndiName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.concurrent;DefaultManagedTaskExecutor;true;setJndiTemplate;(JndiTemplate);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.concurrent;DefaultManagedTaskScheduler;true;setJndiEnvironment;(Properties);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.concurrent;DefaultManagedTaskScheduler;true;setJndiName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.concurrent;DefaultManagedTaskScheduler;true;setJndiTemplate;(JndiTemplate);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.concurrent;ExecutorConfigurationSupport;true;setRejectedExecutionHandler;(RejectedExecutionHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.concurrent;ExecutorConfigurationSupport;true;setThreadFactory;(ThreadFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.concurrent;ForkJoinPoolFactoryBean;true;setThreadFactory;(ForkJoinWorkerThreadFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.concurrent;ForkJoinPoolFactoryBean;true;setUncaughtExceptionHandler;(UncaughtExceptionHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.concurrent;ScheduledExecutorFactoryBean;true;setScheduledExecutorTasks;(ScheduledExecutorTask[]);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.concurrent;ScheduledExecutorTask;true;ScheduledExecutorTask;(Runnable);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.concurrent;ScheduledExecutorTask;true;ScheduledExecutorTask;(Runnable,long);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.concurrent;ScheduledExecutorTask;true;ScheduledExecutorTask;(Runnable,long,long,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.concurrent;ScheduledExecutorTask;true;getRunnable;();;Argument[-1];ReturnValue;taint",
        "org.springframework.scheduling.concurrent;ScheduledExecutorTask;true;setRunnable;(Runnable);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.concurrent;ThreadPoolTaskExecutor;true;getThreadPoolExecutor;();;Argument[-1];ReturnValue;taint",
        "org.springframework.scheduling.concurrent;ThreadPoolTaskExecutor;true;setTaskDecorator;(TaskDecorator);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.concurrent;ThreadPoolTaskScheduler;true;getScheduledExecutor;();;Argument[-1];ReturnValue;taint",
        "org.springframework.scheduling.concurrent;ThreadPoolTaskScheduler;true;getScheduledThreadPoolExecutor;();;Argument[-1];ReturnValue;taint",
        "org.springframework.scheduling.concurrent;ThreadPoolTaskScheduler;true;setClock;(Clock);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.concurrent;ThreadPoolTaskScheduler;true;setErrorHandler;(ErrorHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.config;CronTask;true;CronTask;(Runnable,CronTrigger);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.config;CronTask;true;CronTask;(Runnable,CronTrigger);;Argument[1];Argument[-1];taint",
        "org.springframework.scheduling.config;CronTask;true;CronTask;(Runnable,String);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.config;CronTask;true;CronTask;(Runnable,String);;Argument[1];Argument[-1];taint",
        "org.springframework.scheduling.config;CronTask;true;getExpression;();;Argument[-1];ReturnValue;taint",
        "org.springframework.scheduling.config;FixedDelayTask;true;FixedDelayTask;(Runnable,long,long);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.config;FixedRateTask;true;FixedRateTask;(Runnable,long,long);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.config;IntervalTask;true;IntervalTask;(Runnable,long);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.config;IntervalTask;true;IntervalTask;(Runnable,long,long);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.config;ScheduledTask;false;getTask;();;Argument[-1];ReturnValue;taint",
        "org.springframework.scheduling.config;ScheduledTask;false;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.scheduling.config;ScheduledTaskHolder;true;getScheduledTasks;();;Argument[-1];ReturnValue;taint",
        "org.springframework.scheduling.config;ScheduledTaskRegistrar;true;addCronTask;(CronTask);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.config;ScheduledTaskRegistrar;true;addCronTask;(Runnable,String);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.config;ScheduledTaskRegistrar;true;addCronTask;(Runnable,String);;Argument[1];Argument[-1];taint",
        "org.springframework.scheduling.config;ScheduledTaskRegistrar;true;addFixedDelayTask;(IntervalTask);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.config;ScheduledTaskRegistrar;true;addFixedDelayTask;(Runnable,long);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.config;ScheduledTaskRegistrar;true;addFixedRateTask;(IntervalTask);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.config;ScheduledTaskRegistrar;true;addFixedRateTask;(Runnable,long);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.config;ScheduledTaskRegistrar;true;addTriggerTask;(Runnable,Trigger);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.config;ScheduledTaskRegistrar;true;addTriggerTask;(Runnable,Trigger);;Argument[1];Argument[-1];taint",
        "org.springframework.scheduling.config;ScheduledTaskRegistrar;true;addTriggerTask;(TriggerTask);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.config;ScheduledTaskRegistrar;true;getCronTaskList;();;Argument[-1];ReturnValue;taint",
        "org.springframework.scheduling.config;ScheduledTaskRegistrar;true;getFixedDelayTaskList;();;Argument[-1];ReturnValue;taint",
        "org.springframework.scheduling.config;ScheduledTaskRegistrar;true;getFixedRateTaskList;();;Argument[-1];ReturnValue;taint",
        "org.springframework.scheduling.config;ScheduledTaskRegistrar;true;getScheduler;();;Argument[-1];ReturnValue;taint",
        "org.springframework.scheduling.config;ScheduledTaskRegistrar;true;getTriggerTaskList;();;Argument[-1];ReturnValue;taint",
        "org.springframework.scheduling.config;ScheduledTaskRegistrar;true;scheduleCronTask;(CronTask);;Argument[-1];ReturnValue;taint",
        "org.springframework.scheduling.config;ScheduledTaskRegistrar;true;scheduleCronTask;(CronTask);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.config;ScheduledTaskRegistrar;true;scheduleCronTask;(CronTask);;Argument[0];ReturnValue;taint",
        "org.springframework.scheduling.config;ScheduledTaskRegistrar;true;scheduleFixedDelayTask;(FixedDelayTask);;Argument[-1];ReturnValue;taint",
        "org.springframework.scheduling.config;ScheduledTaskRegistrar;true;scheduleFixedDelayTask;(FixedDelayTask);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.config;ScheduledTaskRegistrar;true;scheduleFixedDelayTask;(FixedDelayTask);;Argument[0];ReturnValue;taint",
        "org.springframework.scheduling.config;ScheduledTaskRegistrar;true;scheduleFixedDelayTask;(IntervalTask);;Argument[-1];ReturnValue;taint",
        "org.springframework.scheduling.config;ScheduledTaskRegistrar;true;scheduleFixedDelayTask;(IntervalTask);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.config;ScheduledTaskRegistrar;true;scheduleFixedDelayTask;(IntervalTask);;Argument[0];ReturnValue;taint",
        "org.springframework.scheduling.config;ScheduledTaskRegistrar;true;scheduleFixedRateTask;(FixedRateTask);;Argument[-1];ReturnValue;taint",
        "org.springframework.scheduling.config;ScheduledTaskRegistrar;true;scheduleFixedRateTask;(FixedRateTask);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.config;ScheduledTaskRegistrar;true;scheduleFixedRateTask;(FixedRateTask);;Argument[0];ReturnValue;taint",
        "org.springframework.scheduling.config;ScheduledTaskRegistrar;true;scheduleFixedRateTask;(IntervalTask);;Argument[-1];ReturnValue;taint",
        "org.springframework.scheduling.config;ScheduledTaskRegistrar;true;scheduleFixedRateTask;(IntervalTask);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.config;ScheduledTaskRegistrar;true;scheduleFixedRateTask;(IntervalTask);;Argument[0];ReturnValue;taint",
        "org.springframework.scheduling.config;ScheduledTaskRegistrar;true;scheduleTriggerTask;(TriggerTask);;Argument[-1];ReturnValue;taint",
        "org.springframework.scheduling.config;ScheduledTaskRegistrar;true;scheduleTriggerTask;(TriggerTask);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.config;ScheduledTaskRegistrar;true;scheduleTriggerTask;(TriggerTask);;Argument[0];ReturnValue;taint",
        "org.springframework.scheduling.config;ScheduledTaskRegistrar;true;setCronTasksList;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.config;ScheduledTaskRegistrar;true;setFixedDelayTasksList;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.config;ScheduledTaskRegistrar;true;setFixedRateTasksList;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.config;ScheduledTaskRegistrar;true;setScheduler;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.config;ScheduledTaskRegistrar;true;setTaskScheduler;(TaskScheduler);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.config;ScheduledTaskRegistrar;true;setTriggerTasksList;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.config;Task;true;Task;(Runnable);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.config;Task;true;getRunnable;();;Argument[-1];ReturnValue;taint",
        "org.springframework.scheduling.config;Task;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.scheduling.config;TaskExecutorFactoryBean;true;setPoolSize;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.config;TaskExecutorFactoryBean;true;setRejectedExecutionHandler;(RejectedExecutionHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.config;TriggerTask;true;TriggerTask;(Runnable,Trigger);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.config;TriggerTask;true;TriggerTask;(Runnable,Trigger);;Argument[1];Argument[-1];taint",
        "org.springframework.scheduling.config;TriggerTask;true;getTrigger;();;Argument[-1];ReturnValue;taint",
        "org.springframework.scheduling.quartz;CronTriggerFactoryBean;true;getJobDataMap;();;Argument[-1];ReturnValue;taint",
        "org.springframework.scheduling.quartz;CronTriggerFactoryBean;true;setCalendarName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.quartz;CronTriggerFactoryBean;true;setCronExpression;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.quartz;CronTriggerFactoryBean;true;setDescription;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.quartz;CronTriggerFactoryBean;true;setGroup;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.quartz;CronTriggerFactoryBean;true;setJobDataAsMap;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.quartz;CronTriggerFactoryBean;true;setJobDataMap;(JobDataMap);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.quartz;CronTriggerFactoryBean;true;setJobDetail;(JobDetail);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.quartz;CronTriggerFactoryBean;true;setName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.quartz;CronTriggerFactoryBean;true;setStartTime;(Date);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.quartz;CronTriggerFactoryBean;true;setTimeZone;(TimeZone);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.quartz;DelegatingJob;true;DelegatingJob;(Runnable);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.quartz;DelegatingJob;true;getDelegate;();;Argument[-1];ReturnValue;taint",
        "org.springframework.scheduling.quartz;JobDetailFactoryBean;true;getJobDataMap;();;Argument[-1];ReturnValue;taint",
        "org.springframework.scheduling.quartz;JobDetailFactoryBean;true;setApplicationContextJobDataKey;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.quartz;JobDetailFactoryBean;true;setDescription;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.quartz;JobDetailFactoryBean;true;setGroup;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.quartz;JobDetailFactoryBean;true;setJobDataAsMap;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.quartz;JobDetailFactoryBean;true;setJobDataMap;(JobDataMap);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.quartz;JobDetailFactoryBean;true;setName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.quartz;MethodInvokingJobDetailFactoryBean$MethodInvokingJob;true;setMethodInvoker;(MethodInvoker);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.quartz;MethodInvokingJobDetailFactoryBean;true;setGroup;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.quartz;MethodInvokingJobDetailFactoryBean;true;setName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.quartz;MethodInvokingJobDetailFactoryBean;true;setTargetBeanName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.quartz;ResourceLoaderClassLoadHelper;true;ResourceLoaderClassLoadHelper;(ResourceLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.quartz;SchedulerAccessor;true;getScheduler;();;Argument[-1];ReturnValue;taint",
        "org.springframework.scheduling.quartz;SchedulerAccessor;true;setCalendars;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.quartz;SchedulerAccessor;true;setGlobalJobListeners;(JobListener[]);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.quartz;SchedulerAccessor;true;setGlobalTriggerListeners;(TriggerListener[]);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.quartz;SchedulerAccessor;true;setJobDetails;(JobDetail[]);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.quartz;SchedulerAccessor;true;setJobSchedulingDataLocation;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.quartz;SchedulerAccessor;true;setJobSchedulingDataLocations;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.quartz;SchedulerAccessor;true;setSchedulerListeners;(SchedulerListener[]);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.quartz;SchedulerAccessor;true;setTransactionManager;(PlatformTransactionManager);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.quartz;SchedulerAccessor;true;setTriggers;(Trigger[]);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.quartz;SchedulerAccessorBean;true;setScheduler;(Scheduler);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.quartz;SchedulerAccessorBean;true;setSchedulerName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.quartz;SchedulerContextAware;true;setSchedulerContext;(SchedulerContext);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.quartz;SchedulerFactoryBean;true;setApplicationContextSchedulerContextKey;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.quartz;SchedulerFactoryBean;true;setConfigLocation;(Resource);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.quartz;SchedulerFactoryBean;true;setDataSource;(DataSource);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.quartz;SchedulerFactoryBean;true;setJobFactory;(JobFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.quartz;SchedulerFactoryBean;true;setNonTransactionalDataSource;(DataSource);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.quartz;SchedulerFactoryBean;true;setQuartzProperties;(Properties);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.quartz;SchedulerFactoryBean;true;setSchedulerContextAsMap;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.quartz;SchedulerFactoryBean;true;setSchedulerFactory;(SchedulerFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.quartz;SchedulerFactoryBean;true;setSchedulerName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.quartz;SchedulerFactoryBean;true;setTaskExecutor;(Executor);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.quartz;SimpleTriggerFactoryBean;true;getJobDataMap;();;Argument[-1];ReturnValue;taint",
        "org.springframework.scheduling.quartz;SimpleTriggerFactoryBean;true;setDescription;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.quartz;SimpleTriggerFactoryBean;true;setGroup;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.quartz;SimpleTriggerFactoryBean;true;setJobDataAsMap;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.quartz;SimpleTriggerFactoryBean;true;setJobDataMap;(JobDataMap);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.quartz;SimpleTriggerFactoryBean;true;setJobDetail;(JobDetail);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.quartz;SimpleTriggerFactoryBean;true;setName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.quartz;SimpleTriggerFactoryBean;true;setStartTime;(Date);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.quartz;SpringBeanJobFactory;true;setIgnoredUnknownProperties;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.support;CronExpression;false;parse;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.scheduling.support;CronExpression;false;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.scheduling.support;CronSequenceGenerator;true;CronSequenceGenerator;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.support;CronSequenceGenerator;true;CronSequenceGenerator;(String,TimeZone);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.support;CronSequenceGenerator;true;CronSequenceGenerator;(String,TimeZone);;Argument[1];Argument[-1];taint",
        "org.springframework.scheduling.support;CronSequenceGenerator;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.scheduling.support;CronTrigger;true;CronTrigger;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.support;CronTrigger;true;CronTrigger;(String,TimeZone);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.support;CronTrigger;true;CronTrigger;(String,ZoneId);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.support;CronTrigger;true;CronTrigger;(String,ZoneId);;Argument[1];Argument[-1];taint",
        "org.springframework.scheduling.support;CronTrigger;true;getExpression;();;Argument[-1];ReturnValue;taint",
        "org.springframework.scheduling.support;CronTrigger;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.scheduling.support;DelegatingErrorHandlingRunnable;true;DelegatingErrorHandlingRunnable;(Runnable,ErrorHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.support;DelegatingErrorHandlingRunnable;true;DelegatingErrorHandlingRunnable;(Runnable,ErrorHandler);;Argument[1];Argument[-1];taint",
        "org.springframework.scheduling.support;DelegatingErrorHandlingRunnable;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.scheduling.support;ScheduledMethodRunnable;true;ScheduledMethodRunnable;(Object,Method);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.support;ScheduledMethodRunnable;true;ScheduledMethodRunnable;(Object,Method);;Argument[1];Argument[-1];taint",
        "org.springframework.scheduling.support;ScheduledMethodRunnable;true;ScheduledMethodRunnable;(Object,String);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.support;ScheduledMethodRunnable;true;getMethod;();;Argument[-1];ReturnValue;taint",
        "org.springframework.scheduling.support;ScheduledMethodRunnable;true;getTarget;();;Argument[-1];ReturnValue;taint",
        "org.springframework.scheduling.support;SimpleTriggerContext;true;SimpleTriggerContext;(Clock);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.support;SimpleTriggerContext;true;SimpleTriggerContext;(Date,Date,Date);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.support;SimpleTriggerContext;true;SimpleTriggerContext;(Date,Date,Date);;Argument[1];Argument[-1];taint",
        "org.springframework.scheduling.support;SimpleTriggerContext;true;SimpleTriggerContext;(Date,Date,Date);;Argument[2];Argument[-1];taint",
        "org.springframework.scheduling.support;SimpleTriggerContext;true;update;(Date,Date,Date);;Argument[0];Argument[-1];taint",
        "org.springframework.scheduling.support;SimpleTriggerContext;true;update;(Date,Date,Date);;Argument[1];Argument[-1];taint",
        "org.springframework.scheduling.support;SimpleTriggerContext;true;update;(Date,Date,Date);;Argument[2];Argument[-1];taint",
        "org.springframework.scheduling.support;TaskUtils;true;decorateTaskWithErrorHandler;(Runnable,ErrorHandler,boolean);;Argument[0];ReturnValue;taint",
        "org.springframework.scheduling.support;TaskUtils;true;decorateTaskWithErrorHandler;(Runnable,ErrorHandler,boolean);;Argument[1];ReturnValue;taint",
        "org.springframework.scheduling;TaskScheduler;true;getClock;();;Argument[-1];ReturnValue;taint",
        "org.springframework.scheduling;TaskScheduler;true;schedule;(Runnable,Trigger);;Argument[0];ReturnValue;taint",
        "org.springframework.scheduling;TaskScheduler;true;schedule;(Runnable,Trigger);;Argument[1];ReturnValue;taint",
        "org.springframework.scheduling;TriggerContext;true;getClock;();;Argument[-1];ReturnValue;taint",
        "org.springframework.scheduling;TriggerContext;true;lastActualExecutionTime;();;Argument[-1];ReturnValue;taint",
        "org.springframework.scheduling;TriggerContext;true;lastCompletionTime;();;Argument[-1];ReturnValue;taint",
        "org.springframework.scheduling;TriggerContext;true;lastScheduledExecutionTime;();;Argument[-1];ReturnValue;taint",
        "org.springframework.scripting.bsh;BshScriptEvaluator;true;BshScriptEvaluator;(ClassLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.scripting.bsh;BshScriptFactory;true;BshScriptFactory;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.scripting.bsh;BshScriptFactory;true;BshScriptFactory;(String,Class[]);;Argument[0];Argument[-1];taint",
        "org.springframework.scripting.bsh;BshScriptFactory;true;BshScriptFactory;(String,Class[]);;Argument[1];Argument[-1];taint",
        "org.springframework.scripting.bsh;BshScriptFactory;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.scripting.groovy;GroovyScriptEvaluator;true;GroovyScriptEvaluator;(ClassLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.scripting.groovy;GroovyScriptEvaluator;true;getCompilerConfiguration;();;Argument[-1];ReturnValue;taint",
        "org.springframework.scripting.groovy;GroovyScriptEvaluator;true;setCompilerConfiguration;(CompilerConfiguration);;Argument[0];Argument[-1];taint",
        "org.springframework.scripting.groovy;GroovyScriptFactory;true;GroovyScriptFactory;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.scripting.groovy;GroovyScriptFactory;true;GroovyScriptFactory;(String,CompilationCustomizer[]);;Argument[0];Argument[-1];taint",
        "org.springframework.scripting.groovy;GroovyScriptFactory;true;GroovyScriptFactory;(String,CompilerConfiguration);;Argument[0];Argument[-1];taint",
        "org.springframework.scripting.groovy;GroovyScriptFactory;true;GroovyScriptFactory;(String,CompilerConfiguration);;Argument[1];Argument[-1];taint",
        "org.springframework.scripting.groovy;GroovyScriptFactory;true;GroovyScriptFactory;(String,GroovyObjectCustomizer);;Argument[0];Argument[-1];taint",
        "org.springframework.scripting.groovy;GroovyScriptFactory;true;GroovyScriptFactory;(String,GroovyObjectCustomizer);;Argument[1];Argument[-1];taint",
        "org.springframework.scripting.groovy;GroovyScriptFactory;true;getGroovyClassLoader;();;Argument[-1];ReturnValue;taint",
        "org.springframework.scripting.groovy;GroovyScriptFactory;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.scripting.support;RefreshableScriptTargetSource;true;RefreshableScriptTargetSource;(BeanFactory,String,ScriptFactory,ScriptSource,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.scripting.support;RefreshableScriptTargetSource;true;RefreshableScriptTargetSource;(BeanFactory,String,ScriptFactory,ScriptSource,boolean);;Argument[1];Argument[-1];taint",
        "org.springframework.scripting.support;RefreshableScriptTargetSource;true;RefreshableScriptTargetSource;(BeanFactory,String,ScriptFactory,ScriptSource,boolean);;Argument[2];Argument[-1];taint",
        "org.springframework.scripting.support;RefreshableScriptTargetSource;true;RefreshableScriptTargetSource;(BeanFactory,String,ScriptFactory,ScriptSource,boolean);;Argument[3];Argument[-1];taint",
        "org.springframework.scripting.support;ResourceScriptSource;true;ResourceScriptSource;(EncodedResource);;Argument[0];Argument[-1];taint",
        "org.springframework.scripting.support;ResourceScriptSource;true;ResourceScriptSource;(Resource);;Argument[0];Argument[-1];taint",
        "org.springframework.scripting.support;ResourceScriptSource;true;getResource;();;Argument[-1];ReturnValue;taint",
        "org.springframework.scripting.support;ResourceScriptSource;true;setEncoding;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.scripting.support;ResourceScriptSource;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.scripting.support;StandardScriptEvalException;true;StandardScriptEvalException;(ScriptException);;Argument[0];Argument[-1];taint",
        "org.springframework.scripting.support;StandardScriptEvalException;true;getScriptException;();;Argument[-1];ReturnValue;taint",
        "org.springframework.scripting.support;StandardScriptEvaluator;true;StandardScriptEvaluator;(ScriptEngineManager);;Argument[0];Argument[-1];taint",
        "org.springframework.scripting.support;StandardScriptEvaluator;true;setEngineName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.scripting.support;StandardScriptEvaluator;true;setGlobalBindings;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.scripting.support;StandardScriptEvaluator;true;setLanguage;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.scripting.support;StandardScriptFactory;true;StandardScriptFactory;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.scripting.support;StandardScriptFactory;true;StandardScriptFactory;(String,Class[]);;Argument[0];Argument[-1];taint",
        "org.springframework.scripting.support;StandardScriptFactory;true;StandardScriptFactory;(String,Class[]);;Argument[1];Argument[-1];taint",
        "org.springframework.scripting.support;StandardScriptFactory;true;StandardScriptFactory;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.scripting.support;StandardScriptFactory;true;StandardScriptFactory;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.scripting.support;StandardScriptFactory;true;StandardScriptFactory;(String,String,Class[]);;Argument[0];Argument[-1];taint",
        "org.springframework.scripting.support;StandardScriptFactory;true;StandardScriptFactory;(String,String,Class[]);;Argument[1];Argument[-1];taint",
        "org.springframework.scripting.support;StandardScriptFactory;true;StandardScriptFactory;(String,String,Class[]);;Argument[2];Argument[-1];taint",
        "org.springframework.scripting.support;StandardScriptFactory;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.scripting.support;StaticScriptSource;true;StaticScriptSource;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.scripting.support;StaticScriptSource;true;StaticScriptSource;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.scripting.support;StaticScriptSource;true;StaticScriptSource;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.scripting.support;StaticScriptSource;true;setScript;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.scripting.support;StaticScriptSource;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.scripting;ScriptCompilationException;true;ScriptCompilationException;(ScriptSource,String);;Argument[0];Argument[-1];taint",
        "org.springframework.scripting;ScriptCompilationException;true;ScriptCompilationException;(ScriptSource,String,Throwable);;Argument[0];Argument[-1];taint",
        "org.springframework.scripting;ScriptCompilationException;true;ScriptCompilationException;(ScriptSource,Throwable);;Argument[0];Argument[-1];taint",
        "org.springframework.scripting;ScriptCompilationException;true;getScriptSource;();;Argument[-1];ReturnValue;taint",
        "org.springframework.scripting;ScriptFactory;true;getScriptInterfaces;();;Argument[-1];ReturnValue;taint",
        "org.springframework.scripting;ScriptFactory;true;getScriptSourceLocator;();;Argument[-1];ReturnValue;taint",
        "org.springframework.scripting;ScriptFactory;true;getScriptedObject;(ScriptSource,Class[]);;Argument[-1];ReturnValue;taint",
        "org.springframework.scripting;ScriptSource;true;getScriptAsString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.scripting;ScriptSource;true;suggestedClassName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.context.cache;ContextCache;true;get;(MergedContextConfiguration);;Argument[-1];ReturnValue;taint",
        "org.springframework.test.context.cache;ContextCache;true;put;(MergedContextConfiguration,ApplicationContext);;Argument[0];Argument[-1];taint",
        "org.springframework.test.context.cache;ContextCache;true;put;(MergedContextConfiguration,ApplicationContext);;Argument[1];Argument[-1];taint",
        "org.springframework.test.context.cache;DefaultCacheAwareContextLoaderDelegate;true;DefaultCacheAwareContextLoaderDelegate;(ContextCache);;Argument[0];Argument[-1];taint",
        "org.springframework.test.context.cache;DefaultContextCache;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.context.event;ApplicationEvents;true;stream;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.context.junit4.statements;ProfileValueChecker;true;ProfileValueChecker;(Statement,Class,Method);;Argument[0];Argument[-1];taint",
        "org.springframework.test.context.junit4.statements;ProfileValueChecker;true;ProfileValueChecker;(Statement,Class,Method);;Argument[2];Argument[-1];taint",
        "org.springframework.test.context.junit4.statements;RunAfterTestClassCallbacks;true;RunAfterTestClassCallbacks;(Statement,TestContextManager);;Argument[0];Argument[-1];taint",
        "org.springframework.test.context.junit4.statements;RunAfterTestClassCallbacks;true;RunAfterTestClassCallbacks;(Statement,TestContextManager);;Argument[1];Argument[-1];taint",
        "org.springframework.test.context.junit4.statements;RunAfterTestExecutionCallbacks;true;RunAfterTestExecutionCallbacks;(Statement,Object,Method,TestContextManager);;Argument[0];Argument[-1];taint",
        "org.springframework.test.context.junit4.statements;RunAfterTestExecutionCallbacks;true;RunAfterTestExecutionCallbacks;(Statement,Object,Method,TestContextManager);;Argument[1];Argument[-1];taint",
        "org.springframework.test.context.junit4.statements;RunAfterTestExecutionCallbacks;true;RunAfterTestExecutionCallbacks;(Statement,Object,Method,TestContextManager);;Argument[2];Argument[-1];taint",
        "org.springframework.test.context.junit4.statements;RunAfterTestExecutionCallbacks;true;RunAfterTestExecutionCallbacks;(Statement,Object,Method,TestContextManager);;Argument[3];Argument[-1];taint",
        "org.springframework.test.context.junit4.statements;RunAfterTestMethodCallbacks;true;RunAfterTestMethodCallbacks;(Statement,Object,Method,TestContextManager);;Argument[0];Argument[-1];taint",
        "org.springframework.test.context.junit4.statements;RunAfterTestMethodCallbacks;true;RunAfterTestMethodCallbacks;(Statement,Object,Method,TestContextManager);;Argument[1];Argument[-1];taint",
        "org.springframework.test.context.junit4.statements;RunAfterTestMethodCallbacks;true;RunAfterTestMethodCallbacks;(Statement,Object,Method,TestContextManager);;Argument[2];Argument[-1];taint",
        "org.springframework.test.context.junit4.statements;RunAfterTestMethodCallbacks;true;RunAfterTestMethodCallbacks;(Statement,Object,Method,TestContextManager);;Argument[3];Argument[-1];taint",
        "org.springframework.test.context.junit4.statements;RunBeforeTestClassCallbacks;true;RunBeforeTestClassCallbacks;(Statement,TestContextManager);;Argument[0];Argument[-1];taint",
        "org.springframework.test.context.junit4.statements;RunBeforeTestClassCallbacks;true;RunBeforeTestClassCallbacks;(Statement,TestContextManager);;Argument[1];Argument[-1];taint",
        "org.springframework.test.context.junit4.statements;RunBeforeTestExecutionCallbacks;true;RunBeforeTestExecutionCallbacks;(Statement,Object,Method,TestContextManager);;Argument[0];Argument[-1];taint",
        "org.springframework.test.context.junit4.statements;RunBeforeTestExecutionCallbacks;true;RunBeforeTestExecutionCallbacks;(Statement,Object,Method,TestContextManager);;Argument[1];Argument[-1];taint",
        "org.springframework.test.context.junit4.statements;RunBeforeTestExecutionCallbacks;true;RunBeforeTestExecutionCallbacks;(Statement,Object,Method,TestContextManager);;Argument[2];Argument[-1];taint",
        "org.springframework.test.context.junit4.statements;RunBeforeTestExecutionCallbacks;true;RunBeforeTestExecutionCallbacks;(Statement,Object,Method,TestContextManager);;Argument[3];Argument[-1];taint",
        "org.springframework.test.context.junit4.statements;RunBeforeTestMethodCallbacks;true;RunBeforeTestMethodCallbacks;(Statement,Object,Method,TestContextManager);;Argument[0];Argument[-1];taint",
        "org.springframework.test.context.junit4.statements;RunBeforeTestMethodCallbacks;true;RunBeforeTestMethodCallbacks;(Statement,Object,Method,TestContextManager);;Argument[1];Argument[-1];taint",
        "org.springframework.test.context.junit4.statements;RunBeforeTestMethodCallbacks;true;RunBeforeTestMethodCallbacks;(Statement,Object,Method,TestContextManager);;Argument[2];Argument[-1];taint",
        "org.springframework.test.context.junit4.statements;RunBeforeTestMethodCallbacks;true;RunBeforeTestMethodCallbacks;(Statement,Object,Method,TestContextManager);;Argument[3];Argument[-1];taint",
        "org.springframework.test.context.junit4.statements;RunPrepareTestInstanceCallbacks;true;RunPrepareTestInstanceCallbacks;(Statement,Object,TestContextManager);;Argument[0];Argument[-1];taint",
        "org.springframework.test.context.junit4.statements;RunPrepareTestInstanceCallbacks;true;RunPrepareTestInstanceCallbacks;(Statement,Object,TestContextManager);;Argument[1];Argument[-1];taint",
        "org.springframework.test.context.junit4.statements;RunPrepareTestInstanceCallbacks;true;RunPrepareTestInstanceCallbacks;(Statement,Object,TestContextManager);;Argument[2];Argument[-1];taint",
        "org.springframework.test.context.junit4.statements;SpringFailOnTimeout;true;SpringFailOnTimeout;(Statement,Method);;Argument[0];Argument[-1];taint",
        "org.springframework.test.context.junit4.statements;SpringFailOnTimeout;true;SpringFailOnTimeout;(Statement,long);;Argument[0];Argument[-1];taint",
        "org.springframework.test.context.junit4.statements;SpringRepeat;true;SpringRepeat;(Statement,Method);;Argument[0];Argument[-1];taint",
        "org.springframework.test.context.junit4.statements;SpringRepeat;true;SpringRepeat;(Statement,Method);;Argument[1];Argument[-1];taint",
        "org.springframework.test.context.junit4.statements;SpringRepeat;true;SpringRepeat;(Statement,Method,int);;Argument[0];Argument[-1];taint",
        "org.springframework.test.context.junit4.statements;SpringRepeat;true;SpringRepeat;(Statement,Method,int);;Argument[1];Argument[-1];taint",
        "org.springframework.test.context.junit4;AbstractTransactionalJUnit4SpringContextTests;true;setDataSource;(DataSource);;Argument[0];Argument[-1];taint",
        "org.springframework.test.context.junit4;AbstractTransactionalJUnit4SpringContextTests;true;setSqlScriptEncoding;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.test.context.support;DefaultBootstrapContext;true;DefaultBootstrapContext;(Class,CacheAwareContextLoaderDelegate);;Argument[1];Argument[-1];taint",
        "org.springframework.test.context.support;DefaultBootstrapContext;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.context.support;DefaultTestContext;true;DefaultTestContext;(Class,MergedContextConfiguration,CacheAwareContextLoaderDelegate);;Argument[1];Argument[-1];taint",
        "org.springframework.test.context.support;DefaultTestContext;true;DefaultTestContext;(Class,MergedContextConfiguration,CacheAwareContextLoaderDelegate);;Argument[2];Argument[-1];taint",
        "org.springframework.test.context.support;DefaultTestContext;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.context.transaction;TestContextTransactionUtils;true;createDelegatingTransactionAttribute;(TestContext,TransactionAttribute);;Argument[1];ReturnValue;taint",
        "org.springframework.test.context.transaction;TestContextTransactionUtils;true;retrieveDataSource;(TestContext,String);;Argument[1];ReturnValue;taint",
        "org.springframework.test.context.transaction;TestContextTransactionUtils;true;retrieveTransactionManager;(TestContext,String);;Argument[1];ReturnValue;taint",
        "org.springframework.test.context.util;TestContextResourceUtils;true;convertToClasspathResourcePaths;(Class,String[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.test.context.util;TestContextResourceUtils;true;convertToClasspathResourcePaths;(Class,boolean,String[]);;ArrayElement of Argument[2];ReturnValue;taint",
        "org.springframework.test.context.web;WebMergedContextConfiguration;true;WebMergedContextConfiguration;(Class,String[],Class[],Set,String[],String[],String[],Set,String,ContextLoader,CacheAwareContextLoaderDelegate,MergedContextConfiguration);;Argument[10];Argument[-1];taint",
        "org.springframework.test.context.web;WebMergedContextConfiguration;true;WebMergedContextConfiguration;(Class,String[],Class[],Set,String[],String[],String[],Set,String,ContextLoader,CacheAwareContextLoaderDelegate,MergedContextConfiguration);;Argument[11];Argument[-1];taint",
        "org.springframework.test.context.web;WebMergedContextConfiguration;true;WebMergedContextConfiguration;(Class,String[],Class[],Set,String[],String[],String[],Set,String,ContextLoader,CacheAwareContextLoaderDelegate,MergedContextConfiguration);;Argument[1];Argument[-1];taint",
        "org.springframework.test.context.web;WebMergedContextConfiguration;true;WebMergedContextConfiguration;(Class,String[],Class[],Set,String[],String[],String[],Set,String,ContextLoader,CacheAwareContextLoaderDelegate,MergedContextConfiguration);;Argument[2];Argument[-1];taint",
        "org.springframework.test.context.web;WebMergedContextConfiguration;true;WebMergedContextConfiguration;(Class,String[],Class[],Set,String[],String[],String[],Set,String,ContextLoader,CacheAwareContextLoaderDelegate,MergedContextConfiguration);;Argument[3];Argument[-1];taint",
        "org.springframework.test.context.web;WebMergedContextConfiguration;true;WebMergedContextConfiguration;(Class,String[],Class[],Set,String[],String[],String[],Set,String,ContextLoader,CacheAwareContextLoaderDelegate,MergedContextConfiguration);;Argument[4];Argument[-1];taint",
        "org.springframework.test.context.web;WebMergedContextConfiguration;true;WebMergedContextConfiguration;(Class,String[],Class[],Set,String[],String[],String[],Set,String,ContextLoader,CacheAwareContextLoaderDelegate,MergedContextConfiguration);;Argument[5];Argument[-1];taint",
        "org.springframework.test.context.web;WebMergedContextConfiguration;true;WebMergedContextConfiguration;(Class,String[],Class[],Set,String[],String[],String[],Set,String,ContextLoader,CacheAwareContextLoaderDelegate,MergedContextConfiguration);;Argument[6];Argument[-1];taint",
        "org.springframework.test.context.web;WebMergedContextConfiguration;true;WebMergedContextConfiguration;(Class,String[],Class[],Set,String[],String[],String[],Set,String,ContextLoader,CacheAwareContextLoaderDelegate,MergedContextConfiguration);;Argument[7];Argument[-1];taint",
        "org.springframework.test.context.web;WebMergedContextConfiguration;true;WebMergedContextConfiguration;(Class,String[],Class[],Set,String[],String[],String[],Set,String,ContextLoader,CacheAwareContextLoaderDelegate,MergedContextConfiguration);;Argument[8];Argument[-1];taint",
        "org.springframework.test.context.web;WebMergedContextConfiguration;true;WebMergedContextConfiguration;(Class,String[],Class[],Set,String[],String[],String[],Set,String,ContextLoader,CacheAwareContextLoaderDelegate,MergedContextConfiguration);;Argument[9];Argument[-1];taint",
        "org.springframework.test.context.web;WebMergedContextConfiguration;true;WebMergedContextConfiguration;(Class,String[],Class[],Set,String[],String[],String[],String,ContextLoader,CacheAwareContextLoaderDelegate,MergedContextConfiguration);;Argument[10];Argument[-1];taint",
        "org.springframework.test.context.web;WebMergedContextConfiguration;true;WebMergedContextConfiguration;(Class,String[],Class[],Set,String[],String[],String[],String,ContextLoader,CacheAwareContextLoaderDelegate,MergedContextConfiguration);;Argument[1];Argument[-1];taint",
        "org.springframework.test.context.web;WebMergedContextConfiguration;true;WebMergedContextConfiguration;(Class,String[],Class[],Set,String[],String[],String[],String,ContextLoader,CacheAwareContextLoaderDelegate,MergedContextConfiguration);;Argument[2];Argument[-1];taint",
        "org.springframework.test.context.web;WebMergedContextConfiguration;true;WebMergedContextConfiguration;(Class,String[],Class[],Set,String[],String[],String[],String,ContextLoader,CacheAwareContextLoaderDelegate,MergedContextConfiguration);;Argument[3];Argument[-1];taint",
        "org.springframework.test.context.web;WebMergedContextConfiguration;true;WebMergedContextConfiguration;(Class,String[],Class[],Set,String[],String[],String[],String,ContextLoader,CacheAwareContextLoaderDelegate,MergedContextConfiguration);;Argument[4];Argument[-1];taint",
        "org.springframework.test.context.web;WebMergedContextConfiguration;true;WebMergedContextConfiguration;(Class,String[],Class[],Set,String[],String[],String[],String,ContextLoader,CacheAwareContextLoaderDelegate,MergedContextConfiguration);;Argument[5];Argument[-1];taint",
        "org.springframework.test.context.web;WebMergedContextConfiguration;true;WebMergedContextConfiguration;(Class,String[],Class[],Set,String[],String[],String[],String,ContextLoader,CacheAwareContextLoaderDelegate,MergedContextConfiguration);;Argument[6];Argument[-1];taint",
        "org.springframework.test.context.web;WebMergedContextConfiguration;true;WebMergedContextConfiguration;(Class,String[],Class[],Set,String[],String[],String[],String,ContextLoader,CacheAwareContextLoaderDelegate,MergedContextConfiguration);;Argument[7];Argument[-1];taint",
        "org.springframework.test.context.web;WebMergedContextConfiguration;true;WebMergedContextConfiguration;(Class,String[],Class[],Set,String[],String[],String[],String,ContextLoader,CacheAwareContextLoaderDelegate,MergedContextConfiguration);;Argument[8];Argument[-1];taint",
        "org.springframework.test.context.web;WebMergedContextConfiguration;true;WebMergedContextConfiguration;(Class,String[],Class[],Set,String[],String[],String[],String,ContextLoader,CacheAwareContextLoaderDelegate,MergedContextConfiguration);;Argument[9];Argument[-1];taint",
        "org.springframework.test.context.web;WebMergedContextConfiguration;true;WebMergedContextConfiguration;(MergedContextConfiguration,String);;Argument[1];Argument[-1];taint",
        "org.springframework.test.context.web;WebMergedContextConfiguration;true;getResourceBasePath;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.context.web;WebMergedContextConfiguration;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.context;BootstrapContext;true;getCacheAwareContextLoaderDelegate;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.context;CacheAwareContextLoaderDelegate;true;loadContext;(MergedContextConfiguration);;Argument[-1];ReturnValue;taint",
        "org.springframework.test.context;CacheAwareContextLoaderDelegate;true;loadContext;(MergedContextConfiguration);;Argument[0];Argument[-1];taint",
        "org.springframework.test.context;ContextConfigurationAttributes;true;ContextConfigurationAttributes;(Class,AnnotationAttributes);;Argument[1];Argument[-1];taint",
        "org.springframework.test.context;ContextConfigurationAttributes;true;ContextConfigurationAttributes;(Class,String[],Class[],boolean,Class[],boolean,Class);;Argument[1];Argument[-1];taint",
        "org.springframework.test.context;ContextConfigurationAttributes;true;ContextConfigurationAttributes;(Class,String[],Class[],boolean,Class[],boolean,Class);;Argument[2];Argument[-1];taint",
        "org.springframework.test.context;ContextConfigurationAttributes;true;ContextConfigurationAttributes;(Class,String[],Class[],boolean,Class[],boolean,Class);;Argument[4];Argument[-1];taint",
        "org.springframework.test.context;ContextConfigurationAttributes;true;ContextConfigurationAttributes;(Class,String[],Class[],boolean,Class[],boolean,String,Class);;Argument[1];Argument[-1];taint",
        "org.springframework.test.context;ContextConfigurationAttributes;true;ContextConfigurationAttributes;(Class,String[],Class[],boolean,Class[],boolean,String,Class);;Argument[2];Argument[-1];taint",
        "org.springframework.test.context;ContextConfigurationAttributes;true;ContextConfigurationAttributes;(Class,String[],Class[],boolean,Class[],boolean,String,Class);;Argument[4];Argument[-1];taint",
        "org.springframework.test.context;ContextConfigurationAttributes;true;ContextConfigurationAttributes;(Class,String[],Class[],boolean,Class[],boolean,String,Class);;Argument[6];Argument[-1];taint",
        "org.springframework.test.context;ContextConfigurationAttributes;true;getClasses;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.context;ContextConfigurationAttributes;true;getInitializers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.context;ContextConfigurationAttributes;true;getLocations;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.context;ContextConfigurationAttributes;true;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.context;ContextConfigurationAttributes;true;setClasses;(Class[]);;Argument[0];Argument[-1];taint",
        "org.springframework.test.context;ContextConfigurationAttributes;true;setLocations;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.test.context;ContextConfigurationAttributes;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.context;ContextLoader;true;processLocations;(Class,String[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.test.context;MergedContextConfiguration;true;MergedContextConfiguration;(Class,String[],Class[],Set,String[],ContextLoader);;Argument[1];Argument[-1];taint",
        "org.springframework.test.context;MergedContextConfiguration;true;MergedContextConfiguration;(Class,String[],Class[],Set,String[],ContextLoader);;Argument[2];Argument[-1];taint",
        "org.springframework.test.context;MergedContextConfiguration;true;MergedContextConfiguration;(Class,String[],Class[],Set,String[],ContextLoader);;Argument[3];Argument[-1];taint",
        "org.springframework.test.context;MergedContextConfiguration;true;MergedContextConfiguration;(Class,String[],Class[],Set,String[],ContextLoader);;Argument[4];Argument[-1];taint",
        "org.springframework.test.context;MergedContextConfiguration;true;MergedContextConfiguration;(Class,String[],Class[],Set,String[],ContextLoader);;Argument[5];Argument[-1];taint",
        "org.springframework.test.context;MergedContextConfiguration;true;MergedContextConfiguration;(Class,String[],Class[],Set,String[],ContextLoader,CacheAwareContextLoaderDelegate,MergedContextConfiguration);;Argument[1];Argument[-1];taint",
        "org.springframework.test.context;MergedContextConfiguration;true;MergedContextConfiguration;(Class,String[],Class[],Set,String[],ContextLoader,CacheAwareContextLoaderDelegate,MergedContextConfiguration);;Argument[2];Argument[-1];taint",
        "org.springframework.test.context;MergedContextConfiguration;true;MergedContextConfiguration;(Class,String[],Class[],Set,String[],ContextLoader,CacheAwareContextLoaderDelegate,MergedContextConfiguration);;Argument[3];Argument[-1];taint",
        "org.springframework.test.context;MergedContextConfiguration;true;MergedContextConfiguration;(Class,String[],Class[],Set,String[],ContextLoader,CacheAwareContextLoaderDelegate,MergedContextConfiguration);;Argument[4];Argument[-1];taint",
        "org.springframework.test.context;MergedContextConfiguration;true;MergedContextConfiguration;(Class,String[],Class[],Set,String[],ContextLoader,CacheAwareContextLoaderDelegate,MergedContextConfiguration);;Argument[5];Argument[-1];taint",
        "org.springframework.test.context;MergedContextConfiguration;true;MergedContextConfiguration;(Class,String[],Class[],Set,String[],ContextLoader,CacheAwareContextLoaderDelegate,MergedContextConfiguration);;Argument[6];Argument[-1];taint",
        "org.springframework.test.context;MergedContextConfiguration;true;MergedContextConfiguration;(Class,String[],Class[],Set,String[],ContextLoader,CacheAwareContextLoaderDelegate,MergedContextConfiguration);;Argument[7];Argument[-1];taint",
        "org.springframework.test.context;MergedContextConfiguration;true;MergedContextConfiguration;(Class,String[],Class[],Set,String[],String[],String[],ContextLoader,CacheAwareContextLoaderDelegate,MergedContextConfiguration);;Argument[1];Argument[-1];taint",
        "org.springframework.test.context;MergedContextConfiguration;true;MergedContextConfiguration;(Class,String[],Class[],Set,String[],String[],String[],ContextLoader,CacheAwareContextLoaderDelegate,MergedContextConfiguration);;Argument[2];Argument[-1];taint",
        "org.springframework.test.context;MergedContextConfiguration;true;MergedContextConfiguration;(Class,String[],Class[],Set,String[],String[],String[],ContextLoader,CacheAwareContextLoaderDelegate,MergedContextConfiguration);;Argument[3];Argument[-1];taint",
        "org.springframework.test.context;MergedContextConfiguration;true;MergedContextConfiguration;(Class,String[],Class[],Set,String[],String[],String[],ContextLoader,CacheAwareContextLoaderDelegate,MergedContextConfiguration);;Argument[4];Argument[-1];taint",
        "org.springframework.test.context;MergedContextConfiguration;true;MergedContextConfiguration;(Class,String[],Class[],Set,String[],String[],String[],ContextLoader,CacheAwareContextLoaderDelegate,MergedContextConfiguration);;Argument[5];Argument[-1];taint",
        "org.springframework.test.context;MergedContextConfiguration;true;MergedContextConfiguration;(Class,String[],Class[],Set,String[],String[],String[],ContextLoader,CacheAwareContextLoaderDelegate,MergedContextConfiguration);;Argument[6];Argument[-1];taint",
        "org.springframework.test.context;MergedContextConfiguration;true;MergedContextConfiguration;(Class,String[],Class[],Set,String[],String[],String[],ContextLoader,CacheAwareContextLoaderDelegate,MergedContextConfiguration);;Argument[7];Argument[-1];taint",
        "org.springframework.test.context;MergedContextConfiguration;true;MergedContextConfiguration;(Class,String[],Class[],Set,String[],String[],String[],ContextLoader,CacheAwareContextLoaderDelegate,MergedContextConfiguration);;Argument[8];Argument[-1];taint",
        "org.springframework.test.context;MergedContextConfiguration;true;MergedContextConfiguration;(Class,String[],Class[],Set,String[],String[],String[],ContextLoader,CacheAwareContextLoaderDelegate,MergedContextConfiguration);;Argument[9];Argument[-1];taint",
        "org.springframework.test.context;MergedContextConfiguration;true;MergedContextConfiguration;(Class,String[],Class[],Set,String[],String[],String[],Set,ContextLoader,CacheAwareContextLoaderDelegate,MergedContextConfiguration);;Argument[10];Argument[-1];taint",
        "org.springframework.test.context;MergedContextConfiguration;true;MergedContextConfiguration;(Class,String[],Class[],Set,String[],String[],String[],Set,ContextLoader,CacheAwareContextLoaderDelegate,MergedContextConfiguration);;Argument[1];Argument[-1];taint",
        "org.springframework.test.context;MergedContextConfiguration;true;MergedContextConfiguration;(Class,String[],Class[],Set,String[],String[],String[],Set,ContextLoader,CacheAwareContextLoaderDelegate,MergedContextConfiguration);;Argument[2];Argument[-1];taint",
        "org.springframework.test.context;MergedContextConfiguration;true;MergedContextConfiguration;(Class,String[],Class[],Set,String[],String[],String[],Set,ContextLoader,CacheAwareContextLoaderDelegate,MergedContextConfiguration);;Argument[3];Argument[-1];taint",
        "org.springframework.test.context;MergedContextConfiguration;true;MergedContextConfiguration;(Class,String[],Class[],Set,String[],String[],String[],Set,ContextLoader,CacheAwareContextLoaderDelegate,MergedContextConfiguration);;Argument[4];Argument[-1];taint",
        "org.springframework.test.context;MergedContextConfiguration;true;MergedContextConfiguration;(Class,String[],Class[],Set,String[],String[],String[],Set,ContextLoader,CacheAwareContextLoaderDelegate,MergedContextConfiguration);;Argument[5];Argument[-1];taint",
        "org.springframework.test.context;MergedContextConfiguration;true;MergedContextConfiguration;(Class,String[],Class[],Set,String[],String[],String[],Set,ContextLoader,CacheAwareContextLoaderDelegate,MergedContextConfiguration);;Argument[6];Argument[-1];taint",
        "org.springframework.test.context;MergedContextConfiguration;true;MergedContextConfiguration;(Class,String[],Class[],Set,String[],String[],String[],Set,ContextLoader,CacheAwareContextLoaderDelegate,MergedContextConfiguration);;Argument[7];Argument[-1];taint",
        "org.springframework.test.context;MergedContextConfiguration;true;MergedContextConfiguration;(Class,String[],Class[],Set,String[],String[],String[],Set,ContextLoader,CacheAwareContextLoaderDelegate,MergedContextConfiguration);;Argument[8];Argument[-1];taint",
        "org.springframework.test.context;MergedContextConfiguration;true;MergedContextConfiguration;(Class,String[],Class[],Set,String[],String[],String[],Set,ContextLoader,CacheAwareContextLoaderDelegate,MergedContextConfiguration);;Argument[9];Argument[-1];taint",
        "org.springframework.test.context;MergedContextConfiguration;true;MergedContextConfiguration;(Class,String[],Class[],String[],ContextLoader);;Argument[1];Argument[-1];taint",
        "org.springframework.test.context;MergedContextConfiguration;true;MergedContextConfiguration;(Class,String[],Class[],String[],ContextLoader);;Argument[2];Argument[-1];taint",
        "org.springframework.test.context;MergedContextConfiguration;true;MergedContextConfiguration;(Class,String[],Class[],String[],ContextLoader);;Argument[3];Argument[-1];taint",
        "org.springframework.test.context;MergedContextConfiguration;true;MergedContextConfiguration;(Class,String[],Class[],String[],ContextLoader);;Argument[4];Argument[-1];taint",
        "org.springframework.test.context;MergedContextConfiguration;true;getActiveProfiles;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.context;MergedContextConfiguration;true;getClasses;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.context;MergedContextConfiguration;true;getContextCustomizers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.context;MergedContextConfiguration;true;getContextInitializerClasses;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.context;MergedContextConfiguration;true;getContextLoader;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.context;MergedContextConfiguration;true;getLocations;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.context;MergedContextConfiguration;true;getParent;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.context;MergedContextConfiguration;true;getParentApplicationContext;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.context;MergedContextConfiguration;true;getPropertySourceLocations;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.context;MergedContextConfiguration;true;getPropertySourceProperties;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.context;MergedContextConfiguration;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.context;TestContext;true;getApplicationContext;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.context;TestContext;true;getTestException;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.context;TestContext;true;getTestInstance;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.context;TestContext;true;getTestMethod;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.context;TestContext;true;updateState;(Object,Method,Throwable);;Argument[0];Argument[-1];taint",
        "org.springframework.test.context;TestContext;true;updateState;(Object,Method,Throwable);;Argument[1];Argument[-1];taint",
        "org.springframework.test.context;TestContext;true;updateState;(Object,Method,Throwable);;Argument[2];Argument[-1];taint",
        "org.springframework.test.context;TestContextAnnotationUtils$AnnotationDescriptor;true;getAnnotation;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.context;TestContextAnnotationUtils$AnnotationDescriptor;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.context;TestContextAnnotationUtils;true;findAnnotationDescriptorForTypes;(Class,Class[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.test.context;TestContextBootstrapper;true;getBootstrapContext;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.context;TestContextBootstrapper;true;setBootstrapContext;(BootstrapContext);;Argument[0];Argument[-1];taint",
        "org.springframework.test.context;TestContextManager;true;getTestExecutionListeners;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.context;TestContextManager;true;registerTestExecutionListeners;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.test.context;TestContextManager;true;registerTestExecutionListeners;(TestExecutionListener[]);;Argument[0];Argument[-1];taint",
        "org.springframework.test.util;AopTestUtils;true;getTargetObject;(Object);;Argument[0];ReturnValue;taint",
        "org.springframework.test.util;AopTestUtils;true;getUltimateTargetObject;(Object);;Argument[0];ReturnValue;taint",
        "org.springframework.test.util;ExceptionCollector;true;getExceptions;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.util;JsonPathExpectationsHelper;true;JsonPathExpectationsHelper;(String,Object[]);;Argument[0];Argument[-1];taint",
        "org.springframework.test.util;JsonPathExpectationsHelper;true;JsonPathExpectationsHelper;(String,Object[]);;Argument[1];Argument[-1];taint",
        "org.springframework.test.util;MetaAnnotationUtils$AnnotationDescriptor;true;AnnotationDescriptor;(Class,Annotation);;Argument[1];Argument[-1];taint",
        "org.springframework.test.util;MetaAnnotationUtils$AnnotationDescriptor;true;AnnotationDescriptor;(Class,Class,Annotation,Annotation);;Argument[2];Argument[-1];taint",
        "org.springframework.test.util;MetaAnnotationUtils$AnnotationDescriptor;true;AnnotationDescriptor;(Class,Class,Annotation,Annotation);;Argument[3];Argument[-1];taint",
        "org.springframework.test.util;MetaAnnotationUtils$AnnotationDescriptor;true;getAnnotation;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.util;MetaAnnotationUtils$AnnotationDescriptor;true;getAnnotationAttributes;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.util;MetaAnnotationUtils$AnnotationDescriptor;true;getComposedAnnotation;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.util;MetaAnnotationUtils$AnnotationDescriptor;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.util;MetaAnnotationUtils$UntypedAnnotationDescriptor;true;UntypedAnnotationDescriptor;(Class,Annotation);;Argument[1];Argument[-1];taint",
        "org.springframework.test.util;MetaAnnotationUtils$UntypedAnnotationDescriptor;true;UntypedAnnotationDescriptor;(Class,Class,Annotation,Annotation);;Argument[2];Argument[-1];taint",
        "org.springframework.test.util;MetaAnnotationUtils$UntypedAnnotationDescriptor;true;UntypedAnnotationDescriptor;(Class,Class,Annotation,Annotation);;Argument[3];Argument[-1];taint",
        "org.springframework.test.util;XpathExpectationsHelper;true;XpathExpectationsHelper;(String,Map,Object[]);;Argument[0];Argument[-1];taint",
        "org.springframework.test.util;XpathExpectationsHelper;true;XpathExpectationsHelper;(String,Map,Object[]);;Argument[1];Argument[-1];taint",
        "org.springframework.test.util;XpathExpectationsHelper;true;XpathExpectationsHelper;(String,Map,Object[]);;Argument[2];Argument[-1];taint",
        "org.springframework.test.web.client.match;MockRestRequestMatchers;true;jsonPath;(String,Object[]);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.client.match;MockRestRequestMatchers;true;jsonPath;(String,Object[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.test.web.client.match;MockRestRequestMatchers;true;xpath;(String,Map,Object[]);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.client.match;MockRestRequestMatchers;true;xpath;(String,Map,Object[]);;ArrayElement of Argument[2];ReturnValue;taint",
        "org.springframework.test.web.client.match;MockRestRequestMatchers;true;xpath;(String,Map,Object[]);;Element of Argument[1];ReturnValue;taint",
        "org.springframework.test.web.client.match;MockRestRequestMatchers;true;xpath;(String,Object[]);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.client.match;MockRestRequestMatchers;true;xpath;(String,Object[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.test.web.client.response;DefaultResponseCreator;true;body;(Resource);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.client.response;DefaultResponseCreator;true;body;(Resource);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.client.response;DefaultResponseCreator;true;body;(Resource);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.client.response;DefaultResponseCreator;true;body;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.client.response;DefaultResponseCreator;true;body;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.client.response;DefaultResponseCreator;true;body;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.client.response;DefaultResponseCreator;true;body;(byte[]);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.client.response;DefaultResponseCreator;true;body;(byte[]);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.client.response;DefaultResponseCreator;true;body;(byte[]);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.client.response;DefaultResponseCreator;true;contentType;(MediaType);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.client.response;DefaultResponseCreator;true;headers;(HttpHeaders);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.client.response;DefaultResponseCreator;true;headers;(HttpHeaders);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.client.response;DefaultResponseCreator;true;headers;(HttpHeaders);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.test.web.client.response;DefaultResponseCreator;true;location;(URI);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.client.response;MockRestResponseCreators;true;withSuccess;(Resource,MediaType);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.client.response;MockRestResponseCreators;true;withSuccess;(String,MediaType);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.client.response;MockRestResponseCreators;true;withSuccess;(byte[],MediaType);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.client;AbstractRequestExpectationManager;true;matchRequest;(ClientHttpRequest);;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.client;DefaultRequestExpectation;true;DefaultRequestExpectation;(ExpectedCount,RequestMatcher);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.client;DefaultRequestExpectation;true;DefaultRequestExpectation;(ExpectedCount,RequestMatcher);;Argument[1];Argument[-1];taint",
        "org.springframework.test.web.client;MockMvcClientHttpRequestFactory;true;MockMvcClientHttpRequestFactory;(MockMvc);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.client;MockRestServiceServer$MockRestServiceServerBuilder;true;bufferContent;();;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.client;MockRestServiceServer$MockRestServiceServerBuilder;true;build;(RequestExpectationManager);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.client;MockRestServiceServer$MockRestServiceServerBuilder;true;ignoreExpectOrder;(boolean);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.client;MockRestServiceServer;false;bindTo;(AsyncRestTemplate);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.client;MockRestServiceServer;false;bindTo;(RestTemplate);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.client;MockRestServiceServer;false;expect;(ExpectedCount,RequestMatcher);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.client;MockRestServiceServer;false;expect;(ExpectedCount,RequestMatcher);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.client;MockRestServiceServer;false;expect;(ExpectedCount,RequestMatcher);;Argument[1];Argument[-1];taint",
        "org.springframework.test.web.client;MockRestServiceServer;false;expect;(ExpectedCount,RequestMatcher);;Argument[1];ReturnValue;taint",
        "org.springframework.test.web.client;MockRestServiceServer;false;expect;(RequestMatcher);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.client;MockRestServiceServer;false;expect;(RequestMatcher);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.client;RequestExpectationManager;true;expectRequest;(ExpectedCount,RequestMatcher);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.client;RequestExpectationManager;true;expectRequest;(ExpectedCount,RequestMatcher);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.client;RequestExpectationManager;true;expectRequest;(ExpectedCount,RequestMatcher);;Argument[1];Argument[-1];taint",
        "org.springframework.test.web.client;RequestExpectationManager;true;expectRequest;(ExpectedCount,RequestMatcher);;Argument[1];ReturnValue;taint",
        "org.springframework.test.web.client;RequestExpectationManager;true;validateRequest;(ClientHttpRequest);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.client;ResponseActions;true;andExpect;(RequestMatcher);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.client;ResponseActions;true;andExpect;(RequestMatcher);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.client;ResponseActions;true;andExpect;(RequestMatcher);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.client;ResponseActions;true;andRespond;(ResponseCreator);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.reactive.server;CookieAssertions;true;CookieAssertions;(ExchangeResult,ResponseSpec);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.reactive.server;CookieAssertions;true;CookieAssertions;(ExchangeResult,ResponseSpec);;Argument[1];Argument[-1];taint",
        "org.springframework.test.web.reactive.server;CookieAssertions;true;doesNotExist;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;CookieAssertions;true;domain;(String,Matcher);;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;CookieAssertions;true;domain;(String,String);;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;CookieAssertions;true;exists;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;CookieAssertions;true;httpOnly;(String,boolean);;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;CookieAssertions;true;maxAge;(String,Duration);;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;CookieAssertions;true;maxAge;(String,Matcher);;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;CookieAssertions;true;path;(String,Matcher);;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;CookieAssertions;true;path;(String,String);;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;CookieAssertions;true;sameSite;(String,String);;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;CookieAssertions;true;secure;(String,boolean);;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;CookieAssertions;true;value;(String,Consumer);;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;CookieAssertions;true;value;(String,Matcher);;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;CookieAssertions;true;valueEquals;(String,String);;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;EntityExchangeResult;true;getResponseBody;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;ExchangeResult;true;getMockServerResult;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;ExchangeResult;true;getRequestHeaders;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;ExchangeResult;true;getResponseCookies;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;ExchangeResult;true;getResponseHeaders;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;ExchangeResult;true;getUriTemplate;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;ExchangeResult;true;getUrl;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;ExchangeResult;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;FluxExchangeResult;true;getResponseBody;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;HeaderAssertions;true;cacheControl;(CacheControl);;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;HeaderAssertions;true;contentDisposition;(ContentDisposition);;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;HeaderAssertions;true;contentLength;(long);;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;HeaderAssertions;true;contentType;(MediaType);;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;HeaderAssertions;true;contentType;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;HeaderAssertions;true;contentTypeCompatibleWith;(MediaType);;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;HeaderAssertions;true;contentTypeCompatibleWith;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;HeaderAssertions;true;doesNotExist;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;HeaderAssertions;true;exists;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;HeaderAssertions;true;expires;(long);;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;HeaderAssertions;true;lastModified;(long);;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;HeaderAssertions;true;location;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;HeaderAssertions;true;value;(String,Consumer);;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;HeaderAssertions;true;value;(String,Matcher);;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;HeaderAssertions;true;valueEquals;(String,String[]);;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;HeaderAssertions;true;valueEquals;(String,long);;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;HeaderAssertions;true;valueEqualsDate;(String,long);;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;HeaderAssertions;true;valueMatches;(String,String);;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;HeaderAssertions;true;values;(String,Consumer);;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;HeaderAssertions;true;values;(String,Matcher);;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;HeaderAssertions;true;valuesMatch;(String,String[]);;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;HttpHandlerConnector$FailureAfterResponseCompletedException;false;getCompletedResponse;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;HttpHandlerConnector;true;HttpHandlerConnector;(HttpHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.reactive.server;JsonPathAssertions;true;doesNotExist;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;JsonPathAssertions;true;doesNotHaveJsonPath;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;JsonPathAssertions;true;exists;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;JsonPathAssertions;true;hasJsonPath;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;JsonPathAssertions;true;isArray;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;JsonPathAssertions;true;isBoolean;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;JsonPathAssertions;true;isEmpty;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;JsonPathAssertions;true;isEqualTo;(Object);;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;JsonPathAssertions;true;isMap;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;JsonPathAssertions;true;isNotEmpty;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;JsonPathAssertions;true;isNumber;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;JsonPathAssertions;true;value;(Consumer);;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;JsonPathAssertions;true;value;(Consumer,Class);;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;JsonPathAssertions;true;value;(Matcher);;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;JsonPathAssertions;true;value;(Matcher,Class);;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;MockServerClientHttpResponse;true;getServerResult;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;StatusAssertions;true;is1xxInformational;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;StatusAssertions;true;is2xxSuccessful;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;StatusAssertions;true;is3xxRedirection;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;StatusAssertions;true;is4xxClientError;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;StatusAssertions;true;is5xxServerError;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;StatusAssertions;true;isAccepted;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;StatusAssertions;true;isBadRequest;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;StatusAssertions;true;isCreated;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;StatusAssertions;true;isEqualTo;(HttpStatus);;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;StatusAssertions;true;isEqualTo;(int);;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;StatusAssertions;true;isForbidden;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;StatusAssertions;true;isFound;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;StatusAssertions;true;isNoContent;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;StatusAssertions;true;isNotFound;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;StatusAssertions;true;isNotModified;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;StatusAssertions;true;isOk;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;StatusAssertions;true;isPermanentRedirect;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;StatusAssertions;true;isSeeOther;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;StatusAssertions;true;isTemporaryRedirect;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;StatusAssertions;true;isUnauthorized;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;StatusAssertions;true;reasonEquals;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;StatusAssertions;true;value;(Consumer);;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;StatusAssertions;true;value;(Matcher);;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;WebTestClient$BodyContentSpec;true;consumeWith;(Consumer);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.reactive.server;WebTestClient$BodyContentSpec;true;json;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.reactive.server;WebTestClient$BodyContentSpec;true;jsonPath;(String,Object[]);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;WebTestClient$BodyContentSpec;true;jsonPath;(String,Object[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;WebTestClient$BodyContentSpec;true;returnResult;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;WebTestClient$BodyContentSpec;true;xml;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.reactive.server;WebTestClient$BodyContentSpec;true;xpath;(String,Map,Object[]);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;WebTestClient$BodyContentSpec;true;xpath;(String,Map,Object[]);;ArrayElement of Argument[2];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;WebTestClient$BodyContentSpec;true;xpath;(String,Map,Object[]);;Element of Argument[1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;WebTestClient$BodyContentSpec;true;xpath;(String,Object[]);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;WebTestClient$BodyContentSpec;true;xpath;(String,Object[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;WebTestClient$Builder;true;apply;(WebTestClientConfigurer);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.reactive.server;WebTestClient$Builder;true;baseUrl;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.reactive.server;WebTestClient$Builder;true;baseUrl;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.reactive.server;WebTestClient$Builder;true;baseUrl;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;WebTestClient$Builder;true;codecs;(Consumer);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.reactive.server;WebTestClient$Builder;true;defaultCookie;(String,String[]);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.reactive.server;WebTestClient$Builder;true;defaultCookie;(String,String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.reactive.server;WebTestClient$Builder;true;defaultCookie;(String,String[]);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;WebTestClient$Builder;true;defaultCookie;(String,String[]);;Argument[1];Argument[-1];taint",
        "org.springframework.test.web.reactive.server;WebTestClient$Builder;true;defaultCookie;(String,String[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;WebTestClient$Builder;true;defaultCookies;(Consumer);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.reactive.server;WebTestClient$Builder;true;defaultHeader;(String,String[]);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.reactive.server;WebTestClient$Builder;true;defaultHeader;(String,String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.reactive.server;WebTestClient$Builder;true;defaultHeader;(String,String[]);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;WebTestClient$Builder;true;defaultHeader;(String,String[]);;Argument[1];Argument[-1];taint",
        "org.springframework.test.web.reactive.server;WebTestClient$Builder;true;defaultHeader;(String,String[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;WebTestClient$Builder;true;defaultHeaders;(Consumer);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.reactive.server;WebTestClient$Builder;true;entityExchangeResultConsumer;(Consumer);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.reactive.server;WebTestClient$Builder;true;exchangeStrategies;(Consumer);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.reactive.server;WebTestClient$Builder;true;exchangeStrategies;(Consumer);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.reactive.server;WebTestClient$Builder;true;exchangeStrategies;(Consumer);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;WebTestClient$Builder;true;exchangeStrategies;(ExchangeStrategies);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.reactive.server;WebTestClient$Builder;true;exchangeStrategies;(ExchangeStrategies);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.reactive.server;WebTestClient$Builder;true;exchangeStrategies;(ExchangeStrategies);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;WebTestClient$Builder;true;filter;(ExchangeFilterFunction);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.reactive.server;WebTestClient$Builder;true;filter;(ExchangeFilterFunction);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.reactive.server;WebTestClient$Builder;true;filter;(ExchangeFilterFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;WebTestClient$Builder;true;filters;(Consumer);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.reactive.server;WebTestClient$Builder;true;responseTimeout;(Duration);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.reactive.server;WebTestClient$Builder;true;responseTimeout;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.reactive.server;WebTestClient$Builder;true;responseTimeout;(Duration);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;WebTestClient$Builder;true;uriBuilderFactory;(UriBuilderFactory);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.reactive.server;WebTestClient$Builder;true;uriBuilderFactory;(UriBuilderFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.reactive.server;WebTestClient$Builder;true;uriBuilderFactory;(UriBuilderFactory);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;WebTestClient$ControllerSpec;true;argumentResolvers;(Consumer);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.reactive.server;WebTestClient$ControllerSpec;true;argumentResolvers;(Consumer);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.reactive.server;WebTestClient$ControllerSpec;true;argumentResolvers;(Consumer);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;WebTestClient$ControllerSpec;true;contentTypeResolver;(Consumer);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.reactive.server;WebTestClient$ControllerSpec;true;contentTypeResolver;(Consumer);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.reactive.server;WebTestClient$ControllerSpec;true;contentTypeResolver;(Consumer);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;WebTestClient$ControllerSpec;true;controllerAdvice;(Object[]);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.reactive.server;WebTestClient$ControllerSpec;true;controllerAdvice;(Object[]);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.reactive.server;WebTestClient$ControllerSpec;true;controllerAdvice;(Object[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;WebTestClient$ControllerSpec;true;corsMappings;(Consumer);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.reactive.server;WebTestClient$ControllerSpec;true;corsMappings;(Consumer);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.reactive.server;WebTestClient$ControllerSpec;true;corsMappings;(Consumer);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;WebTestClient$ControllerSpec;true;formatters;(Consumer);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.reactive.server;WebTestClient$ControllerSpec;true;formatters;(Consumer);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.reactive.server;WebTestClient$ControllerSpec;true;formatters;(Consumer);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;WebTestClient$ControllerSpec;true;httpMessageCodecs;(Consumer);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.reactive.server;WebTestClient$ControllerSpec;true;httpMessageCodecs;(Consumer);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.reactive.server;WebTestClient$ControllerSpec;true;httpMessageCodecs;(Consumer);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;WebTestClient$ControllerSpec;true;pathMatching;(Consumer);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.reactive.server;WebTestClient$ControllerSpec;true;pathMatching;(Consumer);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.reactive.server;WebTestClient$ControllerSpec;true;pathMatching;(Consumer);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;WebTestClient$ControllerSpec;true;validator;(Validator);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.reactive.server;WebTestClient$ControllerSpec;true;validator;(Validator);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.reactive.server;WebTestClient$ControllerSpec;true;validator;(Validator);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;WebTestClient$ControllerSpec;true;viewResolvers;(Consumer);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.reactive.server;WebTestClient$ControllerSpec;true;viewResolvers;(Consumer);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.reactive.server;WebTestClient$ControllerSpec;true;viewResolvers;(Consumer);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;WebTestClient$RequestBodySpec;true;body;(BodyInserter);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.reactive.server;WebTestClient$RequestBodySpec;true;body;(BodyInserter);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.reactive.server;WebTestClient$RequestBodySpec;true;body;(BodyInserter);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;WebTestClient$RequestBodySpec;true;body;(Object,Class);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.reactive.server;WebTestClient$RequestBodySpec;true;body;(Object,ParameterizedTypeReference);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.reactive.server;WebTestClient$RequestBodySpec;true;body;(Publisher,Class);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.reactive.server;WebTestClient$RequestBodySpec;true;body;(Publisher,ParameterizedTypeReference);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.reactive.server;WebTestClient$RequestBodySpec;true;bodyValue;(Object);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.reactive.server;WebTestClient$RequestBodySpec;true;contentLength;(long);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.reactive.server;WebTestClient$RequestBodySpec;true;contentType;(MediaType);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.reactive.server;WebTestClient$RequestBodySpec;true;syncBody;(Object);;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;WebTestClient$ResponseSpec;true;expectAll;(ResponseSpecConsumer[]);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.reactive.server;WebTestClient$RouterFunctionSpec;true;handlerStrategies;(HandlerStrategies);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.reactive.server;WebTestClient$RouterFunctionSpec;true;handlerStrategies;(HandlerStrategies);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.reactive.server;WebTestClient$RouterFunctionSpec;true;handlerStrategies;(HandlerStrategies);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;WebTestClient;true;bindToApplicationContext;(ApplicationContext);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;WebTestClient;true;bindToController;(Object[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;WebTestClient;true;bindToRouterFunction;(RouterFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;WebTestClient;true;bindToServer;(ClientHttpConnector);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;WebTestClient;true;bindToWebHandler;(WebHandler);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;XpathAssertions;true;doesNotExist;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;XpathAssertions;true;exists;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;XpathAssertions;true;isEqualTo;(Double);;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;XpathAssertions;true;isEqualTo;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;XpathAssertions;true;isEqualTo;(boolean);;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;XpathAssertions;true;nodeCount;(Consumer);;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;XpathAssertions;true;nodeCount;(Matcher);;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;XpathAssertions;true;nodeCount;(int);;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;XpathAssertions;true;number;(Consumer);;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;XpathAssertions;true;number;(Matcher);;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;XpathAssertions;true;string;(Consumer);;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.reactive.server;XpathAssertions;true;string;(Matcher);;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.servlet.client;MockMvcHttpConnector;true;MockMvcHttpConnector;(MockMvc);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.servlet.client;MockMvcWebTestClient$ControllerSpec;true;asyncRequestTimeout;(long);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.servlet.client;MockMvcWebTestClient$ControllerSpec;true;contentNegotiationManager;(ContentNegotiationManager);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.servlet.client;MockMvcWebTestClient$ControllerSpec;true;contentNegotiationManager;(ContentNegotiationManager);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.servlet.client;MockMvcWebTestClient$ControllerSpec;true;contentNegotiationManager;(ContentNegotiationManager);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.client;MockMvcWebTestClient$ControllerSpec;true;controllerAdvice;(Object[]);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.servlet.client;MockMvcWebTestClient$ControllerSpec;true;controllerAdvice;(Object[]);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.servlet.client;MockMvcWebTestClient$ControllerSpec;true;controllerAdvice;(Object[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.client;MockMvcWebTestClient$ControllerSpec;true;conversionService;(FormattingConversionService);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.servlet.client;MockMvcWebTestClient$ControllerSpec;true;conversionService;(FormattingConversionService);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.servlet.client;MockMvcWebTestClient$ControllerSpec;true;conversionService;(FormattingConversionService);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.client;MockMvcWebTestClient$ControllerSpec;true;customArgumentResolvers;(HandlerMethodArgumentResolver[]);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.servlet.client;MockMvcWebTestClient$ControllerSpec;true;customArgumentResolvers;(HandlerMethodArgumentResolver[]);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.servlet.client;MockMvcWebTestClient$ControllerSpec;true;customArgumentResolvers;(HandlerMethodArgumentResolver[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.client;MockMvcWebTestClient$ControllerSpec;true;customHandlerMapping;(Supplier);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.servlet.client;MockMvcWebTestClient$ControllerSpec;true;customHandlerMapping;(Supplier);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.servlet.client;MockMvcWebTestClient$ControllerSpec;true;customHandlerMapping;(Supplier);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.client;MockMvcWebTestClient$ControllerSpec;true;customReturnValueHandlers;(HandlerMethodReturnValueHandler[]);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.servlet.client;MockMvcWebTestClient$ControllerSpec;true;customReturnValueHandlers;(HandlerMethodReturnValueHandler[]);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.servlet.client;MockMvcWebTestClient$ControllerSpec;true;customReturnValueHandlers;(HandlerMethodReturnValueHandler[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.client;MockMvcWebTestClient$ControllerSpec;true;flashMapManager;(FlashMapManager);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.servlet.client;MockMvcWebTestClient$ControllerSpec;true;flashMapManager;(FlashMapManager);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.servlet.client;MockMvcWebTestClient$ControllerSpec;true;flashMapManager;(FlashMapManager);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.client;MockMvcWebTestClient$ControllerSpec;true;handlerExceptionResolvers;(HandlerExceptionResolver[]);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.servlet.client;MockMvcWebTestClient$ControllerSpec;true;handlerExceptionResolvers;(HandlerExceptionResolver[]);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.servlet.client;MockMvcWebTestClient$ControllerSpec;true;handlerExceptionResolvers;(HandlerExceptionResolver[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.client;MockMvcWebTestClient$ControllerSpec;true;interceptors;(HandlerInterceptor[]);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.servlet.client;MockMvcWebTestClient$ControllerSpec;true;interceptors;(HandlerInterceptor[]);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.servlet.client;MockMvcWebTestClient$ControllerSpec;true;interceptors;(HandlerInterceptor[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.client;MockMvcWebTestClient$ControllerSpec;true;localeResolver;(LocaleResolver);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.servlet.client;MockMvcWebTestClient$ControllerSpec;true;localeResolver;(LocaleResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.servlet.client;MockMvcWebTestClient$ControllerSpec;true;localeResolver;(LocaleResolver);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.client;MockMvcWebTestClient$ControllerSpec;true;mappedInterceptors;(String[],HandlerInterceptor[]);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.servlet.client;MockMvcWebTestClient$ControllerSpec;true;mappedInterceptors;(String[],HandlerInterceptor[]);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.servlet.client;MockMvcWebTestClient$ControllerSpec;true;mappedInterceptors;(String[],HandlerInterceptor[]);;Argument[1];Argument[-1];taint",
        "org.springframework.test.web.servlet.client;MockMvcWebTestClient$ControllerSpec;true;mappedInterceptors;(String[],HandlerInterceptor[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.client;MockMvcWebTestClient$ControllerSpec;true;mappedInterceptors;(String[],HandlerInterceptor[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.test.web.servlet.client;MockMvcWebTestClient$ControllerSpec;true;messageConverters;(HttpMessageConverter[]);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.servlet.client;MockMvcWebTestClient$ControllerSpec;true;messageConverters;(HttpMessageConverter[]);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.servlet.client;MockMvcWebTestClient$ControllerSpec;true;messageConverters;(HttpMessageConverter[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.client;MockMvcWebTestClient$ControllerSpec;true;patternParser;(PathPatternParser);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.servlet.client;MockMvcWebTestClient$ControllerSpec;true;patternParser;(PathPatternParser);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.servlet.client;MockMvcWebTestClient$ControllerSpec;true;patternParser;(PathPatternParser);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.client;MockMvcWebTestClient$ControllerSpec;true;placeholderValue;(String,String);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.servlet.client;MockMvcWebTestClient$ControllerSpec;true;placeholderValue;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.servlet.client;MockMvcWebTestClient$ControllerSpec;true;placeholderValue;(String,String);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.client;MockMvcWebTestClient$ControllerSpec;true;placeholderValue;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.test.web.servlet.client;MockMvcWebTestClient$ControllerSpec;true;placeholderValue;(String,String);;Argument[1];ReturnValue;taint",
        "org.springframework.test.web.servlet.client;MockMvcWebTestClient$ControllerSpec;true;singleView;(View);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.servlet.client;MockMvcWebTestClient$ControllerSpec;true;singleView;(View);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.servlet.client;MockMvcWebTestClient$ControllerSpec;true;singleView;(View);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.client;MockMvcWebTestClient$ControllerSpec;true;useTrailingSlashPatternMatch;(boolean);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.servlet.client;MockMvcWebTestClient$ControllerSpec;true;validator;(Validator);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.servlet.client;MockMvcWebTestClient$ControllerSpec;true;validator;(Validator);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.servlet.client;MockMvcWebTestClient$ControllerSpec;true;validator;(Validator);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.client;MockMvcWebTestClient$ControllerSpec;true;viewResolvers;(ViewResolver[]);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.servlet.client;MockMvcWebTestClient$ControllerSpec;true;viewResolvers;(ViewResolver[]);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.servlet.client;MockMvcWebTestClient$ControllerSpec;true;viewResolvers;(ViewResolver[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.client;MockMvcWebTestClient;true;bindTo;(MockMvc);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.client;MockMvcWebTestClient;true;bindToApplicationContext;(WebApplicationContext);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.client;MockMvcWebTestClient;true;bindToController;(Object[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.htmlunit.webdriver;MockMvcHtmlUnitDriverBuilder;true;build;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.servlet.htmlunit.webdriver;MockMvcHtmlUnitDriverBuilder;true;javascriptEnabled;(boolean);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.servlet.htmlunit.webdriver;MockMvcHtmlUnitDriverBuilder;true;mockMvcSetup;(MockMvc);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.htmlunit.webdriver;MockMvcHtmlUnitDriverBuilder;true;webAppContextSetup;(WebApplicationContext);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.htmlunit.webdriver;MockMvcHtmlUnitDriverBuilder;true;webAppContextSetup;(WebApplicationContext,MockMvcConfigurer);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.htmlunit.webdriver;MockMvcHtmlUnitDriverBuilder;true;withDelegate;(WebConnectionHtmlUnitDriver);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.servlet.htmlunit.webdriver;MockMvcHtmlUnitDriverBuilder;true;withDelegate;(WebConnectionHtmlUnitDriver);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.servlet.htmlunit.webdriver;MockMvcHtmlUnitDriverBuilder;true;withDelegate;(WebConnectionHtmlUnitDriver);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.htmlunit;DelegatingWebConnection$DelegateWebConnection;false;DelegateWebConnection;(WebRequestMatcher,WebConnection);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.servlet.htmlunit;DelegatingWebConnection$DelegateWebConnection;false;DelegateWebConnection;(WebRequestMatcher,WebConnection);;Argument[1];Argument[-1];taint",
        "org.springframework.test.web.servlet.htmlunit;DelegatingWebConnection;false;DelegatingWebConnection;(WebConnection,DelegateWebConnection[]);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.servlet.htmlunit;DelegatingWebConnection;false;DelegatingWebConnection;(WebConnection,DelegateWebConnection[]);;Argument[1];Argument[-1];taint",
        "org.springframework.test.web.servlet.htmlunit;DelegatingWebConnection;false;DelegatingWebConnection;(WebConnection,List);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.servlet.htmlunit;DelegatingWebConnection;false;DelegatingWebConnection;(WebConnection,List);;Argument[1];Argument[-1];taint",
        "org.springframework.test.web.servlet.htmlunit;HostRequestMatcher;false;HostRequestMatcher;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.servlet.htmlunit;MockMvcWebClientBuilder;true;build;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.servlet.htmlunit;MockMvcWebClientBuilder;true;mockMvcSetup;(MockMvc);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.htmlunit;MockMvcWebClientBuilder;true;webAppContextSetup;(WebApplicationContext);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.htmlunit;MockMvcWebClientBuilder;true;webAppContextSetup;(WebApplicationContext,MockMvcConfigurer);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.htmlunit;MockMvcWebClientBuilder;true;withDelegate;(WebClient);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.servlet.htmlunit;MockMvcWebClientBuilder;true;withDelegate;(WebClient);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.servlet.htmlunit;MockMvcWebClientBuilder;true;withDelegate;(WebClient);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.htmlunit;MockMvcWebConnection;false;MockMvcWebConnection;(MockMvc,WebClient);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.servlet.htmlunit;MockMvcWebConnection;false;MockMvcWebConnection;(MockMvc,WebClient);;Argument[1];Argument[-1];taint",
        "org.springframework.test.web.servlet.htmlunit;MockMvcWebConnection;false;MockMvcWebConnection;(MockMvc,WebClient,String);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.servlet.htmlunit;MockMvcWebConnection;false;MockMvcWebConnection;(MockMvc,WebClient,String);;Argument[1];Argument[-1];taint",
        "org.springframework.test.web.servlet.htmlunit;MockMvcWebConnection;false;MockMvcWebConnection;(MockMvc,WebClient,String);;Argument[2];Argument[-1];taint",
        "org.springframework.test.web.servlet.htmlunit;MockMvcWebConnection;false;setWebClient;(WebClient);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.servlet.htmlunit;MockMvcWebConnectionBuilderSupport;true;alwaysUseMockMvc;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.servlet.htmlunit;MockMvcWebConnectionBuilderSupport;true;contextPath;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.servlet.htmlunit;MockMvcWebConnectionBuilderSupport;true;contextPath;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.servlet.htmlunit;MockMvcWebConnectionBuilderSupport;true;contextPath;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.htmlunit;MockMvcWebConnectionBuilderSupport;true;useMockMvc;(WebRequestMatcher[]);;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.servlet.htmlunit;MockMvcWebConnectionBuilderSupport;true;useMockMvc;(WebRequestMatcher[]);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.servlet.htmlunit;MockMvcWebConnectionBuilderSupport;true;useMockMvc;(WebRequestMatcher[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.htmlunit;MockMvcWebConnectionBuilderSupport;true;useMockMvcForHosts;(String[]);;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.servlet.htmlunit;MockMvcWebConnectionBuilderSupport;true;useMockMvcForHosts;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.servlet.htmlunit;MockMvcWebConnectionBuilderSupport;true;useMockMvcForHosts;(String[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.htmlunit;UrlRegexRequestMatcher;false;UrlRegexRequestMatcher;(Pattern);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;accept;(MediaType[]);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;accept;(String[]);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;accept;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;accept;(String[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;characterEncoding;(Charset);;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;characterEncoding;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;characterEncoding;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;characterEncoding;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;content;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;content;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;content;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;content;(byte[]);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;content;(byte[]);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;content;(byte[]);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;contentType;(MediaType);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;contentType;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;contentType;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;contentType;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;contextPath;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;contextPath;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;contextPath;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;cookie;(Cookie[]);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;cookie;(Cookie[]);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;cookie;(Cookie[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;flashAttr;(String,Object);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;flashAttr;(String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;flashAttr;(String,Object);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;flashAttr;(String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;flashAttr;(String,Object);;Argument[1];ReturnValue;taint",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;flashAttrs;(Map);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;header;(String,Object[]);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;header;(String,Object[]);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;header;(String,Object[]);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;header;(String,Object[]);;Argument[1];Argument[-1];taint",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;header;(String,Object[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;headers;(HttpHeaders);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;locale;(Locale);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;locale;(Locale);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;locale;(Locale);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;locale;(Locale[]);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;locale;(Locale[]);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;locale;(Locale[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;param;(String,String[]);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;param;(String,String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;param;(String,String[]);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;param;(String,String[]);;Argument[1];Argument[-1];taint",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;param;(String,String[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;params;(MultiValueMap);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;pathInfo;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;pathInfo;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;pathInfo;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;principal;(Principal);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;principal;(Principal);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;principal;(Principal);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;queryParam;(String,String[]);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;queryParam;(String,String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;queryParam;(String,String[]);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;queryParam;(String,String[]);;Argument[1];Argument[-1];taint",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;queryParam;(String,String[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;queryParams;(MultiValueMap);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;queryParams;(MultiValueMap);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;queryParams;(MultiValueMap);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;requestAttr;(String,Object);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;requestAttr;(String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;requestAttr;(String,Object);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;requestAttr;(String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;requestAttr;(String,Object);;Argument[1];ReturnValue;taint",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;secure;(boolean);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;servletPath;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;servletPath;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;servletPath;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;session;(MockHttpSession);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;session;(MockHttpSession);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;session;(MockHttpSession);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;sessionAttr;(String,Object);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;sessionAttr;(String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;sessionAttr;(String,Object);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;sessionAttr;(String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;sessionAttr;(String,Object);;Argument[1];ReturnValue;taint",
        "org.springframework.test.web.servlet.request;MockHttpServletRequestBuilder;true;sessionAttrs;(Map);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.servlet.request;MockMultipartHttpServletRequestBuilder;true;file;(MockMultipartFile);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.servlet.request;MockMultipartHttpServletRequestBuilder;true;file;(MockMultipartFile);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.servlet.request;MockMultipartHttpServletRequestBuilder;true;file;(MockMultipartFile);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.request;MockMultipartHttpServletRequestBuilder;true;file;(String,byte[]);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.servlet.request;MockMultipartHttpServletRequestBuilder;true;file;(String,byte[]);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.servlet.request;MockMultipartHttpServletRequestBuilder;true;file;(String,byte[]);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.request;MockMultipartHttpServletRequestBuilder;true;file;(String,byte[]);;Argument[1];Argument[-1];taint",
        "org.springframework.test.web.servlet.request;MockMultipartHttpServletRequestBuilder;true;file;(String,byte[]);;Argument[1];ReturnValue;taint",
        "org.springframework.test.web.servlet.request;MockMultipartHttpServletRequestBuilder;true;part;(Part[]);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.servlet.request;MockMultipartHttpServletRequestBuilder;true;part;(Part[]);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.servlet.request;MockMultipartHttpServletRequestBuilder;true;part;(Part[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.request;MockMvcRequestBuilders;true;delete;(String,Object[]);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.request;MockMvcRequestBuilders;true;delete;(String,Object[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.test.web.servlet.request;MockMvcRequestBuilders;true;delete;(URI);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.request;MockMvcRequestBuilders;true;fileUpload;(String,Object[]);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.request;MockMvcRequestBuilders;true;fileUpload;(String,Object[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.test.web.servlet.request;MockMvcRequestBuilders;true;fileUpload;(URI);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.request;MockMvcRequestBuilders;true;get;(String,Object[]);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.request;MockMvcRequestBuilders;true;get;(String,Object[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.test.web.servlet.request;MockMvcRequestBuilders;true;get;(URI);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.request;MockMvcRequestBuilders;true;head;(String,Object[]);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.request;MockMvcRequestBuilders;true;head;(String,Object[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.test.web.servlet.request;MockMvcRequestBuilders;true;head;(URI);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.request;MockMvcRequestBuilders;true;multipart;(String,Object[]);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.request;MockMvcRequestBuilders;true;multipart;(String,Object[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.test.web.servlet.request;MockMvcRequestBuilders;true;multipart;(URI);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.request;MockMvcRequestBuilders;true;options;(String,Object[]);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.request;MockMvcRequestBuilders;true;options;(String,Object[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.test.web.servlet.request;MockMvcRequestBuilders;true;options;(URI);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.request;MockMvcRequestBuilders;true;patch;(String,Object[]);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.request;MockMvcRequestBuilders;true;patch;(String,Object[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.test.web.servlet.request;MockMvcRequestBuilders;true;patch;(URI);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.request;MockMvcRequestBuilders;true;post;(String,Object[]);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.request;MockMvcRequestBuilders;true;post;(String,Object[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.test.web.servlet.request;MockMvcRequestBuilders;true;post;(URI);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.request;MockMvcRequestBuilders;true;put;(String,Object[]);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.request;MockMvcRequestBuilders;true;put;(String,Object[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.test.web.servlet.request;MockMvcRequestBuilders;true;put;(URI);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.request;MockMvcRequestBuilders;true;request;(HttpMethod,String,Object[]);;Argument[1];ReturnValue;taint",
        "org.springframework.test.web.servlet.request;MockMvcRequestBuilders;true;request;(HttpMethod,String,Object[]);;ArrayElement of Argument[2];ReturnValue;taint",
        "org.springframework.test.web.servlet.request;MockMvcRequestBuilders;true;request;(HttpMethod,URI);;Argument[1];ReturnValue;taint",
        "org.springframework.test.web.servlet.request;MockMvcRequestBuilders;true;request;(String,URI);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.request;MockMvcRequestBuilders;true;request;(String,URI);;Argument[1];ReturnValue;taint",
        "org.springframework.test.web.servlet.request;RequestPostProcessor;true;postProcessRequest;(MockHttpServletRequest);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.result;JsonPathResultMatchers;true;prefix;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.servlet.result;JsonPathResultMatchers;true;prefix;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.servlet.result;JsonPathResultMatchers;true;prefix;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.result;MockMvcResultMatchers;true;jsonPath;(String,Object[]);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.result;MockMvcResultMatchers;true;jsonPath;(String,Object[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.test.web.servlet.result;MockMvcResultMatchers;true;xpath;(String,Map,Object[]);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.result;MockMvcResultMatchers;true;xpath;(String,Map,Object[]);;ArrayElement of Argument[2];ReturnValue;taint",
        "org.springframework.test.web.servlet.result;MockMvcResultMatchers;true;xpath;(String,Map,Object[]);;Element of Argument[1];ReturnValue;taint",
        "org.springframework.test.web.servlet.result;MockMvcResultMatchers;true;xpath;(String,Object[]);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.result;MockMvcResultMatchers;true;xpath;(String,Object[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.test.web.servlet.setup;MockMvcBuilders;false;standaloneSetup;(Object[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.setup;MockMvcBuilders;false;webAppContextSetup;(WebApplicationContext);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.setup;StandaloneMockMvcBuilder;true;addInterceptors;(HandlerInterceptor[]);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.servlet.setup;StandaloneMockMvcBuilder;true;addInterceptors;(HandlerInterceptor[]);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.servlet.setup;StandaloneMockMvcBuilder;true;addInterceptors;(HandlerInterceptor[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.setup;StandaloneMockMvcBuilder;true;addMappedInterceptors;(String[],HandlerInterceptor[]);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.servlet.setup;StandaloneMockMvcBuilder;true;addMappedInterceptors;(String[],HandlerInterceptor[]);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.servlet.setup;StandaloneMockMvcBuilder;true;addMappedInterceptors;(String[],HandlerInterceptor[]);;Argument[1];Argument[-1];taint",
        "org.springframework.test.web.servlet.setup;StandaloneMockMvcBuilder;true;addMappedInterceptors;(String[],HandlerInterceptor[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.setup;StandaloneMockMvcBuilder;true;addMappedInterceptors;(String[],HandlerInterceptor[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.test.web.servlet.setup;StandaloneMockMvcBuilder;true;addPlaceholderValue;(String,String);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.servlet.setup;StandaloneMockMvcBuilder;true;addPlaceholderValue;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.servlet.setup;StandaloneMockMvcBuilder;true;addPlaceholderValue;(String,String);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.setup;StandaloneMockMvcBuilder;true;addPlaceholderValue;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.test.web.servlet.setup;StandaloneMockMvcBuilder;true;addPlaceholderValue;(String,String);;Argument[1];ReturnValue;taint",
        "org.springframework.test.web.servlet.setup;StandaloneMockMvcBuilder;true;setAsyncRequestTimeout;(long);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.servlet.setup;StandaloneMockMvcBuilder;true;setContentNegotiationManager;(ContentNegotiationManager);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.servlet.setup;StandaloneMockMvcBuilder;true;setContentNegotiationManager;(ContentNegotiationManager);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.servlet.setup;StandaloneMockMvcBuilder;true;setContentNegotiationManager;(ContentNegotiationManager);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.setup;StandaloneMockMvcBuilder;true;setControllerAdvice;(Object[]);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.servlet.setup;StandaloneMockMvcBuilder;true;setControllerAdvice;(Object[]);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.servlet.setup;StandaloneMockMvcBuilder;true;setControllerAdvice;(Object[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.setup;StandaloneMockMvcBuilder;true;setConversionService;(FormattingConversionService);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.servlet.setup;StandaloneMockMvcBuilder;true;setConversionService;(FormattingConversionService);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.servlet.setup;StandaloneMockMvcBuilder;true;setConversionService;(FormattingConversionService);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.setup;StandaloneMockMvcBuilder;true;setCustomArgumentResolvers;(HandlerMethodArgumentResolver[]);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.servlet.setup;StandaloneMockMvcBuilder;true;setCustomArgumentResolvers;(HandlerMethodArgumentResolver[]);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.servlet.setup;StandaloneMockMvcBuilder;true;setCustomArgumentResolvers;(HandlerMethodArgumentResolver[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.setup;StandaloneMockMvcBuilder;true;setCustomHandlerMapping;(Supplier);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.servlet.setup;StandaloneMockMvcBuilder;true;setCustomHandlerMapping;(Supplier);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.servlet.setup;StandaloneMockMvcBuilder;true;setCustomHandlerMapping;(Supplier);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.setup;StandaloneMockMvcBuilder;true;setCustomReturnValueHandlers;(HandlerMethodReturnValueHandler[]);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.servlet.setup;StandaloneMockMvcBuilder;true;setCustomReturnValueHandlers;(HandlerMethodReturnValueHandler[]);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.servlet.setup;StandaloneMockMvcBuilder;true;setCustomReturnValueHandlers;(HandlerMethodReturnValueHandler[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.setup;StandaloneMockMvcBuilder;true;setFlashMapManager;(FlashMapManager);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.servlet.setup;StandaloneMockMvcBuilder;true;setFlashMapManager;(FlashMapManager);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.servlet.setup;StandaloneMockMvcBuilder;true;setFlashMapManager;(FlashMapManager);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.setup;StandaloneMockMvcBuilder;true;setHandlerExceptionResolvers;(HandlerExceptionResolver[]);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.servlet.setup;StandaloneMockMvcBuilder;true;setHandlerExceptionResolvers;(HandlerExceptionResolver[]);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.servlet.setup;StandaloneMockMvcBuilder;true;setHandlerExceptionResolvers;(HandlerExceptionResolver[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.setup;StandaloneMockMvcBuilder;true;setHandlerExceptionResolvers;(List);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.servlet.setup;StandaloneMockMvcBuilder;true;setHandlerExceptionResolvers;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.servlet.setup;StandaloneMockMvcBuilder;true;setHandlerExceptionResolvers;(List);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.setup;StandaloneMockMvcBuilder;true;setLocaleResolver;(LocaleResolver);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.servlet.setup;StandaloneMockMvcBuilder;true;setLocaleResolver;(LocaleResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.servlet.setup;StandaloneMockMvcBuilder;true;setLocaleResolver;(LocaleResolver);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.setup;StandaloneMockMvcBuilder;true;setMessageConverters;(HttpMessageConverter[]);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.servlet.setup;StandaloneMockMvcBuilder;true;setMessageConverters;(HttpMessageConverter[]);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.servlet.setup;StandaloneMockMvcBuilder;true;setMessageConverters;(HttpMessageConverter[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.setup;StandaloneMockMvcBuilder;true;setPatternParser;(PathPatternParser);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.servlet.setup;StandaloneMockMvcBuilder;true;setRemoveSemicolonContent;(boolean);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.servlet.setup;StandaloneMockMvcBuilder;true;setSingleView;(View);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.servlet.setup;StandaloneMockMvcBuilder;true;setSingleView;(View);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.servlet.setup;StandaloneMockMvcBuilder;true;setSingleView;(View);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.setup;StandaloneMockMvcBuilder;true;setUseSuffixPatternMatch;(boolean);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.servlet.setup;StandaloneMockMvcBuilder;true;setUseTrailingSlashPatternMatch;(boolean);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.servlet.setup;StandaloneMockMvcBuilder;true;setValidator;(Validator);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.servlet.setup;StandaloneMockMvcBuilder;true;setValidator;(Validator);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.servlet.setup;StandaloneMockMvcBuilder;true;setValidator;(Validator);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet.setup;StandaloneMockMvcBuilder;true;setViewResolvers;(ViewResolver[]);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.servlet.setup;StandaloneMockMvcBuilder;true;setViewResolvers;(ViewResolver[]);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.servlet.setup;StandaloneMockMvcBuilder;true;setViewResolvers;(ViewResolver[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet;MockMvc;false;getDispatcherServlet;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.servlet;MvcResult;true;getFlashMap;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.servlet;MvcResult;true;getHandler;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.servlet;MvcResult;true;getInterceptors;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.servlet;MvcResult;true;getModelAndView;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.servlet;MvcResult;true;getRequest;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.servlet;MvcResult;true;getResolvedException;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.servlet;MvcResult;true;getResponse;();;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.servlet;RequestBuilder;true;buildRequest;(ServletContext);;Argument[-1];ReturnValue;taint",
        "org.springframework.test.web.servlet;RequestBuilder;true;buildRequest;(ServletContext);;Argument[0];Argument[-1];taint",
        "org.springframework.test.web.servlet;RequestBuilder;true;buildRequest;(ServletContext);;Argument[0];ReturnValue;taint",
        "org.springframework.test.web.servlet;ResultActions;true;andDo;(ResultHandler);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.servlet;ResultActions;true;andExpect;(ResultMatcher);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.servlet;ResultActions;true;andExpectAll;(ResultMatcher[]);;Argument[-1];ReturnValue;value",
        "org.springframework.test.web.servlet;SmartRequestBuilder;true;postProcessRequest;(MockHttpServletRequest);;Argument[0];ReturnValue;taint",
        "org.springframework.transaction.annotation;AnnotationTransactionAttributeSource;true;AnnotationTransactionAttributeSource;(Set);;Argument[0];Argument[-1];taint",
        "org.springframework.transaction.annotation;AnnotationTransactionAttributeSource;true;AnnotationTransactionAttributeSource;(TransactionAnnotationParser);;Argument[0];Argument[-1];taint",
        "org.springframework.transaction.annotation;AnnotationTransactionAttributeSource;true;AnnotationTransactionAttributeSource;(TransactionAnnotationParser[]);;Argument[0];Argument[-1];taint",
        "org.springframework.transaction.annotation;ProxyTransactionManagementConfiguration;true;transactionAdvisor;(TransactionAttributeSource,TransactionInterceptor);;Argument[0];ReturnValue;taint",
        "org.springframework.transaction.annotation;ProxyTransactionManagementConfiguration;true;transactionAdvisor;(TransactionAttributeSource,TransactionInterceptor);;Argument[1];ReturnValue;taint",
        "org.springframework.transaction.annotation;ProxyTransactionManagementConfiguration;true;transactionInterceptor;(TransactionAttributeSource);;Argument[0];ReturnValue;taint",
        "org.springframework.transaction.annotation;TransactionAnnotationParser;true;parseTransactionAnnotation;(AnnotatedElement);;Argument[0];ReturnValue;taint",
        "org.springframework.transaction.event;TransactionalApplicationListenerAdapter;true;TransactionalApplicationListenerAdapter;(ApplicationListener);;Argument[0];Argument[-1];taint",
        "org.springframework.transaction.event;TransactionalApplicationListenerAdapter;true;setListenerId;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.transaction.event;TransactionalApplicationListenerMethodAdapter;true;TransactionalApplicationListenerMethodAdapter;(String,Class,Method);;Argument[0];Argument[-1];taint",
        "org.springframework.transaction.event;TransactionalApplicationListenerMethodAdapter;true;TransactionalApplicationListenerMethodAdapter;(String,Class,Method);;Argument[2];Argument[-1];taint",
        "org.springframework.transaction.interceptor;BeanFactoryTransactionAttributeSourceAdvisor;true;setClassFilter;(ClassFilter);;Argument[0];Argument[-1];taint",
        "org.springframework.transaction.interceptor;BeanFactoryTransactionAttributeSourceAdvisor;true;setTransactionAttributeSource;(TransactionAttributeSource);;Argument[0];Argument[-1];taint",
        "org.springframework.transaction.interceptor;CompositeTransactionAttributeSource;true;CompositeTransactionAttributeSource;(TransactionAttributeSource[]);;Argument[0];Argument[-1];taint",
        "org.springframework.transaction.interceptor;CompositeTransactionAttributeSource;true;getTransactionAttributeSources;();;Argument[-1];ReturnValue;taint",
        "org.springframework.transaction.interceptor;DefaultTransactionAttribute;true;getDescriptor;();;Argument[-1];ReturnValue;taint",
        "org.springframework.transaction.interceptor;DefaultTransactionAttribute;true;getTimeoutString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.transaction.interceptor;DefaultTransactionAttribute;true;setDescriptor;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.transaction.interceptor;DefaultTransactionAttribute;true;setLabels;(Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.transaction.interceptor;DefaultTransactionAttribute;true;setQualifier;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.transaction.interceptor;DefaultTransactionAttribute;true;setTimeoutString;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.transaction.interceptor;DelegatingTransactionAttribute;true;DelegatingTransactionAttribute;(TransactionAttribute);;Argument[0];Argument[-1];taint",
        "org.springframework.transaction.interceptor;MatchAlwaysTransactionAttributeSource;true;setTransactionAttribute;(TransactionAttribute);;Argument[0];Argument[-1];taint",
        "org.springframework.transaction.interceptor;MatchAlwaysTransactionAttributeSource;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.transaction.interceptor;MethodMapTransactionAttributeSource;true;addTransactionalMethod;(Class,String,TransactionAttribute);;Argument[1];Argument[-1];taint",
        "org.springframework.transaction.interceptor;MethodMapTransactionAttributeSource;true;addTransactionalMethod;(Class,String,TransactionAttribute);;Argument[2];Argument[-1];taint",
        "org.springframework.transaction.interceptor;MethodMapTransactionAttributeSource;true;addTransactionalMethod;(Method,TransactionAttribute);;Argument[0];Argument[-1];taint",
        "org.springframework.transaction.interceptor;MethodMapTransactionAttributeSource;true;addTransactionalMethod;(Method,TransactionAttribute);;Argument[1];Argument[-1];taint",
        "org.springframework.transaction.interceptor;MethodMapTransactionAttributeSource;true;addTransactionalMethod;(String,TransactionAttribute);;Argument[0];Argument[-1];taint",
        "org.springframework.transaction.interceptor;MethodMapTransactionAttributeSource;true;addTransactionalMethod;(String,TransactionAttribute);;Argument[1];Argument[-1];taint",
        "org.springframework.transaction.interceptor;MethodMapTransactionAttributeSource;true;setMethodMap;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.transaction.interceptor;MethodMapTransactionAttributeSource;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.transaction.interceptor;NameMatchTransactionAttributeSource;true;addTransactionalMethod;(String,TransactionAttribute);;Argument[0];Argument[-1];taint",
        "org.springframework.transaction.interceptor;NameMatchTransactionAttributeSource;true;addTransactionalMethod;(String,TransactionAttribute);;Argument[1];Argument[-1];taint",
        "org.springframework.transaction.interceptor;NameMatchTransactionAttributeSource;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.transaction.interceptor;NoRollbackRuleAttribute;true;NoRollbackRuleAttribute;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.transaction.interceptor;NoRollbackRuleAttribute;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.transaction.interceptor;RollbackRuleAttribute;true;RollbackRuleAttribute;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.transaction.interceptor;RollbackRuleAttribute;true;getExceptionName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.transaction.interceptor;RollbackRuleAttribute;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.transaction.interceptor;RuleBasedTransactionAttribute;true;RuleBasedTransactionAttribute;(int,List);;Argument[1];Argument[-1];taint",
        "org.springframework.transaction.interceptor;RuleBasedTransactionAttribute;true;getRollbackRules;();;Argument[-1];ReturnValue;taint",
        "org.springframework.transaction.interceptor;RuleBasedTransactionAttribute;true;setRollbackRules;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.transaction.interceptor;RuleBasedTransactionAttribute;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.transaction.interceptor;TransactionAspectSupport;true;getTransactionAttributeSource;();;Argument[-1];ReturnValue;taint",
        "org.springframework.transaction.interceptor;TransactionAspectSupport;true;getTransactionManager;();;Argument[-1];ReturnValue;taint",
        "org.springframework.transaction.interceptor;TransactionAspectSupport;true;setTransactionAttributeSource;(TransactionAttributeSource);;Argument[0];Argument[-1];taint",
        "org.springframework.transaction.interceptor;TransactionAspectSupport;true;setTransactionAttributeSources;(TransactionAttributeSource[]);;Argument[0];Argument[-1];taint",
        "org.springframework.transaction.interceptor;TransactionAspectSupport;true;setTransactionManager;(TransactionManager);;Argument[0];Argument[-1];taint",
        "org.springframework.transaction.interceptor;TransactionAspectSupport;true;setTransactionManagerBeanName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.transaction.interceptor;TransactionAttribute;true;getLabels;();;Argument[-1];ReturnValue;taint",
        "org.springframework.transaction.interceptor;TransactionAttribute;true;getQualifier;();;Argument[-1];ReturnValue;taint",
        "org.springframework.transaction.interceptor;TransactionAttributeSource;true;getTransactionAttribute;(Method,Class);;Argument[-1];ReturnValue;taint",
        "org.springframework.transaction.interceptor;TransactionAttributeSource;true;getTransactionAttribute;(Method,Class);;Argument[0];Argument[-1];taint",
        "org.springframework.transaction.interceptor;TransactionAttributeSource;true;getTransactionAttribute;(Method,Class);;Argument[0];ReturnValue;taint",
        "org.springframework.transaction.interceptor;TransactionAttributeSourceAdvisor;true;TransactionAttributeSourceAdvisor;(TransactionInterceptor);;Argument[0];Argument[-1];taint",
        "org.springframework.transaction.interceptor;TransactionAttributeSourceAdvisor;true;setClassFilter;(ClassFilter);;Argument[0];Argument[-1];taint",
        "org.springframework.transaction.interceptor;TransactionAttributeSourceAdvisor;true;setTransactionInterceptor;(TransactionInterceptor);;Argument[0];Argument[-1];taint",
        "org.springframework.transaction.interceptor;TransactionInterceptor;true;TransactionInterceptor;(PlatformTransactionManager,Properties);;Argument[0];Argument[-1];taint",
        "org.springframework.transaction.interceptor;TransactionInterceptor;true;TransactionInterceptor;(PlatformTransactionManager,TransactionAttributeSource);;Argument[0];Argument[-1];taint",
        "org.springframework.transaction.interceptor;TransactionInterceptor;true;TransactionInterceptor;(PlatformTransactionManager,TransactionAttributeSource);;Argument[1];Argument[-1];taint",
        "org.springframework.transaction.interceptor;TransactionInterceptor;true;TransactionInterceptor;(TransactionManager,TransactionAttributeSource);;Argument[0];Argument[-1];taint",
        "org.springframework.transaction.interceptor;TransactionInterceptor;true;TransactionInterceptor;(TransactionManager,TransactionAttributeSource);;Argument[1];Argument[-1];taint",
        "org.springframework.transaction.interceptor;TransactionProxyFactoryBean;true;setPointcut;(Pointcut);;Argument[0];Argument[-1];taint",
        "org.springframework.transaction.interceptor;TransactionProxyFactoryBean;true;setTransactionAttributeSource;(TransactionAttributeSource);;Argument[0];Argument[-1];taint",
        "org.springframework.transaction.interceptor;TransactionProxyFactoryBean;true;setTransactionManager;(PlatformTransactionManager);;Argument[0];Argument[-1];taint",
        "org.springframework.transaction.jta;JtaAfterCompletionSynchronization;true;JtaAfterCompletionSynchronization;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.transaction.jta;JtaTransactionManager;true;JtaTransactionManager;(TransactionManager);;Argument[0];Argument[-1];taint",
        "org.springframework.transaction.jta;JtaTransactionManager;true;JtaTransactionManager;(UserTransaction);;Argument[0];Argument[-1];taint",
        "org.springframework.transaction.jta;JtaTransactionManager;true;JtaTransactionManager;(UserTransaction,TransactionManager);;Argument[0];Argument[-1];taint",
        "org.springframework.transaction.jta;JtaTransactionManager;true;JtaTransactionManager;(UserTransaction,TransactionManager);;Argument[1];Argument[-1];taint",
        "org.springframework.transaction.jta;JtaTransactionManager;true;getJndiEnvironment;();;Argument[-1];ReturnValue;taint",
        "org.springframework.transaction.jta;JtaTransactionManager;true;getJndiTemplate;();;Argument[-1];ReturnValue;taint",
        "org.springframework.transaction.jta;JtaTransactionManager;true;getTransactionManager;();;Argument[-1];ReturnValue;taint",
        "org.springframework.transaction.jta;JtaTransactionManager;true;getTransactionSynchronizationRegistry;();;Argument[-1];ReturnValue;taint",
        "org.springframework.transaction.jta;JtaTransactionManager;true;getUserTransaction;();;Argument[-1];ReturnValue;taint",
        "org.springframework.transaction.jta;JtaTransactionManager;true;setJndiEnvironment;(Properties);;Argument[0];Argument[-1];taint",
        "org.springframework.transaction.jta;JtaTransactionManager;true;setJndiTemplate;(JndiTemplate);;Argument[0];Argument[-1];taint",
        "org.springframework.transaction.jta;JtaTransactionManager;true;setTransactionManager;(TransactionManager);;Argument[0];Argument[-1];taint",
        "org.springframework.transaction.jta;JtaTransactionManager;true;setTransactionManagerName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.transaction.jta;JtaTransactionManager;true;setTransactionSynchronizationRegistry;(TransactionSynchronizationRegistry);;Argument[0];Argument[-1];taint",
        "org.springframework.transaction.jta;JtaTransactionManager;true;setTransactionSynchronizationRegistryName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.transaction.jta;JtaTransactionManager;true;setUserTransaction;(UserTransaction);;Argument[0];Argument[-1];taint",
        "org.springframework.transaction.jta;JtaTransactionManager;true;setUserTransactionName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.transaction.jta;JtaTransactionObject;true;JtaTransactionObject;(UserTransaction);;Argument[0];Argument[-1];taint",
        "org.springframework.transaction.jta;JtaTransactionObject;true;getUserTransaction;();;Argument[-1];ReturnValue;taint",
        "org.springframework.transaction.jta;ManagedTransactionAdapter;true;ManagedTransactionAdapter;(TransactionManager);;Argument[0];Argument[-1];taint",
        "org.springframework.transaction.jta;ManagedTransactionAdapter;true;getTransactionManager;();;Argument[-1];ReturnValue;taint",
        "org.springframework.transaction.jta;SimpleTransactionFactory;true;SimpleTransactionFactory;(TransactionManager);;Argument[0];Argument[-1];taint",
        "org.springframework.transaction.jta;SpringJtaSynchronizationAdapter;true;SpringJtaSynchronizationAdapter;(TransactionSynchronization);;Argument[0];Argument[-1];taint",
        "org.springframework.transaction.jta;SpringJtaSynchronizationAdapter;true;SpringJtaSynchronizationAdapter;(TransactionSynchronization,TransactionManager);;Argument[0];Argument[-1];taint",
        "org.springframework.transaction.jta;SpringJtaSynchronizationAdapter;true;SpringJtaSynchronizationAdapter;(TransactionSynchronization,TransactionManager);;Argument[1];Argument[-1];taint",
        "org.springframework.transaction.jta;SpringJtaSynchronizationAdapter;true;SpringJtaSynchronizationAdapter;(TransactionSynchronization,UserTransaction);;Argument[0];Argument[-1];taint",
        "org.springframework.transaction.jta;SpringJtaSynchronizationAdapter;true;SpringJtaSynchronizationAdapter;(TransactionSynchronization,UserTransaction);;Argument[1];Argument[-1];taint",
        "org.springframework.transaction.jta;UserTransactionAdapter;true;UserTransactionAdapter;(TransactionManager);;Argument[0];Argument[-1];taint",
        "org.springframework.transaction.jta;UserTransactionAdapter;true;getTransactionManager;();;Argument[-1];ReturnValue;taint",
        "org.springframework.transaction.jta;WebSphereUowTransactionManager;true;WebSphereUowTransactionManager;(UOWManager);;Argument[0];Argument[-1];taint",
        "org.springframework.transaction.jta;WebSphereUowTransactionManager;true;setUowManager;(UOWManager);;Argument[0];Argument[-1];taint",
        "org.springframework.transaction.jta;WebSphereUowTransactionManager;true;setUowManagerName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.transaction.reactive;GenericReactiveTransaction;true;GenericReactiveTransaction;(Object,boolean,boolean,boolean,boolean,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.transaction.reactive;GenericReactiveTransaction;true;GenericReactiveTransaction;(Object,boolean,boolean,boolean,boolean,Object);;Argument[5];Argument[-1];taint",
        "org.springframework.transaction.reactive;GenericReactiveTransaction;true;getSuspendedResources;();;Argument[-1];ReturnValue;taint",
        "org.springframework.transaction.reactive;GenericReactiveTransaction;true;getTransaction;();;Argument[-1];ReturnValue;taint",
        "org.springframework.transaction.reactive;ReactiveResourceSynchronization;true;ReactiveResourceSynchronization;(Object,Object,TransactionSynchronizationManager);;Argument[0];Argument[-1];taint",
        "org.springframework.transaction.reactive;ReactiveResourceSynchronization;true;ReactiveResourceSynchronization;(Object,Object,TransactionSynchronizationManager);;Argument[1];Argument[-1];taint",
        "org.springframework.transaction.reactive;ReactiveResourceSynchronization;true;ReactiveResourceSynchronization;(Object,Object,TransactionSynchronizationManager);;Argument[2];Argument[-1];taint",
        "org.springframework.transaction.reactive;TransactionContext;true;getContextId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.transaction.reactive;TransactionContext;true;getCurrentTransactionName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.transaction.reactive;TransactionContext;true;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.transaction.reactive;TransactionContext;true;getParent;();;Argument[-1];ReturnValue;taint",
        "org.springframework.transaction.reactive;TransactionContext;true;getResources;();;Argument[-1];ReturnValue;taint",
        "org.springframework.transaction.reactive;TransactionContext;true;getSynchronizations;();;Argument[-1];ReturnValue;taint",
        "org.springframework.transaction.reactive;TransactionContext;true;setCurrentTransactionName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.transaction.reactive;TransactionContext;true;setSynchronizations;(Set);;Argument[0];Argument[-1];taint",
        "org.springframework.transaction.reactive;TransactionSynchronizationManager;true;TransactionSynchronizationManager;(TransactionContext);;Argument[0];Argument[-1];taint",
        "org.springframework.transaction.reactive;TransactionSynchronizationManager;true;getCurrentTransactionName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.transaction.reactive;TransactionSynchronizationManager;true;getResource;(Object);;Argument[-1];ReturnValue;taint",
        "org.springframework.transaction.reactive;TransactionSynchronizationManager;true;getSynchronizations;();;Argument[-1];ReturnValue;taint",
        "org.springframework.transaction.reactive;TransactionSynchronizationManager;true;setCurrentTransactionName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.transaction.reactive;TransactionSynchronizationManager;true;unbindResource;(Object);;Argument[-1];ReturnValue;taint",
        "org.springframework.transaction.reactive;TransactionSynchronizationManager;true;unbindResourceIfPossible;(Object);;Argument[-1];ReturnValue;taint",
        "org.springframework.transaction.reactive;TransactionalOperator;true;create;(ReactiveTransactionManager);;Argument[0];ReturnValue;taint",
        "org.springframework.transaction.reactive;TransactionalOperator;true;create;(ReactiveTransactionManager,TransactionDefinition);;Argument[0];ReturnValue;taint",
        "org.springframework.transaction.reactive;TransactionalOperator;true;create;(ReactiveTransactionManager,TransactionDefinition);;Argument[1];ReturnValue;taint",
        "org.springframework.transaction.support;DefaultTransactionDefinition;true;setName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.transaction.support;DefaultTransactionStatus;true;DefaultTransactionStatus;(Object,boolean,boolean,boolean,boolean,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.transaction.support;DefaultTransactionStatus;true;DefaultTransactionStatus;(Object,boolean,boolean,boolean,boolean,Object);;Argument[5];Argument[-1];taint",
        "org.springframework.transaction.support;DefaultTransactionStatus;true;getSuspendedResources;();;Argument[-1];ReturnValue;taint",
        "org.springframework.transaction.support;DefaultTransactionStatus;true;getTransaction;();;Argument[-1];ReturnValue;taint",
        "org.springframework.transaction.support;DelegatingTransactionDefinition;true;DelegatingTransactionDefinition;(TransactionDefinition);;Argument[0];Argument[-1];taint",
        "org.springframework.transaction.support;DelegatingTransactionDefinition;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.transaction.support;ResourceHolderSupport;true;getDeadline;();;Argument[-1];ReturnValue;taint",
        "org.springframework.transaction.support;ResourceHolderSynchronization;true;ResourceHolderSynchronization;(ResourceHolder,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.transaction.support;ResourceHolderSynchronization;true;ResourceHolderSynchronization;(ResourceHolder,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.transaction.support;ResourceTransactionManager;true;getResourceFactory;();;Argument[-1];ReturnValue;taint",
        "org.springframework.transaction.support;TransactionSynchronizationUtils;true;unwrapResourceIfNecessary;(Object);;Argument[0];ReturnValue;taint",
        "org.springframework.transaction.support;TransactionTemplate;true;TransactionTemplate;(PlatformTransactionManager);;Argument[0];Argument[-1];taint",
        "org.springframework.transaction.support;TransactionTemplate;true;TransactionTemplate;(PlatformTransactionManager,TransactionDefinition);;Argument[0];Argument[-1];taint",
        "org.springframework.transaction.support;TransactionTemplate;true;getTransactionManager;();;Argument[-1];ReturnValue;taint",
        "org.springframework.transaction.support;TransactionTemplate;true;setTransactionManager;(PlatformTransactionManager);;Argument[0];Argument[-1];taint",
        "org.springframework.transaction;PlatformTransactionManager;true;getTransaction;(TransactionDefinition);;Argument[0];Argument[-1];taint",
        "org.springframework.transaction;TransactionDefinition;true;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.transaction;TransactionSystemException;true;getApplicationException;();;Argument[-1];ReturnValue;taint",
        "org.springframework.transaction;TransactionSystemException;true;getOriginalException;();;Argument[-1];ReturnValue;taint",
        "org.springframework.transaction;TransactionSystemException;true;initApplicationException;(Throwable);;Argument[0];Argument[-1];taint",
        "org.springframework.ui.context.support;ResourceBundleThemeSource;true;setBasenamePrefix;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.ui.context.support;ResourceBundleThemeSource;true;setDefaultEncoding;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.ui.context.support;SimpleTheme;true;SimpleTheme;(String,MessageSource);;Argument[0];Argument[-1];taint",
        "org.springframework.ui.context.support;SimpleTheme;true;SimpleTheme;(String,MessageSource);;Argument[1];Argument[-1];taint",
        "org.springframework.ui.context;HierarchicalThemeSource;true;getParentThemeSource;();;Argument[-1];ReturnValue;taint",
        "org.springframework.ui.context;HierarchicalThemeSource;true;setParentThemeSource;(ThemeSource);;Argument[0];Argument[-1];taint",
        "org.springframework.ui.context;Theme;true;getMessageSource;();;Argument[-1];ReturnValue;taint",
        "org.springframework.ui.context;Theme;true;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.ui.context;ThemeSource;true;getTheme;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.ui.context;ThemeSource;true;getTheme;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.ui.context;ThemeSource;true;getTheme;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.ui.freemarker;FreeMarkerConfigurationFactory;true;setConfigLocation;(Resource);;Argument[0];Argument[-1];taint",
        "org.springframework.ui.freemarker;FreeMarkerConfigurationFactory;true;setDefaultEncoding;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.ui.freemarker;FreeMarkerConfigurationFactory;true;setFreemarkerSettings;(Properties);;Argument[0];Argument[-1];taint",
        "org.springframework.ui.freemarker;FreeMarkerConfigurationFactory;true;setFreemarkerVariables;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.ui.freemarker;FreeMarkerConfigurationFactory;true;setPostTemplateLoaders;(TemplateLoader[]);;Argument[0];Argument[-1];taint",
        "org.springframework.ui.freemarker;FreeMarkerConfigurationFactory;true;setPreTemplateLoaders;(TemplateLoader[]);;Argument[0];Argument[-1];taint",
        "org.springframework.ui.freemarker;FreeMarkerConfigurationFactory;true;setResourceLoader;(ResourceLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.ui.freemarker;FreeMarkerConfigurationFactory;true;setTemplateLoaderPath;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.ui.freemarker;FreeMarkerConfigurationFactory;true;setTemplateLoaderPaths;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.ui.freemarker;SpringTemplateLoader;true;SpringTemplateLoader;(ResourceLoader,String);;Argument[0];Argument[-1];taint",
        "org.springframework.ui.freemarker;SpringTemplateLoader;true;SpringTemplateLoader;(ResourceLoader,String);;Argument[1];Argument[-1];taint",
        "org.springframework.ui;ConcurrentModel;true;ConcurrentModel;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.ui;ConcurrentModel;true;ConcurrentModel;(String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.ui;ConcurrentModel;true;ConcurrentModel;(String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.ui;Model;true;addAllAttributes;(Collection);;Argument[-1];ReturnValue;value",
        "org.springframework.ui;Model;true;addAllAttributes;(Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.ui;Model;true;addAllAttributes;(Collection);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.ui;Model;true;addAllAttributes;(Map);;Argument[-1];ReturnValue;value",
        "org.springframework.ui;Model;true;addAllAttributes;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.ui;Model;true;addAllAttributes;(Map);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.ui;Model;true;addAttribute;(Object);;Argument[-1];ReturnValue;value",
        "org.springframework.ui;Model;true;addAttribute;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.ui;Model;true;addAttribute;(Object);;Argument[0];ReturnValue;taint",
        "org.springframework.ui;Model;true;addAttribute;(String,Object);;Argument[-1];ReturnValue;value",
        "org.springframework.ui;Model;true;addAttribute;(String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.ui;Model;true;addAttribute;(String,Object);;Argument[0];ReturnValue;taint",
        "org.springframework.ui;Model;true;addAttribute;(String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.ui;Model;true;addAttribute;(String,Object);;Argument[1];ReturnValue;taint",
        "org.springframework.ui;Model;true;asMap;();;Argument[-1];ReturnValue;value",
        "org.springframework.ui;Model;true;getAttribute;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.ui;Model;true;mergeAttributes;(Map);;Argument[-1];ReturnValue;value",
        "org.springframework.ui;Model;true;mergeAttributes;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.ui;Model;true;mergeAttributes;(Map);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.ui;ModelMap;true;ModelMap;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.ui;ModelMap;true;ModelMap;(String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.ui;ModelMap;true;ModelMap;(String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.ui;ModelMap;true;addAllAttributes;(Collection);;Argument[-1];ReturnValue;value",
        "org.springframework.ui;ModelMap;true;addAllAttributes;(Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.ui;ModelMap;true;addAllAttributes;(Collection);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.ui;ModelMap;true;addAllAttributes;(Map);;Argument[-1];ReturnValue;value",
        "org.springframework.ui;ModelMap;true;addAllAttributes;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.ui;ModelMap;true;addAllAttributes;(Map);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.ui;ModelMap;true;addAttribute;(Object);;Argument[-1];ReturnValue;value",
        "org.springframework.ui;ModelMap;true;addAttribute;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.ui;ModelMap;true;addAttribute;(Object);;Argument[0];ReturnValue;taint",
        "org.springframework.ui;ModelMap;true;addAttribute;(String,Object);;Argument[-1];ReturnValue;value",
        "org.springframework.ui;ModelMap;true;addAttribute;(String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.ui;ModelMap;true;addAttribute;(String,Object);;Argument[0];ReturnValue;taint",
        "org.springframework.ui;ModelMap;true;addAttribute;(String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.ui;ModelMap;true;addAttribute;(String,Object);;Argument[1];ReturnValue;taint",
        "org.springframework.ui;ModelMap;true;getAttribute;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.ui;ModelMap;true;mergeAttributes;(Map);;Argument[-1];ReturnValue;value",
        "org.springframework.ui;ModelMap;true;mergeAttributes;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.ui;ModelMap;true;mergeAttributes;(Map);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.util.comparator;Comparators;true;nullsHigh;(Comparator);;Argument[0];ReturnValue;taint",
        "org.springframework.util.comparator;Comparators;true;nullsLow;(Comparator);;Argument[0];ReturnValue;taint",
        "org.springframework.util.comparator;CompoundComparator;true;CompoundComparator;(Comparator[]);;Argument[0];Argument[-1];taint",
        "org.springframework.util.comparator;CompoundComparator;true;addComparator;(Comparator);;Argument[0];Argument[-1];taint",
        "org.springframework.util.comparator;CompoundComparator;true;addComparator;(Comparator,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.util.comparator;CompoundComparator;true;setComparator;(int,Comparator);;Argument[1];Argument[-1];taint",
        "org.springframework.util.comparator;CompoundComparator;true;setComparator;(int,Comparator,boolean);;Argument[1];Argument[-1];taint",
        "org.springframework.util.comparator;CompoundComparator;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.util.comparator;InstanceComparator;true;InstanceComparator;(Class[]);;Argument[0];Argument[-1];taint",
        "org.springframework.util.comparator;InvertibleComparator;true;InvertibleComparator;(Comparator);;Argument[0];Argument[-1];taint",
        "org.springframework.util.comparator;InvertibleComparator;true;InvertibleComparator;(Comparator,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.util.comparator;InvertibleComparator;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.util.comparator;NullSafeComparator;true;NullSafeComparator;(Comparator,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.util.comparator;NullSafeComparator;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.util.concurrent;CompletableToListenableFutureAdapter;true;CompletableToListenableFutureAdapter;(CompletableFuture);;Argument[0];Argument[-1];taint",
        "org.springframework.util.concurrent;ListenableFutureCallbackRegistry;true;addCallback;(ListenableFutureCallback);;Argument[0];Argument[-1];taint",
        "org.springframework.util.concurrent;ListenableFutureCallbackRegistry;true;addFailureCallback;(FailureCallback);;Argument[0];Argument[-1];taint",
        "org.springframework.util.concurrent;ListenableFutureCallbackRegistry;true;addSuccessCallback;(SuccessCallback);;Argument[0];Argument[-1];taint",
        "org.springframework.util.concurrent;ListenableFutureCallbackRegistry;true;failure;(Throwable);;Argument[0];Argument[-1];taint",
        "org.springframework.util.concurrent;ListenableFutureCallbackRegistry;true;success;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.util.function;SingletonSupplier;true;SingletonSupplier;(Object,Supplier);;Argument[0];Argument[-1];taint",
        "org.springframework.util.function;SingletonSupplier;true;SingletonSupplier;(Object,Supplier);;Argument[1];Argument[-1];taint",
        "org.springframework.util.function;SingletonSupplier;true;SingletonSupplier;(Supplier,Supplier);;Argument[0];Argument[-1];taint",
        "org.springframework.util.function;SingletonSupplier;true;SingletonSupplier;(Supplier,Supplier);;Argument[1];Argument[-1];taint",
        "org.springframework.util.function;SingletonSupplier;true;obtain;();;Argument[-1];ReturnValue;taint",
        "org.springframework.util.function;SingletonSupplier;true;of;(Object);;Argument[0];ReturnValue;taint",
        "org.springframework.util.function;SingletonSupplier;true;of;(Supplier);;Argument[0];ReturnValue;taint",
        "org.springframework.util.function;SingletonSupplier;true;ofNullable;(Object);;Argument[0];ReturnValue;taint",
        "org.springframework.util.function;SingletonSupplier;true;ofNullable;(Supplier);;Argument[0];ReturnValue;taint",
        "org.springframework.util.xml;DomUtils;true;createContentHandler;(Node);;Argument[0];ReturnValue;taint",
        "org.springframework.util.xml;SimpleNamespaceContext;true;bindDefaultNamespaceUri;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.util.xml;SimpleNamespaceContext;true;bindNamespaceUri;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.util.xml;SimpleNamespaceContext;true;bindNamespaceUri;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.util.xml;SimpleNamespaceContext;true;getBoundPrefixes;();;Argument[-1];ReturnValue;taint",
        "org.springframework.util.xml;SimpleSaxErrorHandler;true;SimpleSaxErrorHandler;(Log);;Argument[0];Argument[-1];taint",
        "org.springframework.util.xml;SimpleTransformErrorListener;true;SimpleTransformErrorListener;(Log);;Argument[0];Argument[-1];taint",
        "org.springframework.util.xml;StaxUtils;true;createContentHandler;(XMLEventWriter);;Argument[0];ReturnValue;taint",
        "org.springframework.util.xml;StaxUtils;true;createContentHandler;(XMLStreamWriter);;Argument[0];ReturnValue;taint",
        "org.springframework.util.xml;StaxUtils;true;createCustomStaxResult;(XMLEventWriter);;Argument[0];ReturnValue;taint",
        "org.springframework.util.xml;StaxUtils;true;createCustomStaxResult;(XMLStreamWriter);;Argument[0];ReturnValue;taint",
        "org.springframework.util.xml;StaxUtils;true;createCustomStaxSource;(XMLEventReader);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.util.xml;StaxUtils;true;createCustomStaxSource;(XMLStreamReader);;Argument[0];ReturnValue;taint",
        "org.springframework.util.xml;StaxUtils;true;createEventStreamReader;(XMLEventReader);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.util.xml;StaxUtils;true;createEventStreamWriter;(XMLEventWriter);;Argument[0];ReturnValue;taint",
        "org.springframework.util.xml;StaxUtils;true;createEventStreamWriter;(XMLEventWriter,XMLEventFactory);;Argument[0];ReturnValue;taint",
        "org.springframework.util.xml;StaxUtils;true;createEventStreamWriter;(XMLEventWriter,XMLEventFactory);;Argument[1];ReturnValue;taint",
        "org.springframework.util.xml;StaxUtils;true;createXMLEventReader;(List);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.util.xml;StaxUtils;true;createXMLReader;(XMLEventReader);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.util.xml;StaxUtils;true;createXMLReader;(XMLStreamReader);;Argument[0];ReturnValue;taint",
        "org.springframework.util;AntPathMatcher;true;AntPathMatcher;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.util;AntPathMatcher;true;setPathSeparator;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.util;AutoPopulatingList;true;AutoPopulatingList;(ElementFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.util;AutoPopulatingList;true;AutoPopulatingList;(List,Class);;Argument[0];Argument[-1];taint",
        "org.springframework.util;AutoPopulatingList;true;AutoPopulatingList;(List,ElementFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.util;AutoPopulatingList;true;AutoPopulatingList;(List,ElementFactory);;Argument[1];Argument[-1];taint",
        "org.springframework.util;Base64Utils;true;decode;(byte[]);;Argument[0];ReturnValue;taint",
        "org.springframework.util;Base64Utils;true;decodeFromString;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.util;Base64Utils;true;decodeFromUrlSafeString;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.util;Base64Utils;true;decodeUrlSafe;(byte[]);;Argument[0];ReturnValue;taint",
        "org.springframework.util;Base64Utils;true;encode;(byte[]);;Argument[0];ReturnValue;taint",
        "org.springframework.util;Base64Utils;true;encodeToString;(byte[]);;Argument[0];ReturnValue;taint",
        "org.springframework.util;Base64Utils;true;encodeToUrlSafeString;(byte[]);;Argument[0];ReturnValue;taint",
        "org.springframework.util;Base64Utils;true;encodeUrlSafe;(byte[]);;Argument[0];ReturnValue;taint",
        "org.springframework.util;ClassUtils;true;addResourcePathToPackagePath;(Class,String);;Argument[1];ReturnValue;taint",
        "org.springframework.util;ClassUtils;true;getInterfaceMethodIfPossible;(Method);;Argument[0];ReturnValue;taint",
        "org.springframework.util;ClassUtils;true;getMostSpecificMethod;(Method,Class);;Argument[0];ReturnValue;taint",
        "org.springframework.util;ClassUtils;true;getPackageName;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.util;ClassUtils;true;toClassArray;(Collection);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.util;CollectionUtils;true;arrayToList;(Object);;Argument[0];ReturnValue;taint",
        "org.springframework.util;CollectionUtils;true;findFirstMatch;(Collection,Collection);;Element of Argument[1];ReturnValue;taint",
        "org.springframework.util;CollectionUtils;true;findValueOfType;(Collection,Class);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.util;CollectionUtils;true;findValueOfType;(Collection,Class[]);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.util;CollectionUtils;true;firstElement;(List);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.util;CollectionUtils;true;firstElement;(Set);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.util;CollectionUtils;true;lastElement;(List);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.util;CollectionUtils;true;lastElement;(Set);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.util;CollectionUtils;true;mergePropertiesIntoMap;(Properties,Map);;Element of Argument[0];Element of Argument[1];taint",
        "org.springframework.util;CollectionUtils;true;toArray;(Enumeration,Object[]);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.util;CollectionUtils;true;toIterator;(Enumeration);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.util;CollectionUtils;true;toMultiValueMap;(Map);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.util;CommonsLogWriter;true;CommonsLogWriter;(Log);;Argument[0];Argument[-1];taint",
        "org.springframework.util;CompositeIterator;true;add;(Iterator);;Argument[0];Argument[-1];taint",
        "org.springframework.util;ConcurrentLruCache;true;ConcurrentLruCache;(int,Function);;Argument[1];Argument[-1];taint",
        "org.springframework.util;ConcurrentLruCache;true;get;(Object);;Argument[-1];ReturnValue;taint",
        "org.springframework.util;ConcurrentLruCache;true;get;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.util;ConcurrentLruCache;true;get;(Object);;Argument[0];ReturnValue;taint",
        "org.springframework.util;CustomizableThreadCreator;true;CustomizableThreadCreator;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.util;CustomizableThreadCreator;true;getThreadGroup;();;Argument[-1];ReturnValue;taint",
        "org.springframework.util;CustomizableThreadCreator;true;getThreadNamePrefix;();;Argument[-1];ReturnValue;taint",
        "org.springframework.util;CustomizableThreadCreator;true;setThreadGroup;(ThreadGroup);;Argument[0];Argument[-1];taint",
        "org.springframework.util;CustomizableThreadCreator;true;setThreadNamePrefix;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.util;DigestUtils;true;appendMd5DigestAsHex;(InputStream,StringBuilder);;Argument[1];ReturnValue;taint",
        "org.springframework.util;DigestUtils;true;appendMd5DigestAsHex;(byte[],StringBuilder);;Argument[1];ReturnValue;taint",
        "org.springframework.util;ExceptionTypeFilter;true;ExceptionTypeFilter;(Collection,Collection,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.util;ExceptionTypeFilter;true;ExceptionTypeFilter;(Collection,Collection,boolean);;Argument[1];Argument[-1];taint",
        "org.springframework.util;FastByteArrayOutputStream;true;toByteArray;();;Argument[-1];ReturnValue;taint",
        "org.springframework.util;FastByteArrayOutputStream;true;toByteArrayUnsafe;();;Argument[-1];ReturnValue;taint",
        "org.springframework.util;FastByteArrayOutputStream;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.util;FastByteArrayOutputStream;true;writeTo;(OutputStream);;Argument[-1];Argument[0];taint",
        "org.springframework.util;FileCopyUtils;true;copy;(InputStream,OutputStream);;Argument[0];Argument[1];taint",
        "org.springframework.util;FileCopyUtils;true;copy;(byte[],OutputStream);;Argument[0];Argument[1];taint",
        "org.springframework.util;FileCopyUtils;true;copyToByteArray;(InputStream);;Argument[0];ReturnValue;taint",
        "org.springframework.util;FileCopyUtils;true;copyToString;(Reader);;Argument[0];ReturnValue;taint",
        "org.springframework.util;InstanceFilter;true;InstanceFilter;(Collection,Collection,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.util;InstanceFilter;true;InstanceFilter;(Collection,Collection,boolean);;Argument[1];Argument[-1];taint",
        "org.springframework.util;InstanceFilter;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.util;InvalidMimeTypeException;true;InvalidMimeTypeException;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.util;InvalidMimeTypeException;true;getMimeType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.util;LinkedCaseInsensitiveMap;true;LinkedCaseInsensitiveMap;(Locale);;Argument[0];Argument[-1];taint",
        "org.springframework.util;LinkedCaseInsensitiveMap;true;LinkedCaseInsensitiveMap;(int,Locale);;Argument[1];Argument[-1];taint",
        "org.springframework.util;LinkedCaseInsensitiveMap;true;getLocale;();;Argument[-1];ReturnValue;taint",
        "org.springframework.util;LinkedCaseInsensitiveMap;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.util;LinkedMultiValueMap;true;LinkedMultiValueMap;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.util;MethodInvoker;true;getArguments;();;Argument[-1];ReturnValue;taint",
        "org.springframework.util;MethodInvoker;true;getPreparedMethod;();;Argument[-1];ReturnValue;taint",
        "org.springframework.util;MethodInvoker;true;getTargetMethod;();;Argument[-1];ReturnValue;taint",
        "org.springframework.util;MethodInvoker;true;getTargetObject;();;Argument[-1];ReturnValue;taint",
        "org.springframework.util;MethodInvoker;true;setArguments;(Object[]);;Argument[0];Argument[-1];taint",
        "org.springframework.util;MethodInvoker;true;setStaticMethod;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.util;MethodInvoker;true;setTargetMethod;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.util;MethodInvoker;true;setTargetObject;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.util;MimeType;true;getParameter;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.util;MimeType;true;getParameters;();;Argument[-1];ReturnValue;taint",
        "org.springframework.util;MimeType;true;getSubtype;();;Argument[-1];ReturnValue;taint",
        "org.springframework.util;MimeType;true;getSubtypeSuffix;();;Argument[-1];ReturnValue;taint",
        "org.springframework.util;MimeType;true;getType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.util;MimeType;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.util;MimeTypeUtils;true;tokenize;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.util;MultiValueMap;true;addIfAbsent;(Object,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.util;MultiValueMap;true;addIfAbsent;(Object,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.util;MultiValueMapAdapter;true;MultiValueMapAdapter;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.util;MultiValueMapAdapter;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.util;ObjectUtils;true;addObjectToArray;(Object[],Object);;Argument[1];ReturnValue;taint",
        "org.springframework.util;ObjectUtils;true;addObjectToArray;(Object[],Object);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.util;ObjectUtils;true;caseInsensitiveValueOf;(Enum[],String);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.util;ObjectUtils;true;getDisplayString;(Object);;Argument[0];ReturnValue;taint",
        "org.springframework.util;ObjectUtils;true;nullSafeToString;(Object);;Argument[0];ReturnValue;taint",
        "org.springframework.util;ObjectUtils;true;toObjectArray;(Object);;Argument[0];ReturnValue;taint",
        "org.springframework.util;ObjectUtils;true;unwrapOptional;(Object);;Argument[0];ReturnValue;taint",
        "org.springframework.util;PathMatcher;true;combine;(String,String);;Argument[-1];ReturnValue;taint",
        "org.springframework.util;PathMatcher;true;combine;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.util;PathMatcher;true;combine;(String,String);;Argument[0];ReturnValue;taint",
        "org.springframework.util;PathMatcher;true;combine;(String,String);;Argument[1];ReturnValue;taint",
        "org.springframework.util;PathMatcher;true;extractPathWithinPattern;(String,String);;Argument[-1];ReturnValue;taint",
        "org.springframework.util;PathMatcher;true;extractPathWithinPattern;(String,String);;Argument[1];ReturnValue;taint",
        "org.springframework.util;PathMatcher;true;extractUriTemplateVariables;(String,String);;Argument[-1];ReturnValue;taint",
        "org.springframework.util;PathMatcher;true;extractUriTemplateVariables;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.util;PathMatcher;true;extractUriTemplateVariables;(String,String);;Argument[1];ReturnValue;taint",
        "org.springframework.util;PathMatcher;true;getPatternComparator;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.util;PathMatcher;true;match;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.util;PathMatcher;true;matchStart;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.util;PropertiesPersister;true;loadFromXml;(Properties,InputStream);;Argument[1];Element of Argument[0];taint",
        "org.springframework.util;PropertiesPersister;true;storeToXml;(Properties,OutputStream,String);;Argument[2];Argument[1];taint",
        "org.springframework.util;PropertiesPersister;true;storeToXml;(Properties,OutputStream,String);;Element of Argument[0];Argument[1];taint",
        "org.springframework.util;PropertiesPersister;true;storeToXml;(Properties,OutputStream,String,String);;Argument[2];Argument[1];taint",
        "org.springframework.util;PropertiesPersister;true;storeToXml;(Properties,OutputStream,String,String);;Element of Argument[0];Argument[1];taint",
        "org.springframework.util;PropertyPlaceholderHelper$PlaceholderResolver;true;resolvePlaceholder;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.util;PropertyPlaceholderHelper;true;PropertyPlaceholderHelper;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.util;PropertyPlaceholderHelper;true;PropertyPlaceholderHelper;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.util;PropertyPlaceholderHelper;true;PropertyPlaceholderHelper;(String,String,String,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.util;PropertyPlaceholderHelper;true;PropertyPlaceholderHelper;(String,String,String,boolean);;Argument[1];Argument[-1];taint",
        "org.springframework.util;PropertyPlaceholderHelper;true;PropertyPlaceholderHelper;(String,String,String,boolean);;Argument[2];Argument[-1];taint",
        "org.springframework.util;PropertyPlaceholderHelper;true;replacePlaceholders;(String,PlaceholderResolver);;Argument[0];ReturnValue;taint",
        "org.springframework.util;PropertyPlaceholderHelper;true;replacePlaceholders;(String,Properties);;Argument[0];ReturnValue;taint",
        "org.springframework.util;ReflectionUtils$MethodCallback;true;doWith;(Method);;Argument[0];Argument[-1];taint",
        "org.springframework.util;ResourceUtils;true;extractArchiveURL;(URL);;Argument[0];ReturnValue;taint",
        "org.springframework.util;ResourceUtils;true;extractJarFileURL;(URL);;Argument[0];ReturnValue;taint",
        "org.springframework.util;ResourceUtils;true;getFile;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.util;ResourceUtils;true;getFile;(URI);;Argument[0];ReturnValue;taint",
        "org.springframework.util;ResourceUtils;true;getFile;(URL);;Argument[0];ReturnValue;taint",
        "org.springframework.util;ResourceUtils;true;getURL;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.util;ResourceUtils;true;toURI;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.util;RouteMatcher$Route;true;value;();;Argument[-1];ReturnValue;taint",
        "org.springframework.util;RouteMatcher;true;combine;(String,String);;Argument[-1];ReturnValue;taint",
        "org.springframework.util;RouteMatcher;true;combine;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.util;RouteMatcher;true;combine;(String,String);;Argument[0];ReturnValue;taint",
        "org.springframework.util;RouteMatcher;true;combine;(String,String);;Argument[1];ReturnValue;taint",
        "org.springframework.util;RouteMatcher;true;match;(String,Route);;Argument[0];Argument[-1];taint",
        "org.springframework.util;RouteMatcher;true;matchAndExtract;(String,Route);;Argument[-1];ReturnValue;taint",
        "org.springframework.util;RouteMatcher;true;matchAndExtract;(String,Route);;Argument[0];Argument[-1];taint",
        "org.springframework.util;RouteMatcher;true;parseRoute;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.util;SerializationUtils;true;deserialize;(byte[]);;Argument[0];ReturnValue;taint",
        "org.springframework.util;SerializationUtils;true;serialize;(Object);;Argument[0];ReturnValue;taint",
        "org.springframework.util;SimpleRouteMatcher;true;SimpleRouteMatcher;(PathMatcher);;Argument[0];Argument[-1];taint",
        "org.springframework.util;SimpleRouteMatcher;true;getPathMatcher;();;Argument[-1];ReturnValue;taint",
        "org.springframework.util;StopWatch$TaskInfo;false;getTaskName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.util;StopWatch;true;StopWatch;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.util;StopWatch;true;currentTaskName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.util;StopWatch;true;getId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.util;StopWatch;true;getLastTaskInfo;();;Argument[-1];ReturnValue;taint",
        "org.springframework.util;StopWatch;true;getLastTaskName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.util;StopWatch;true;getTaskInfo;();;Argument[-1];ReturnValue;taint",
        "org.springframework.util;StopWatch;true;prettyPrint;();;Argument[-1];ReturnValue;taint",
        "org.springframework.util;StopWatch;true;shortSummary;();;Argument[-1];ReturnValue;taint",
        "org.springframework.util;StopWatch;true;start;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.util;StopWatch;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.util;StreamUtils;true;copy;(InputStream,OutputStream);;Argument[0];Argument[1];taint",
        "org.springframework.util;StreamUtils;true;copy;(byte[],OutputStream);;Argument[0];Argument[1];taint",
        "org.springframework.util;StreamUtils;true;copyRange;(InputStream,OutputStream,long,long);;Argument[0];Argument[1];taint",
        "org.springframework.util;StreamUtils;true;copyToByteArray;(InputStream);;Argument[0];ReturnValue;taint",
        "org.springframework.util;StreamUtils;true;copyToString;(ByteArrayOutputStream,Charset);;Argument[0];ReturnValue;taint",
        "org.springframework.util;StreamUtils;true;copyToString;(InputStream,Charset);;Argument[0];ReturnValue;taint",
        "org.springframework.util;StreamUtils;true;nonClosing;(InputStream);;Argument[0];ReturnValue;taint",
        "org.springframework.util;StreamUtils;true;nonClosing;(OutputStream);;Argument[0];ReturnValue;taint",
        "org.springframework.util;StringUtils;true;addStringToArray;(String[],String);;Argument[1];ReturnValue;taint",
        "org.springframework.util;StringUtils;true;addStringToArray;(String[],String);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.util;StringUtils;true;applyRelativePath;(String,String);;Argument[0];ReturnValue;taint",
        "org.springframework.util;StringUtils;true;applyRelativePath;(String,String);;Argument[1];ReturnValue;taint",
        "org.springframework.util;StringUtils;true;arrayToCommaDelimitedString;(Object[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.util;StringUtils;true;arrayToDelimitedString;(Object[],String);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.util;StringUtils;true;capitalize;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.util;StringUtils;true;cleanPath;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.util;StringUtils;true;collectionToCommaDelimitedString;(Collection);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.util;StringUtils;true;collectionToDelimitedString;(Collection,String);;Argument[1];ReturnValue;taint",
        "org.springframework.util;StringUtils;true;collectionToDelimitedString;(Collection,String);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.util;StringUtils;true;collectionToDelimitedString;(Collection,String,String,String);;Argument[1];ReturnValue;taint",
        "org.springframework.util;StringUtils;true;collectionToDelimitedString;(Collection,String,String,String);;Argument[2];ReturnValue;taint",
        "org.springframework.util;StringUtils;true;collectionToDelimitedString;(Collection,String,String,String);;Argument[3];ReturnValue;taint",
        "org.springframework.util;StringUtils;true;collectionToDelimitedString;(Collection,String,String,String);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.util;StringUtils;true;commaDelimitedListToSet;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.util;StringUtils;true;commaDelimitedListToStringArray;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.util;StringUtils;true;concatenateStringArrays;(String[],String[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.util;StringUtils;true;concatenateStringArrays;(String[],String[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.util;StringUtils;true;delete;(String,String);;Argument[0];ReturnValue;taint",
        "org.springframework.util;StringUtils;true;deleteAny;(String,String);;Argument[0];ReturnValue;taint",
        "org.springframework.util;StringUtils;true;delimitedListToStringArray;(String,String);;Argument[0];ReturnValue;taint",
        "org.springframework.util;StringUtils;true;delimitedListToStringArray;(String,String,String);;Argument[0];ReturnValue;taint",
        "org.springframework.util;StringUtils;true;getFilename;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.util;StringUtils;true;getFilenameExtension;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.util;StringUtils;true;mergeStringArrays;(String[],String[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.util;StringUtils;true;mergeStringArrays;(String[],String[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.util;StringUtils;true;quote;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.util;StringUtils;true;quoteIfString;(Object);;Argument[0];ReturnValue;taint",
        "org.springframework.util;StringUtils;true;removeDuplicateStrings;(String[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.util;StringUtils;true;replace;(String,String,String);;Argument[0];ReturnValue;taint",
        "org.springframework.util;StringUtils;true;replace;(String,String,String);;Argument[2];ReturnValue;taint",
        "org.springframework.util;StringUtils;true;sortStringArray;(String[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.util;StringUtils;true;split;(String,String);;Argument[0];ReturnValue;taint",
        "org.springframework.util;StringUtils;true;splitArrayElementsIntoProperties;(String[],String);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.util;StringUtils;true;stripFilenameExtension;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.util;StringUtils;true;toStringArray;(Collection);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.util;StringUtils;true;toStringArray;(Enumeration);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.util;StringUtils;true;tokenizeToStringArray;(String,String);;Argument[0];ReturnValue;taint",
        "org.springframework.util;StringUtils;true;tokenizeToStringArray;(String,String,boolean,boolean);;Argument[0];ReturnValue;taint",
        "org.springframework.util;StringUtils;true;trimAllWhitespace;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.util;StringUtils;true;trimArrayElements;(String[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.util;StringUtils;true;trimLeadingCharacter;(String,char);;Argument[0];ReturnValue;taint",
        "org.springframework.util;StringUtils;true;trimLeadingWhitespace;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.util;StringUtils;true;trimTrailingCharacter;(String,char);;Argument[0];ReturnValue;taint",
        "org.springframework.util;StringUtils;true;trimTrailingWhitespace;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.util;StringUtils;true;trimWhitespace;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.util;StringUtils;true;uncapitalize;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.util;StringUtils;true;unqualify;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.util;StringUtils;true;unqualify;(String,char);;Argument[0];ReturnValue;taint",
        "org.springframework.util;StringUtils;true;uriDecode;(String,Charset);;Argument[0];ReturnValue;taint",
        "org.springframework.util;StringValueResolver;true;resolveStringValue;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.util;StringValueResolver;true;resolveStringValue;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.util;StringValueResolver;true;resolveStringValue;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.util;SystemPropertyUtils;true;resolvePlaceholders;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.util;SystemPropertyUtils;true;resolvePlaceholders;(String,boolean);;Argument[0];ReturnValue;taint",
        "org.springframework.validation.beanvalidation;BeanValidationPostProcessor;true;setValidator;(Validator);;Argument[0];Argument[-1];taint",
        "org.springframework.validation.beanvalidation;CustomValidatorBean;true;setMessageInterpolator;(MessageInterpolator);;Argument[0];Argument[-1];taint",
        "org.springframework.validation.beanvalidation;CustomValidatorBean;true;setTraversableResolver;(TraversableResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.validation.beanvalidation;CustomValidatorBean;true;setValidatorFactory;(ValidatorFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.validation.beanvalidation;LocalValidatorFactoryBean;true;getValidationPropertyMap;();;Argument[-1];ReturnValue;taint",
        "org.springframework.validation.beanvalidation;LocalValidatorFactoryBean;true;setConstraintValidatorFactory;(ConstraintValidatorFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.validation.beanvalidation;LocalValidatorFactoryBean;true;setMappingLocations;(Resource[]);;Argument[0];Argument[-1];taint",
        "org.springframework.validation.beanvalidation;LocalValidatorFactoryBean;true;setMessageInterpolator;(MessageInterpolator);;Argument[0];Argument[-1];taint",
        "org.springframework.validation.beanvalidation;LocalValidatorFactoryBean;true;setParameterNameDiscoverer;(ParameterNameDiscoverer);;Argument[0];Argument[-1];taint",
        "org.springframework.validation.beanvalidation;LocalValidatorFactoryBean;true;setTraversableResolver;(TraversableResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.validation.beanvalidation;LocalValidatorFactoryBean;true;setValidationProperties;(Properties);;Argument[0];Argument[-1];taint",
        "org.springframework.validation.beanvalidation;LocalValidatorFactoryBean;true;setValidationPropertyMap;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.validation.beanvalidation;LocalValidatorFactoryBean;true;setValidationProviderResolver;(ValidationProviderResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.validation.beanvalidation;LocaleContextMessageInterpolator;true;LocaleContextMessageInterpolator;(MessageInterpolator);;Argument[0];Argument[-1];taint",
        "org.springframework.validation.beanvalidation;MessageSourceResourceBundleLocator;true;MessageSourceResourceBundleLocator;(MessageSource);;Argument[0];Argument[-1];taint",
        "org.springframework.validation.beanvalidation;MethodValidationInterceptor;true;MethodValidationInterceptor;(Validator);;Argument[0];Argument[-1];taint",
        "org.springframework.validation.beanvalidation;MethodValidationPostProcessor;true;setValidator;(Validator);;Argument[0];Argument[-1];taint",
        "org.springframework.validation.beanvalidation;SpringConstraintValidatorFactory;true;SpringConstraintValidatorFactory;(AutowireCapableBeanFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.validation.beanvalidation;SpringValidatorAdapter;true;SpringValidatorAdapter;(Validator);;Argument[0];Argument[-1];taint",
        "org.springframework.validation;AbstractBindingResult;true;getMessageCodesResolver;();;Argument[-1];ReturnValue;taint",
        "org.springframework.validation;AbstractBindingResult;true;setMessageCodesResolver;(MessageCodesResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.validation;AbstractErrors;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.validation;AbstractPropertyBindingResult;true;getPropertyAccessor;();;Argument[-1];ReturnValue;taint",
        "org.springframework.validation;AbstractPropertyBindingResult;true;initConversion;(ConversionService);;Argument[0];Argument[-1];taint",
        "org.springframework.validation;BeanPropertyBindingResult;true;BeanPropertyBindingResult;(Object,String);;Argument[0];Argument[-1];taint",
        "org.springframework.validation;BeanPropertyBindingResult;true;BeanPropertyBindingResult;(Object,String);;Argument[1];Argument[-1];taint",
        "org.springframework.validation;BeanPropertyBindingResult;true;BeanPropertyBindingResult;(Object,String,boolean,int);;Argument[0];Argument[-1];taint",
        "org.springframework.validation;BeanPropertyBindingResult;true;BeanPropertyBindingResult;(Object,String,boolean,int);;Argument[1];Argument[-1];taint",
        "org.springframework.validation;BindException;true;BindException;(BindingResult);;Argument[0];Argument[-1];taint",
        "org.springframework.validation;BindException;true;BindException;(Object,String);;Argument[0];Argument[-1];taint",
        "org.springframework.validation;BindException;true;BindException;(Object,String);;Argument[1];Argument[-1];taint",
        "org.springframework.validation;BindException;true;getBindingResult;();;Argument[-1];ReturnValue;taint",
        "org.springframework.validation;BindingResult;true;addError;(ObjectError);;Argument[0];Argument[-1];taint",
        "org.springframework.validation;BindingResult;true;findEditor;(String,Class);;Argument[-1];ReturnValue;taint",
        "org.springframework.validation;BindingResult;true;findEditor;(String,Class);;Argument[0];Argument[-1];taint",
        "org.springframework.validation;BindingResult;true;getModel;();;Argument[-1];ReturnValue;taint",
        "org.springframework.validation;BindingResult;true;getPropertyEditorRegistry;();;Argument[-1];ReturnValue;taint",
        "org.springframework.validation;BindingResult;true;getRawFieldValue;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.validation;BindingResult;true;getRawFieldValue;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.validation;BindingResult;true;getSuppressedFields;();;Argument[-1];ReturnValue;taint",
        "org.springframework.validation;BindingResult;true;getTarget;();;Argument[-1];ReturnValue;taint",
        "org.springframework.validation;BindingResult;true;recordFieldValue;(String,Class,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.validation;BindingResult;true;recordFieldValue;(String,Class,Object);;Argument[2];Argument[-1];taint",
        "org.springframework.validation;BindingResult;true;recordSuppressedField;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.validation;BindingResult;true;resolveMessageCodes;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.validation;BindingResult;true;resolveMessageCodes;(String,String);;Argument[-1];ReturnValue;taint",
        "org.springframework.validation;BindingResult;true;resolveMessageCodes;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.validation;BindingResultUtils;true;getBindingResult;(Map,String);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.validation;BindingResultUtils;true;getRequiredBindingResult;(Map,String);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.validation;DataBinder;true;DataBinder;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.validation;DataBinder;true;DataBinder;(Object,String);;Argument[0];Argument[-1];taint",
        "org.springframework.validation;DataBinder;true;DataBinder;(Object,String);;Argument[1];Argument[-1];taint",
        "org.springframework.validation;DataBinder;true;addCustomFormatter;(Formatter);;Argument[0];Argument[-1];taint",
        "org.springframework.validation;DataBinder;true;addCustomFormatter;(Formatter,Class[]);;Argument[0];Argument[-1];taint",
        "org.springframework.validation;DataBinder;true;addCustomFormatter;(Formatter,Class[]);;Argument[1];Argument[-1];taint",
        "org.springframework.validation;DataBinder;true;addCustomFormatter;(Formatter,String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.validation;DataBinder;true;addCustomFormatter;(Formatter,String[]);;Argument[1];Argument[-1];taint",
        "org.springframework.validation;DataBinder;true;addValidators;(Validator[]);;Argument[0];Argument[-1];taint",
        "org.springframework.validation;DataBinder;true;bind;(PropertyValues);;Argument[0];Argument[-1];taint",
        "org.springframework.validation;DataBinder;true;close;();;Argument[-1];ReturnValue;taint",
        "org.springframework.validation;DataBinder;true;getAllowedFields;();;Argument[-1];ReturnValue;taint",
        "org.springframework.validation;DataBinder;true;getBindingErrorProcessor;();;Argument[-1];ReturnValue;taint",
        "org.springframework.validation;DataBinder;true;getBindingResult;();;Argument[-1];ReturnValue;taint",
        "org.springframework.validation;DataBinder;true;getConversionService;();;Argument[-1];ReturnValue;taint",
        "org.springframework.validation;DataBinder;true;getDisallowedFields;();;Argument[-1];ReturnValue;taint",
        "org.springframework.validation;DataBinder;true;getObjectName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.validation;DataBinder;true;getRequiredFields;();;Argument[-1];ReturnValue;taint",
        "org.springframework.validation;DataBinder;true;getTarget;();;Argument[-1];ReturnValue;taint",
        "org.springframework.validation;DataBinder;true;getValidator;();;Argument[-1];ReturnValue;taint",
        "org.springframework.validation;DataBinder;true;getValidators;();;Argument[-1];ReturnValue;taint",
        "org.springframework.validation;DataBinder;true;replaceValidators;(Validator[]);;Argument[0];Argument[-1];taint",
        "org.springframework.validation;DataBinder;true;setAllowedFields;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.validation;DataBinder;true;setBindingErrorProcessor;(BindingErrorProcessor);;Argument[0];Argument[-1];taint",
        "org.springframework.validation;DataBinder;true;setConversionService;(ConversionService);;Argument[0];Argument[-1];taint",
        "org.springframework.validation;DataBinder;true;setDisallowedFields;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.validation;DataBinder;true;setMessageCodesResolver;(MessageCodesResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.validation;DataBinder;true;setRequiredFields;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.validation;DataBinder;true;setValidator;(Validator);;Argument[0];Argument[-1];taint",
        "org.springframework.validation;DefaultMessageCodesResolver;true;setMessageCodeFormatter;(MessageCodeFormatter);;Argument[0];Argument[-1];taint",
        "org.springframework.validation;DefaultMessageCodesResolver;true;setPrefix;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.validation;DirectFieldBindingResult;true;DirectFieldBindingResult;(Object,String);;Argument[0];Argument[-1];taint",
        "org.springframework.validation;DirectFieldBindingResult;true;DirectFieldBindingResult;(Object,String);;Argument[1];Argument[-1];taint",
        "org.springframework.validation;DirectFieldBindingResult;true;DirectFieldBindingResult;(Object,String,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.validation;DirectFieldBindingResult;true;DirectFieldBindingResult;(Object,String,boolean);;Argument[1];Argument[-1];taint",
        "org.springframework.validation;Errors;true;addAllErrors;(Errors);;Argument[0];Argument[-1];taint",
        "org.springframework.validation;Errors;true;getAllErrors;();;Argument[-1];ReturnValue;taint",
        "org.springframework.validation;Errors;true;getFieldError;();;Argument[-1];ReturnValue;taint",
        "org.springframework.validation;Errors;true;getFieldError;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.validation;Errors;true;getFieldErrors;();;Argument[-1];ReturnValue;taint",
        "org.springframework.validation;Errors;true;getFieldErrors;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.validation;Errors;true;getFieldType;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.validation;Errors;true;getFieldValue;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.validation;Errors;true;getFieldValue;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.validation;Errors;true;getGlobalError;();;Argument[-1];ReturnValue;taint",
        "org.springframework.validation;Errors;true;getGlobalErrors;();;Argument[-1];ReturnValue;taint",
        "org.springframework.validation;Errors;true;getNestedPath;();;Argument[-1];ReturnValue;taint",
        "org.springframework.validation;Errors;true;getObjectName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.validation;Errors;true;pushNestedPath;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.validation;Errors;true;reject;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.validation;Errors;true;reject;(String,Object[],String);;Argument[0];Argument[-1];taint",
        "org.springframework.validation;Errors;true;reject;(String,Object[],String);;Argument[1];Argument[-1];taint",
        "org.springframework.validation;Errors;true;reject;(String,Object[],String);;Argument[2];Argument[-1];taint",
        "org.springframework.validation;Errors;true;reject;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.validation;Errors;true;reject;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.validation;Errors;true;rejectValue;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.validation;Errors;true;rejectValue;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.validation;Errors;true;rejectValue;(String,String,Object[],String);;Argument[0];Argument[-1];taint",
        "org.springframework.validation;Errors;true;rejectValue;(String,String,Object[],String);;Argument[1];Argument[-1];taint",
        "org.springframework.validation;Errors;true;rejectValue;(String,String,Object[],String);;Argument[2];Argument[-1];taint",
        "org.springframework.validation;Errors;true;rejectValue;(String,String,Object[],String);;Argument[3];Argument[-1];taint",
        "org.springframework.validation;Errors;true;rejectValue;(String,String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.validation;Errors;true;rejectValue;(String,String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.validation;Errors;true;rejectValue;(String,String,String);;Argument[2];Argument[-1];taint",
        "org.springframework.validation;Errors;true;setNestedPath;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.validation;FieldError;true;FieldError;(String,String,Object,boolean,String[],Object[],String);;Argument[0];Argument[-1];taint",
        "org.springframework.validation;FieldError;true;FieldError;(String,String,Object,boolean,String[],Object[],String);;Argument[1];Argument[-1];taint",
        "org.springframework.validation;FieldError;true;FieldError;(String,String,Object,boolean,String[],Object[],String);;Argument[2];Argument[-1];taint",
        "org.springframework.validation;FieldError;true;FieldError;(String,String,Object,boolean,String[],Object[],String);;Argument[4];Argument[-1];taint",
        "org.springframework.validation;FieldError;true;FieldError;(String,String,Object,boolean,String[],Object[],String);;Argument[5];Argument[-1];taint",
        "org.springframework.validation;FieldError;true;FieldError;(String,String,Object,boolean,String[],Object[],String);;Argument[6];Argument[-1];taint",
        "org.springframework.validation;FieldError;true;FieldError;(String,String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.validation;FieldError;true;FieldError;(String,String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.validation;FieldError;true;FieldError;(String,String,String);;Argument[2];Argument[-1];taint",
        "org.springframework.validation;FieldError;true;getField;();;Argument[-1];ReturnValue;taint",
        "org.springframework.validation;FieldError;true;getRejectedValue;();;Argument[-1];ReturnValue;taint",
        "org.springframework.validation;FieldError;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.validation;MapBindingResult;true;MapBindingResult;(Map,String);;Argument[0];Argument[-1];taint",
        "org.springframework.validation;MapBindingResult;true;MapBindingResult;(Map,String);;Argument[1];Argument[-1];taint",
        "org.springframework.validation;MapBindingResult;true;getTargetMap;();;Argument[-1];ReturnValue;taint",
        "org.springframework.validation;MessageCodesResolver;true;resolveMessageCodes;(String,String);;Argument[-1];ReturnValue;taint",
        "org.springframework.validation;MessageCodesResolver;true;resolveMessageCodes;(String,String,String,Class);;Argument[-1];ReturnValue;taint",
        "org.springframework.validation;ObjectError;true;ObjectError;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.validation;ObjectError;true;ObjectError;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.validation;ObjectError;true;ObjectError;(String,String[],Object[],String);;Argument[0];Argument[-1];taint",
        "org.springframework.validation;ObjectError;true;ObjectError;(String,String[],Object[],String);;Argument[1];Argument[-1];taint",
        "org.springframework.validation;ObjectError;true;ObjectError;(String,String[],Object[],String);;Argument[2];Argument[-1];taint",
        "org.springframework.validation;ObjectError;true;ObjectError;(String,String[],Object[],String);;Argument[3];Argument[-1];taint",
        "org.springframework.validation;ObjectError;true;getObjectName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.validation;ObjectError;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.validation;ObjectError;true;wrap;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.validation;ValidationUtils;true;rejectIfEmpty;(Errors,String,String,Object[],String);;Argument[2];Argument[0];taint",
        "org.springframework.validation;ValidationUtils;true;rejectIfEmpty;(Errors,String,String,Object[],String);;Argument[4];Argument[0];taint",
        "org.springframework.validation;ValidationUtils;true;rejectIfEmpty;(Errors,String,String,Object[],String);;ArrayElement of Argument[3];Argument[0];taint",
        "org.springframework.validation;ValidationUtils;true;rejectIfEmptyOrWhitespace;(Errors,String,String,Object[],String);;Argument[2];Argument[0];taint",
        "org.springframework.validation;ValidationUtils;true;rejectIfEmptyOrWhitespace;(Errors,String,String,Object[],String);;Argument[4];Argument[0];taint",
        "org.springframework.validation;ValidationUtils;true;rejectIfEmptyOrWhitespace;(Errors,String,String,Object[],String);;ArrayElement of Argument[3];Argument[0];taint",
        "org.springframework.web.accept;AbstractMappingContentNegotiationStrategy;true;resolveMediaTypeKey;(NativeWebRequest,String);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.accept;AbstractMappingContentNegotiationStrategy;true;resolveMediaTypeKey;(NativeWebRequest,String);;Argument[1];Argument[-1];taint",
        "org.springframework.web.accept;ContentNegotiationManager;true;ContentNegotiationManager;(Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.web.accept;ContentNegotiationManager;true;ContentNegotiationManager;(ContentNegotiationStrategy[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.accept;ContentNegotiationManager;true;addFileExtensionResolvers;(MediaTypeFileExtensionResolver[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.accept;ContentNegotiationManager;true;getMediaTypeMappings;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.accept;ContentNegotiationManager;true;getStrategies;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.accept;ContentNegotiationManager;true;getStrategy;(Class);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.accept;ContentNegotiationManagerFactoryBean;true;addMediaType;(String,MediaType);;Argument[0];Argument[-1];taint",
        "org.springframework.web.accept;ContentNegotiationManagerFactoryBean;true;addMediaType;(String,MediaType);;Argument[1];Argument[-1];taint",
        "org.springframework.web.accept;ContentNegotiationManagerFactoryBean;true;build;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.accept;ContentNegotiationManagerFactoryBean;true;setDefaultContentType;(MediaType);;Argument[0];Argument[-1];taint",
        "org.springframework.web.accept;ContentNegotiationManagerFactoryBean;true;setDefaultContentTypeStrategy;(ContentNegotiationStrategy);;Argument[0];Argument[-1];taint",
        "org.springframework.web.accept;ContentNegotiationManagerFactoryBean;true;setDefaultContentTypes;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.accept;ContentNegotiationManagerFactoryBean;true;setParameterName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.accept;ContentNegotiationManagerFactoryBean;true;setStrategies;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.accept;ContentNegotiationStrategy;true;resolveMediaTypes;(NativeWebRequest);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.accept;FixedContentNegotiationStrategy;true;FixedContentNegotiationStrategy;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.accept;FixedContentNegotiationStrategy;true;FixedContentNegotiationStrategy;(MediaType);;Argument[0];Argument[-1];taint",
        "org.springframework.web.accept;FixedContentNegotiationStrategy;true;getContentTypes;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.accept;MappingMediaTypeFileExtensionResolver;true;getMediaTypes;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.accept;MediaTypeFileExtensionResolver;true;getAllFileExtensions;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.accept;MediaTypeFileExtensionResolver;true;resolveFileExtensions;(MediaType);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.accept;ParameterContentNegotiationStrategy;true;getParameterName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.accept;ParameterContentNegotiationStrategy;true;setParameterName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.accept;PathExtensionContentNegotiationStrategy;true;getMediaTypeForResource;(Resource);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.accept;PathExtensionContentNegotiationStrategy;true;setUrlPathHelper;(UrlPathHelper);;Argument[0];Argument[-1];taint",
        "org.springframework.web.accept;ServletPathExtensionContentNegotiationStrategy;true;ServletPathExtensionContentNegotiationStrategy;(ServletContext);;Argument[0];Argument[-1];taint",
        "org.springframework.web.accept;ServletPathExtensionContentNegotiationStrategy;true;ServletPathExtensionContentNegotiationStrategy;(ServletContext,Map);;Argument[0];Argument[-1];taint",
        "org.springframework.web.bind.support;ConfigurableWebBindingInitializer;true;getBindingErrorProcessor;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.bind.support;ConfigurableWebBindingInitializer;true;getConversionService;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.bind.support;ConfigurableWebBindingInitializer;true;getMessageCodesResolver;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.bind.support;ConfigurableWebBindingInitializer;true;getPropertyEditorRegistrars;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.bind.support;ConfigurableWebBindingInitializer;true;getValidator;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.bind.support;ConfigurableWebBindingInitializer;true;setBindingErrorProcessor;(BindingErrorProcessor);;Argument[0];Argument[-1];taint",
        "org.springframework.web.bind.support;ConfigurableWebBindingInitializer;true;setConversionService;(ConversionService);;Argument[0];Argument[-1];taint",
        "org.springframework.web.bind.support;ConfigurableWebBindingInitializer;true;setMessageCodesResolver;(MessageCodesResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.web.bind.support;ConfigurableWebBindingInitializer;true;setPropertyEditorRegistrar;(PropertyEditorRegistrar);;Argument[0];Argument[-1];taint",
        "org.springframework.web.bind.support;ConfigurableWebBindingInitializer;true;setPropertyEditorRegistrars;(PropertyEditorRegistrar[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.bind.support;ConfigurableWebBindingInitializer;true;setValidator;(Validator);;Argument[0];Argument[-1];taint",
        "org.springframework.web.bind.support;DefaultDataBinderFactory;true;DefaultDataBinderFactory;(WebBindingInitializer);;Argument[0];Argument[-1];taint",
        "org.springframework.web.bind.support;DefaultSessionAttributeStore;true;setAttributeNamePrefix;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.bind.support;SessionAttributeStore;true;retrieveAttribute;(WebRequest,String);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.bind.support;SessionAttributeStore;true;retrieveAttribute;(WebRequest,String);;Argument[1];ReturnValue;taint",
        "org.springframework.web.bind.support;WebDataBinderFactory;true;createBinder;(NativeWebRequest,Object,String);;Argument[1];ReturnValue;taint",
        "org.springframework.web.bind.support;WebDataBinderFactory;true;createBinder;(NativeWebRequest,Object,String);;Argument[2];ReturnValue;taint",
        "org.springframework.web.bind.support;WebExchangeBindException;true;WebExchangeBindException;(MethodParameter,BindingResult);;Argument[0];Argument[-1];taint",
        "org.springframework.web.bind.support;WebExchangeBindException;true;WebExchangeBindException;(MethodParameter,BindingResult);;Argument[1];Argument[-1];taint",
        "org.springframework.web.bind.support;WebExchangeBindException;true;getBindingResult;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.bind.support;WebExchangeDataBinder;true;WebExchangeDataBinder;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.web.bind.support;WebExchangeDataBinder;true;WebExchangeDataBinder;(Object,String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.bind.support;WebExchangeDataBinder;true;WebExchangeDataBinder;(Object,String);;Argument[1];Argument[-1];taint",
        "org.springframework.web.bind.support;WebRequestDataBinder;true;WebRequestDataBinder;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.web.bind.support;WebRequestDataBinder;true;WebRequestDataBinder;(Object,String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.bind.support;WebRequestDataBinder;true;WebRequestDataBinder;(Object,String);;Argument[1];Argument[-1];taint",
        "org.springframework.web.bind;EscapedErrors;true;EscapedErrors;(Errors);;Argument[0];Argument[-1];taint",
        "org.springframework.web.bind;EscapedErrors;true;getSource;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.bind;MethodArgumentNotValidException;true;MethodArgumentNotValidException;(MethodParameter,BindingResult);;Argument[0];Argument[-1];taint",
        "org.springframework.web.bind;MethodArgumentNotValidException;true;MethodArgumentNotValidException;(MethodParameter,BindingResult);;Argument[1];Argument[-1];taint",
        "org.springframework.web.bind;MethodArgumentNotValidException;true;getParameter;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.bind;MissingMatrixVariableException;true;MissingMatrixVariableException;(String,MethodParameter);;Argument[0];Argument[-1];taint",
        "org.springframework.web.bind;MissingMatrixVariableException;true;MissingMatrixVariableException;(String,MethodParameter);;Argument[1];Argument[-1];taint",
        "org.springframework.web.bind;MissingMatrixVariableException;true;MissingMatrixVariableException;(String,MethodParameter,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.web.bind;MissingMatrixVariableException;true;MissingMatrixVariableException;(String,MethodParameter,boolean);;Argument[1];Argument[-1];taint",
        "org.springframework.web.bind;MissingMatrixVariableException;true;getParameter;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.bind;MissingMatrixVariableException;true;getVariableName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.bind;MissingPathVariableException;true;MissingPathVariableException;(String,MethodParameter);;Argument[0];Argument[-1];taint",
        "org.springframework.web.bind;MissingPathVariableException;true;MissingPathVariableException;(String,MethodParameter);;Argument[1];Argument[-1];taint",
        "org.springframework.web.bind;MissingPathVariableException;true;MissingPathVariableException;(String,MethodParameter,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.web.bind;MissingPathVariableException;true;MissingPathVariableException;(String,MethodParameter,boolean);;Argument[1];Argument[-1];taint",
        "org.springframework.web.bind;MissingPathVariableException;true;getParameter;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.bind;MissingPathVariableException;true;getVariableName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.bind;MissingRequestCookieException;true;MissingRequestCookieException;(String,MethodParameter);;Argument[0];Argument[-1];taint",
        "org.springframework.web.bind;MissingRequestCookieException;true;MissingRequestCookieException;(String,MethodParameter);;Argument[1];Argument[-1];taint",
        "org.springframework.web.bind;MissingRequestCookieException;true;MissingRequestCookieException;(String,MethodParameter,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.web.bind;MissingRequestCookieException;true;MissingRequestCookieException;(String,MethodParameter,boolean);;Argument[1];Argument[-1];taint",
        "org.springframework.web.bind;MissingRequestCookieException;true;getCookieName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.bind;MissingRequestCookieException;true;getParameter;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.bind;MissingRequestHeaderException;true;MissingRequestHeaderException;(String,MethodParameter);;Argument[0];Argument[-1];taint",
        "org.springframework.web.bind;MissingRequestHeaderException;true;MissingRequestHeaderException;(String,MethodParameter);;Argument[1];Argument[-1];taint",
        "org.springframework.web.bind;MissingRequestHeaderException;true;MissingRequestHeaderException;(String,MethodParameter,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.web.bind;MissingRequestHeaderException;true;MissingRequestHeaderException;(String,MethodParameter,boolean);;Argument[1];Argument[-1];taint",
        "org.springframework.web.bind;MissingRequestHeaderException;true;getHeaderName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.bind;MissingRequestHeaderException;true;getParameter;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.bind;MissingServletRequestParameterException;true;MissingServletRequestParameterException;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.bind;MissingServletRequestParameterException;true;MissingServletRequestParameterException;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.web.bind;MissingServletRequestParameterException;true;MissingServletRequestParameterException;(String,String,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.web.bind;MissingServletRequestParameterException;true;MissingServletRequestParameterException;(String,String,boolean);;Argument[1];Argument[-1];taint",
        "org.springframework.web.bind;MissingServletRequestParameterException;true;getParameterName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.bind;MissingServletRequestParameterException;true;getParameterType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.bind;ServletRequestDataBinder;true;ServletRequestDataBinder;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.web.bind;ServletRequestDataBinder;true;ServletRequestDataBinder;(Object,String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.bind;ServletRequestDataBinder;true;ServletRequestDataBinder;(Object,String);;Argument[1];Argument[-1];taint",
        "org.springframework.web.bind;ServletRequestUtils;true;getStringParameter;(ServletRequest,String,String);;Argument[2];ReturnValue;taint",
        "org.springframework.web.bind;UnsatisfiedServletRequestParameterException;true;UnsatisfiedServletRequestParameterException;(List,Map);;Argument[0];Argument[-1];taint",
        "org.springframework.web.bind;UnsatisfiedServletRequestParameterException;true;UnsatisfiedServletRequestParameterException;(List,Map);;Argument[1];Argument[-1];taint",
        "org.springframework.web.bind;UnsatisfiedServletRequestParameterException;true;UnsatisfiedServletRequestParameterException;(String[],Map);;Argument[0];Argument[-1];taint",
        "org.springframework.web.bind;UnsatisfiedServletRequestParameterException;true;UnsatisfiedServletRequestParameterException;(String[],Map);;Argument[1];Argument[-1];taint",
        "org.springframework.web.bind;UnsatisfiedServletRequestParameterException;true;getActualParams;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.bind;UnsatisfiedServletRequestParameterException;true;getParamConditionGroups;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.bind;UnsatisfiedServletRequestParameterException;true;getParamConditions;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.bind;WebDataBinder;true;WebDataBinder;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.web.bind;WebDataBinder;true;WebDataBinder;(Object,String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.bind;WebDataBinder;true;WebDataBinder;(Object,String);;Argument[1];Argument[-1];taint",
        "org.springframework.web.bind;WebDataBinder;true;getFieldDefaultPrefix;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.bind;WebDataBinder;true;getFieldMarkerPrefix;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.bind;WebDataBinder;true;setFieldDefaultPrefix;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.bind;WebDataBinder;true;setFieldMarkerPrefix;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.client.support;RestGatewaySupport;true;RestGatewaySupport;(ClientHttpRequestFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.web.client.support;RestGatewaySupport;true;getRestTemplate;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.client.support;RestGatewaySupport;true;setRestTemplate;(RestTemplate);;Argument[0];Argument[-1];taint",
        "org.springframework.web.client;AsyncRestOperations;true;delete;(String,Map);;Argument[0];ReturnValue;taint",
        "org.springframework.web.client;AsyncRestOperations;true;delete;(String,Map);;Element of Argument[1];ReturnValue;taint",
        "org.springframework.web.client;AsyncRestOperations;true;delete;(String,Object[]);;Argument[0];ReturnValue;taint",
        "org.springframework.web.client;AsyncRestOperations;true;delete;(String,Object[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.web.client;AsyncRestOperations;true;delete;(URI);;Argument[0];ReturnValue;taint",
        "org.springframework.web.client;AsyncRestOperations;true;exchange;(String,HttpMethod,HttpEntity,Class,Map);;Argument[0];ReturnValue;taint",
        "org.springframework.web.client;AsyncRestOperations;true;exchange;(String,HttpMethod,HttpEntity,Class,Map);;Element of Argument[4];ReturnValue;taint",
        "org.springframework.web.client;AsyncRestOperations;true;exchange;(String,HttpMethod,HttpEntity,Class,Object[]);;Argument[0];ReturnValue;taint",
        "org.springframework.web.client;AsyncRestOperations;true;exchange;(String,HttpMethod,HttpEntity,Class,Object[]);;ArrayElement of Argument[4];ReturnValue;taint",
        "org.springframework.web.client;AsyncRestOperations;true;exchange;(String,HttpMethod,HttpEntity,ParameterizedTypeReference,Map);;Argument[0];ReturnValue;taint",
        "org.springframework.web.client;AsyncRestOperations;true;exchange;(String,HttpMethod,HttpEntity,ParameterizedTypeReference,Map);;Element of Argument[4];ReturnValue;taint",
        "org.springframework.web.client;AsyncRestOperations;true;exchange;(String,HttpMethod,HttpEntity,ParameterizedTypeReference,Object[]);;Argument[0];ReturnValue;taint",
        "org.springframework.web.client;AsyncRestOperations;true;exchange;(String,HttpMethod,HttpEntity,ParameterizedTypeReference,Object[]);;ArrayElement of Argument[4];ReturnValue;taint",
        "org.springframework.web.client;AsyncRestOperations;true;exchange;(URI,HttpMethod,HttpEntity,Class);;Argument[0];ReturnValue;taint",
        "org.springframework.web.client;AsyncRestOperations;true;exchange;(URI,HttpMethod,HttpEntity,ParameterizedTypeReference);;Argument[0];ReturnValue;taint",
        "org.springframework.web.client;AsyncRestOperations;true;execute;(String,HttpMethod,AsyncRequestCallback,ResponseExtractor,Map);;Argument[0];ReturnValue;taint",
        "org.springframework.web.client;AsyncRestOperations;true;execute;(String,HttpMethod,AsyncRequestCallback,ResponseExtractor,Map);;Argument[3];ReturnValue;taint",
        "org.springframework.web.client;AsyncRestOperations;true;execute;(String,HttpMethod,AsyncRequestCallback,ResponseExtractor,Map);;Element of Argument[4];ReturnValue;taint",
        "org.springframework.web.client;AsyncRestOperations;true;execute;(String,HttpMethod,AsyncRequestCallback,ResponseExtractor,Object[]);;Argument[0];ReturnValue;taint",
        "org.springframework.web.client;AsyncRestOperations;true;execute;(String,HttpMethod,AsyncRequestCallback,ResponseExtractor,Object[]);;Argument[3];ReturnValue;taint",
        "org.springframework.web.client;AsyncRestOperations;true;execute;(String,HttpMethod,AsyncRequestCallback,ResponseExtractor,Object[]);;ArrayElement of Argument[4];ReturnValue;taint",
        "org.springframework.web.client;AsyncRestOperations;true;execute;(URI,HttpMethod,AsyncRequestCallback,ResponseExtractor);;Argument[0];ReturnValue;taint",
        "org.springframework.web.client;AsyncRestOperations;true;execute;(URI,HttpMethod,AsyncRequestCallback,ResponseExtractor);;Argument[3];ReturnValue;taint",
        "org.springframework.web.client;AsyncRestOperations;true;getForEntity;(String,Class,Map);;Argument[0];ReturnValue;taint",
        "org.springframework.web.client;AsyncRestOperations;true;getForEntity;(String,Class,Map);;Element of Argument[2];ReturnValue;taint",
        "org.springframework.web.client;AsyncRestOperations;true;getForEntity;(String,Class,Object[]);;Argument[0];ReturnValue;taint",
        "org.springframework.web.client;AsyncRestOperations;true;getForEntity;(String,Class,Object[]);;ArrayElement of Argument[2];ReturnValue;taint",
        "org.springframework.web.client;AsyncRestOperations;true;getForEntity;(URI,Class);;Argument[0];ReturnValue;taint",
        "org.springframework.web.client;AsyncRestOperations;true;getRestOperations;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.client;AsyncRestOperations;true;headForHeaders;(String,Map);;Argument[0];ReturnValue;taint",
        "org.springframework.web.client;AsyncRestOperations;true;headForHeaders;(String,Map);;Element of Argument[1];ReturnValue;taint",
        "org.springframework.web.client;AsyncRestOperations;true;headForHeaders;(String,Object[]);;Argument[0];ReturnValue;taint",
        "org.springframework.web.client;AsyncRestOperations;true;headForHeaders;(String,Object[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.web.client;AsyncRestOperations;true;headForHeaders;(URI);;Argument[0];ReturnValue;taint",
        "org.springframework.web.client;AsyncRestOperations;true;optionsForAllow;(String,Map);;Argument[0];ReturnValue;taint",
        "org.springframework.web.client;AsyncRestOperations;true;optionsForAllow;(String,Map);;Element of Argument[1];ReturnValue;taint",
        "org.springframework.web.client;AsyncRestOperations;true;optionsForAllow;(String,Object[]);;Argument[0];ReturnValue;taint",
        "org.springframework.web.client;AsyncRestOperations;true;optionsForAllow;(String,Object[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.web.client;AsyncRestOperations;true;optionsForAllow;(URI);;Argument[0];ReturnValue;taint",
        "org.springframework.web.client;AsyncRestOperations;true;postForEntity;(String,HttpEntity,Class,Map);;Argument[0];ReturnValue;taint",
        "org.springframework.web.client;AsyncRestOperations;true;postForEntity;(String,HttpEntity,Class,Map);;Element of Argument[3];ReturnValue;taint",
        "org.springframework.web.client;AsyncRestOperations;true;postForEntity;(String,HttpEntity,Class,Object[]);;Argument[0];ReturnValue;taint",
        "org.springframework.web.client;AsyncRestOperations;true;postForEntity;(String,HttpEntity,Class,Object[]);;ArrayElement of Argument[3];ReturnValue;taint",
        "org.springframework.web.client;AsyncRestOperations;true;postForEntity;(URI,HttpEntity,Class);;Argument[0];ReturnValue;taint",
        "org.springframework.web.client;AsyncRestOperations;true;postForLocation;(String,HttpEntity,Map);;Argument[0];ReturnValue;taint",
        "org.springframework.web.client;AsyncRestOperations;true;postForLocation;(String,HttpEntity,Map);;Element of Argument[2];ReturnValue;taint",
        "org.springframework.web.client;AsyncRestOperations;true;postForLocation;(String,HttpEntity,Object[]);;Argument[0];ReturnValue;taint",
        "org.springframework.web.client;AsyncRestOperations;true;postForLocation;(String,HttpEntity,Object[]);;ArrayElement of Argument[2];ReturnValue;taint",
        "org.springframework.web.client;AsyncRestOperations;true;postForLocation;(URI,HttpEntity);;Argument[0];ReturnValue;taint",
        "org.springframework.web.client;AsyncRestOperations;true;put;(String,HttpEntity,Map);;Argument[0];ReturnValue;taint",
        "org.springframework.web.client;AsyncRestOperations;true;put;(String,HttpEntity,Map);;Element of Argument[2];ReturnValue;taint",
        "org.springframework.web.client;AsyncRestOperations;true;put;(String,HttpEntity,Object[]);;Argument[0];ReturnValue;taint",
        "org.springframework.web.client;AsyncRestOperations;true;put;(String,HttpEntity,Object[]);;ArrayElement of Argument[2];ReturnValue;taint",
        "org.springframework.web.client;AsyncRestOperations;true;put;(URI,HttpEntity);;Argument[0];ReturnValue;taint",
        "org.springframework.web.client;AsyncRestTemplate;true;AsyncRestTemplate;(AsyncClientHttpRequestFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.web.client;AsyncRestTemplate;true;AsyncRestTemplate;(AsyncClientHttpRequestFactory,ClientHttpRequestFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.web.client;AsyncRestTemplate;true;AsyncRestTemplate;(AsyncClientHttpRequestFactory,ClientHttpRequestFactory);;Argument[1];Argument[-1];taint",
        "org.springframework.web.client;AsyncRestTemplate;true;AsyncRestTemplate;(AsyncClientHttpRequestFactory,RestTemplate);;Argument[0];Argument[-1];taint",
        "org.springframework.web.client;AsyncRestTemplate;true;AsyncRestTemplate;(AsyncClientHttpRequestFactory,RestTemplate);;Argument[1];Argument[-1];taint",
        "org.springframework.web.client;AsyncRestTemplate;true;AsyncRestTemplate;(AsyncListenableTaskExecutor);;Argument[0];Argument[-1];taint",
        "org.springframework.web.client;AsyncRestTemplate;true;getErrorHandler;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.client;AsyncRestTemplate;true;getMessageConverters;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.client;AsyncRestTemplate;true;getUriTemplateHandler;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.client;AsyncRestTemplate;true;setErrorHandler;(ResponseErrorHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.web.client;AsyncRestTemplate;true;setMessageConverters;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.client;AsyncRestTemplate;true;setUriTemplateHandler;(UriTemplateHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.web.client;ExtractingResponseErrorHandler;true;ExtractingResponseErrorHandler;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.client;ExtractingResponseErrorHandler;true;setMessageConverters;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.client;ExtractingResponseErrorHandler;true;setSeriesMapping;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.web.client;ExtractingResponseErrorHandler;true;setStatusMapping;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.web.client;HttpClientErrorException;true;HttpClientErrorException;(HttpStatus,String);;Argument[1];Argument[-1];taint",
        "org.springframework.web.client;HttpClientErrorException;true;HttpClientErrorException;(HttpStatus,String,HttpHeaders,byte[],Charset);;Argument[1];Argument[-1];taint",
        "org.springframework.web.client;HttpClientErrorException;true;HttpClientErrorException;(HttpStatus,String,HttpHeaders,byte[],Charset);;Argument[2];Argument[-1];taint",
        "org.springframework.web.client;HttpClientErrorException;true;HttpClientErrorException;(HttpStatus,String,HttpHeaders,byte[],Charset);;Argument[3];Argument[-1];taint",
        "org.springframework.web.client;HttpClientErrorException;true;HttpClientErrorException;(HttpStatus,String,byte[],Charset);;Argument[1];Argument[-1];taint",
        "org.springframework.web.client;HttpClientErrorException;true;HttpClientErrorException;(HttpStatus,String,byte[],Charset);;Argument[2];Argument[-1];taint",
        "org.springframework.web.client;HttpClientErrorException;true;HttpClientErrorException;(String,HttpStatus,String,HttpHeaders,byte[],Charset);;Argument[2];Argument[-1];taint",
        "org.springframework.web.client;HttpClientErrorException;true;HttpClientErrorException;(String,HttpStatus,String,HttpHeaders,byte[],Charset);;Argument[3];Argument[-1];taint",
        "org.springframework.web.client;HttpClientErrorException;true;HttpClientErrorException;(String,HttpStatus,String,HttpHeaders,byte[],Charset);;Argument[4];Argument[-1];taint",
        "org.springframework.web.client;HttpClientErrorException;true;create;(HttpStatus,String,HttpHeaders,byte[],Charset);;Argument[1];ReturnValue;taint",
        "org.springframework.web.client;HttpClientErrorException;true;create;(HttpStatus,String,HttpHeaders,byte[],Charset);;Argument[3];ReturnValue;taint",
        "org.springframework.web.client;HttpClientErrorException;true;create;(HttpStatus,String,HttpHeaders,byte[],Charset);;Element of Argument[2];ReturnValue;taint",
        "org.springframework.web.client;HttpClientErrorException;true;create;(String,HttpStatus,String,HttpHeaders,byte[],Charset);;Argument[2];ReturnValue;taint",
        "org.springframework.web.client;HttpClientErrorException;true;create;(String,HttpStatus,String,HttpHeaders,byte[],Charset);;Argument[4];ReturnValue;taint",
        "org.springframework.web.client;HttpClientErrorException;true;create;(String,HttpStatus,String,HttpHeaders,byte[],Charset);;Element of Argument[3];ReturnValue;taint",
        "org.springframework.web.client;HttpMessageConverterExtractor;true;HttpMessageConverterExtractor;(Class,List);;Argument[1];Argument[-1];taint",
        "org.springframework.web.client;HttpMessageConverterExtractor;true;HttpMessageConverterExtractor;(Type,List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.client;HttpMessageConverterExtractor;true;HttpMessageConverterExtractor;(Type,List);;Argument[1];Argument[-1];taint",
        "org.springframework.web.client;HttpServerErrorException;true;HttpServerErrorException;(HttpStatus,String);;Argument[1];Argument[-1];taint",
        "org.springframework.web.client;HttpServerErrorException;true;HttpServerErrorException;(HttpStatus,String,HttpHeaders,byte[],Charset);;Argument[1];Argument[-1];taint",
        "org.springframework.web.client;HttpServerErrorException;true;HttpServerErrorException;(HttpStatus,String,HttpHeaders,byte[],Charset);;Argument[2];Argument[-1];taint",
        "org.springframework.web.client;HttpServerErrorException;true;HttpServerErrorException;(HttpStatus,String,HttpHeaders,byte[],Charset);;Argument[3];Argument[-1];taint",
        "org.springframework.web.client;HttpServerErrorException;true;HttpServerErrorException;(HttpStatus,String,byte[],Charset);;Argument[1];Argument[-1];taint",
        "org.springframework.web.client;HttpServerErrorException;true;HttpServerErrorException;(HttpStatus,String,byte[],Charset);;Argument[2];Argument[-1];taint",
        "org.springframework.web.client;HttpServerErrorException;true;HttpServerErrorException;(String,HttpStatus,String,HttpHeaders,byte[],Charset);;Argument[2];Argument[-1];taint",
        "org.springframework.web.client;HttpServerErrorException;true;HttpServerErrorException;(String,HttpStatus,String,HttpHeaders,byte[],Charset);;Argument[3];Argument[-1];taint",
        "org.springframework.web.client;HttpServerErrorException;true;HttpServerErrorException;(String,HttpStatus,String,HttpHeaders,byte[],Charset);;Argument[4];Argument[-1];taint",
        "org.springframework.web.client;HttpServerErrorException;true;create;(HttpStatus,String,HttpHeaders,byte[],Charset);;Argument[1];ReturnValue;taint",
        "org.springframework.web.client;HttpServerErrorException;true;create;(HttpStatus,String,HttpHeaders,byte[],Charset);;Argument[3];ReturnValue;taint",
        "org.springframework.web.client;HttpServerErrorException;true;create;(HttpStatus,String,HttpHeaders,byte[],Charset);;Element of Argument[2];ReturnValue;taint",
        "org.springframework.web.client;HttpServerErrorException;true;create;(String,HttpStatus,String,HttpHeaders,byte[],Charset);;Argument[2];ReturnValue;taint",
        "org.springframework.web.client;HttpServerErrorException;true;create;(String,HttpStatus,String,HttpHeaders,byte[],Charset);;Argument[4];ReturnValue;taint",
        "org.springframework.web.client;HttpServerErrorException;true;create;(String,HttpStatus,String,HttpHeaders,byte[],Charset);;Element of Argument[3];ReturnValue;taint",
        "org.springframework.web.client;RestClientResponseException;true;RestClientResponseException;(String,int,String,HttpHeaders,byte[],Charset);;Argument[2];Argument[-1];taint",
        "org.springframework.web.client;RestClientResponseException;true;RestClientResponseException;(String,int,String,HttpHeaders,byte[],Charset);;Argument[3];Argument[-1];taint",
        "org.springframework.web.client;RestClientResponseException;true;RestClientResponseException;(String,int,String,HttpHeaders,byte[],Charset);;Argument[4];Argument[-1];taint",
        "org.springframework.web.client;RestClientResponseException;true;getResponseBodyAsByteArray;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.client;RestClientResponseException;true;getResponseBodyAsString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.client;RestClientResponseException;true;getResponseBodyAsString;(Charset);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.client;RestClientResponseException;true;getResponseHeaders;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.client;RestClientResponseException;true;getStatusText;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.client;RestTemplate;true;RestTemplate;(ClientHttpRequestFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.web.client;RestTemplate;true;RestTemplate;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.client;RestTemplate;true;getErrorHandler;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.client;RestTemplate;true;getMessageConverters;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.client;RestTemplate;true;getUriTemplateHandler;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.client;RestTemplate;true;httpEntityCallback;(Object);;Argument[0];ReturnValue;taint",
        "org.springframework.web.client;RestTemplate;true;httpEntityCallback;(Object,Type);;Argument[0];ReturnValue;taint",
        "org.springframework.web.client;RestTemplate;true;httpEntityCallback;(Object,Type);;Argument[1];ReturnValue;taint",
        "org.springframework.web.client;RestTemplate;true;responseEntityExtractor;(Type);;Argument[0];ReturnValue;taint",
        "org.springframework.web.client;RestTemplate;true;setErrorHandler;(ResponseErrorHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.web.client;RestTemplate;true;setMessageConverters;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.client;RestTemplate;true;setUriTemplateHandler;(UriTemplateHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.web.client;UnknownContentTypeException;true;UnknownContentTypeException;(Type,MediaType,int,String,HttpHeaders,byte[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.client;UnknownContentTypeException;true;UnknownContentTypeException;(Type,MediaType,int,String,HttpHeaders,byte[]);;Argument[1];Argument[-1];taint",
        "org.springframework.web.client;UnknownContentTypeException;true;UnknownContentTypeException;(Type,MediaType,int,String,HttpHeaders,byte[]);;Argument[3];Argument[-1];taint",
        "org.springframework.web.client;UnknownContentTypeException;true;UnknownContentTypeException;(Type,MediaType,int,String,HttpHeaders,byte[]);;Argument[4];Argument[-1];taint",
        "org.springframework.web.client;UnknownContentTypeException;true;UnknownContentTypeException;(Type,MediaType,int,String,HttpHeaders,byte[]);;Argument[5];Argument[-1];taint",
        "org.springframework.web.client;UnknownContentTypeException;true;getContentType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.client;UnknownContentTypeException;true;getResponseBody;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.client;UnknownContentTypeException;true;getResponseBodyAsString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.client;UnknownContentTypeException;true;getResponseHeaders;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.client;UnknownContentTypeException;true;getStatusText;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.client;UnknownContentTypeException;true;getTargetType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.client;UnknownHttpStatusCodeException;true;UnknownHttpStatusCodeException;(String,int,String,HttpHeaders,byte[],Charset);;Argument[2];Argument[-1];taint",
        "org.springframework.web.client;UnknownHttpStatusCodeException;true;UnknownHttpStatusCodeException;(String,int,String,HttpHeaders,byte[],Charset);;Argument[3];Argument[-1];taint",
        "org.springframework.web.client;UnknownHttpStatusCodeException;true;UnknownHttpStatusCodeException;(String,int,String,HttpHeaders,byte[],Charset);;Argument[4];Argument[-1];taint",
        "org.springframework.web.client;UnknownHttpStatusCodeException;true;UnknownHttpStatusCodeException;(int,String,HttpHeaders,byte[],Charset);;Argument[1];Argument[-1];taint",
        "org.springframework.web.client;UnknownHttpStatusCodeException;true;UnknownHttpStatusCodeException;(int,String,HttpHeaders,byte[],Charset);;Argument[2];Argument[-1];taint",
        "org.springframework.web.client;UnknownHttpStatusCodeException;true;UnknownHttpStatusCodeException;(int,String,HttpHeaders,byte[],Charset);;Argument[3];Argument[-1];taint",
        "org.springframework.web.context.request.async;AsyncWebRequest;true;addCompletionHandler;(Runnable);;Argument[0];Argument[-1];taint",
        "org.springframework.web.context.request.async;AsyncWebRequest;true;addErrorHandler;(Consumer);;Argument[0];Argument[-1];taint",
        "org.springframework.web.context.request.async;AsyncWebRequest;true;addTimeoutHandler;(Runnable);;Argument[0];Argument[-1];taint",
        "org.springframework.web.context.request.async;DeferredResult;true;DeferredResult;(Long,Supplier);;Argument[1];Argument[-1];taint",
        "org.springframework.web.context.request.async;DeferredResult;true;getResult;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.context.request.async;DeferredResult;true;onCompletion;(Runnable);;Argument[0];Argument[-1];taint",
        "org.springframework.web.context.request.async;DeferredResult;true;onError;(Consumer);;Argument[0];Argument[-1];taint",
        "org.springframework.web.context.request.async;DeferredResult;true;onTimeout;(Runnable);;Argument[0];Argument[-1];taint",
        "org.springframework.web.context.request.async;DeferredResult;true;setErrorResult;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.web.context.request.async;DeferredResult;true;setResult;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.web.context.request.async;DeferredResult;true;setResultHandler;(DeferredResultHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.web.context.request.async;StandardServletAsyncWebRequest;true;StandardServletAsyncWebRequest;(HttpServletRequest,HttpServletResponse);;Argument[0];Argument[-1];taint",
        "org.springframework.web.context.request.async;StandardServletAsyncWebRequest;true;StandardServletAsyncWebRequest;(HttpServletRequest,HttpServletResponse);;Argument[1];Argument[-1];taint",
        "org.springframework.web.context.request.async;WebAsyncManager;false;getCallableInterceptor;(Object);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.context.request.async;WebAsyncManager;false;getConcurrentResult;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.context.request.async;WebAsyncManager;false;getConcurrentResultContext;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.context.request.async;WebAsyncManager;false;getDeferredResultInterceptor;(Object);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.context.request.async;WebAsyncManager;false;registerCallableInterceptor;(Object,CallableProcessingInterceptor);;Argument[0];Argument[-1];taint",
        "org.springframework.web.context.request.async;WebAsyncManager;false;registerCallableInterceptor;(Object,CallableProcessingInterceptor);;Argument[1];Argument[-1];taint",
        "org.springframework.web.context.request.async;WebAsyncManager;false;registerCallableInterceptors;(CallableProcessingInterceptor[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.context.request.async;WebAsyncManager;false;registerDeferredResultInterceptor;(Object,DeferredResultProcessingInterceptor);;Argument[0];Argument[-1];taint",
        "org.springframework.web.context.request.async;WebAsyncManager;false;registerDeferredResultInterceptor;(Object,DeferredResultProcessingInterceptor);;Argument[1];Argument[-1];taint",
        "org.springframework.web.context.request.async;WebAsyncManager;false;registerDeferredResultInterceptors;(DeferredResultProcessingInterceptor[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.context.request.async;WebAsyncManager;false;setAsyncWebRequest;(AsyncWebRequest);;Argument[0];Argument[-1];taint",
        "org.springframework.web.context.request.async;WebAsyncManager;false;setTaskExecutor;(AsyncTaskExecutor);;Argument[0];Argument[-1];taint",
        "org.springframework.web.context.request.async;WebAsyncManager;false;startCallableProcessing;(Callable,Object[]);;Argument[1];Argument[-1];taint",
        "org.springframework.web.context.request.async;WebAsyncManager;false;startCallableProcessing;(WebAsyncTask,Object[]);;Argument[1];Argument[-1];taint",
        "org.springframework.web.context.request.async;WebAsyncManager;false;startDeferredResultProcessing;(DeferredResult,Object[]);;Argument[1];Argument[-1];taint",
        "org.springframework.web.context.request.async;WebAsyncTask;true;WebAsyncTask;(Callable);;Argument[0];Argument[-1];taint",
        "org.springframework.web.context.request.async;WebAsyncTask;true;WebAsyncTask;(Long,AsyncTaskExecutor,Callable);;Argument[1];Argument[-1];taint",
        "org.springframework.web.context.request.async;WebAsyncTask;true;WebAsyncTask;(Long,AsyncTaskExecutor,Callable);;Argument[2];Argument[-1];taint",
        "org.springframework.web.context.request.async;WebAsyncTask;true;WebAsyncTask;(Long,String,Callable);;Argument[1];Argument[-1];taint",
        "org.springframework.web.context.request.async;WebAsyncTask;true;WebAsyncTask;(Long,String,Callable);;Argument[2];Argument[-1];taint",
        "org.springframework.web.context.request.async;WebAsyncTask;true;WebAsyncTask;(long,Callable);;Argument[1];Argument[-1];taint",
        "org.springframework.web.context.request.async;WebAsyncTask;true;getCallable;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.context.request.async;WebAsyncTask;true;getExecutor;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.context.request.async;WebAsyncTask;true;onCompletion;(Runnable);;Argument[0];Argument[-1];taint",
        "org.springframework.web.context.request.async;WebAsyncTask;true;onError;(Callable);;Argument[0];Argument[-1];taint",
        "org.springframework.web.context.request.async;WebAsyncTask;true;onTimeout;(Callable);;Argument[0];Argument[-1];taint",
        "org.springframework.web.context.request.async;WebAsyncUtils;true;createAsyncWebRequest;(HttpServletRequest,HttpServletResponse);;Argument[0];ReturnValue;taint",
        "org.springframework.web.context.request.async;WebAsyncUtils;true;createAsyncWebRequest;(HttpServletRequest,HttpServletResponse);;Argument[1];ReturnValue;taint",
        "org.springframework.web.context.request;DestructionCallbackBindingListener;true;DestructionCallbackBindingListener;(Runnable);;Argument[0];Argument[-1];taint",
        "org.springframework.web.context.request;FacesRequestAttributes;true;FacesRequestAttributes;(FacesContext);;Argument[0];Argument[-1];taint",
        "org.springframework.web.context.request;FacesWebRequest;true;FacesWebRequest;(FacesContext);;Argument[0];Argument[-1];taint",
        "org.springframework.web.context.request;NativeWebRequest;true;getNativeRequest;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.context.request;NativeWebRequest;true;getNativeRequest;(Class);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.context.request;NativeWebRequest;true;getNativeResponse;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.context.request;NativeWebRequest;true;getNativeResponse;(Class);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.context.request;RequestAttributes;true;getAttribute;(String,int);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.context.request;RequestAttributes;true;getAttribute;(String,int);;Argument[0];Argument[-1];taint",
        "org.springframework.web.context.request;RequestAttributes;true;getAttribute;(String,int);;Argument[0];ReturnValue;taint",
        "org.springframework.web.context.request;RequestAttributes;true;getAttributeNames;(int);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.context.request;RequestAttributes;true;getSessionId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.context.request;RequestAttributes;true;getSessionMutex;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.context.request;RequestAttributes;true;registerDestructionCallback;(String,Runnable,int);;Argument[0];Argument[-1];taint",
        "org.springframework.web.context.request;RequestAttributes;true;registerDestructionCallback;(String,Runnable,int);;Argument[1];Argument[-1];taint",
        "org.springframework.web.context.request;RequestAttributes;true;resolveReference;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.context.request;RequestAttributes;true;setAttribute;(String,Object,int);;Argument[0];Argument[-1];taint",
        "org.springframework.web.context.request;RequestAttributes;true;setAttribute;(String,Object,int);;Argument[1];Argument[-1];taint",
        "org.springframework.web.context.request;ServletRequestAttributes;true;ServletRequestAttributes;(HttpServletRequest);;Argument[0];Argument[-1];taint",
        "org.springframework.web.context.request;ServletRequestAttributes;true;ServletRequestAttributes;(HttpServletRequest,HttpServletResponse);;Argument[0];Argument[-1];taint",
        "org.springframework.web.context.request;ServletRequestAttributes;true;ServletRequestAttributes;(HttpServletRequest,HttpServletResponse);;Argument[1];Argument[-1];taint",
        "org.springframework.web.context.request;ServletRequestAttributes;true;getRequest;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.context.request;ServletRequestAttributes;true;getResponse;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.context.request;ServletWebRequest;true;ServletWebRequest;(HttpServletRequest);;Argument[0];Argument[-1];taint",
        "org.springframework.web.context.request;ServletWebRequest;true;ServletWebRequest;(HttpServletRequest,HttpServletResponse);;Argument[0];Argument[-1];taint",
        "org.springframework.web.context.request;ServletWebRequest;true;ServletWebRequest;(HttpServletRequest,HttpServletResponse);;Argument[1];Argument[-1];taint",
        "org.springframework.web.context.request;ServletWebRequest;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.context.request;WebRequest;true;getContextPath;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.context.request;WebRequest;true;getDescription;(boolean);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.context.request;WebRequest;true;getHeader;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.context.request;WebRequest;true;getHeaderNames;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.context.request;WebRequest;true;getHeaderValues;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.context.request;WebRequest;true;getLocale;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.context.request;WebRequest;true;getParameter;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.context.request;WebRequest;true;getParameterMap;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.context.request;WebRequest;true;getParameterNames;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.context.request;WebRequest;true;getParameterValues;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.context.request;WebRequest;true;getRemoteUser;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.context.request;WebRequest;true;getUserPrincipal;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.context.support;AnnotationConfigWebApplicationContext;true;setBeanNameGenerator;(BeanNameGenerator);;Argument[0];Argument[-1];taint",
        "org.springframework.web.context.support;AnnotationConfigWebApplicationContext;true;setScopeMetadataResolver;(ScopeMetadataResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.web.context.support;ContextExposingHttpServletRequest;true;ContextExposingHttpServletRequest;(HttpServletRequest,WebApplicationContext);;Argument[1];Argument[-1];taint",
        "org.springframework.web.context.support;ContextExposingHttpServletRequest;true;ContextExposingHttpServletRequest;(HttpServletRequest,WebApplicationContext,Set);;Argument[1];Argument[-1];taint",
        "org.springframework.web.context.support;ContextExposingHttpServletRequest;true;ContextExposingHttpServletRequest;(HttpServletRequest,WebApplicationContext,Set);;Argument[2];Argument[-1];taint",
        "org.springframework.web.context.support;ContextExposingHttpServletRequest;true;getWebApplicationContext;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.context.support;GenericWebApplicationContext;true;GenericWebApplicationContext;(DefaultListableBeanFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.web.context.support;GenericWebApplicationContext;true;GenericWebApplicationContext;(DefaultListableBeanFactory,ServletContext);;Argument[0];Argument[-1];taint",
        "org.springframework.web.context.support;GenericWebApplicationContext;true;GenericWebApplicationContext;(DefaultListableBeanFactory,ServletContext);;Argument[1];Argument[-1];taint",
        "org.springframework.web.context.support;GenericWebApplicationContext;true;GenericWebApplicationContext;(ServletContext);;Argument[0];Argument[-1];taint",
        "org.springframework.web.context.support;RequestHandledEvent;true;RequestHandledEvent;(Object,String,String,long);;Argument[1];Argument[-1];taint",
        "org.springframework.web.context.support;RequestHandledEvent;true;RequestHandledEvent;(Object,String,String,long);;Argument[2];Argument[-1];taint",
        "org.springframework.web.context.support;RequestHandledEvent;true;RequestHandledEvent;(Object,String,String,long,Throwable);;Argument[1];Argument[-1];taint",
        "org.springframework.web.context.support;RequestHandledEvent;true;RequestHandledEvent;(Object,String,String,long,Throwable);;Argument[2];Argument[-1];taint",
        "org.springframework.web.context.support;RequestHandledEvent;true;RequestHandledEvent;(Object,String,String,long,Throwable);;Argument[4];Argument[-1];taint",
        "org.springframework.web.context.support;RequestHandledEvent;true;getDescription;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.context.support;RequestHandledEvent;true;getFailureCause;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.context.support;RequestHandledEvent;true;getSessionId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.context.support;RequestHandledEvent;true;getShortDescription;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.context.support;RequestHandledEvent;true;getUserName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.context.support;RequestHandledEvent;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.context.support;ServletConfigPropertySource;true;ServletConfigPropertySource;(String,ServletConfig);;Argument[0];Argument[-1];taint",
        "org.springframework.web.context.support;ServletConfigPropertySource;true;ServletConfigPropertySource;(String,ServletConfig);;Argument[1];Argument[-1];taint",
        "org.springframework.web.context.support;ServletContextAttributeExporter;true;setAttributes;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.web.context.support;ServletContextAttributeFactoryBean;true;setAttributeName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.context.support;ServletContextAwareProcessor;true;ServletContextAwareProcessor;(ServletConfig);;Argument[0];Argument[-1];taint",
        "org.springframework.web.context.support;ServletContextAwareProcessor;true;ServletContextAwareProcessor;(ServletContext);;Argument[0];Argument[-1];taint",
        "org.springframework.web.context.support;ServletContextAwareProcessor;true;ServletContextAwareProcessor;(ServletContext,ServletConfig);;Argument[0];Argument[-1];taint",
        "org.springframework.web.context.support;ServletContextAwareProcessor;true;ServletContextAwareProcessor;(ServletContext,ServletConfig);;Argument[1];Argument[-1];taint",
        "org.springframework.web.context.support;ServletContextLiveBeansView;true;ServletContextLiveBeansView;(ServletContext);;Argument[0];Argument[-1];taint",
        "org.springframework.web.context.support;ServletContextParameterFactoryBean;true;setInitParamName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.context.support;ServletContextPropertySource;true;ServletContextPropertySource;(String,ServletContext);;Argument[0];Argument[-1];taint",
        "org.springframework.web.context.support;ServletContextPropertySource;true;ServletContextPropertySource;(String,ServletContext);;Argument[1];Argument[-1];taint",
        "org.springframework.web.context.support;ServletContextResource;true;ServletContextResource;(ServletContext,String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.context.support;ServletContextResource;true;ServletContextResource;(ServletContext,String);;Argument[1];Argument[-1];taint",
        "org.springframework.web.context.support;ServletContextResource;true;getPath;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.context.support;ServletContextResource;true;getServletContext;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.context.support;ServletContextResourceLoader;true;ServletContextResourceLoader;(ServletContext);;Argument[0];Argument[-1];taint",
        "org.springframework.web.context.support;ServletContextResourcePatternResolver;true;ServletContextResourcePatternResolver;(ResourceLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.web.context.support;ServletContextResourcePatternResolver;true;ServletContextResourcePatternResolver;(ServletContext);;Argument[0];Argument[-1];taint",
        "org.springframework.web.context.support;ServletContextScope;true;ServletContextScope;(ServletContext);;Argument[0];Argument[-1];taint",
        "org.springframework.web.context.support;ServletRequestHandledEvent;true;ServletRequestHandledEvent;(Object,String,String,String,String,String,String,long);;Argument[1];Argument[-1];taint",
        "org.springframework.web.context.support;ServletRequestHandledEvent;true;ServletRequestHandledEvent;(Object,String,String,String,String,String,String,long);;Argument[2];Argument[-1];taint",
        "org.springframework.web.context.support;ServletRequestHandledEvent;true;ServletRequestHandledEvent;(Object,String,String,String,String,String,String,long);;Argument[3];Argument[-1];taint",
        "org.springframework.web.context.support;ServletRequestHandledEvent;true;ServletRequestHandledEvent;(Object,String,String,String,String,String,String,long);;Argument[4];Argument[-1];taint",
        "org.springframework.web.context.support;ServletRequestHandledEvent;true;ServletRequestHandledEvent;(Object,String,String,String,String,String,String,long);;Argument[5];Argument[-1];taint",
        "org.springframework.web.context.support;ServletRequestHandledEvent;true;ServletRequestHandledEvent;(Object,String,String,String,String,String,String,long);;Argument[6];Argument[-1];taint",
        "org.springframework.web.context.support;ServletRequestHandledEvent;true;ServletRequestHandledEvent;(Object,String,String,String,String,String,String,long,Throwable);;Argument[1];Argument[-1];taint",
        "org.springframework.web.context.support;ServletRequestHandledEvent;true;ServletRequestHandledEvent;(Object,String,String,String,String,String,String,long,Throwable);;Argument[2];Argument[-1];taint",
        "org.springframework.web.context.support;ServletRequestHandledEvent;true;ServletRequestHandledEvent;(Object,String,String,String,String,String,String,long,Throwable);;Argument[3];Argument[-1];taint",
        "org.springframework.web.context.support;ServletRequestHandledEvent;true;ServletRequestHandledEvent;(Object,String,String,String,String,String,String,long,Throwable);;Argument[4];Argument[-1];taint",
        "org.springframework.web.context.support;ServletRequestHandledEvent;true;ServletRequestHandledEvent;(Object,String,String,String,String,String,String,long,Throwable);;Argument[5];Argument[-1];taint",
        "org.springframework.web.context.support;ServletRequestHandledEvent;true;ServletRequestHandledEvent;(Object,String,String,String,String,String,String,long,Throwable);;Argument[6];Argument[-1];taint",
        "org.springframework.web.context.support;ServletRequestHandledEvent;true;ServletRequestHandledEvent;(Object,String,String,String,String,String,String,long,Throwable);;Argument[8];Argument[-1];taint",
        "org.springframework.web.context.support;ServletRequestHandledEvent;true;ServletRequestHandledEvent;(Object,String,String,String,String,String,String,long,Throwable,int);;Argument[1];Argument[-1];taint",
        "org.springframework.web.context.support;ServletRequestHandledEvent;true;ServletRequestHandledEvent;(Object,String,String,String,String,String,String,long,Throwable,int);;Argument[2];Argument[-1];taint",
        "org.springframework.web.context.support;ServletRequestHandledEvent;true;ServletRequestHandledEvent;(Object,String,String,String,String,String,String,long,Throwable,int);;Argument[3];Argument[-1];taint",
        "org.springframework.web.context.support;ServletRequestHandledEvent;true;ServletRequestHandledEvent;(Object,String,String,String,String,String,String,long,Throwable,int);;Argument[4];Argument[-1];taint",
        "org.springframework.web.context.support;ServletRequestHandledEvent;true;ServletRequestHandledEvent;(Object,String,String,String,String,String,String,long,Throwable,int);;Argument[5];Argument[-1];taint",
        "org.springframework.web.context.support;ServletRequestHandledEvent;true;ServletRequestHandledEvent;(Object,String,String,String,String,String,String,long,Throwable,int);;Argument[6];Argument[-1];taint",
        "org.springframework.web.context.support;ServletRequestHandledEvent;true;ServletRequestHandledEvent;(Object,String,String,String,String,String,String,long,Throwable,int);;Argument[8];Argument[-1];taint",
        "org.springframework.web.context.support;ServletRequestHandledEvent;true;getClientAddress;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.context.support;ServletRequestHandledEvent;true;getMethod;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.context.support;ServletRequestHandledEvent;true;getRequestUrl;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.context.support;ServletRequestHandledEvent;true;getServletName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.context.support;ServletRequestHandledEvent;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.context;ConfigurableWebApplicationContext;true;getConfigLocations;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.context;ConfigurableWebApplicationContext;true;getNamespace;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.context;ConfigurableWebApplicationContext;true;getServletConfig;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.context;ConfigurableWebApplicationContext;true;setNamespace;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.context;ConfigurableWebApplicationContext;true;setServletConfig;(ServletConfig);;Argument[0];Argument[-1];taint",
        "org.springframework.web.context;ConfigurableWebApplicationContext;true;setServletContext;(ServletContext);;Argument[0];Argument[-1];taint",
        "org.springframework.web.context;ConfigurableWebEnvironment;true;initPropertySources;(ServletContext,ServletConfig);;Argument[0];Argument[-1];taint",
        "org.springframework.web.context;ConfigurableWebEnvironment;true;initPropertySources;(ServletContext,ServletConfig);;Argument[1];Argument[-1];taint",
        "org.springframework.web.context;ContextLoader;true;ContextLoader;(WebApplicationContext);;Argument[0];Argument[-1];taint",
        "org.springframework.web.context;ContextLoader;true;initWebApplicationContext;(ServletContext);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.context;ContextLoader;true;setContextInitializers;(ApplicationContextInitializer[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.context;ContextLoaderListener;true;ContextLoaderListener;(WebApplicationContext);;Argument[0];Argument[-1];taint",
        "org.springframework.web.context;ServletConfigAware;true;setServletConfig;(ServletConfig);;Argument[0];Argument[-1];taint",
        "org.springframework.web.context;ServletContextAware;true;setServletContext;(ServletContext);;Argument[0];Argument[-1];taint",
        "org.springframework.web.context;WebApplicationContext;true;getServletContext;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.cors.reactive;CorsConfigurationSource;true;getCorsConfiguration;(ServerWebExchange);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.cors.reactive;CorsWebFilter;true;CorsWebFilter;(CorsConfigurationSource);;Argument[0];Argument[-1];taint",
        "org.springframework.web.cors.reactive;CorsWebFilter;true;CorsWebFilter;(CorsConfigurationSource,CorsProcessor);;Argument[0];Argument[-1];taint",
        "org.springframework.web.cors.reactive;CorsWebFilter;true;CorsWebFilter;(CorsConfigurationSource,CorsProcessor);;Argument[1];Argument[-1];taint",
        "org.springframework.web.cors.reactive;PreFlightRequestWebFilter;true;PreFlightRequestWebFilter;(PreFlightRequestHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.web.cors.reactive;UrlBasedCorsConfigurationSource;true;UrlBasedCorsConfigurationSource;(PathPatternParser);;Argument[0];Argument[-1];taint",
        "org.springframework.web.cors.reactive;UrlBasedCorsConfigurationSource;true;registerCorsConfiguration;(String,CorsConfiguration);;Argument[0];Argument[-1];taint",
        "org.springframework.web.cors.reactive;UrlBasedCorsConfigurationSource;true;registerCorsConfiguration;(String,CorsConfiguration);;Argument[1];Argument[-1];taint",
        "org.springframework.web.cors;CorsConfiguration;true;addAllowedHeader;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.cors;CorsConfiguration;true;addAllowedMethod;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.cors;CorsConfiguration;true;addAllowedOrigin;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.cors;CorsConfiguration;true;addAllowedOriginPattern;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.cors;CorsConfiguration;true;addExposedHeader;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.cors;CorsConfiguration;true;applyPermitDefaultValues;();;Argument[-1];ReturnValue;value",
        "org.springframework.web.cors;CorsConfiguration;true;checkHeaders;(List);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.web.cors;CorsConfiguration;true;checkHttpMethod;(HttpMethod);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.cors;CorsConfiguration;true;checkOrigin;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.cors;CorsConfiguration;true;combine;(CorsConfiguration);;Argument[-1];ReturnValue;value",
        "org.springframework.web.cors;CorsConfiguration;true;getAllowedHeaders;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.cors;CorsConfiguration;true;getAllowedMethods;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.cors;CorsConfiguration;true;getAllowedOrigins;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.cors;CorsConfiguration;true;getExposedHeaders;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.cors;CorsConfiguration;true;setAllowedHeaders;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.cors;CorsConfiguration;true;setAllowedMethods;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.cors;CorsConfiguration;true;setAllowedOriginPatterns;(List);;Argument[-1];ReturnValue;value",
        "org.springframework.web.cors;CorsConfiguration;true;setAllowedOriginPatterns;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.cors;CorsConfiguration;true;setAllowedOriginPatterns;(List);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.web.cors;CorsConfiguration;true;setExposedHeaders;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.cors;CorsConfigurationSource;true;getCorsConfiguration;(HttpServletRequest);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.cors;UrlBasedCorsConfigurationSource;true;UrlBasedCorsConfigurationSource;(PathPatternParser);;Argument[0];Argument[-1];taint",
        "org.springframework.web.cors;UrlBasedCorsConfigurationSource;true;registerCorsConfiguration;(String,CorsConfiguration);;Argument[0];Argument[-1];taint",
        "org.springframework.web.cors;UrlBasedCorsConfigurationSource;true;registerCorsConfiguration;(String,CorsConfiguration);;Argument[1];Argument[-1];taint",
        "org.springframework.web.cors;UrlBasedCorsConfigurationSource;true;setLookupPathAttributeName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.cors;UrlBasedCorsConfigurationSource;true;setPathMatcher;(PathMatcher);;Argument[0];Argument[-1];taint",
        "org.springframework.web.cors;UrlBasedCorsConfigurationSource;true;setUrlPathHelper;(UrlPathHelper);;Argument[0];Argument[-1];taint",
        "org.springframework.web.filter.reactive;HiddenHttpMethodFilter;true;setMethodParamName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.filter;AbstractRequestLoggingFilter;true;setAfterMessagePrefix;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.filter;AbstractRequestLoggingFilter;true;setAfterMessageSuffix;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.filter;AbstractRequestLoggingFilter;true;setBeforeMessagePrefix;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.filter;AbstractRequestLoggingFilter;true;setBeforeMessageSuffix;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.filter;AbstractRequestLoggingFilter;true;setHeaderPredicate;(Predicate);;Argument[0];Argument[-1];taint",
        "org.springframework.web.filter;CharacterEncodingFilter;true;CharacterEncodingFilter;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.filter;CharacterEncodingFilter;true;CharacterEncodingFilter;(String,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.web.filter;CharacterEncodingFilter;true;CharacterEncodingFilter;(String,boolean,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.web.filter;CharacterEncodingFilter;true;getEncoding;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.filter;CharacterEncodingFilter;true;setEncoding;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.filter;CompositeFilter;true;setFilters;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.filter;CorsFilter;true;CorsFilter;(CorsConfigurationSource);;Argument[0];Argument[-1];taint",
        "org.springframework.web.filter;CorsFilter;true;setCorsProcessor;(CorsProcessor);;Argument[0];Argument[-1];taint",
        "org.springframework.web.filter;DelegatingFilterProxy;true;DelegatingFilterProxy;(Filter);;Argument[0];Argument[-1];taint",
        "org.springframework.web.filter;DelegatingFilterProxy;true;DelegatingFilterProxy;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.filter;DelegatingFilterProxy;true;DelegatingFilterProxy;(String,WebApplicationContext);;Argument[0];Argument[-1];taint",
        "org.springframework.web.filter;DelegatingFilterProxy;true;DelegatingFilterProxy;(String,WebApplicationContext);;Argument[1];Argument[-1];taint",
        "org.springframework.web.filter;DelegatingFilterProxy;true;getContextAttribute;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.filter;DelegatingFilterProxy;true;setContextAttribute;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.filter;DelegatingFilterProxy;true;setTargetBeanName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.filter;FormContentFilter;true;setFormConverter;(FormHttpMessageConverter);;Argument[0];Argument[-1];taint",
        "org.springframework.web.filter;GenericFilterBean;true;getFilterConfig;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.filter;HiddenHttpMethodFilter;true;setMethodParam;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.filter;HttpPutFormContentFilter;true;getFormConverter;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.filter;HttpPutFormContentFilter;true;setFormConverter;(FormHttpMessageConverter);;Argument[0];Argument[-1];taint",
        "org.springframework.web.jsf;DecoratingNavigationHandler;true;getDecoratedNavigationHandler;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.jsf;DelegatingNavigationHandlerProxy;true;DelegatingNavigationHandlerProxy;(NavigationHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.web.method.annotation;AbstractCookieValueMethodArgumentResolver;true;AbstractCookieValueMethodArgumentResolver;(ConfigurableBeanFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.web.method.annotation;AbstractNamedValueMethodArgumentResolver;true;AbstractNamedValueMethodArgumentResolver;(ConfigurableBeanFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.web.method.annotation;AbstractWebArgumentResolverAdapter;true;AbstractWebArgumentResolverAdapter;(WebArgumentResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.web.method.annotation;ExceptionHandlerMethodResolver;true;resolveMethod;(Exception);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.method.annotation;ExceptionHandlerMethodResolver;true;resolveMethodByExceptionType;(Class);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.method.annotation;ExceptionHandlerMethodResolver;true;resolveMethodByThrowable;(Throwable);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.method.annotation;ExpressionValueMethodArgumentResolver;true;ExpressionValueMethodArgumentResolver;(ConfigurableBeanFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.web.method.annotation;InitBinderDataBinderFactory;true;InitBinderDataBinderFactory;(List,WebBindingInitializer);;Argument[0];Argument[-1];taint",
        "org.springframework.web.method.annotation;InitBinderDataBinderFactory;true;InitBinderDataBinderFactory;(List,WebBindingInitializer);;Argument[1];Argument[-1];taint",
        "org.springframework.web.method.annotation;MethodArgumentConversionNotSupportedException;true;MethodArgumentConversionNotSupportedException;(Object,Class,String,MethodParameter,Throwable);;Argument[0];Argument[-1];taint",
        "org.springframework.web.method.annotation;MethodArgumentConversionNotSupportedException;true;MethodArgumentConversionNotSupportedException;(Object,Class,String,MethodParameter,Throwable);;Argument[2];Argument[-1];taint",
        "org.springframework.web.method.annotation;MethodArgumentConversionNotSupportedException;true;MethodArgumentConversionNotSupportedException;(Object,Class,String,MethodParameter,Throwable);;Argument[3];Argument[-1];taint",
        "org.springframework.web.method.annotation;MethodArgumentConversionNotSupportedException;true;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.method.annotation;MethodArgumentConversionNotSupportedException;true;getParameter;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.method.annotation;MethodArgumentTypeMismatchException;true;MethodArgumentTypeMismatchException;(Object,Class,String,MethodParameter,Throwable);;Argument[0];Argument[-1];taint",
        "org.springframework.web.method.annotation;MethodArgumentTypeMismatchException;true;MethodArgumentTypeMismatchException;(Object,Class,String,MethodParameter,Throwable);;Argument[2];Argument[-1];taint",
        "org.springframework.web.method.annotation;MethodArgumentTypeMismatchException;true;MethodArgumentTypeMismatchException;(Object,Class,String,MethodParameter,Throwable);;Argument[3];Argument[-1];taint",
        "org.springframework.web.method.annotation;MethodArgumentTypeMismatchException;true;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.method.annotation;MethodArgumentTypeMismatchException;true;getParameter;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.method.annotation;ModelFactory;false;ModelFactory;(List,WebDataBinderFactory,SessionAttributesHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.web.method.annotation;ModelFactory;false;ModelFactory;(List,WebDataBinderFactory,SessionAttributesHandler);;Argument[1];Argument[-1];taint",
        "org.springframework.web.method.annotation;ModelFactory;false;ModelFactory;(List,WebDataBinderFactory,SessionAttributesHandler);;Argument[2];Argument[-1];taint",
        "org.springframework.web.method.annotation;RequestHeaderMethodArgumentResolver;true;RequestHeaderMethodArgumentResolver;(ConfigurableBeanFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.web.method.annotation;RequestParamMethodArgumentResolver;true;RequestParamMethodArgumentResolver;(ConfigurableBeanFactory,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.web.method.annotation;SessionAttributesHandler;true;SessionAttributesHandler;(Class,SessionAttributeStore);;Argument[1];Argument[-1];taint",
        "org.springframework.web.method.annotation;SessionAttributesHandler;true;isHandlerSessionAttribute;(String,Class);;Argument[0];Argument[-1];taint",
        "org.springframework.web.method.annotation;SessionAttributesHandler;true;retrieveAttributes;(WebRequest);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.method.support;CompositeUriComponentsContributor;true;CompositeUriComponentsContributor;(Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.web.method.support;CompositeUriComponentsContributor;true;CompositeUriComponentsContributor;(Collection,ConversionService);;Argument[0];Argument[-1];taint",
        "org.springframework.web.method.support;CompositeUriComponentsContributor;true;CompositeUriComponentsContributor;(Collection,ConversionService);;Argument[1];Argument[-1];taint",
        "org.springframework.web.method.support;CompositeUriComponentsContributor;true;CompositeUriComponentsContributor;(UriComponentsContributor[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.method.support;CompositeUriComponentsContributor;true;contributeMethodArgument;(MethodParameter,Object,UriComponentsBuilder,Map);;Argument[0];Argument[-1];taint",
        "org.springframework.web.method.support;HandlerMethodArgumentResolver;true;resolveArgument;(MethodParameter,ModelAndViewContainer,NativeWebRequest,WebDataBinderFactory);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.method.support;HandlerMethodArgumentResolver;true;resolveArgument;(MethodParameter,ModelAndViewContainer,NativeWebRequest,WebDataBinderFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.web.method.support;HandlerMethodArgumentResolver;true;resolveArgument;(MethodParameter,ModelAndViewContainer,NativeWebRequest,WebDataBinderFactory);;Argument[2];ReturnValue;taint",
        "org.springframework.web.method.support;HandlerMethodArgumentResolver;true;supportsParameter;(MethodParameter);;Argument[0];Argument[-1];taint",
        "org.springframework.web.method.support;HandlerMethodArgumentResolverComposite;true;addResolver;(HandlerMethodArgumentResolver);;Argument[-1];ReturnValue;value",
        "org.springframework.web.method.support;HandlerMethodArgumentResolverComposite;true;addResolver;(HandlerMethodArgumentResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.web.method.support;HandlerMethodArgumentResolverComposite;true;addResolver;(HandlerMethodArgumentResolver);;Argument[0];ReturnValue;taint",
        "org.springframework.web.method.support;HandlerMethodArgumentResolverComposite;true;addResolvers;(HandlerMethodArgumentResolver[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.method.support;HandlerMethodArgumentResolverComposite;true;addResolvers;(HandlerMethodArgumentResolver[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.method.support;HandlerMethodArgumentResolverComposite;true;addResolvers;(HandlerMethodArgumentResolver[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.web.method.support;HandlerMethodArgumentResolverComposite;true;addResolvers;(List);;Argument[-1];ReturnValue;value",
        "org.springframework.web.method.support;HandlerMethodArgumentResolverComposite;true;addResolvers;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.method.support;HandlerMethodArgumentResolverComposite;true;addResolvers;(List);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.web.method.support;HandlerMethodArgumentResolverComposite;true;getResolvers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.method.support;HandlerMethodReturnValueHandlerComposite;true;addHandler;(HandlerMethodReturnValueHandler);;Argument[-1];ReturnValue;value",
        "org.springframework.web.method.support;HandlerMethodReturnValueHandlerComposite;true;addHandler;(HandlerMethodReturnValueHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.web.method.support;HandlerMethodReturnValueHandlerComposite;true;addHandler;(HandlerMethodReturnValueHandler);;Argument[0];ReturnValue;taint",
        "org.springframework.web.method.support;HandlerMethodReturnValueHandlerComposite;true;addHandlers;(List);;Argument[-1];ReturnValue;value",
        "org.springframework.web.method.support;HandlerMethodReturnValueHandlerComposite;true;addHandlers;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.method.support;HandlerMethodReturnValueHandlerComposite;true;addHandlers;(List);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.web.method.support;HandlerMethodReturnValueHandlerComposite;true;getHandlers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.method.support;InvocableHandlerMethod;true;InvocableHandlerMethod;(Object,Method);;Argument[0];Argument[-1];taint",
        "org.springframework.web.method.support;InvocableHandlerMethod;true;InvocableHandlerMethod;(Object,Method);;Argument[1];Argument[-1];taint",
        "org.springframework.web.method.support;InvocableHandlerMethod;true;InvocableHandlerMethod;(Object,String,Class[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.method.support;InvocableHandlerMethod;true;setDataBinderFactory;(WebDataBinderFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.web.method.support;InvocableHandlerMethod;true;setHandlerMethodArgumentResolvers;(HandlerMethodArgumentResolverComposite);;Argument[0];Argument[-1];taint",
        "org.springframework.web.method.support;InvocableHandlerMethod;true;setParameterNameDiscoverer;(ParameterNameDiscoverer);;Argument[0];Argument[-1];taint",
        "org.springframework.web.method.support;ModelAndViewContainer;true;addAllAttributes;(Map);;Argument[-1];ReturnValue;value",
        "org.springframework.web.method.support;ModelAndViewContainer;true;addAllAttributes;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.web.method.support;ModelAndViewContainer;true;addAllAttributes;(Map);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.web.method.support;ModelAndViewContainer;true;addAttribute;(Object);;Argument[-1];ReturnValue;value",
        "org.springframework.web.method.support;ModelAndViewContainer;true;addAttribute;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.web.method.support;ModelAndViewContainer;true;addAttribute;(Object);;Argument[0];ReturnValue;taint",
        "org.springframework.web.method.support;ModelAndViewContainer;true;addAttribute;(String,Object);;Argument[-1];ReturnValue;value",
        "org.springframework.web.method.support;ModelAndViewContainer;true;addAttribute;(String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.web.method.support;ModelAndViewContainer;true;addAttribute;(String,Object);;Argument[0];ReturnValue;taint",
        "org.springframework.web.method.support;ModelAndViewContainer;true;addAttribute;(String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.web.method.support;ModelAndViewContainer;true;addAttribute;(String,Object);;Argument[1];ReturnValue;taint",
        "org.springframework.web.method.support;ModelAndViewContainer;true;getDefaultModel;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.method.support;ModelAndViewContainer;true;getModel;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.method.support;ModelAndViewContainer;true;getSessionStatus;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.method.support;ModelAndViewContainer;true;getView;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.method.support;ModelAndViewContainer;true;getViewName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.method.support;ModelAndViewContainer;true;mergeAttributes;(Map);;Argument[-1];ReturnValue;value",
        "org.springframework.web.method.support;ModelAndViewContainer;true;mergeAttributes;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.web.method.support;ModelAndViewContainer;true;mergeAttributes;(Map);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.web.method.support;ModelAndViewContainer;true;removeAttributes;(Map);;Argument[-1];ReturnValue;value",
        "org.springframework.web.method.support;ModelAndViewContainer;true;setBinding;(String,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.web.method.support;ModelAndViewContainer;true;setBindingDisabled;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.method.support;ModelAndViewContainer;true;setRedirectModel;(ModelMap);;Argument[0];Argument[-1];taint",
        "org.springframework.web.method.support;ModelAndViewContainer;true;setView;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.web.method.support;ModelAndViewContainer;true;setViewName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.method.support;ModelAndViewContainer;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.method;ControllerAdviceBean;true;ControllerAdviceBean;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.web.method;ControllerAdviceBean;true;ControllerAdviceBean;(String,BeanFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.web.method;ControllerAdviceBean;true;ControllerAdviceBean;(String,BeanFactory);;Argument[1];Argument[-1];taint",
        "org.springframework.web.method;ControllerAdviceBean;true;ControllerAdviceBean;(String,BeanFactory,ControllerAdvice);;Argument[0];Argument[-1];taint",
        "org.springframework.web.method;ControllerAdviceBean;true;ControllerAdviceBean;(String,BeanFactory,ControllerAdvice);;Argument[1];Argument[-1];taint",
        "org.springframework.web.method;ControllerAdviceBean;true;findAnnotatedBeans;(ApplicationContext);;Argument[0];ReturnValue;taint",
        "org.springframework.web.method;ControllerAdviceBean;true;resolveBean;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.method;HandlerMethod;true;HandlerMethod;(Object,Method);;Argument[0];Argument[-1];taint",
        "org.springframework.web.method;HandlerMethod;true;HandlerMethod;(Object,Method);;Argument[1];Argument[-1];taint",
        "org.springframework.web.method;HandlerMethod;true;HandlerMethod;(Object,String,Class[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.method;HandlerMethod;true;HandlerMethod;(String,BeanFactory,MessageSource,Method);;Argument[0];Argument[-1];taint",
        "org.springframework.web.method;HandlerMethod;true;HandlerMethod;(String,BeanFactory,MessageSource,Method);;Argument[1];Argument[-1];taint",
        "org.springframework.web.method;HandlerMethod;true;HandlerMethod;(String,BeanFactory,MessageSource,Method);;Argument[2];Argument[-1];taint",
        "org.springframework.web.method;HandlerMethod;true;HandlerMethod;(String,BeanFactory,MessageSource,Method);;Argument[3];Argument[-1];taint",
        "org.springframework.web.method;HandlerMethod;true;HandlerMethod;(String,BeanFactory,Method);;Argument[0];Argument[-1];taint",
        "org.springframework.web.method;HandlerMethod;true;HandlerMethod;(String,BeanFactory,Method);;Argument[1];Argument[-1];taint",
        "org.springframework.web.method;HandlerMethod;true;HandlerMethod;(String,BeanFactory,Method);;Argument[2];Argument[-1];taint",
        "org.springframework.web.method;HandlerMethod;true;getBean;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.method;HandlerMethod;true;getMethod;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.method;HandlerMethod;true;getMethodParameters;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.method;HandlerMethod;true;getResolvedFromHandlerMethod;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.method;HandlerMethod;true;getReturnValueType;(Object);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.method;HandlerMethod;true;getReturnValueType;(Object);;Argument[0];ReturnValue;taint",
        "org.springframework.web.method;HandlerMethod;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.method;HandlerTypePredicate$Builder;true;annotation;(Class[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.method;HandlerTypePredicate$Builder;true;annotation;(Class[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.method;HandlerTypePredicate$Builder;true;annotation;(Class[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.web.method;HandlerTypePredicate$Builder;true;assignableType;(Class[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.method;HandlerTypePredicate$Builder;true;assignableType;(Class[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.method;HandlerTypePredicate$Builder;true;assignableType;(Class[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.web.method;HandlerTypePredicate$Builder;true;basePackage;(String[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.method;HandlerTypePredicate$Builder;true;basePackageClass;(Class[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.method;HandlerTypePredicate;false;forAnnotation;(Class[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.web.method;HandlerTypePredicate;false;forAssignableType;(Class[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.web.multipart.commons;CommonsFileUploadSupport;true;getFileItemFactory;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.multipart.commons;CommonsFileUploadSupport;true;getFileUpload;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.multipart.commons;CommonsMultipartFile;true;CommonsMultipartFile;(FileItem);;Argument[0];Argument[-1];taint",
        "org.springframework.web.multipart.commons;CommonsMultipartFile;true;getFileItem;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.multipart.commons;CommonsMultipartResolver;true;setSupportedMethods;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.multipart.support;DefaultMultipartHttpServletRequest;true;DefaultMultipartHttpServletRequest;(HttpServletRequest,MultiValueMap,Map,Map);;Argument[1];Argument[-1];taint",
        "org.springframework.web.multipart.support;DefaultMultipartHttpServletRequest;true;DefaultMultipartHttpServletRequest;(HttpServletRequest,MultiValueMap,Map,Map);;Argument[2];Argument[-1];taint",
        "org.springframework.web.multipart.support;DefaultMultipartHttpServletRequest;true;DefaultMultipartHttpServletRequest;(HttpServletRequest,MultiValueMap,Map,Map);;Argument[3];Argument[-1];taint",
        "org.springframework.web.multipart.support;MissingServletRequestPartException;true;MissingServletRequestPartException;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.multipart.support;MissingServletRequestPartException;true;getRequestPartName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.multipart.support;MultipartFilter;true;setMultipartResolverBeanName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.multipart.support;MultipartResolutionDelegate;false;resolveMultipartArgument;(String,MethodParameter,HttpServletRequest);;Argument[2];ReturnValue;taint",
        "org.springframework.web.multipart.support;RequestPartServletServerHttpRequest;true;RequestPartServletServerHttpRequest;(HttpServletRequest,String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.multipart.support;RequestPartServletServerHttpRequest;true;RequestPartServletServerHttpRequest;(HttpServletRequest,String);;Argument[1];Argument[-1];taint",
        "org.springframework.web.multipart.support;StringMultipartFileEditor;true;StringMultipartFileEditor;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.multipart;MultipartFile;true;getBytes;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.multipart;MultipartFile;true;getContentType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.multipart;MultipartFile;true;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.multipart;MultipartFile;true;getOriginalFilename;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.multipart;MultipartFile;true;transferTo;(File);;Argument[-1];Argument[0];taint",
        "org.springframework.web.multipart;MultipartHttpServletRequest;true;getMultipartHeaders;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.multipart;MultipartHttpServletRequest;true;getRequestHeaders;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.multipart;MultipartRequest;true;getFile;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.multipart;MultipartRequest;true;getFileMap;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.multipart;MultipartRequest;true;getFileNames;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.multipart;MultipartRequest;true;getFiles;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.multipart;MultipartRequest;true;getMultiFileMap;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.multipart;MultipartRequest;true;getMultipartContentType;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.accept;FixedContentTypeResolver;true;FixedContentTypeResolver;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.accept;FixedContentTypeResolver;true;FixedContentTypeResolver;(MediaType);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.accept;FixedContentTypeResolver;true;getContentTypes;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.accept;ParameterContentTypeResolver;true;getParameterName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.accept;ParameterContentTypeResolver;true;setParameterName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.accept;RequestedContentTypeResolver;true;resolveMediaTypes;(ServerWebExchange);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.accept;RequestedContentTypeResolverBuilder$ParameterResolverConfigurer;true;mediaType;(Map);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.accept;RequestedContentTypeResolverBuilder$ParameterResolverConfigurer;true;mediaType;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.accept;RequestedContentTypeResolverBuilder$ParameterResolverConfigurer;true;mediaType;(Map);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.accept;RequestedContentTypeResolverBuilder$ParameterResolverConfigurer;true;mediaType;(String,MediaType);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.accept;RequestedContentTypeResolverBuilder$ParameterResolverConfigurer;true;mediaType;(String,MediaType);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.accept;RequestedContentTypeResolverBuilder$ParameterResolverConfigurer;true;mediaType;(String,MediaType);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.accept;RequestedContentTypeResolverBuilder$ParameterResolverConfigurer;true;mediaType;(String,MediaType);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.accept;RequestedContentTypeResolverBuilder$ParameterResolverConfigurer;true;mediaType;(String,MediaType);;Argument[1];ReturnValue;taint",
        "org.springframework.web.reactive.accept;RequestedContentTypeResolverBuilder$ParameterResolverConfigurer;true;parameterName;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.accept;RequestedContentTypeResolverBuilder$ParameterResolverConfigurer;true;parameterName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.accept;RequestedContentTypeResolverBuilder$ParameterResolverConfigurer;true;parameterName;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.config;CorsRegistration;true;CorsRegistration;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.config;CorsRegistration;true;allowCredentials;(boolean);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.config;CorsRegistration;true;allowedHeaders;(String[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.config;CorsRegistration;true;allowedHeaders;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.config;CorsRegistration;true;allowedHeaders;(String[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.config;CorsRegistration;true;allowedMethods;(String[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.config;CorsRegistration;true;allowedMethods;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.config;CorsRegistration;true;allowedMethods;(String[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.config;CorsRegistration;true;allowedOriginPatterns;(String[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.config;CorsRegistration;true;allowedOriginPatterns;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.config;CorsRegistration;true;allowedOriginPatterns;(String[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.config;CorsRegistration;true;allowedOrigins;(String[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.config;CorsRegistration;true;combine;(CorsConfiguration);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.config;CorsRegistration;true;exposedHeaders;(String[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.config;CorsRegistration;true;exposedHeaders;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.config;CorsRegistration;true;exposedHeaders;(String[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.config;CorsRegistration;true;maxAge;(long);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.config;CorsRegistry;true;addMapping;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.config;CorsRegistry;true;addMapping;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.config;DelegatingWebFluxConfiguration;true;setConfigurers;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.config;PathMatchConfigurer;true;addPathPrefix;(String,Predicate);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.config;PathMatchConfigurer;true;addPathPrefix;(String,Predicate);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.config;PathMatchConfigurer;true;addPathPrefix;(String,Predicate);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.config;PathMatchConfigurer;true;addPathPrefix;(String,Predicate);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.config;PathMatchConfigurer;true;addPathPrefix;(String,Predicate);;Argument[1];ReturnValue;taint",
        "org.springframework.web.reactive.config;PathMatchConfigurer;true;setUseCaseSensitiveMatch;(Boolean);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.config;PathMatchConfigurer;true;setUseTrailingSlashMatch;(Boolean);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.config;ResourceChainRegistration;true;ResourceChainRegistration;(boolean,Cache);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.config;ResourceChainRegistration;true;addResolver;(ResourceResolver);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.config;ResourceChainRegistration;true;addResolver;(ResourceResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.config;ResourceChainRegistration;true;addResolver;(ResourceResolver);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.config;ResourceChainRegistration;true;addTransformer;(ResourceTransformer);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.config;ResourceChainRegistration;true;addTransformer;(ResourceTransformer);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.config;ResourceChainRegistration;true;addTransformer;(ResourceTransformer);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.config;ResourceHandlerRegistration;true;ResourceHandlerRegistration;(ResourceLoader,String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.config;ResourceHandlerRegistration;true;ResourceHandlerRegistration;(ResourceLoader,String[]);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.config;ResourceHandlerRegistration;true;addResourceLocations;(String[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.config;ResourceHandlerRegistration;true;addResourceLocations;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.config;ResourceHandlerRegistration;true;addResourceLocations;(String[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.config;ResourceHandlerRegistration;true;resourceChain;(boolean);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.config;ResourceHandlerRegistration;true;resourceChain;(boolean,Cache);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.config;ResourceHandlerRegistration;true;resourceChain;(boolean,Cache);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.config;ResourceHandlerRegistration;true;resourceChain;(boolean,Cache);;Argument[1];ReturnValue;taint",
        "org.springframework.web.reactive.config;ResourceHandlerRegistration;true;setCacheControl;(CacheControl);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.config;ResourceHandlerRegistration;true;setCacheControl;(CacheControl);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.config;ResourceHandlerRegistration;true;setCacheControl;(CacheControl);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.config;ResourceHandlerRegistration;true;setMediaTypes;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.config;ResourceHandlerRegistration;true;setUseLastModified;(boolean);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.config;ResourceHandlerRegistry;true;ResourceHandlerRegistry;(ResourceLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.config;ResourceHandlerRegistry;true;addResourceHandler;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.config;ResourceHandlerRegistry;true;addResourceHandler;(String[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.config;ResourceHandlerRegistry;true;setOrder;(int);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.config;ResourceHandlerRegistry;true;setResourceUrlProvider;(ResourceUrlProvider);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.config;UrlBasedViewResolverRegistration;true;UrlBasedViewResolverRegistration;(UrlBasedViewResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.config;UrlBasedViewResolverRegistration;true;prefix;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.config;UrlBasedViewResolverRegistration;true;prefix;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.config;UrlBasedViewResolverRegistration;true;prefix;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.config;UrlBasedViewResolverRegistration;true;suffix;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.config;UrlBasedViewResolverRegistration;true;suffix;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.config;UrlBasedViewResolverRegistration;true;suffix;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.config;UrlBasedViewResolverRegistration;true;viewClass;(Class);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.config;UrlBasedViewResolverRegistration;true;viewNames;(String[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.config;UrlBasedViewResolverRegistration;true;viewNames;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.config;UrlBasedViewResolverRegistration;true;viewNames;(String[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.config;ViewResolverRegistry;true;ViewResolverRegistry;(ApplicationContext);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.config;ViewResolverRegistry;true;defaultViews;(View[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.config;ViewResolverRegistry;true;viewResolver;(ViewResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.config;WebFluxConfigurationSupport;true;getApplicationContext;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.config;WebFluxConfigurationSupport;true;requestMappingHandlerAdapter;(ReactiveAdapterRegistry,ServerCodecConfigurer,FormattingConversionService,Validator);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.config;WebFluxConfigurationSupport;true;requestMappingHandlerAdapter;(ReactiveAdapterRegistry,ServerCodecConfigurer,FormattingConversionService,Validator);;Argument[2];ReturnValue;taint",
        "org.springframework.web.reactive.config;WebFluxConfigurationSupport;true;requestMappingHandlerAdapter;(ReactiveAdapterRegistry,ServerCodecConfigurer,FormattingConversionService,Validator);;Argument[3];ReturnValue;taint",
        "org.springframework.web.reactive.config;WebFluxConfigurationSupport;true;requestMappingHandlerMapping;(RequestedContentTypeResolver);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.config;WebFluxConfigurationSupport;true;responseBodyResultHandler;(ReactiveAdapterRegistry,ServerCodecConfigurer,RequestedContentTypeResolver);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.config;WebFluxConfigurationSupport;true;responseBodyResultHandler;(ReactiveAdapterRegistry,ServerCodecConfigurer,RequestedContentTypeResolver);;Argument[2];ReturnValue;taint",
        "org.springframework.web.reactive.config;WebFluxConfigurationSupport;true;responseEntityResultHandler;(ReactiveAdapterRegistry,ServerCodecConfigurer,RequestedContentTypeResolver);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.config;WebFluxConfigurationSupport;true;responseEntityResultHandler;(ReactiveAdapterRegistry,ServerCodecConfigurer,RequestedContentTypeResolver);;Argument[2];ReturnValue;taint",
        "org.springframework.web.reactive.config;WebFluxConfigurationSupport;true;viewResolutionResultHandler;(ReactiveAdapterRegistry,RequestedContentTypeResolver);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.config;WebFluxConfigurationSupport;true;viewResolutionResultHandler;(ReactiveAdapterRegistry,RequestedContentTypeResolver);;Argument[1];ReturnValue;taint",
        "org.springframework.web.reactive.config;WebFluxConfigurer;true;getValidator;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.config;WebFluxConfigurerComposite;true;addWebFluxConfigurers;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.client.support;ClientResponseWrapper$HeadersWrapper;true;HeadersWrapper;(Headers);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.client.support;ClientResponseWrapper;true;ClientResponseWrapper;(ClientResponse);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.client.support;ClientResponseWrapper;true;response;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.client;ClientRequest$Builder;true;attribute;(String,Object);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.client;ClientRequest$Builder;true;attribute;(String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.client;ClientRequest$Builder;true;attribute;(String,Object);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.client;ClientRequest$Builder;true;attribute;(String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.function.client;ClientRequest$Builder;true;attribute;(String,Object);;Argument[1];ReturnValue;taint",
        "org.springframework.web.reactive.function.client;ClientRequest$Builder;true;attributes;(Consumer);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.client;ClientRequest$Builder;true;body;(BodyInserter);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.client;ClientRequest$Builder;true;body;(BodyInserter);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.client;ClientRequest$Builder;true;body;(BodyInserter);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.client;ClientRequest$Builder;true;body;(Publisher,Class);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.client;ClientRequest$Builder;true;body;(Publisher,ParameterizedTypeReference);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.client;ClientRequest$Builder;true;cookie;(String,String[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.client;ClientRequest$Builder;true;cookie;(String,String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.client;ClientRequest$Builder;true;cookie;(String,String[]);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.client;ClientRequest$Builder;true;cookie;(String,String[]);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.function.client;ClientRequest$Builder;true;cookie;(String,String[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.web.reactive.function.client;ClientRequest$Builder;true;cookies;(Consumer);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.client;ClientRequest$Builder;true;header;(String,String[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.client;ClientRequest$Builder;true;header;(String,String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.client;ClientRequest$Builder;true;header;(String,String[]);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.client;ClientRequest$Builder;true;header;(String,String[]);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.function.client;ClientRequest$Builder;true;header;(String,String[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.web.reactive.function.client;ClientRequest$Builder;true;headers;(Consumer);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.client;ClientRequest$Builder;true;httpRequest;(Consumer);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.client;ClientRequest$Builder;true;httpRequest;(Consumer);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.client;ClientRequest$Builder;true;httpRequest;(Consumer);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.client;ClientRequest$Builder;true;method;(HttpMethod);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.client;ClientRequest$Builder;true;url;(URI);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.client;ClientRequest$Builder;true;url;(URI);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.client;ClientRequest$Builder;true;url;(URI);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.client;ClientRequest;true;attributes;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.client;ClientRequest;true;body;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.client;ClientRequest;true;cookies;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.client;ClientRequest;true;create;(HttpMethod,URI);;Argument[1];ReturnValue;taint",
        "org.springframework.web.reactive.function.client;ClientRequest;true;headers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.client;ClientRequest;true;httpRequest;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.client;ClientRequest;true;logPrefix;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.client;ClientRequest;true;method;(HttpMethod,URI);;Argument[1];ReturnValue;taint",
        "org.springframework.web.reactive.function.client;ClientRequest;true;url;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.client;ClientResponse$Builder;true;body;(Flux);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.client;ClientResponse$Builder;true;body;(Flux);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.client;ClientResponse$Builder;true;body;(Flux);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.client;ClientResponse$Builder;true;body;(Function);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.client;ClientResponse$Builder;true;body;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.client;ClientResponse$Builder;true;cookie;(String,String[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.client;ClientResponse$Builder;true;cookie;(String,String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.client;ClientResponse$Builder;true;cookie;(String,String[]);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.client;ClientResponse$Builder;true;cookies;(Consumer);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.client;ClientResponse$Builder;true;header;(String,String[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.client;ClientResponse$Builder;true;header;(String,String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.client;ClientResponse$Builder;true;header;(String,String[]);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.client;ClientResponse$Builder;true;header;(String,String[]);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.function.client;ClientResponse$Builder;true;header;(String,String[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.web.reactive.function.client;ClientResponse$Builder;true;headers;(Consumer);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.client;ClientResponse$Builder;true;rawStatusCode;(int);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.client;ClientResponse$Builder;true;request;(HttpRequest);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.client;ClientResponse$Builder;true;request;(HttpRequest);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.client;ClientResponse$Builder;true;request;(HttpRequest);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.client;ClientResponse$Builder;true;statusCode;(HttpStatus);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.client;ClientResponse$Headers;true;asHttpHeaders;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.client;ClientResponse$Headers;true;contentType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.client;ClientResponse$Headers;true;header;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.client;ClientResponse;true;body;(BodyExtractor);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.client;ClientResponse;true;bodyToFlux;(Class);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.client;ClientResponse;true;bodyToFlux;(ParameterizedTypeReference);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.client;ClientResponse;true;cookies;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.client;ClientResponse;true;create;(HttpStatus,ExchangeStrategies);;Argument[1];ReturnValue;taint",
        "org.springframework.web.reactive.function.client;ClientResponse;true;create;(int,ExchangeStrategies);;Argument[1];ReturnValue;taint",
        "org.springframework.web.reactive.function.client;ClientResponse;true;from;(ClientResponse);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.client;ClientResponse;true;headers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.client;ClientResponse;true;logPrefix;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.client;ClientResponse;true;strategies;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.client;ExchangeFilterFunctions$Credentials;false;Credentials;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.client;ExchangeFilterFunctions$Credentials;false;Credentials;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.function.client;ExchangeFunctions;true;create;(ClientHttpConnector);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.client;ExchangeFunctions;true;create;(ClientHttpConnector,ExchangeStrategies);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.client;ExchangeFunctions;true;create;(ClientHttpConnector,ExchangeStrategies);;Argument[1];ReturnValue;taint",
        "org.springframework.web.reactive.function.client;ExchangeStrategies$Builder;true;codecs;(Consumer);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.client;ExchangeStrategies;true;messageReaders;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.client;ExchangeStrategies;true;messageWriters;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.client;UnknownHttpStatusCodeException;true;UnknownHttpStatusCodeException;(int,HttpHeaders,byte[],Charset);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.function.client;UnknownHttpStatusCodeException;true;UnknownHttpStatusCodeException;(int,HttpHeaders,byte[],Charset);;Argument[2];Argument[-1];taint",
        "org.springframework.web.reactive.function.client;UnknownHttpStatusCodeException;true;UnknownHttpStatusCodeException;(int,HttpHeaders,byte[],Charset,HttpRequest);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.function.client;UnknownHttpStatusCodeException;true;UnknownHttpStatusCodeException;(int,HttpHeaders,byte[],Charset,HttpRequest);;Argument[2];Argument[-1];taint",
        "org.springframework.web.reactive.function.client;UnknownHttpStatusCodeException;true;UnknownHttpStatusCodeException;(int,HttpHeaders,byte[],Charset,HttpRequest);;Argument[4];Argument[-1];taint",
        "org.springframework.web.reactive.function.client;WebClient$Builder;true;apply;(Consumer);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.client;WebClient$Builder;true;baseUrl;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.client;WebClient$Builder;true;baseUrl;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.client;WebClient$Builder;true;baseUrl;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.client;WebClient$Builder;true;clientConnector;(ClientHttpConnector);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.client;WebClient$Builder;true;clientConnector;(ClientHttpConnector);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.client;WebClient$Builder;true;clientConnector;(ClientHttpConnector);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.client;WebClient$Builder;true;codecs;(Consumer);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.client;WebClient$Builder;true;defaultCookie;(String,String[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.client;WebClient$Builder;true;defaultCookie;(String,String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.client;WebClient$Builder;true;defaultCookie;(String,String[]);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.client;WebClient$Builder;true;defaultCookie;(String,String[]);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.function.client;WebClient$Builder;true;defaultCookie;(String,String[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.web.reactive.function.client;WebClient$Builder;true;defaultCookies;(Consumer);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.client;WebClient$Builder;true;defaultHeader;(String,String[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.client;WebClient$Builder;true;defaultHeader;(String,String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.client;WebClient$Builder;true;defaultHeader;(String,String[]);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.client;WebClient$Builder;true;defaultHeader;(String,String[]);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.function.client;WebClient$Builder;true;defaultHeader;(String,String[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.web.reactive.function.client;WebClient$Builder;true;defaultHeaders;(Consumer);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.client;WebClient$Builder;true;defaultRequest;(Consumer);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.client;WebClient$Builder;true;defaultRequest;(Consumer);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.client;WebClient$Builder;true;defaultRequest;(Consumer);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.client;WebClient$Builder;true;defaultUriVariables;(Map);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.client;WebClient$Builder;true;defaultUriVariables;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.client;WebClient$Builder;true;defaultUriVariables;(Map);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.client;WebClient$Builder;true;exchangeFunction;(ExchangeFunction);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.client;WebClient$Builder;true;exchangeFunction;(ExchangeFunction);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.client;WebClient$Builder;true;exchangeFunction;(ExchangeFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.client;WebClient$Builder;true;exchangeStrategies;(Consumer);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.client;WebClient$Builder;true;exchangeStrategies;(Consumer);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.client;WebClient$Builder;true;exchangeStrategies;(Consumer);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.client;WebClient$Builder;true;exchangeStrategies;(ExchangeStrategies);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.client;WebClient$Builder;true;exchangeStrategies;(ExchangeStrategies);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.client;WebClient$Builder;true;exchangeStrategies;(ExchangeStrategies);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.client;WebClient$Builder;true;filter;(ExchangeFilterFunction);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.client;WebClient$Builder;true;filter;(ExchangeFilterFunction);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.client;WebClient$Builder;true;filter;(ExchangeFilterFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.client;WebClient$Builder;true;filters;(Consumer);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.client;WebClient$Builder;true;uriBuilderFactory;(UriBuilderFactory);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.client;WebClient$Builder;true;uriBuilderFactory;(UriBuilderFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.client;WebClient$Builder;true;uriBuilderFactory;(UriBuilderFactory);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.client;WebClient$RequestBodySpec;true;body;(BodyInserter);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.client;WebClient$RequestBodySpec;true;body;(BodyInserter);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.client;WebClient$RequestBodySpec;true;body;(BodyInserter);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.client;WebClient$RequestBodySpec;true;body;(Object,Class);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.client;WebClient$RequestBodySpec;true;body;(Object,ParameterizedTypeReference);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.client;WebClient$RequestBodySpec;true;body;(Publisher,Class);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.client;WebClient$RequestBodySpec;true;body;(Publisher,ParameterizedTypeReference);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.client;WebClient$RequestBodySpec;true;bodyValue;(Object);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.client;WebClient$RequestBodySpec;true;contentLength;(long);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.client;WebClient$RequestBodySpec;true;contentType;(MediaType);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.client;WebClient$RequestBodySpec;true;syncBody;(Object);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.client;WebClient$ResponseSpec;true;onRawStatus;(IntPredicate,Function);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.client;WebClient$ResponseSpec;true;onRawStatus;(IntPredicate,Function);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.client;WebClient$ResponseSpec;true;onRawStatus;(IntPredicate,Function);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.client;WebClient$ResponseSpec;true;onRawStatus;(IntPredicate,Function);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.function.client;WebClient$ResponseSpec;true;onRawStatus;(IntPredicate,Function);;Argument[1];ReturnValue;taint",
        "org.springframework.web.reactive.function.client;WebClient$ResponseSpec;true;onStatus;(Predicate,Function);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.client;WebClient$ResponseSpec;true;onStatus;(Predicate,Function);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.function.client;WebClient$ResponseSpec;true;onStatus;(Predicate,Function);;Argument[1];ReturnValue;taint",
        "org.springframework.web.reactive.function.client;WebClient;true;create;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.client;WebClientRequestException;true;WebClientRequestException;(Throwable,HttpMethod,URI,HttpHeaders);;Argument[2];Argument[-1];taint",
        "org.springframework.web.reactive.function.client;WebClientRequestException;true;WebClientRequestException;(Throwable,HttpMethod,URI,HttpHeaders);;Argument[3];Argument[-1];taint",
        "org.springframework.web.reactive.function.client;WebClientRequestException;true;getHeaders;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.client;WebClientRequestException;true;getUri;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.client;WebClientResponseException;true;WebClientResponseException;(String,int,String,HttpHeaders,byte[],Charset);;Argument[2];Argument[-1];taint",
        "org.springframework.web.reactive.function.client;WebClientResponseException;true;WebClientResponseException;(String,int,String,HttpHeaders,byte[],Charset);;Argument[3];Argument[-1];taint",
        "org.springframework.web.reactive.function.client;WebClientResponseException;true;WebClientResponseException;(String,int,String,HttpHeaders,byte[],Charset);;Argument[4];Argument[-1];taint",
        "org.springframework.web.reactive.function.client;WebClientResponseException;true;WebClientResponseException;(String,int,String,HttpHeaders,byte[],Charset,HttpRequest);;Argument[2];Argument[-1];taint",
        "org.springframework.web.reactive.function.client;WebClientResponseException;true;WebClientResponseException;(String,int,String,HttpHeaders,byte[],Charset,HttpRequest);;Argument[3];Argument[-1];taint",
        "org.springframework.web.reactive.function.client;WebClientResponseException;true;WebClientResponseException;(String,int,String,HttpHeaders,byte[],Charset,HttpRequest);;Argument[4];Argument[-1];taint",
        "org.springframework.web.reactive.function.client;WebClientResponseException;true;WebClientResponseException;(String,int,String,HttpHeaders,byte[],Charset,HttpRequest);;Argument[6];Argument[-1];taint",
        "org.springframework.web.reactive.function.client;WebClientResponseException;true;WebClientResponseException;(int,String,HttpHeaders,byte[],Charset);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.function.client;WebClientResponseException;true;WebClientResponseException;(int,String,HttpHeaders,byte[],Charset);;Argument[2];Argument[-1];taint",
        "org.springframework.web.reactive.function.client;WebClientResponseException;true;WebClientResponseException;(int,String,HttpHeaders,byte[],Charset);;Argument[3];Argument[-1];taint",
        "org.springframework.web.reactive.function.client;WebClientResponseException;true;WebClientResponseException;(int,String,HttpHeaders,byte[],Charset,HttpRequest);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.function.client;WebClientResponseException;true;WebClientResponseException;(int,String,HttpHeaders,byte[],Charset,HttpRequest);;Argument[2];Argument[-1];taint",
        "org.springframework.web.reactive.function.client;WebClientResponseException;true;WebClientResponseException;(int,String,HttpHeaders,byte[],Charset,HttpRequest);;Argument[3];Argument[-1];taint",
        "org.springframework.web.reactive.function.client;WebClientResponseException;true;WebClientResponseException;(int,String,HttpHeaders,byte[],Charset,HttpRequest);;Argument[5];Argument[-1];taint",
        "org.springframework.web.reactive.function.client;WebClientResponseException;true;create;(int,String,HttpHeaders,byte[],Charset);;Argument[1];ReturnValue;taint",
        "org.springframework.web.reactive.function.client;WebClientResponseException;true;create;(int,String,HttpHeaders,byte[],Charset);;Argument[3];ReturnValue;taint",
        "org.springframework.web.reactive.function.client;WebClientResponseException;true;create;(int,String,HttpHeaders,byte[],Charset);;Element of Argument[2];ReturnValue;taint",
        "org.springframework.web.reactive.function.client;WebClientResponseException;true;create;(int,String,HttpHeaders,byte[],Charset,HttpRequest);;Argument[1];ReturnValue;taint",
        "org.springframework.web.reactive.function.client;WebClientResponseException;true;create;(int,String,HttpHeaders,byte[],Charset,HttpRequest);;Argument[3];ReturnValue;taint",
        "org.springframework.web.reactive.function.client;WebClientResponseException;true;create;(int,String,HttpHeaders,byte[],Charset,HttpRequest);;Argument[5];ReturnValue;taint",
        "org.springframework.web.reactive.function.client;WebClientResponseException;true;create;(int,String,HttpHeaders,byte[],Charset,HttpRequest);;Element of Argument[2];ReturnValue;taint",
        "org.springframework.web.reactive.function.client;WebClientResponseException;true;getHeaders;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.client;WebClientResponseException;true;getRequest;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.client;WebClientResponseException;true;getResponseBodyAsByteArray;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.client;WebClientResponseException;true;getResponseBodyAsString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.client;WebClientResponseException;true;getResponseBodyAsString;(Charset);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.client;WebClientResponseException;true;getStatusText;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server.support;RouterFunctionMapping;true;RouterFunctionMapping;(RouterFunction);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.server.support;RouterFunctionMapping;true;getRouterFunction;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server.support;RouterFunctionMapping;true;setMessageReaders;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.server.support;ServerRequestWrapper$HeadersWrapper;true;HeadersWrapper;(Headers);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.server.support;ServerRequestWrapper;true;ServerRequestWrapper;(ServerRequest);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.server.support;ServerRequestWrapper;true;request;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server.support;ServerResponseResultHandler;true;setMessageWriters;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.server.support;ServerResponseResultHandler;true;setViewResolvers;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;ChangePathPatternParserVisitor$Target;true;changeParser;(PathPatternParser);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;EntityResponse;true;fromObject;(Object);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;EntityResponse;true;fromProducer;(Object,Class);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;EntityResponse;true;fromProducer;(Object,ParameterizedTypeReference);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;EntityResponse;true;fromPublisher;(Publisher,Class);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;EntityResponse;true;fromPublisher;(Publisher,ParameterizedTypeReference);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;HandlerStrategies$Builder;true;codecs;(Consumer);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.server;HandlerStrategies$Builder;true;exceptionHandler;(WebExceptionHandler);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.server;HandlerStrategies$Builder;true;exceptionHandler;(WebExceptionHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;HandlerStrategies$Builder;true;exceptionHandler;(WebExceptionHandler);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;HandlerStrategies$Builder;true;localeContextResolver;(LocaleContextResolver);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.server;HandlerStrategies$Builder;true;localeContextResolver;(LocaleContextResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;HandlerStrategies$Builder;true;localeContextResolver;(LocaleContextResolver);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;HandlerStrategies$Builder;true;viewResolver;(ViewResolver);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.server;HandlerStrategies$Builder;true;viewResolver;(ViewResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;HandlerStrategies$Builder;true;viewResolver;(ViewResolver);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;HandlerStrategies$Builder;true;webFilter;(WebFilter);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.server;HandlerStrategies$Builder;true;webFilter;(WebFilter);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;HandlerStrategies$Builder;true;webFilter;(WebFilter);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;HandlerStrategies;true;exceptionHandlers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;HandlerStrategies;true;localeContextResolver;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;HandlerStrategies;true;messageReaders;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;HandlerStrategies;true;messageWriters;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;HandlerStrategies;true;viewResolvers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;HandlerStrategies;true;webFilters;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RenderingResponse$Builder;true;cookie;(ResponseCookie);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.server;RenderingResponse$Builder;true;cookie;(ResponseCookie);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RenderingResponse$Builder;true;cookie;(ResponseCookie);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RenderingResponse$Builder;true;cookies;(Consumer);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.server;RenderingResponse$Builder;true;header;(String,String[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.server;RenderingResponse$Builder;true;header;(String,String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RenderingResponse$Builder;true;header;(String,String[]);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RenderingResponse$Builder;true;header;(String,String[]);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RenderingResponse$Builder;true;header;(String,String[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RenderingResponse$Builder;true;headers;(HttpHeaders);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.server;RenderingResponse$Builder;true;headers;(HttpHeaders);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RenderingResponse$Builder;true;headers;(HttpHeaders);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RenderingResponse$Builder;true;modelAttribute;(Object);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.server;RenderingResponse$Builder;true;modelAttribute;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RenderingResponse$Builder;true;modelAttribute;(Object);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RenderingResponse$Builder;true;modelAttribute;(String,Object);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.server;RenderingResponse$Builder;true;modelAttribute;(String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RenderingResponse$Builder;true;modelAttribute;(String,Object);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RenderingResponse$Builder;true;modelAttribute;(String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RenderingResponse$Builder;true;modelAttribute;(String,Object);;Argument[1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RenderingResponse$Builder;true;modelAttributes;(Collection);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.server;RenderingResponse$Builder;true;modelAttributes;(Map);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.server;RenderingResponse$Builder;true;modelAttributes;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RenderingResponse$Builder;true;modelAttributes;(Map);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RenderingResponse$Builder;true;modelAttributes;(Object[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.server;RenderingResponse$Builder;true;status;(HttpStatus);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.server;RenderingResponse$Builder;true;status;(int);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.server;RenderingResponse;true;create;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RenderingResponse;true;model;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RenderingResponse;true;name;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RequestPredicate;true;and;(RequestPredicate);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RequestPredicate;true;nest;(ServerRequest);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RequestPredicate;true;or;(RequestPredicate);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RequestPredicates$Visitor;true;header;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RequestPredicates$Visitor;true;header;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RequestPredicates$Visitor;true;method;(Set);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RequestPredicates$Visitor;true;path;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RequestPredicates$Visitor;true;pathExtension;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RequestPredicates$Visitor;true;queryParam;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RequestPredicates$Visitor;true;queryParam;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RequestPredicates$Visitor;true;unknown;(RequestPredicate);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RequestPredicates;true;DELETE;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RequestPredicates;true;GET;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RequestPredicates;true;HEAD;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RequestPredicates;true;OPTIONS;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RequestPredicates;true;PATCH;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RequestPredicates;true;POST;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RequestPredicates;true;PUT;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RequestPredicates;true;accept;(MediaType[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RequestPredicates;true;contentType;(MediaType[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RequestPredicates;true;headers;(Predicate);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RequestPredicates;true;path;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RequestPredicates;true;pathExtension;(Predicate);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RequestPredicates;true;pathExtension;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RequestPredicates;true;queryParam;(String,Predicate);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RequestPredicates;true;queryParam;(String,Predicate);;Argument[1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RequestPredicates;true;queryParam;(String,String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RequestPredicates;true;queryParam;(String,String);;Argument[1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunction;true;and;(RouterFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunction;true;andNest;(RequestPredicate,RouterFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunction;true;andNest;(RequestPredicate,RouterFunction);;Argument[1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunction;true;andOther;(RouterFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunction;true;andRoute;(RequestPredicate,HandlerFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunction;true;andRoute;(RequestPredicate,HandlerFunction);;Argument[1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunction;true;filter;(HandlerFilterFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunction;true;withAttribute;(String,Object);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunction;true;withAttribute;(String,Object);;Argument[1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;DELETE;(HandlerFunction);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;DELETE;(HandlerFunction);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;DELETE;(HandlerFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;DELETE;(RequestPredicate,HandlerFunction);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;DELETE;(RequestPredicate,HandlerFunction);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;DELETE;(RequestPredicate,HandlerFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;DELETE;(RequestPredicate,HandlerFunction);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;DELETE;(RequestPredicate,HandlerFunction);;Argument[1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;DELETE;(String,HandlerFunction);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;DELETE;(String,HandlerFunction);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;DELETE;(String,HandlerFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;DELETE;(String,HandlerFunction);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;DELETE;(String,HandlerFunction);;Argument[1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;DELETE;(String,RequestPredicate,HandlerFunction);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;DELETE;(String,RequestPredicate,HandlerFunction);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;DELETE;(String,RequestPredicate,HandlerFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;DELETE;(String,RequestPredicate,HandlerFunction);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;DELETE;(String,RequestPredicate,HandlerFunction);;Argument[1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;DELETE;(String,RequestPredicate,HandlerFunction);;Argument[2];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;DELETE;(String,RequestPredicate,HandlerFunction);;Argument[2];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;GET;(HandlerFunction);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;GET;(HandlerFunction);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;GET;(HandlerFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;GET;(RequestPredicate,HandlerFunction);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;GET;(RequestPredicate,HandlerFunction);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;GET;(RequestPredicate,HandlerFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;GET;(RequestPredicate,HandlerFunction);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;GET;(RequestPredicate,HandlerFunction);;Argument[1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;GET;(String,HandlerFunction);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;GET;(String,HandlerFunction);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;GET;(String,HandlerFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;GET;(String,HandlerFunction);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;GET;(String,HandlerFunction);;Argument[1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;GET;(String,RequestPredicate,HandlerFunction);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;GET;(String,RequestPredicate,HandlerFunction);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;GET;(String,RequestPredicate,HandlerFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;GET;(String,RequestPredicate,HandlerFunction);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;GET;(String,RequestPredicate,HandlerFunction);;Argument[1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;GET;(String,RequestPredicate,HandlerFunction);;Argument[2];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;GET;(String,RequestPredicate,HandlerFunction);;Argument[2];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;HEAD;(HandlerFunction);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;HEAD;(HandlerFunction);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;HEAD;(HandlerFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;HEAD;(RequestPredicate,HandlerFunction);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;HEAD;(RequestPredicate,HandlerFunction);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;HEAD;(RequestPredicate,HandlerFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;HEAD;(RequestPredicate,HandlerFunction);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;HEAD;(RequestPredicate,HandlerFunction);;Argument[1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;HEAD;(String,HandlerFunction);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;HEAD;(String,HandlerFunction);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;HEAD;(String,HandlerFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;HEAD;(String,HandlerFunction);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;HEAD;(String,HandlerFunction);;Argument[1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;HEAD;(String,RequestPredicate,HandlerFunction);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;HEAD;(String,RequestPredicate,HandlerFunction);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;HEAD;(String,RequestPredicate,HandlerFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;HEAD;(String,RequestPredicate,HandlerFunction);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;HEAD;(String,RequestPredicate,HandlerFunction);;Argument[1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;HEAD;(String,RequestPredicate,HandlerFunction);;Argument[2];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;HEAD;(String,RequestPredicate,HandlerFunction);;Argument[2];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;OPTIONS;(HandlerFunction);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;OPTIONS;(HandlerFunction);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;OPTIONS;(HandlerFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;OPTIONS;(RequestPredicate,HandlerFunction);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;OPTIONS;(RequestPredicate,HandlerFunction);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;OPTIONS;(RequestPredicate,HandlerFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;OPTIONS;(RequestPredicate,HandlerFunction);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;OPTIONS;(RequestPredicate,HandlerFunction);;Argument[1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;OPTIONS;(String,HandlerFunction);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;OPTIONS;(String,HandlerFunction);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;OPTIONS;(String,HandlerFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;OPTIONS;(String,HandlerFunction);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;OPTIONS;(String,HandlerFunction);;Argument[1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;OPTIONS;(String,RequestPredicate,HandlerFunction);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;OPTIONS;(String,RequestPredicate,HandlerFunction);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;OPTIONS;(String,RequestPredicate,HandlerFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;OPTIONS;(String,RequestPredicate,HandlerFunction);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;OPTIONS;(String,RequestPredicate,HandlerFunction);;Argument[1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;OPTIONS;(String,RequestPredicate,HandlerFunction);;Argument[2];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;OPTIONS;(String,RequestPredicate,HandlerFunction);;Argument[2];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;PATCH;(HandlerFunction);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;PATCH;(HandlerFunction);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;PATCH;(HandlerFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;PATCH;(RequestPredicate,HandlerFunction);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;PATCH;(RequestPredicate,HandlerFunction);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;PATCH;(RequestPredicate,HandlerFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;PATCH;(RequestPredicate,HandlerFunction);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;PATCH;(RequestPredicate,HandlerFunction);;Argument[1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;PATCH;(String,HandlerFunction);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;PATCH;(String,HandlerFunction);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;PATCH;(String,HandlerFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;PATCH;(String,HandlerFunction);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;PATCH;(String,HandlerFunction);;Argument[1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;PATCH;(String,RequestPredicate,HandlerFunction);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;PATCH;(String,RequestPredicate,HandlerFunction);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;PATCH;(String,RequestPredicate,HandlerFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;PATCH;(String,RequestPredicate,HandlerFunction);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;PATCH;(String,RequestPredicate,HandlerFunction);;Argument[1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;PATCH;(String,RequestPredicate,HandlerFunction);;Argument[2];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;PATCH;(String,RequestPredicate,HandlerFunction);;Argument[2];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;POST;(HandlerFunction);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;POST;(HandlerFunction);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;POST;(HandlerFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;POST;(RequestPredicate,HandlerFunction);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;POST;(RequestPredicate,HandlerFunction);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;POST;(RequestPredicate,HandlerFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;POST;(RequestPredicate,HandlerFunction);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;POST;(RequestPredicate,HandlerFunction);;Argument[1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;POST;(String,HandlerFunction);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;POST;(String,HandlerFunction);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;POST;(String,HandlerFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;POST;(String,HandlerFunction);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;POST;(String,HandlerFunction);;Argument[1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;POST;(String,RequestPredicate,HandlerFunction);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;POST;(String,RequestPredicate,HandlerFunction);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;POST;(String,RequestPredicate,HandlerFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;POST;(String,RequestPredicate,HandlerFunction);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;POST;(String,RequestPredicate,HandlerFunction);;Argument[1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;POST;(String,RequestPredicate,HandlerFunction);;Argument[2];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;POST;(String,RequestPredicate,HandlerFunction);;Argument[2];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;PUT;(HandlerFunction);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;PUT;(HandlerFunction);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;PUT;(HandlerFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;PUT;(RequestPredicate,HandlerFunction);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;PUT;(RequestPredicate,HandlerFunction);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;PUT;(RequestPredicate,HandlerFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;PUT;(RequestPredicate,HandlerFunction);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;PUT;(RequestPredicate,HandlerFunction);;Argument[1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;PUT;(String,HandlerFunction);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;PUT;(String,HandlerFunction);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;PUT;(String,HandlerFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;PUT;(String,HandlerFunction);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;PUT;(String,HandlerFunction);;Argument[1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;PUT;(String,RequestPredicate,HandlerFunction);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;PUT;(String,RequestPredicate,HandlerFunction);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;PUT;(String,RequestPredicate,HandlerFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;PUT;(String,RequestPredicate,HandlerFunction);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;PUT;(String,RequestPredicate,HandlerFunction);;Argument[1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;PUT;(String,RequestPredicate,HandlerFunction);;Argument[2];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;PUT;(String,RequestPredicate,HandlerFunction);;Argument[2];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;add;(RouterFunction);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;add;(RouterFunction);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;add;(RouterFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;after;(BiFunction);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;before;(Function);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;filter;(HandlerFilterFunction);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;filter;(HandlerFilterFunction);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;filter;(HandlerFilterFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;nest;(RequestPredicate,Consumer);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;nest;(RequestPredicate,Consumer);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;nest;(RequestPredicate,Consumer);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;nest;(RequestPredicate,Supplier);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;nest;(RequestPredicate,Supplier);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;nest;(RequestPredicate,Supplier);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;onError;(Class,BiFunction);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;onError;(Predicate,BiFunction);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;path;(String,Consumer);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;path;(String,Consumer);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;path;(String,Consumer);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;path;(String,Supplier);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;path;(String,Supplier);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;path;(String,Supplier);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;resources;(Function);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;resources;(Function);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;resources;(Function);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;resources;(String,Resource);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;resources;(String,Resource);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;resources;(String,Resource);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;resources;(String,Resource);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;resources;(String,Resource);;Argument[1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;route;(RequestPredicate,HandlerFunction);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;route;(RequestPredicate,HandlerFunction);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;route;(RequestPredicate,HandlerFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;route;(RequestPredicate,HandlerFunction);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;route;(RequestPredicate,HandlerFunction);;Argument[1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;withAttribute;(String,Object);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;withAttribute;(String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;withAttribute;(String,Object);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;withAttribute;(String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;withAttribute;(String,Object);;Argument[1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Builder;true;withAttributes;(Consumer);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.server;RouterFunctions$Visitor;true;resources;(Function);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Visitor;true;route;(RequestPredicate,HandlerFunction);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Visitor;true;route;(RequestPredicate,HandlerFunction);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Visitor;true;startNested;(RequestPredicate);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RouterFunctions$Visitor;true;unknown;(RouterFunction);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;RouterFunctions;true;changeParser;(RouterFunction,PathPatternParser);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions;true;nest;(RequestPredicate,RouterFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions;true;nest;(RequestPredicate,RouterFunction);;Argument[1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions;true;resourceLookupFunction;(String,Resource);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions;true;resourceLookupFunction;(String,Resource);;Argument[1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions;true;resources;(Function);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions;true;resources;(String,Resource);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions;true;resources;(String,Resource);;Argument[1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions;true;route;(RequestPredicate,HandlerFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions;true;route;(RequestPredicate,HandlerFunction);;Argument[1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions;true;toHttpHandler;(RouterFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions;true;toHttpHandler;(RouterFunction,HandlerStrategies);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions;true;toHttpHandler;(RouterFunction,HandlerStrategies);;Argument[1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions;true;toWebHandler;(RouterFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions;true;toWebHandler;(RouterFunction,HandlerStrategies);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;RouterFunctions;true;toWebHandler;(RouterFunction,HandlerStrategies);;Argument[1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;ServerRequest$Builder;true;attribute;(String,Object);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.server;ServerRequest$Builder;true;attribute;(String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;ServerRequest$Builder;true;attribute;(String,Object);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;ServerRequest$Builder;true;attribute;(String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;ServerRequest$Builder;true;attribute;(String,Object);;Argument[1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;ServerRequest$Builder;true;attributes;(Consumer);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.server;ServerRequest$Builder;true;body;(Flux);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.server;ServerRequest$Builder;true;body;(Flux);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;ServerRequest$Builder;true;body;(Flux);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;ServerRequest$Builder;true;body;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.server;ServerRequest$Builder;true;cookie;(String,String[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.server;ServerRequest$Builder;true;cookie;(String,String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;ServerRequest$Builder;true;cookie;(String,String[]);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;ServerRequest$Builder;true;cookie;(String,String[]);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;ServerRequest$Builder;true;cookie;(String,String[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;ServerRequest$Builder;true;cookies;(Consumer);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.server;ServerRequest$Builder;true;header;(String,String[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.server;ServerRequest$Builder;true;header;(String,String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;ServerRequest$Builder;true;header;(String,String[]);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;ServerRequest$Builder;true;header;(String,String[]);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;ServerRequest$Builder;true;header;(String,String[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;ServerRequest$Builder;true;headers;(Consumer);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.server;ServerRequest$Builder;true;method;(HttpMethod);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.server;ServerRequest$Builder;true;uri;(URI);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.server;ServerRequest$Builder;true;uri;(URI);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;ServerRequest$Builder;true;uri;(URI);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;ServerRequest$Headers;true;accept;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;ServerRequest$Headers;true;asHttpHeaders;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;ServerRequest$Headers;true;contentType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;ServerRequest$Headers;true;firstHeader;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;ServerRequest$Headers;true;header;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;ServerRequest$Headers;true;host;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;ServerRequest;true;attribute;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;ServerRequest;true;attributes;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;ServerRequest;true;body;(BodyExtractor);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;ServerRequest;true;body;(BodyExtractor,Map);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;ServerRequest;true;bodyToFlux;(Class);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;ServerRequest;true;bodyToFlux;(ParameterizedTypeReference);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;ServerRequest;true;bodyToMono;(Class);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;ServerRequest;true;bodyToMono;(ParameterizedTypeReference);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;ServerRequest;true;cookies;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;ServerRequest;true;create;(ServerWebExchange,List);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;ServerRequest;true;create;(ServerWebExchange,List);;Element of Argument[1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;ServerRequest;true;exchange;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;ServerRequest;true;formData;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;ServerRequest;true;headers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;ServerRequest;true;localAddress;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;ServerRequest;true;messageReaders;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;ServerRequest;true;methodName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;ServerRequest;true;multipartData;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;ServerRequest;true;path;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;ServerRequest;true;pathContainer;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;ServerRequest;true;pathVariable;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;ServerRequest;true;pathVariables;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;ServerRequest;true;principal;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;ServerRequest;true;queryParam;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;ServerRequest;true;queryParams;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;ServerRequest;true;remoteAddress;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;ServerRequest;true;requestPath;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;ServerRequest;true;session;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;ServerRequest;true;uri;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;ServerRequest;true;uriBuilder;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;ServerResponse$BodyBuilder;true;contentLength;(long);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.server;ServerResponse$BodyBuilder;true;contentType;(MediaType);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.server;ServerResponse$BodyBuilder;true;hint;(String,Object);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.server;ServerResponse$BodyBuilder;true;hint;(String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;ServerResponse$BodyBuilder;true;hint;(String,Object);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;ServerResponse$BodyBuilder;true;hint;(String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.function.server;ServerResponse$BodyBuilder;true;hint;(String,Object);;Argument[1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;ServerResponse$BodyBuilder;true;hints;(Consumer);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function.server;ServerResponse$Context;true;messageWriters;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;ServerResponse$Context;true;viewResolvers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;ServerResponse;true;cookies;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function.server;ServerResponse;true;headers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function;BodyInserters$MultipartInserter;true;withPublisher;(String,Publisher,Class);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function;BodyInserters$MultipartInserter;true;withPublisher;(String,Publisher,Class);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function;BodyInserters$MultipartInserter;true;withPublisher;(String,Publisher,Class);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function;BodyInserters$MultipartInserter;true;withPublisher;(String,Publisher,Class);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.function;BodyInserters$MultipartInserter;true;withPublisher;(String,Publisher,Class);;Argument[1];ReturnValue;taint",
        "org.springframework.web.reactive.function;BodyInserters$MultipartInserter;true;withPublisher;(String,Publisher,ParameterizedTypeReference);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.function;BodyInserters$MultipartInserter;true;withPublisher;(String,Publisher,ParameterizedTypeReference);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function;BodyInserters$MultipartInserter;true;withPublisher;(String,Publisher,ParameterizedTypeReference);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function;BodyInserters$MultipartInserter;true;withPublisher;(String,Publisher,ParameterizedTypeReference);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.function;BodyInserters$MultipartInserter;true;withPublisher;(String,Publisher,ParameterizedTypeReference);;Argument[1];ReturnValue;taint",
        "org.springframework.web.reactive.function;BodyInserters;true;fromFormData;(MultiValueMap);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function;BodyInserters;true;fromFormData;(String,String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function;BodyInserters;true;fromFormData;(String,String);;Argument[1];ReturnValue;taint",
        "org.springframework.web.reactive.function;BodyInserters;true;fromMultipartAsyncData;(String,Publisher,Class);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function;BodyInserters;true;fromMultipartAsyncData;(String,Publisher,Class);;Argument[1];ReturnValue;taint",
        "org.springframework.web.reactive.function;BodyInserters;true;fromMultipartAsyncData;(String,Publisher,ParameterizedTypeReference);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function;BodyInserters;true;fromMultipartAsyncData;(String,Publisher,ParameterizedTypeReference);;Argument[1];ReturnValue;taint",
        "org.springframework.web.reactive.function;BodyInserters;true;fromMultipartData;(String,Object);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.function;BodyInserters;true;fromMultipartData;(String,Object);;Argument[1];ReturnValue;taint",
        "org.springframework.web.reactive.function;UnsupportedMediaTypeException;true;UnsupportedMediaTypeException;(MediaType,List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function;UnsupportedMediaTypeException;true;UnsupportedMediaTypeException;(MediaType,List);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.function;UnsupportedMediaTypeException;true;UnsupportedMediaTypeException;(MediaType,List,ResolvableType);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.function;UnsupportedMediaTypeException;true;UnsupportedMediaTypeException;(MediaType,List,ResolvableType);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.function;UnsupportedMediaTypeException;true;UnsupportedMediaTypeException;(MediaType,List,ResolvableType);;Argument[2];Argument[-1];taint",
        "org.springframework.web.reactive.function;UnsupportedMediaTypeException;true;getBodyType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function;UnsupportedMediaTypeException;true;getContentType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.function;UnsupportedMediaTypeException;true;getSupportedMediaTypes;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.handler;AbstractHandlerMapping;true;getCorsProcessor;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.handler;AbstractHandlerMapping;true;getPathPatternParser;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.handler;AbstractHandlerMapping;true;setCorsConfigurationSource;(CorsConfigurationSource);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.handler;AbstractHandlerMapping;true;setCorsProcessor;(CorsProcessor);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.handler;AbstractUrlHandlerMapping;true;getHandlerMap;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.handler;AbstractUrlHandlerMapping;true;setHandlerPredicate;(BiPredicate);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.handler;SimpleUrlHandlerMapping;true;SimpleUrlHandlerMapping;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.handler;SimpleUrlHandlerMapping;true;SimpleUrlHandlerMapping;(Map,int);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.handler;SimpleUrlHandlerMapping;true;getUrlMap;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.handler;SimpleUrlHandlerMapping;true;setMappings;(Properties);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.handler;SimpleUrlHandlerMapping;true;setUrlMap;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.resource;AppCacheManifestTransformer;true;AppCacheManifestTransformer;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.resource;CachingResourceResolver;true;CachingResourceResolver;(Cache);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.resource;CachingResourceResolver;true;CachingResourceResolver;(CacheManager,String);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.resource;CachingResourceResolver;true;getCache;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.resource;CachingResourceResolver;true;getContentCodings;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.resource;CachingResourceResolver;true;setContentCodings;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.resource;CachingResourceTransformer;true;CachingResourceTransformer;(Cache);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.resource;CachingResourceTransformer;true;CachingResourceTransformer;(CacheManager,String);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.resource;CachingResourceTransformer;true;getCache;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.resource;EncodedResourceResolver;true;getContentCodings;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.resource;EncodedResourceResolver;true;getExtensions;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.resource;EncodedResourceResolver;true;registerExtension;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.resource;EncodedResourceResolver;true;registerExtension;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.resource;EncodedResourceResolver;true;setContentCodings;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.resource;FixedVersionStrategy;true;FixedVersionStrategy;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.resource;HttpResource;true;getResponseHeaders;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.resource;PathResourceResolver;true;getAllowedLocations;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.resource;PathResourceResolver;true;setAllowedLocations;(Resource[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.resource;ResourceTransformerChain;true;getResolverChain;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.resource;ResourceTransformerSupport;true;getResourceUrlProvider;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.resource;ResourceTransformerSupport;true;setResourceUrlProvider;(ResourceUrlProvider);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.resource;ResourceUrlProvider;true;getHandlerMap;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.resource;ResourceWebHandler;true;getCacheControl;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.resource;ResourceWebHandler;true;getLocationValues;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.resource;ResourceWebHandler;true;getLocations;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.resource;ResourceWebHandler;true;getMediaTypes;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.resource;ResourceWebHandler;true;getResourceHttpMessageWriter;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.resource;ResourceWebHandler;true;getResourceResolvers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.resource;ResourceWebHandler;true;getResourceTransformers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.resource;ResourceWebHandler;true;setCacheControl;(CacheControl);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.resource;ResourceWebHandler;true;setLocationValues;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.resource;ResourceWebHandler;true;setLocations;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.resource;ResourceWebHandler;true;setResourceHttpMessageWriter;(ResourceHttpMessageWriter);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.resource;ResourceWebHandler;true;setResourceLoader;(ResourceLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.resource;ResourceWebHandler;true;setResourceResolvers;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.resource;ResourceWebHandler;true;setResourceTransformers;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.resource;TransformedResource;true;TransformedResource;(Resource,byte[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.resource;TransformedResource;true;TransformedResource;(Resource,byte[]);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.resource;VersionResourceResolver;true;addContentVersionStrategy;(String[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.resource;VersionResourceResolver;true;addContentVersionStrategy;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.resource;VersionResourceResolver;true;addContentVersionStrategy;(String[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.resource;VersionResourceResolver;true;addFixedVersionStrategy;(String,String[]);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.resource;VersionResourceResolver;true;addFixedVersionStrategy;(String,String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.resource;VersionResourceResolver;true;addFixedVersionStrategy;(String,String[]);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.resource;VersionResourceResolver;true;addFixedVersionStrategy;(String,String[]);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.resource;VersionResourceResolver;true;addFixedVersionStrategy;(String,String[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.web.reactive.resource;VersionResourceResolver;true;addVersionStrategy;(VersionStrategy,String[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.resource;VersionResourceResolver;true;addVersionStrategy;(VersionStrategy,String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.resource;VersionResourceResolver;true;addVersionStrategy;(VersionStrategy,String[]);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.resource;VersionResourceResolver;true;addVersionStrategy;(VersionStrategy,String[]);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.resource;VersionResourceResolver;true;addVersionStrategy;(VersionStrategy,String[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.web.reactive.resource;VersionResourceResolver;true;getStrategyMap;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.resource;VersionResourceResolver;true;setStrategyMap;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.resource;VersionStrategy;true;addVersion;(String,String);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.resource;VersionStrategy;true;addVersion;(String,String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.resource;VersionStrategy;true;addVersion;(String,String);;Argument[1];ReturnValue;taint",
        "org.springframework.web.reactive.resource;VersionStrategy;true;extractVersion;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.resource;VersionStrategy;true;getResourceVersion;(Resource);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.resource;VersionStrategy;true;removeVersion;(String,String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.resource;WebJarsResourceResolver;true;WebJarsResourceResolver;(WebJarAssetLocator);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.condition;CompositeRequestCondition;true;CompositeRequestCondition;(RequestCondition[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.condition;CompositeRequestCondition;true;getConditions;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.condition;ConsumesRequestCondition;false;getConsumableMediaTypes;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.condition;ConsumesRequestCondition;false;getExpressions;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.condition;HeadersRequestCondition;false;HeadersRequestCondition;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.condition;HeadersRequestCondition;false;getExpressions;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.condition;MediaTypeExpression;true;getMediaType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.condition;ParamsRequestCondition;false;ParamsRequestCondition;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.condition;ParamsRequestCondition;false;getExpressions;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.condition;PatternsRequestCondition;false;PatternsRequestCondition;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.condition;PatternsRequestCondition;false;PatternsRequestCondition;(PathPattern[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.condition;PatternsRequestCondition;false;getDirectPaths;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.condition;PatternsRequestCondition;false;getPatterns;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.condition;ProducesRequestCondition;false;ProducesRequestCondition;(String[],String[],RequestedContentTypeResolver);;Argument[2];Argument[-1];taint",
        "org.springframework.web.reactive.result.condition;ProducesRequestCondition;false;getExpressions;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.condition;ProducesRequestCondition;false;getProducibleMediaTypes;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.condition;RequestConditionHolder;false;RequestConditionHolder;(RequestCondition);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.condition;RequestConditionHolder;false;getCondition;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.condition;RequestMethodsRequestCondition;false;getMethods;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.method.annotation;AbstractMessageReaderArgumentResolver;true;getMessageReaders;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.method.annotation;AbstractMessageWriterResultHandler;true;getMessageWriters;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.method.annotation;AbstractNamedValueArgumentResolver;true;AbstractNamedValueArgumentResolver;(ConfigurableBeanFactory,ReactiveAdapterRegistry);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.method.annotation;AbstractNamedValueArgumentResolver;true;AbstractNamedValueArgumentResolver;(ConfigurableBeanFactory,ReactiveAdapterRegistry);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.result.method.annotation;ArgumentResolverConfigurer;true;addCustomResolver;(HandlerMethodArgumentResolver[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.method.annotation;CookieValueMethodArgumentResolver;true;CookieValueMethodArgumentResolver;(ConfigurableBeanFactory,ReactiveAdapterRegistry);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.method.annotation;CookieValueMethodArgumentResolver;true;CookieValueMethodArgumentResolver;(ConfigurableBeanFactory,ReactiveAdapterRegistry);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.result.method.annotation;ErrorsMethodArgumentResolver;true;ErrorsMethodArgumentResolver;(ReactiveAdapterRegistry);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.method.annotation;ExpressionValueMethodArgumentResolver;true;ExpressionValueMethodArgumentResolver;(ConfigurableBeanFactory,ReactiveAdapterRegistry);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.method.annotation;ExpressionValueMethodArgumentResolver;true;ExpressionValueMethodArgumentResolver;(ConfigurableBeanFactory,ReactiveAdapterRegistry);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.result.method.annotation;HttpEntityMethodArgumentResolver;true;HttpEntityMethodArgumentResolver;(List,ReactiveAdapterRegistry);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.method.annotation;HttpEntityMethodArgumentResolver;true;HttpEntityMethodArgumentResolver;(List,ReactiveAdapterRegistry);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.result.method.annotation;MatrixVariableMapMethodArgumentResolver;true;MatrixVariableMapMethodArgumentResolver;(ReactiveAdapterRegistry);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.method.annotation;MatrixVariableMethodArgumentResolver;true;MatrixVariableMethodArgumentResolver;(ConfigurableBeanFactory,ReactiveAdapterRegistry);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.method.annotation;MatrixVariableMethodArgumentResolver;true;MatrixVariableMethodArgumentResolver;(ConfigurableBeanFactory,ReactiveAdapterRegistry);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.result.method.annotation;ModelAttributeMethodArgumentResolver;true;ModelAttributeMethodArgumentResolver;(ReactiveAdapterRegistry,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.method.annotation;ModelMethodArgumentResolver;true;ModelMethodArgumentResolver;(ReactiveAdapterRegistry);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.method.annotation;PathVariableMapMethodArgumentResolver;true;PathVariableMapMethodArgumentResolver;(ReactiveAdapterRegistry);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.method.annotation;PathVariableMethodArgumentResolver;true;PathVariableMethodArgumentResolver;(ConfigurableBeanFactory,ReactiveAdapterRegistry);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.method.annotation;PathVariableMethodArgumentResolver;true;PathVariableMethodArgumentResolver;(ConfigurableBeanFactory,ReactiveAdapterRegistry);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.result.method.annotation;PrincipalMethodArgumentResolver;true;PrincipalMethodArgumentResolver;(ReactiveAdapterRegistry);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.method.annotation;RequestAttributeMethodArgumentResolver;true;RequestAttributeMethodArgumentResolver;(ConfigurableBeanFactory,ReactiveAdapterRegistry);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.method.annotation;RequestAttributeMethodArgumentResolver;true;RequestAttributeMethodArgumentResolver;(ConfigurableBeanFactory,ReactiveAdapterRegistry);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.result.method.annotation;RequestBodyMethodArgumentResolver;true;RequestBodyMethodArgumentResolver;(List,ReactiveAdapterRegistry);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.method.annotation;RequestBodyMethodArgumentResolver;true;RequestBodyMethodArgumentResolver;(List,ReactiveAdapterRegistry);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.result.method.annotation;RequestHeaderMapMethodArgumentResolver;true;RequestHeaderMapMethodArgumentResolver;(ReactiveAdapterRegistry);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.method.annotation;RequestHeaderMethodArgumentResolver;true;RequestHeaderMethodArgumentResolver;(ConfigurableBeanFactory,ReactiveAdapterRegistry);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.method.annotation;RequestHeaderMethodArgumentResolver;true;RequestHeaderMethodArgumentResolver;(ConfigurableBeanFactory,ReactiveAdapterRegistry);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.result.method.annotation;RequestMappingHandlerAdapter;true;getArgumentResolverConfigurer;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.method.annotation;RequestMappingHandlerAdapter;true;getMessageReaders;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.method.annotation;RequestMappingHandlerAdapter;true;getReactiveAdapterRegistry;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.method.annotation;RequestMappingHandlerAdapter;true;getWebBindingInitializer;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.method.annotation;RequestMappingHandlerAdapter;true;setArgumentResolverConfigurer;(ArgumentResolverConfigurer);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.method.annotation;RequestMappingHandlerAdapter;true;setMessageReaders;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.method.annotation;RequestMappingHandlerAdapter;true;setReactiveAdapterRegistry;(ReactiveAdapterRegistry);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.method.annotation;RequestMappingHandlerAdapter;true;setWebBindingInitializer;(WebBindingInitializer);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.method.annotation;RequestMappingHandlerMapping;true;getContentTypeResolver;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.method.annotation;RequestMappingHandlerMapping;true;getPathPrefixes;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.method.annotation;RequestMappingHandlerMapping;true;setContentTypeResolver;(RequestedContentTypeResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.method.annotation;RequestParamMapMethodArgumentResolver;true;RequestParamMapMethodArgumentResolver;(ReactiveAdapterRegistry);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.method.annotation;RequestParamMethodArgumentResolver;true;RequestParamMethodArgumentResolver;(ConfigurableBeanFactory,ReactiveAdapterRegistry,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.method.annotation;RequestParamMethodArgumentResolver;true;RequestParamMethodArgumentResolver;(ConfigurableBeanFactory,ReactiveAdapterRegistry,boolean);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.result.method.annotation;RequestPartMethodArgumentResolver;true;RequestPartMethodArgumentResolver;(List,ReactiveAdapterRegistry);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.method.annotation;RequestPartMethodArgumentResolver;true;RequestPartMethodArgumentResolver;(List,ReactiveAdapterRegistry);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.result.method.annotation;ResponseBodyResultHandler;true;ResponseBodyResultHandler;(List,RequestedContentTypeResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.method.annotation;ResponseBodyResultHandler;true;ResponseBodyResultHandler;(List,RequestedContentTypeResolver);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.result.method.annotation;ResponseBodyResultHandler;true;ResponseBodyResultHandler;(List,RequestedContentTypeResolver,ReactiveAdapterRegistry);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.method.annotation;ResponseBodyResultHandler;true;ResponseBodyResultHandler;(List,RequestedContentTypeResolver,ReactiveAdapterRegistry);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.result.method.annotation;ResponseBodyResultHandler;true;ResponseBodyResultHandler;(List,RequestedContentTypeResolver,ReactiveAdapterRegistry);;Argument[2];Argument[-1];taint",
        "org.springframework.web.reactive.result.method.annotation;ResponseEntityResultHandler;true;ResponseEntityResultHandler;(List,RequestedContentTypeResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.method.annotation;ResponseEntityResultHandler;true;ResponseEntityResultHandler;(List,RequestedContentTypeResolver);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.result.method.annotation;ResponseEntityResultHandler;true;ResponseEntityResultHandler;(List,RequestedContentTypeResolver,ReactiveAdapterRegistry);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.method.annotation;ResponseEntityResultHandler;true;ResponseEntityResultHandler;(List,RequestedContentTypeResolver,ReactiveAdapterRegistry);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.result.method.annotation;ResponseEntityResultHandler;true;ResponseEntityResultHandler;(List,RequestedContentTypeResolver,ReactiveAdapterRegistry);;Argument[2];Argument[-1];taint",
        "org.springframework.web.reactive.result.method.annotation;ServerWebExchangeMethodArgumentResolver;true;ServerWebExchangeMethodArgumentResolver;(ReactiveAdapterRegistry);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.method.annotation;SessionAttributeMethodArgumentResolver;true;SessionAttributeMethodArgumentResolver;(ConfigurableBeanFactory,ReactiveAdapterRegistry);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.method.annotation;SessionAttributeMethodArgumentResolver;true;SessionAttributeMethodArgumentResolver;(ConfigurableBeanFactory,ReactiveAdapterRegistry);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.result.method.annotation;WebSessionMethodArgumentResolver;true;WebSessionMethodArgumentResolver;(ReactiveAdapterRegistry);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.method;AbstractHandlerMethodMapping;true;registerMapping;(Object,Object,Method);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.method;AbstractHandlerMethodMapping;true;registerMapping;(Object,Object,Method);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.result.method;AbstractHandlerMethodMapping;true;registerMapping;(Object,Object,Method);;Argument[2];Argument[-1];taint",
        "org.springframework.web.reactive.result.method;HandlerMethodArgumentResolver;true;resolveArgument;(MethodParameter,BindingContext,ServerWebExchange);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.method;HandlerMethodArgumentResolver;true;supportsParameter;(MethodParameter);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.method;HandlerMethodArgumentResolverSupport;true;getAdapterRegistry;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.method;InvocableHandlerMethod;true;InvocableHandlerMethod;(Object,Method);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.method;InvocableHandlerMethod;true;InvocableHandlerMethod;(Object,Method);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.result.method;InvocableHandlerMethod;true;getParameterNameDiscoverer;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.method;InvocableHandlerMethod;true;getResolvers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.method;InvocableHandlerMethod;true;setArgumentResolvers;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.method;InvocableHandlerMethod;true;setParameterNameDiscoverer;(ParameterNameDiscoverer);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.method;InvocableHandlerMethod;true;setReactiveAdapterRegistry;(ReactiveAdapterRegistry);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.method;RequestMappingInfo$Builder;true;consumes;(String[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.result.method;RequestMappingInfo$Builder;true;consumes;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.method;RequestMappingInfo$Builder;true;consumes;(String[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.result.method;RequestMappingInfo$Builder;true;customCondition;(RequestCondition);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.result.method;RequestMappingInfo$Builder;true;customCondition;(RequestCondition);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.method;RequestMappingInfo$Builder;true;customCondition;(RequestCondition);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.result.method;RequestMappingInfo$Builder;true;headers;(String[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.result.method;RequestMappingInfo$Builder;true;headers;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.method;RequestMappingInfo$Builder;true;headers;(String[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.result.method;RequestMappingInfo$Builder;true;mappingName;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.result.method;RequestMappingInfo$Builder;true;mappingName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.method;RequestMappingInfo$Builder;true;mappingName;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.result.method;RequestMappingInfo$Builder;true;methods;(RequestMethod[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.result.method;RequestMappingInfo$Builder;true;methods;(RequestMethod[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.method;RequestMappingInfo$Builder;true;methods;(RequestMethod[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.result.method;RequestMappingInfo$Builder;true;options;(BuilderConfiguration);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.result.method;RequestMappingInfo$Builder;true;options;(BuilderConfiguration);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.method;RequestMappingInfo$Builder;true;options;(BuilderConfiguration);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.result.method;RequestMappingInfo$Builder;true;params;(String[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.result.method;RequestMappingInfo$Builder;true;params;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.method;RequestMappingInfo$Builder;true;params;(String[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.result.method;RequestMappingInfo$Builder;true;paths;(String[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.result.method;RequestMappingInfo$Builder;true;paths;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.method;RequestMappingInfo$Builder;true;paths;(String[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.result.method;RequestMappingInfo$Builder;true;produces;(String[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.result.method;RequestMappingInfo$Builder;true;produces;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.method;RequestMappingInfo$Builder;true;produces;(String[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.result.method;RequestMappingInfo$BuilderConfiguration;true;getContentTypeResolver;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.method;RequestMappingInfo$BuilderConfiguration;true;getPatternParser;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.method;RequestMappingInfo$BuilderConfiguration;true;setContentTypeResolver;(RequestedContentTypeResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.method;RequestMappingInfo$BuilderConfiguration;true;setPatternParser;(PathPatternParser);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.method;RequestMappingInfo;false;RequestMappingInfo;(PatternsRequestCondition,RequestMethodsRequestCondition,ParamsRequestCondition,HeadersRequestCondition,ConsumesRequestCondition,ProducesRequestCondition,RequestCondition);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.method;RequestMappingInfo;false;RequestMappingInfo;(PatternsRequestCondition,RequestMethodsRequestCondition,ParamsRequestCondition,HeadersRequestCondition,ConsumesRequestCondition,ProducesRequestCondition,RequestCondition);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.result.method;RequestMappingInfo;false;RequestMappingInfo;(PatternsRequestCondition,RequestMethodsRequestCondition,ParamsRequestCondition,HeadersRequestCondition,ConsumesRequestCondition,ProducesRequestCondition,RequestCondition);;Argument[2];Argument[-1];taint",
        "org.springframework.web.reactive.result.method;RequestMappingInfo;false;RequestMappingInfo;(PatternsRequestCondition,RequestMethodsRequestCondition,ParamsRequestCondition,HeadersRequestCondition,ConsumesRequestCondition,ProducesRequestCondition,RequestCondition);;Argument[3];Argument[-1];taint",
        "org.springframework.web.reactive.result.method;RequestMappingInfo;false;RequestMappingInfo;(PatternsRequestCondition,RequestMethodsRequestCondition,ParamsRequestCondition,HeadersRequestCondition,ConsumesRequestCondition,ProducesRequestCondition,RequestCondition);;Argument[4];Argument[-1];taint",
        "org.springframework.web.reactive.result.method;RequestMappingInfo;false;RequestMappingInfo;(PatternsRequestCondition,RequestMethodsRequestCondition,ParamsRequestCondition,HeadersRequestCondition,ConsumesRequestCondition,ProducesRequestCondition,RequestCondition);;Argument[5];Argument[-1];taint",
        "org.springframework.web.reactive.result.method;RequestMappingInfo;false;RequestMappingInfo;(PatternsRequestCondition,RequestMethodsRequestCondition,ParamsRequestCondition,HeadersRequestCondition,ConsumesRequestCondition,ProducesRequestCondition,RequestCondition);;Argument[6];Argument[-1];taint",
        "org.springframework.web.reactive.result.method;RequestMappingInfo;false;RequestMappingInfo;(RequestMappingInfo,RequestCondition);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.result.method;RequestMappingInfo;false;RequestMappingInfo;(String,PatternsRequestCondition,RequestMethodsRequestCondition,ParamsRequestCondition,HeadersRequestCondition,ConsumesRequestCondition,ProducesRequestCondition,RequestCondition);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.method;RequestMappingInfo;false;RequestMappingInfo;(String,PatternsRequestCondition,RequestMethodsRequestCondition,ParamsRequestCondition,HeadersRequestCondition,ConsumesRequestCondition,ProducesRequestCondition,RequestCondition);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.result.method;RequestMappingInfo;false;RequestMappingInfo;(String,PatternsRequestCondition,RequestMethodsRequestCondition,ParamsRequestCondition,HeadersRequestCondition,ConsumesRequestCondition,ProducesRequestCondition,RequestCondition);;Argument[2];Argument[-1];taint",
        "org.springframework.web.reactive.result.method;RequestMappingInfo;false;RequestMappingInfo;(String,PatternsRequestCondition,RequestMethodsRequestCondition,ParamsRequestCondition,HeadersRequestCondition,ConsumesRequestCondition,ProducesRequestCondition,RequestCondition);;Argument[3];Argument[-1];taint",
        "org.springframework.web.reactive.result.method;RequestMappingInfo;false;RequestMappingInfo;(String,PatternsRequestCondition,RequestMethodsRequestCondition,ParamsRequestCondition,HeadersRequestCondition,ConsumesRequestCondition,ProducesRequestCondition,RequestCondition);;Argument[4];Argument[-1];taint",
        "org.springframework.web.reactive.result.method;RequestMappingInfo;false;RequestMappingInfo;(String,PatternsRequestCondition,RequestMethodsRequestCondition,ParamsRequestCondition,HeadersRequestCondition,ConsumesRequestCondition,ProducesRequestCondition,RequestCondition);;Argument[5];Argument[-1];taint",
        "org.springframework.web.reactive.result.method;RequestMappingInfo;false;RequestMappingInfo;(String,PatternsRequestCondition,RequestMethodsRequestCondition,ParamsRequestCondition,HeadersRequestCondition,ConsumesRequestCondition,ProducesRequestCondition,RequestCondition);;Argument[6];Argument[-1];taint",
        "org.springframework.web.reactive.result.method;RequestMappingInfo;false;RequestMappingInfo;(String,PatternsRequestCondition,RequestMethodsRequestCondition,ParamsRequestCondition,HeadersRequestCondition,ConsumesRequestCondition,ProducesRequestCondition,RequestCondition);;Argument[7];Argument[-1];taint",
        "org.springframework.web.reactive.result.method;RequestMappingInfo;false;getConsumesCondition;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.method;RequestMappingInfo;false;getCustomCondition;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.method;RequestMappingInfo;false;getDirectPaths;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.method;RequestMappingInfo;false;getHeadersCondition;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.method;RequestMappingInfo;false;getMethodsCondition;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.method;RequestMappingInfo;false;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.method;RequestMappingInfo;false;getParamsCondition;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.method;RequestMappingInfo;false;getPatternsCondition;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.method;RequestMappingInfo;false;getProducesCondition;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.method;RequestMappingInfo;false;paths;(String[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.result.method;RequestMappingInfo;false;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.method;SyncHandlerMethodArgumentResolver;true;resolveArgumentValue;(MethodParameter,BindingContext,ServerWebExchange);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.method;SyncHandlerMethodArgumentResolver;true;resolveArgumentValue;(MethodParameter,BindingContext,ServerWebExchange);;Argument[2];ReturnValue;taint",
        "org.springframework.web.reactive.result.method;SyncInvocableHandlerMethod;true;SyncInvocableHandlerMethod;(Object,Method);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.method;SyncInvocableHandlerMethod;true;SyncInvocableHandlerMethod;(Object,Method);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.result.method;SyncInvocableHandlerMethod;true;getParameterNameDiscoverer;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.method;SyncInvocableHandlerMethod;true;setArgumentResolvers;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.method;SyncInvocableHandlerMethod;true;setParameterNameDiscoverer;(ParameterNameDiscoverer);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.view.freemarker;FreeMarkerConfig;true;getConfiguration;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.view.freemarker;FreeMarkerConfigurer;true;setConfiguration;(Configuration);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.view.freemarker;FreeMarkerView;true;setConfiguration;(Configuration);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.view.freemarker;FreeMarkerView;true;setEncoding;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.view.freemarker;FreeMarkerViewResolver;true;FreeMarkerViewResolver;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.view.freemarker;FreeMarkerViewResolver;true;FreeMarkerViewResolver;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.result.view.script;RenderingContext;true;RenderingContext;(ApplicationContext,Locale,Function,String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.view.script;RenderingContext;true;RenderingContext;(ApplicationContext,Locale,Function,String);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.result.view.script;RenderingContext;true;RenderingContext;(ApplicationContext,Locale,Function,String);;Argument[2];Argument[-1];taint",
        "org.springframework.web.reactive.result.view.script;RenderingContext;true;RenderingContext;(ApplicationContext,Locale,Function,String);;Argument[3];Argument[-1];taint",
        "org.springframework.web.reactive.result.view.script;RenderingContext;true;getApplicationContext;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.view.script;RenderingContext;true;getLocale;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.view.script;RenderingContext;true;getTemplateLoader;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.view.script;RenderingContext;true;getUrl;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.view.script;ScriptTemplateConfig;true;getEngine;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.view.script;ScriptTemplateConfig;true;getEngineName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.view.script;ScriptTemplateConfig;true;getEngineSupplier;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.view.script;ScriptTemplateConfig;true;getRenderFunction;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.view.script;ScriptTemplateConfig;true;getRenderObject;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.view.script;ScriptTemplateConfig;true;getResourceLoaderPath;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.view.script;ScriptTemplateConfig;true;getScripts;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.view.script;ScriptTemplateConfigurer;true;ScriptTemplateConfigurer;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.view.script;ScriptTemplateConfigurer;true;setEngine;(ScriptEngine);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.view.script;ScriptTemplateConfigurer;true;setEngineName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.view.script;ScriptTemplateConfigurer;true;setEngineSupplier;(Supplier);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.view.script;ScriptTemplateConfigurer;true;setRenderFunction;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.view.script;ScriptTemplateConfigurer;true;setRenderObject;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.view.script;ScriptTemplateConfigurer;true;setResourceLoaderPath;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.view.script;ScriptTemplateConfigurer;true;setScripts;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.view.script;ScriptTemplateView;true;ScriptTemplateView;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.view.script;ScriptTemplateView;true;setEngine;(ScriptEngine);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.view.script;ScriptTemplateView;true;setEngineName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.view.script;ScriptTemplateView;true;setEngineSupplier;(Supplier);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.view.script;ScriptTemplateView;true;setRenderFunction;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.view.script;ScriptTemplateView;true;setRenderObject;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.view.script;ScriptTemplateView;true;setResourceLoaderPath;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.view.script;ScriptTemplateView;true;setScripts;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.view.script;ScriptTemplateViewResolver;true;ScriptTemplateViewResolver;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.view.script;ScriptTemplateViewResolver;true;ScriptTemplateViewResolver;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.result.view;AbstractUrlBasedView;true;getUrl;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.view;AbstractUrlBasedView;true;setUrl;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.view;AbstractUrlBasedView;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.view;AbstractView;true;AbstractView;(ReactiveAdapterRegistry);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.view;AbstractView;true;getApplicationContext;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.view;AbstractView;true;getBeanName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.view;AbstractView;true;getRequestContextAttribute;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.view;AbstractView;true;setRequestContextAttribute;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.view;AbstractView;true;setSupportedMediaTypes;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.view;AbstractView;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.view;BindStatus;true;BindStatus;(RequestContext,String,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.view;BindStatus;true;BindStatus;(RequestContext,String,boolean);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.result.view;BindStatus;true;findEditor;(Class);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.view;BindStatus;true;getActualValue;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.view;BindStatus;true;getDisplayValue;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.view;BindStatus;true;getEditor;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.view;BindStatus;true;getErrorCode;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.view;BindStatus;true;getErrorCodes;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.view;BindStatus;true;getErrorMessage;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.view;BindStatus;true;getErrorMessages;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.view;BindStatus;true;getErrorMessagesAsString;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.view;BindStatus;true;getErrorMessagesAsString;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.result.view;BindStatus;true;getErrors;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.view;BindStatus;true;getExpression;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.view;BindStatus;true;getPath;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.view;BindStatus;true;getValue;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.view;BindStatus;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.view;HttpMessageWriterView;true;HttpMessageWriterView;(Encoder);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.view;HttpMessageWriterView;true;HttpMessageWriterView;(HttpMessageWriter);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.view;HttpMessageWriterView;true;getMessageWriter;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.view;HttpMessageWriterView;true;getModelKeys;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.view;HttpMessageWriterView;true;setModelKeys;(Set);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.view;RedirectView;true;RedirectView;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.view;RedirectView;true;RedirectView;(String,HttpStatus);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.view;RedirectView;true;getHosts;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.view;RedirectView;true;setHosts;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.view;Rendering$RedirectBuilder;true;contextRelative;(boolean);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.result.view;Rendering$RedirectBuilder;true;propagateQuery;(boolean);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.result.view;Rendering;true;headers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.view;Rendering;true;modelAttributes;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.view;Rendering;true;redirectTo;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.result.view;Rendering;true;view;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.view;Rendering;true;view;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.result.view;RequestContext;true;RequestContext;(ServerWebExchange,Map,MessageSource);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.view;RequestContext;true;RequestContext;(ServerWebExchange,Map,MessageSource);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.result.view;RequestContext;true;RequestContext;(ServerWebExchange,Map,MessageSource);;Argument[2];Argument[-1];taint",
        "org.springframework.web.reactive.result.view;RequestContext;true;RequestContext;(ServerWebExchange,Map,MessageSource,RequestDataValueProcessor);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.view;RequestContext;true;RequestContext;(ServerWebExchange,Map,MessageSource,RequestDataValueProcessor);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.result.view;RequestContext;true;RequestContext;(ServerWebExchange,Map,MessageSource,RequestDataValueProcessor);;Argument[2];Argument[-1];taint",
        "org.springframework.web.reactive.result.view;RequestContext;true;RequestContext;(ServerWebExchange,Map,MessageSource,RequestDataValueProcessor);;Argument[3];Argument[-1];taint",
        "org.springframework.web.reactive.result.view;RequestContext;true;changeLocale;(Locale);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.view;RequestContext;true;changeLocale;(Locale,TimeZone);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.view;RequestContext;true;changeLocale;(Locale,TimeZone);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.result.view;RequestContext;true;getBindStatus;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.view;RequestContext;true;getBindStatus;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.result.view;RequestContext;true;getBindStatus;(String,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.view;RequestContext;true;getBindStatus;(String,boolean);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.result.view;RequestContext;true;getContextPath;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.view;RequestContext;true;getContextUrl;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.view;RequestContext;true;getContextUrl;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.result.view;RequestContext;true;getErrors;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.view;RequestContext;true;getErrors;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.view;RequestContext;true;getErrors;(String,boolean);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.view;RequestContext;true;getErrors;(String,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.view;RequestContext;true;getLocale;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.view;RequestContext;true;getMessage;(MessageSourceResolvable);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.view;RequestContext;true;getMessage;(MessageSourceResolvable,boolean);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.view;RequestContext;true;getMessage;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.view;RequestContext;true;getMessage;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.result.view;RequestContext;true;getMessage;(String,List);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.view;RequestContext;true;getMessage;(String,List);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.result.view;RequestContext;true;getMessage;(String,List,String);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.view;RequestContext;true;getMessage;(String,List,String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.result.view;RequestContext;true;getMessage;(String,List,String);;Argument[2];Argument[-1];taint",
        "org.springframework.web.reactive.result.view;RequestContext;true;getMessage;(String,List,String);;Argument[2];ReturnValue;taint",
        "org.springframework.web.reactive.result.view;RequestContext;true;getMessage;(String,Object[]);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.view;RequestContext;true;getMessage;(String,Object[]);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.result.view;RequestContext;true;getMessage;(String,Object[],String);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.view;RequestContext;true;getMessage;(String,Object[],String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.result.view;RequestContext;true;getMessage;(String,Object[],String);;Argument[2];Argument[-1];taint",
        "org.springframework.web.reactive.result.view;RequestContext;true;getMessage;(String,Object[],String);;Argument[2];ReturnValue;taint",
        "org.springframework.web.reactive.result.view;RequestContext;true;getMessage;(String,Object[],String,boolean);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.view;RequestContext;true;getMessage;(String,Object[],String,boolean);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.result.view;RequestContext;true;getMessage;(String,Object[],String,boolean);;Argument[2];Argument[-1];taint",
        "org.springframework.web.reactive.result.view;RequestContext;true;getMessage;(String,Object[],String,boolean);;Argument[2];ReturnValue;taint",
        "org.springframework.web.reactive.result.view;RequestContext;true;getMessage;(String,Object[],boolean);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.view;RequestContext;true;getMessage;(String,Object[],boolean);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.result.view;RequestContext;true;getMessage;(String,String);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.view;RequestContext;true;getMessage;(String,String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.result.view;RequestContext;true;getMessage;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.result.view;RequestContext;true;getMessage;(String,String);;Argument[1];ReturnValue;taint",
        "org.springframework.web.reactive.result.view;RequestContext;true;getMessageSource;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.view;RequestContext;true;getModel;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.view;RequestContext;true;getRequestDataValueProcessor;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.view;RequestContext;true;getTimeZone;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.view;UrlBasedViewResolver;true;getApplicationContext;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.view;UrlBasedViewResolver;true;setPrefix;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.view;UrlBasedViewResolver;true;setRedirectViewProvider;(Function);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.view;UrlBasedViewResolver;true;setRequestContextAttribute;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.view;UrlBasedViewResolver;true;setSuffix;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.view;UrlBasedViewResolver;true;setViewNames;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.view;View;true;getSupportedMediaTypes;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.view;ViewResolutionResultHandler;true;ViewResolutionResultHandler;(List,RequestedContentTypeResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.view;ViewResolutionResultHandler;true;ViewResolutionResultHandler;(List,RequestedContentTypeResolver);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.result.view;ViewResolutionResultHandler;true;ViewResolutionResultHandler;(List,RequestedContentTypeResolver,ReactiveAdapterRegistry);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.view;ViewResolutionResultHandler;true;ViewResolutionResultHandler;(List,RequestedContentTypeResolver,ReactiveAdapterRegistry);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.result.view;ViewResolutionResultHandler;true;ViewResolutionResultHandler;(List,RequestedContentTypeResolver,ReactiveAdapterRegistry);;Argument[2];Argument[-1];taint",
        "org.springframework.web.reactive.result.view;ViewResolutionResultHandler;true;getDefaultViews;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.view;ViewResolutionResultHandler;true;getViewResolvers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.view;ViewResolutionResultHandler;true;setDefaultViews;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result.view;ViewResolverSupport;true;getSupportedMediaTypes;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result.view;ViewResolverSupport;true;setSupportedMediaTypes;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.result;HandlerResultHandlerSupport;true;getAdapterRegistry;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.result;HandlerResultHandlerSupport;true;getContentTypeResolver;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.socket.adapter;AbstractListenerWebSocketSession;true;AbstractListenerWebSocketSession;(Object,String,HandshakeInfo,DataBufferFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.socket.adapter;AbstractListenerWebSocketSession;true;AbstractListenerWebSocketSession;(Object,String,HandshakeInfo,DataBufferFactory);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.socket.adapter;AbstractListenerWebSocketSession;true;AbstractListenerWebSocketSession;(Object,String,HandshakeInfo,DataBufferFactory);;Argument[2];Argument[-1];taint",
        "org.springframework.web.reactive.socket.adapter;AbstractListenerWebSocketSession;true;AbstractListenerWebSocketSession;(Object,String,HandshakeInfo,DataBufferFactory);;Argument[3];Argument[-1];taint",
        "org.springframework.web.reactive.socket.adapter;AbstractListenerWebSocketSession;true;AbstractListenerWebSocketSession;(Object,String,HandshakeInfo,DataBufferFactory,Empty);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.socket.adapter;AbstractListenerWebSocketSession;true;AbstractListenerWebSocketSession;(Object,String,HandshakeInfo,DataBufferFactory,Empty);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.socket.adapter;AbstractListenerWebSocketSession;true;AbstractListenerWebSocketSession;(Object,String,HandshakeInfo,DataBufferFactory,Empty);;Argument[2];Argument[-1];taint",
        "org.springframework.web.reactive.socket.adapter;AbstractListenerWebSocketSession;true;AbstractListenerWebSocketSession;(Object,String,HandshakeInfo,DataBufferFactory,Empty);;Argument[3];Argument[-1];taint",
        "org.springframework.web.reactive.socket.adapter;AbstractListenerWebSocketSession;true;AbstractListenerWebSocketSession;(Object,String,HandshakeInfo,DataBufferFactory,Empty);;Argument[4];Argument[-1];taint",
        "org.springframework.web.reactive.socket.adapter;AbstractListenerWebSocketSession;true;AbstractListenerWebSocketSession;(Object,String,HandshakeInfo,DataBufferFactory,MonoProcessor);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.socket.adapter;AbstractListenerWebSocketSession;true;AbstractListenerWebSocketSession;(Object,String,HandshakeInfo,DataBufferFactory,MonoProcessor);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.socket.adapter;AbstractListenerWebSocketSession;true;AbstractListenerWebSocketSession;(Object,String,HandshakeInfo,DataBufferFactory,MonoProcessor);;Argument[2];Argument[-1];taint",
        "org.springframework.web.reactive.socket.adapter;AbstractListenerWebSocketSession;true;AbstractListenerWebSocketSession;(Object,String,HandshakeInfo,DataBufferFactory,MonoProcessor);;Argument[3];Argument[-1];taint",
        "org.springframework.web.reactive.socket.adapter;AbstractListenerWebSocketSession;true;AbstractListenerWebSocketSession;(Object,String,HandshakeInfo,DataBufferFactory,MonoProcessor);;Argument[4];Argument[-1];taint",
        "org.springframework.web.reactive.socket.adapter;AbstractWebSocketSession;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.socket.adapter;ContextWebSocketHandler;false;decorate;(WebSocketHandler,ContextView);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.socket.adapter;ContextWebSocketHandler;false;decorate;(WebSocketHandler,ContextView);;Argument[1];ReturnValue;taint",
        "org.springframework.web.reactive.socket.adapter;Jetty10WebSocketHandlerAdapter;true;Jetty10WebSocketHandlerAdapter;(WebSocketHandler,Function);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.socket.adapter;Jetty10WebSocketHandlerAdapter;true;Jetty10WebSocketHandlerAdapter;(WebSocketHandler,Function);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.socket.adapter;Jetty10WebSocketHandlerAdapter;true;onWebSocketConnect;(Session);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.socket.adapter;JettyWebSocketHandlerAdapter;true;JettyWebSocketHandlerAdapter;(WebSocketHandler,Function);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.socket.adapter;JettyWebSocketHandlerAdapter;true;JettyWebSocketHandlerAdapter;(WebSocketHandler,Function);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.socket.adapter;JettyWebSocketHandlerAdapter;true;onWebSocketConnect;(Session);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.socket.adapter;JettyWebSocketSession;true;JettyWebSocketSession;(Session,HandshakeInfo,DataBufferFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.socket.adapter;JettyWebSocketSession;true;JettyWebSocketSession;(Session,HandshakeInfo,DataBufferFactory);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.socket.adapter;JettyWebSocketSession;true;JettyWebSocketSession;(Session,HandshakeInfo,DataBufferFactory);;Argument[2];Argument[-1];taint",
        "org.springframework.web.reactive.socket.adapter;JettyWebSocketSession;true;JettyWebSocketSession;(Session,HandshakeInfo,DataBufferFactory,Empty);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.socket.adapter;JettyWebSocketSession;true;JettyWebSocketSession;(Session,HandshakeInfo,DataBufferFactory,Empty);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.socket.adapter;JettyWebSocketSession;true;JettyWebSocketSession;(Session,HandshakeInfo,DataBufferFactory,Empty);;Argument[2];Argument[-1];taint",
        "org.springframework.web.reactive.socket.adapter;JettyWebSocketSession;true;JettyWebSocketSession;(Session,HandshakeInfo,DataBufferFactory,Empty);;Argument[3];Argument[-1];taint",
        "org.springframework.web.reactive.socket.adapter;JettyWebSocketSession;true;JettyWebSocketSession;(Session,HandshakeInfo,DataBufferFactory,MonoProcessor);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.socket.adapter;JettyWebSocketSession;true;JettyWebSocketSession;(Session,HandshakeInfo,DataBufferFactory,MonoProcessor);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.socket.adapter;JettyWebSocketSession;true;JettyWebSocketSession;(Session,HandshakeInfo,DataBufferFactory,MonoProcessor);;Argument[2];Argument[-1];taint",
        "org.springframework.web.reactive.socket.adapter;JettyWebSocketSession;true;JettyWebSocketSession;(Session,HandshakeInfo,DataBufferFactory,MonoProcessor);;Argument[3];Argument[-1];taint",
        "org.springframework.web.reactive.socket.adapter;ReactorNettyWebSocketSession$WebSocketConnection;true;WebSocketConnection;(WebsocketInbound,WebsocketOutbound);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.socket.adapter;ReactorNettyWebSocketSession$WebSocketConnection;true;WebSocketConnection;(WebsocketInbound,WebsocketOutbound);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.socket.adapter;ReactorNettyWebSocketSession$WebSocketConnection;true;getInbound;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.socket.adapter;ReactorNettyWebSocketSession$WebSocketConnection;true;getOutbound;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.socket.adapter;ReactorNettyWebSocketSession;true;ReactorNettyWebSocketSession;(WebsocketInbound,WebsocketOutbound,HandshakeInfo,NettyDataBufferFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.socket.adapter;ReactorNettyWebSocketSession;true;ReactorNettyWebSocketSession;(WebsocketInbound,WebsocketOutbound,HandshakeInfo,NettyDataBufferFactory);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.socket.adapter;ReactorNettyWebSocketSession;true;ReactorNettyWebSocketSession;(WebsocketInbound,WebsocketOutbound,HandshakeInfo,NettyDataBufferFactory);;Argument[2];Argument[-1];taint",
        "org.springframework.web.reactive.socket.adapter;ReactorNettyWebSocketSession;true;ReactorNettyWebSocketSession;(WebsocketInbound,WebsocketOutbound,HandshakeInfo,NettyDataBufferFactory);;Argument[3];Argument[-1];taint",
        "org.springframework.web.reactive.socket.adapter;ReactorNettyWebSocketSession;true;ReactorNettyWebSocketSession;(WebsocketInbound,WebsocketOutbound,HandshakeInfo,NettyDataBufferFactory,int);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.socket.adapter;ReactorNettyWebSocketSession;true;ReactorNettyWebSocketSession;(WebsocketInbound,WebsocketOutbound,HandshakeInfo,NettyDataBufferFactory,int);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.socket.adapter;ReactorNettyWebSocketSession;true;ReactorNettyWebSocketSession;(WebsocketInbound,WebsocketOutbound,HandshakeInfo,NettyDataBufferFactory,int);;Argument[2];Argument[-1];taint",
        "org.springframework.web.reactive.socket.adapter;ReactorNettyWebSocketSession;true;ReactorNettyWebSocketSession;(WebsocketInbound,WebsocketOutbound,HandshakeInfo,NettyDataBufferFactory,int);;Argument[3];Argument[-1];taint",
        "org.springframework.web.reactive.socket.adapter;ReactorNettyWebSocketSession;true;getChannelId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.socket.adapter;StandardWebSocketHandlerAdapter;true;StandardWebSocketHandlerAdapter;(WebSocketHandler,Function);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.socket.adapter;StandardWebSocketHandlerAdapter;true;StandardWebSocketHandlerAdapter;(WebSocketHandler,Function);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.socket.adapter;StandardWebSocketSession;true;StandardWebSocketSession;(Session,HandshakeInfo,DataBufferFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.socket.adapter;StandardWebSocketSession;true;StandardWebSocketSession;(Session,HandshakeInfo,DataBufferFactory);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.socket.adapter;StandardWebSocketSession;true;StandardWebSocketSession;(Session,HandshakeInfo,DataBufferFactory);;Argument[2];Argument[-1];taint",
        "org.springframework.web.reactive.socket.adapter;StandardWebSocketSession;true;StandardWebSocketSession;(Session,HandshakeInfo,DataBufferFactory,Empty);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.socket.adapter;StandardWebSocketSession;true;StandardWebSocketSession;(Session,HandshakeInfo,DataBufferFactory,Empty);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.socket.adapter;StandardWebSocketSession;true;StandardWebSocketSession;(Session,HandshakeInfo,DataBufferFactory,Empty);;Argument[2];Argument[-1];taint",
        "org.springframework.web.reactive.socket.adapter;StandardWebSocketSession;true;StandardWebSocketSession;(Session,HandshakeInfo,DataBufferFactory,Empty);;Argument[3];Argument[-1];taint",
        "org.springframework.web.reactive.socket.adapter;StandardWebSocketSession;true;StandardWebSocketSession;(Session,HandshakeInfo,DataBufferFactory,MonoProcessor);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.socket.adapter;StandardWebSocketSession;true;StandardWebSocketSession;(Session,HandshakeInfo,DataBufferFactory,MonoProcessor);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.socket.adapter;StandardWebSocketSession;true;StandardWebSocketSession;(Session,HandshakeInfo,DataBufferFactory,MonoProcessor);;Argument[2];Argument[-1];taint",
        "org.springframework.web.reactive.socket.adapter;StandardWebSocketSession;true;StandardWebSocketSession;(Session,HandshakeInfo,DataBufferFactory,MonoProcessor);;Argument[3];Argument[-1];taint",
        "org.springframework.web.reactive.socket.adapter;TomcatWebSocketSession;true;TomcatWebSocketSession;(Session,HandshakeInfo,DataBufferFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.socket.adapter;TomcatWebSocketSession;true;TomcatWebSocketSession;(Session,HandshakeInfo,DataBufferFactory);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.socket.adapter;TomcatWebSocketSession;true;TomcatWebSocketSession;(Session,HandshakeInfo,DataBufferFactory);;Argument[2];Argument[-1];taint",
        "org.springframework.web.reactive.socket.adapter;TomcatWebSocketSession;true;TomcatWebSocketSession;(Session,HandshakeInfo,DataBufferFactory,Empty);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.socket.adapter;TomcatWebSocketSession;true;TomcatWebSocketSession;(Session,HandshakeInfo,DataBufferFactory,Empty);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.socket.adapter;TomcatWebSocketSession;true;TomcatWebSocketSession;(Session,HandshakeInfo,DataBufferFactory,Empty);;Argument[2];Argument[-1];taint",
        "org.springframework.web.reactive.socket.adapter;TomcatWebSocketSession;true;TomcatWebSocketSession;(Session,HandshakeInfo,DataBufferFactory,Empty);;Argument[3];Argument[-1];taint",
        "org.springframework.web.reactive.socket.adapter;TomcatWebSocketSession;true;TomcatWebSocketSession;(Session,HandshakeInfo,DataBufferFactory,MonoProcessor);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.socket.adapter;TomcatWebSocketSession;true;TomcatWebSocketSession;(Session,HandshakeInfo,DataBufferFactory,MonoProcessor);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.socket.adapter;TomcatWebSocketSession;true;TomcatWebSocketSession;(Session,HandshakeInfo,DataBufferFactory,MonoProcessor);;Argument[2];Argument[-1];taint",
        "org.springframework.web.reactive.socket.adapter;TomcatWebSocketSession;true;TomcatWebSocketSession;(Session,HandshakeInfo,DataBufferFactory,MonoProcessor);;Argument[3];Argument[-1];taint",
        "org.springframework.web.reactive.socket.adapter;UndertowWebSocketHandlerAdapter;true;UndertowWebSocketHandlerAdapter;(UndertowWebSocketSession);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.socket.adapter;UndertowWebSocketSession;true;UndertowWebSocketSession;(WebSocketChannel,HandshakeInfo,DataBufferFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.socket.adapter;UndertowWebSocketSession;true;UndertowWebSocketSession;(WebSocketChannel,HandshakeInfo,DataBufferFactory);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.socket.adapter;UndertowWebSocketSession;true;UndertowWebSocketSession;(WebSocketChannel,HandshakeInfo,DataBufferFactory);;Argument[2];Argument[-1];taint",
        "org.springframework.web.reactive.socket.adapter;UndertowWebSocketSession;true;UndertowWebSocketSession;(WebSocketChannel,HandshakeInfo,DataBufferFactory,Empty);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.socket.adapter;UndertowWebSocketSession;true;UndertowWebSocketSession;(WebSocketChannel,HandshakeInfo,DataBufferFactory,Empty);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.socket.adapter;UndertowWebSocketSession;true;UndertowWebSocketSession;(WebSocketChannel,HandshakeInfo,DataBufferFactory,Empty);;Argument[2];Argument[-1];taint",
        "org.springframework.web.reactive.socket.adapter;UndertowWebSocketSession;true;UndertowWebSocketSession;(WebSocketChannel,HandshakeInfo,DataBufferFactory,Empty);;Argument[3];Argument[-1];taint",
        "org.springframework.web.reactive.socket.adapter;UndertowWebSocketSession;true;UndertowWebSocketSession;(WebSocketChannel,HandshakeInfo,DataBufferFactory,MonoProcessor);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.socket.adapter;UndertowWebSocketSession;true;UndertowWebSocketSession;(WebSocketChannel,HandshakeInfo,DataBufferFactory,MonoProcessor);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.socket.adapter;UndertowWebSocketSession;true;UndertowWebSocketSession;(WebSocketChannel,HandshakeInfo,DataBufferFactory,MonoProcessor);;Argument[2];Argument[-1];taint",
        "org.springframework.web.reactive.socket.adapter;UndertowWebSocketSession;true;UndertowWebSocketSession;(WebSocketChannel,HandshakeInfo,DataBufferFactory,MonoProcessor);;Argument[3];Argument[-1];taint",
        "org.springframework.web.reactive.socket.client;JettyWebSocketClient;true;JettyWebSocketClient;(WebSocketClient);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.socket.client;JettyWebSocketClient;true;getJettyClient;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.socket.client;ReactorNettyWebSocketClient;true;ReactorNettyWebSocketClient;(HttpClient);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.socket.client;ReactorNettyWebSocketClient;true;ReactorNettyWebSocketClient;(HttpClient,Supplier);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.socket.client;ReactorNettyWebSocketClient;true;ReactorNettyWebSocketClient;(HttpClient,Supplier);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.socket.client;ReactorNettyWebSocketClient;true;getHttpClient;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.socket.client;StandardWebSocketClient;true;StandardWebSocketClient;(WebSocketContainer);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.socket.client;StandardWebSocketClient;true;getWebSocketContainer;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.socket.client;TomcatWebSocketClient;true;TomcatWebSocketClient;(WebSocketContainer);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.socket.client;UndertowWebSocketClient;true;UndertowWebSocketClient;(XnioWorker);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.socket.client;UndertowWebSocketClient;true;UndertowWebSocketClient;(XnioWorker,ByteBufferPool,Consumer);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.socket.client;UndertowWebSocketClient;true;UndertowWebSocketClient;(XnioWorker,ByteBufferPool,Consumer);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.socket.client;UndertowWebSocketClient;true;UndertowWebSocketClient;(XnioWorker,ByteBufferPool,Consumer);;Argument[2];Argument[-1];taint",
        "org.springframework.web.reactive.socket.client;UndertowWebSocketClient;true;UndertowWebSocketClient;(XnioWorker,Consumer);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.socket.client;UndertowWebSocketClient;true;UndertowWebSocketClient;(XnioWorker,Consumer);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.socket.client;UndertowWebSocketClient;true;getByteBufferPool;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.socket.client;UndertowWebSocketClient;true;getConnectionBuilderConsumer;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.socket.client;UndertowWebSocketClient;true;getXnioWorker;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.socket.client;UndertowWebSocketClient;true;setByteBufferPool;(ByteBufferPool);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.socket.server.support;HandshakeWebSocketService;true;HandshakeWebSocketService;(RequestUpgradeStrategy);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.socket.server.support;HandshakeWebSocketService;true;getSessionAttributePredicate;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.socket.server.support;HandshakeWebSocketService;true;getUpgradeStrategy;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.socket.server.support;HandshakeWebSocketService;true;setSessionAttributePredicate;(Predicate);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.socket.server.support;WebSocketHandlerAdapter;true;WebSocketHandlerAdapter;(WebSocketService);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.socket.server.support;WebSocketHandlerAdapter;true;getWebSocketService;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.socket.server.upgrade;JettyRequestUpgradeStrategy;true;getWebSocketPolicy;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.socket.server.upgrade;JettyRequestUpgradeStrategy;true;setWebSocketPolicy;(WebSocketPolicy);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.socket.server.upgrade;ReactorNettyRequestUpgradeStrategy;true;ReactorNettyRequestUpgradeStrategy;(Supplier);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.socket;CloseStatus;false;CloseStatus;(int,String);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.socket;CloseStatus;false;create;(int,String);;Argument[1];ReturnValue;taint",
        "org.springframework.web.reactive.socket;CloseStatus;false;getReason;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.socket;CloseStatus;false;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.socket;CloseStatus;false;withReason;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.reactive.socket;HandshakeInfo;true;HandshakeInfo;(URI,HttpHeaders,Mono,String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.socket;HandshakeInfo;true;HandshakeInfo;(URI,HttpHeaders,Mono,String);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.socket;HandshakeInfo;true;HandshakeInfo;(URI,HttpHeaders,Mono,String);;Argument[2];Argument[-1];taint",
        "org.springframework.web.reactive.socket;HandshakeInfo;true;HandshakeInfo;(URI,HttpHeaders,Mono,String);;Argument[3];Argument[-1];taint",
        "org.springframework.web.reactive.socket;HandshakeInfo;true;HandshakeInfo;(URI,HttpHeaders,Mono,String,InetSocketAddress,Map,String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.socket;HandshakeInfo;true;HandshakeInfo;(URI,HttpHeaders,Mono,String,InetSocketAddress,Map,String);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.socket;HandshakeInfo;true;HandshakeInfo;(URI,HttpHeaders,Mono,String,InetSocketAddress,Map,String);;Argument[2];Argument[-1];taint",
        "org.springframework.web.reactive.socket;HandshakeInfo;true;HandshakeInfo;(URI,HttpHeaders,Mono,String,InetSocketAddress,Map,String);;Argument[3];Argument[-1];taint",
        "org.springframework.web.reactive.socket;HandshakeInfo;true;HandshakeInfo;(URI,HttpHeaders,Mono,String,InetSocketAddress,Map,String);;Argument[4];Argument[-1];taint",
        "org.springframework.web.reactive.socket;HandshakeInfo;true;HandshakeInfo;(URI,HttpHeaders,Mono,String,InetSocketAddress,Map,String);;Argument[5];Argument[-1];taint",
        "org.springframework.web.reactive.socket;HandshakeInfo;true;HandshakeInfo;(URI,HttpHeaders,Mono,String,InetSocketAddress,Map,String);;Argument[6];Argument[-1];taint",
        "org.springframework.web.reactive.socket;HandshakeInfo;true;HandshakeInfo;(URI,HttpHeaders,MultiValueMap,Mono,String,InetSocketAddress,Map,String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive.socket;HandshakeInfo;true;HandshakeInfo;(URI,HttpHeaders,MultiValueMap,Mono,String,InetSocketAddress,Map,String);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.socket;HandshakeInfo;true;HandshakeInfo;(URI,HttpHeaders,MultiValueMap,Mono,String,InetSocketAddress,Map,String);;Argument[2];Argument[-1];taint",
        "org.springframework.web.reactive.socket;HandshakeInfo;true;HandshakeInfo;(URI,HttpHeaders,MultiValueMap,Mono,String,InetSocketAddress,Map,String);;Argument[3];Argument[-1];taint",
        "org.springframework.web.reactive.socket;HandshakeInfo;true;HandshakeInfo;(URI,HttpHeaders,MultiValueMap,Mono,String,InetSocketAddress,Map,String);;Argument[4];Argument[-1];taint",
        "org.springframework.web.reactive.socket;HandshakeInfo;true;HandshakeInfo;(URI,HttpHeaders,MultiValueMap,Mono,String,InetSocketAddress,Map,String);;Argument[5];Argument[-1];taint",
        "org.springframework.web.reactive.socket;HandshakeInfo;true;HandshakeInfo;(URI,HttpHeaders,MultiValueMap,Mono,String,InetSocketAddress,Map,String);;Argument[6];Argument[-1];taint",
        "org.springframework.web.reactive.socket;HandshakeInfo;true;HandshakeInfo;(URI,HttpHeaders,MultiValueMap,Mono,String,InetSocketAddress,Map,String);;Argument[7];Argument[-1];taint",
        "org.springframework.web.reactive.socket;HandshakeInfo;true;getAttributes;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.socket;HandshakeInfo;true;getCookies;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.socket;HandshakeInfo;true;getHeaders;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.socket;HandshakeInfo;true;getLogPrefix;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.socket;HandshakeInfo;true;getPrincipal;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.socket;HandshakeInfo;true;getRemoteAddress;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.socket;HandshakeInfo;true;getSubProtocol;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.socket;HandshakeInfo;true;getUri;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.socket;HandshakeInfo;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.socket;WebSocketMessage;true;WebSocketMessage;(Type,DataBuffer);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.socket;WebSocketMessage;true;WebSocketMessage;(Type,DataBuffer,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive.socket;WebSocketMessage;true;WebSocketMessage;(Type,DataBuffer,Object);;Argument[2];Argument[-1];taint",
        "org.springframework.web.reactive.socket;WebSocketMessage;true;getNativeMessage;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.socket;WebSocketMessage;true;getPayload;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.socket;WebSocketMessage;true;getPayloadAsText;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.socket;WebSocketMessage;true;getPayloadAsText;(Charset);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.socket;WebSocketMessage;true;retain;();;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive.socket;WebSocketSession;true;bufferFactory;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.socket;WebSocketSession;true;getAttributes;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.socket;WebSocketSession;true;getHandshakeInfo;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive.socket;WebSocketSession;true;getId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive;BindingContext;true;BindingContext;(WebBindingInitializer);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive;BindingContext;true;createDataBinder;(ServerWebExchange,Object,String);;Argument[1];ReturnValue;taint",
        "org.springframework.web.reactive;BindingContext;true;createDataBinder;(ServerWebExchange,Object,String);;Argument[2];ReturnValue;taint",
        "org.springframework.web.reactive;BindingContext;true;createDataBinder;(ServerWebExchange,String);;Argument[1];ReturnValue;taint",
        "org.springframework.web.reactive;BindingContext;true;getModel;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive;DispatcherHandler;true;getHandlerMappings;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive;HandlerResult;true;HandlerResult;(Object,Object,MethodParameter);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive;HandlerResult;true;HandlerResult;(Object,Object,MethodParameter);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive;HandlerResult;true;HandlerResult;(Object,Object,MethodParameter);;Argument[2];Argument[-1];taint",
        "org.springframework.web.reactive;HandlerResult;true;HandlerResult;(Object,Object,MethodParameter,BindingContext);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive;HandlerResult;true;HandlerResult;(Object,Object,MethodParameter,BindingContext);;Argument[1];Argument[-1];taint",
        "org.springframework.web.reactive;HandlerResult;true;HandlerResult;(Object,Object,MethodParameter,BindingContext);;Argument[2];Argument[-1];taint",
        "org.springframework.web.reactive;HandlerResult;true;HandlerResult;(Object,Object,MethodParameter,BindingContext);;Argument[3];Argument[-1];taint",
        "org.springframework.web.reactive;HandlerResult;true;getBindingContext;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive;HandlerResult;true;getHandler;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive;HandlerResult;true;getModel;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive;HandlerResult;true;getReturnType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive;HandlerResult;true;getReturnTypeSource;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive;HandlerResult;true;getReturnValue;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.reactive;HandlerResult;true;setExceptionHandler;(Function);;Argument[-1];ReturnValue;value",
        "org.springframework.web.reactive;HandlerResult;true;setExceptionHandler;(Function);;Argument[0];Argument[-1];taint",
        "org.springframework.web.reactive;HandlerResult;true;setExceptionHandler;(Function);;Argument[0];ReturnValue;taint",
        "org.springframework.web.server.adapter;DefaultServerWebExchange;true;DefaultServerWebExchange;(ServerHttpRequest,ServerHttpResponse,WebSessionManager,ServerCodecConfigurer,LocaleContextResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.web.server.adapter;DefaultServerWebExchange;true;DefaultServerWebExchange;(ServerHttpRequest,ServerHttpResponse,WebSessionManager,ServerCodecConfigurer,LocaleContextResolver);;Argument[1];Argument[-1];taint",
        "org.springframework.web.server.adapter;DefaultServerWebExchange;true;DefaultServerWebExchange;(ServerHttpRequest,ServerHttpResponse,WebSessionManager,ServerCodecConfigurer,LocaleContextResolver);;Argument[4];Argument[-1];taint",
        "org.springframework.web.server.adapter;HttpWebHandlerAdapter;true;HttpWebHandlerAdapter;(WebHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.web.server.adapter;HttpWebHandlerAdapter;true;getApplicationContext;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.server.adapter;HttpWebHandlerAdapter;true;getCodecConfigurer;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.server.adapter;HttpWebHandlerAdapter;true;getForwardedHeaderTransformer;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.server.adapter;HttpWebHandlerAdapter;true;getLocaleContextResolver;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.server.adapter;HttpWebHandlerAdapter;true;getSessionManager;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.server.adapter;HttpWebHandlerAdapter;true;setApplicationContext;(ApplicationContext);;Argument[0];Argument[-1];taint",
        "org.springframework.web.server.adapter;HttpWebHandlerAdapter;true;setCodecConfigurer;(ServerCodecConfigurer);;Argument[0];Argument[-1];taint",
        "org.springframework.web.server.adapter;HttpWebHandlerAdapter;true;setForwardedHeaderTransformer;(ForwardedHeaderTransformer);;Argument[0];Argument[-1];taint",
        "org.springframework.web.server.adapter;HttpWebHandlerAdapter;true;setLocaleContextResolver;(LocaleContextResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.web.server.adapter;HttpWebHandlerAdapter;true;setSessionManager;(WebSessionManager);;Argument[0];Argument[-1];taint",
        "org.springframework.web.server.adapter;WebHttpHandlerBuilder;false;applicationContext;(ApplicationContext);;Argument[0];ReturnValue;taint",
        "org.springframework.web.server.adapter;WebHttpHandlerBuilder;false;codecConfigurer;(ServerCodecConfigurer);;Argument[-1];ReturnValue;value",
        "org.springframework.web.server.adapter;WebHttpHandlerBuilder;false;codecConfigurer;(ServerCodecConfigurer);;Argument[0];Argument[-1];taint",
        "org.springframework.web.server.adapter;WebHttpHandlerBuilder;false;codecConfigurer;(ServerCodecConfigurer);;Argument[0];ReturnValue;taint",
        "org.springframework.web.server.adapter;WebHttpHandlerBuilder;false;exceptionHandler;(WebExceptionHandler[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.server.adapter;WebHttpHandlerBuilder;false;exceptionHandler;(WebExceptionHandler[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.server.adapter;WebHttpHandlerBuilder;false;exceptionHandler;(WebExceptionHandler[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.web.server.adapter;WebHttpHandlerBuilder;false;exceptionHandlers;(Consumer);;Argument[-1];ReturnValue;value",
        "org.springframework.web.server.adapter;WebHttpHandlerBuilder;false;filter;(WebFilter[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.server.adapter;WebHttpHandlerBuilder;false;filter;(WebFilter[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.server.adapter;WebHttpHandlerBuilder;false;filter;(WebFilter[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.web.server.adapter;WebHttpHandlerBuilder;false;filters;(Consumer);;Argument[-1];ReturnValue;value",
        "org.springframework.web.server.adapter;WebHttpHandlerBuilder;false;forwardedHeaderTransformer;(ForwardedHeaderTransformer);;Argument[-1];ReturnValue;value",
        "org.springframework.web.server.adapter;WebHttpHandlerBuilder;false;forwardedHeaderTransformer;(ForwardedHeaderTransformer);;Argument[0];Argument[-1];taint",
        "org.springframework.web.server.adapter;WebHttpHandlerBuilder;false;forwardedHeaderTransformer;(ForwardedHeaderTransformer);;Argument[0];ReturnValue;taint",
        "org.springframework.web.server.adapter;WebHttpHandlerBuilder;false;httpHandlerDecorator;(Function);;Argument[-1];ReturnValue;value",
        "org.springframework.web.server.adapter;WebHttpHandlerBuilder;false;httpHandlerDecorator;(Function);;Argument[0];Argument[-1];taint",
        "org.springframework.web.server.adapter;WebHttpHandlerBuilder;false;httpHandlerDecorator;(Function);;Argument[0];ReturnValue;taint",
        "org.springframework.web.server.adapter;WebHttpHandlerBuilder;false;localeContextResolver;(LocaleContextResolver);;Argument[-1];ReturnValue;value",
        "org.springframework.web.server.adapter;WebHttpHandlerBuilder;false;localeContextResolver;(LocaleContextResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.web.server.adapter;WebHttpHandlerBuilder;false;localeContextResolver;(LocaleContextResolver);;Argument[0];ReturnValue;taint",
        "org.springframework.web.server.adapter;WebHttpHandlerBuilder;false;sessionManager;(WebSessionManager);;Argument[-1];ReturnValue;value",
        "org.springframework.web.server.adapter;WebHttpHandlerBuilder;false;sessionManager;(WebSessionManager);;Argument[0];Argument[-1];taint",
        "org.springframework.web.server.adapter;WebHttpHandlerBuilder;false;sessionManager;(WebSessionManager);;Argument[0];ReturnValue;taint",
        "org.springframework.web.server.adapter;WebHttpHandlerBuilder;false;webHandler;(WebHandler);;Argument[0];ReturnValue;taint",
        "org.springframework.web.server.handler;DefaultWebFilterChain;true;DefaultWebFilterChain;(WebHandler,List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.server.handler;DefaultWebFilterChain;true;DefaultWebFilterChain;(WebHandler,List);;Argument[1];Argument[-1];taint",
        "org.springframework.web.server.handler;DefaultWebFilterChain;true;DefaultWebFilterChain;(WebHandler,WebFilter[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.server.handler;DefaultWebFilterChain;true;DefaultWebFilterChain;(WebHandler,WebFilter[]);;Argument[1];Argument[-1];taint",
        "org.springframework.web.server.handler;DefaultWebFilterChain;true;getFilters;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.server.handler;DefaultWebFilterChain;true;getHandler;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.server.handler;ExceptionHandlingWebHandler;true;ExceptionHandlingWebHandler;(WebHandler,List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.server.handler;ExceptionHandlingWebHandler;true;ExceptionHandlingWebHandler;(WebHandler,List);;Argument[1];Argument[-1];taint",
        "org.springframework.web.server.handler;ExceptionHandlingWebHandler;true;getExceptionHandlers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.server.handler;FilteringWebHandler;true;FilteringWebHandler;(WebHandler,List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.server.handler;FilteringWebHandler;true;FilteringWebHandler;(WebHandler,List);;Argument[1];Argument[-1];taint",
        "org.springframework.web.server.handler;FilteringWebHandler;true;getFilters;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.server.handler;ResponseStatusExceptionHandler;true;setWarnLogCategory;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.server.handler;WebHandlerDecorator;true;WebHandlerDecorator;(WebHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.web.server.handler;WebHandlerDecorator;true;getDelegate;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.server.handler;WebHandlerDecorator;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.server.i18n;AcceptHeaderLocaleContextResolver;true;getDefaultLocale;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.server.i18n;AcceptHeaderLocaleContextResolver;true;getSupportedLocales;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.server.i18n;AcceptHeaderLocaleContextResolver;true;setDefaultLocale;(Locale);;Argument[0];Argument[-1];taint",
        "org.springframework.web.server.i18n;AcceptHeaderLocaleContextResolver;true;setSupportedLocales;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.server.i18n;FixedLocaleContextResolver;true;FixedLocaleContextResolver;(Locale);;Argument[0];Argument[-1];taint",
        "org.springframework.web.server.i18n;FixedLocaleContextResolver;true;FixedLocaleContextResolver;(Locale,TimeZone);;Argument[0];Argument[-1];taint",
        "org.springframework.web.server.i18n;FixedLocaleContextResolver;true;FixedLocaleContextResolver;(Locale,TimeZone);;Argument[1];Argument[-1];taint",
        "org.springframework.web.server.session;CookieWebSessionIdResolver;true;addCookieInitializer;(Consumer);;Argument[0];Argument[-1];taint",
        "org.springframework.web.server.session;CookieWebSessionIdResolver;true;getCookieMaxAge;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.server.session;CookieWebSessionIdResolver;true;getCookieName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.server.session;CookieWebSessionIdResolver;true;setCookieMaxAge;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.web.server.session;CookieWebSessionIdResolver;true;setCookieName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.server.session;DefaultWebSessionManager;true;getSessionIdResolver;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.server.session;DefaultWebSessionManager;true;getSessionStore;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.server.session;DefaultWebSessionManager;true;setSessionIdResolver;(WebSessionIdResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.web.server.session;DefaultWebSessionManager;true;setSessionStore;(WebSessionStore);;Argument[0];Argument[-1];taint",
        "org.springframework.web.server.session;HeaderWebSessionIdResolver;true;getHeaderName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.server.session;HeaderWebSessionIdResolver;true;setHeaderName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.server.session;InMemoryWebSessionStore;true;getClock;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.server.session;InMemoryWebSessionStore;true;getSessions;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.server.session;InMemoryWebSessionStore;true;setClock;(Clock);;Argument[0];Argument[-1];taint",
        "org.springframework.web.server;MediaTypeNotSupportedStatusException;true;MediaTypeNotSupportedStatusException;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.server;MediaTypeNotSupportedStatusException;true;MediaTypeNotSupportedStatusException;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.server;MediaTypeNotSupportedStatusException;true;getSupportedMediaTypes;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.server;MethodNotAllowedException;true;MethodNotAllowedException;(HttpMethod,Collection);;Argument[1];Argument[-1];taint",
        "org.springframework.web.server;MethodNotAllowedException;true;MethodNotAllowedException;(String,Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.web.server;MethodNotAllowedException;true;MethodNotAllowedException;(String,Collection);;Argument[1];Argument[-1];taint",
        "org.springframework.web.server;MethodNotAllowedException;true;getHttpMethod;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.server;MethodNotAllowedException;true;getSupportedMethods;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.server;NotAcceptableStatusException;true;NotAcceptableStatusException;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.server;NotAcceptableStatusException;true;NotAcceptableStatusException;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.server;NotAcceptableStatusException;true;getSupportedMediaTypes;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.server;ResponseStatusException;true;ResponseStatusException;(HttpStatus,String);;Argument[1];Argument[-1];taint",
        "org.springframework.web.server;ResponseStatusException;true;ResponseStatusException;(HttpStatus,String,Throwable);;Argument[1];Argument[-1];taint",
        "org.springframework.web.server;ResponseStatusException;true;ResponseStatusException;(int,String,Throwable);;Argument[1];Argument[-1];taint",
        "org.springframework.web.server;ResponseStatusException;true;getHeaders;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.server;ResponseStatusException;true;getReason;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.server;ResponseStatusException;true;getResponseHeaders;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.server;ServerErrorException;true;ServerErrorException;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.server;ServerErrorException;true;ServerErrorException;(String,Method,Throwable);;Argument[0];Argument[-1];taint",
        "org.springframework.web.server;ServerErrorException;true;ServerErrorException;(String,Method,Throwable);;Argument[1];Argument[-1];taint",
        "org.springframework.web.server;ServerErrorException;true;ServerErrorException;(String,MethodParameter);;Argument[0];Argument[-1];taint",
        "org.springframework.web.server;ServerErrorException;true;ServerErrorException;(String,MethodParameter);;Argument[1];Argument[-1];taint",
        "org.springframework.web.server;ServerErrorException;true;ServerErrorException;(String,MethodParameter,Throwable);;Argument[0];Argument[-1];taint",
        "org.springframework.web.server;ServerErrorException;true;ServerErrorException;(String,MethodParameter,Throwable);;Argument[1];Argument[-1];taint",
        "org.springframework.web.server;ServerErrorException;true;ServerErrorException;(String,Throwable);;Argument[0];Argument[-1];taint",
        "org.springframework.web.server;ServerErrorException;true;getHandlerMethod;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.server;ServerErrorException;true;getMethodParameter;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.server;ServerWebExchange$Builder;true;principal;(Mono);;Argument[-1];ReturnValue;value",
        "org.springframework.web.server;ServerWebExchange$Builder;true;principal;(Mono);;Argument[0];Argument[-1];taint",
        "org.springframework.web.server;ServerWebExchange$Builder;true;principal;(Mono);;Argument[0];ReturnValue;taint",
        "org.springframework.web.server;ServerWebExchange$Builder;true;request;(Consumer);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.server;ServerWebExchange$Builder;true;request;(ServerHttpRequest);;Argument[-1];ReturnValue;value",
        "org.springframework.web.server;ServerWebExchange$Builder;true;request;(ServerHttpRequest);;Argument[0];Argument[-1];taint",
        "org.springframework.web.server;ServerWebExchange$Builder;true;request;(ServerHttpRequest);;Argument[0];ReturnValue;taint",
        "org.springframework.web.server;ServerWebExchange$Builder;true;response;(ServerHttpResponse);;Argument[-1];ReturnValue;value",
        "org.springframework.web.server;ServerWebExchange$Builder;true;response;(ServerHttpResponse);;Argument[0];Argument[-1];taint",
        "org.springframework.web.server;ServerWebExchange$Builder;true;response;(ServerHttpResponse);;Argument[0];ReturnValue;taint",
        "org.springframework.web.server;ServerWebExchange;true;getApplicationContext;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.server;ServerWebExchange;true;getAttribute;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.server;ServerWebExchange;true;getAttributeOrDefault;(String,Object);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.server;ServerWebExchange;true;getAttributeOrDefault;(String,Object);;Argument[1];ReturnValue;taint",
        "org.springframework.web.server;ServerWebExchange;true;getAttributes;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.server;ServerWebExchange;true;getFormData;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.server;ServerWebExchange;true;getLogPrefix;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.server;ServerWebExchange;true;getMultipartData;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.server;ServerWebExchange;true;getPrincipal;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.server;ServerWebExchange;true;getRequest;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.server;ServerWebExchange;true;getRequiredAttribute;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.server;ServerWebExchange;true;getResponse;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.server;ServerWebExchange;true;getSession;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.server;ServerWebExchange;true;transformUrl;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.server;ServerWebExchangeDecorator;true;getDelegate;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.server;ServerWebExchangeDecorator;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.server;ServerWebInputException;true;ServerWebInputException;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.server;ServerWebInputException;true;ServerWebInputException;(String,MethodParameter);;Argument[0];Argument[-1];taint",
        "org.springframework.web.server;ServerWebInputException;true;ServerWebInputException;(String,MethodParameter);;Argument[1];Argument[-1];taint",
        "org.springframework.web.server;ServerWebInputException;true;ServerWebInputException;(String,MethodParameter,Throwable);;Argument[0];Argument[-1];taint",
        "org.springframework.web.server;ServerWebInputException;true;ServerWebInputException;(String,MethodParameter,Throwable);;Argument[1];Argument[-1];taint",
        "org.springframework.web.server;ServerWebInputException;true;getMethodParameter;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.server;UnsupportedMediaTypeStatusException;true;UnsupportedMediaTypeStatusException;(MediaType,List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.server;UnsupportedMediaTypeStatusException;true;UnsupportedMediaTypeStatusException;(MediaType,List);;Argument[1];Argument[-1];taint",
        "org.springframework.web.server;UnsupportedMediaTypeStatusException;true;UnsupportedMediaTypeStatusException;(MediaType,List,HttpMethod);;Argument[0];Argument[-1];taint",
        "org.springframework.web.server;UnsupportedMediaTypeStatusException;true;UnsupportedMediaTypeStatusException;(MediaType,List,HttpMethod);;Argument[1];Argument[-1];taint",
        "org.springframework.web.server;UnsupportedMediaTypeStatusException;true;UnsupportedMediaTypeStatusException;(MediaType,List,ResolvableType);;Argument[0];Argument[-1];taint",
        "org.springframework.web.server;UnsupportedMediaTypeStatusException;true;UnsupportedMediaTypeStatusException;(MediaType,List,ResolvableType);;Argument[1];Argument[-1];taint",
        "org.springframework.web.server;UnsupportedMediaTypeStatusException;true;UnsupportedMediaTypeStatusException;(MediaType,List,ResolvableType);;Argument[2];Argument[-1];taint",
        "org.springframework.web.server;UnsupportedMediaTypeStatusException;true;UnsupportedMediaTypeStatusException;(MediaType,List,ResolvableType,HttpMethod);;Argument[0];Argument[-1];taint",
        "org.springframework.web.server;UnsupportedMediaTypeStatusException;true;UnsupportedMediaTypeStatusException;(MediaType,List,ResolvableType,HttpMethod);;Argument[1];Argument[-1];taint",
        "org.springframework.web.server;UnsupportedMediaTypeStatusException;true;UnsupportedMediaTypeStatusException;(MediaType,List,ResolvableType,HttpMethod);;Argument[2];Argument[-1];taint",
        "org.springframework.web.server;UnsupportedMediaTypeStatusException;true;UnsupportedMediaTypeStatusException;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.server;UnsupportedMediaTypeStatusException;true;getBodyType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.server;UnsupportedMediaTypeStatusException;true;getContentType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.server;UnsupportedMediaTypeStatusException;true;getSupportedMediaTypes;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.server;WebSession;true;getAttribute;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.server;WebSession;true;getAttributeOrDefault;(String,Object);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.server;WebSession;true;getAttributeOrDefault;(String,Object);;Argument[1];ReturnValue;taint",
        "org.springframework.web.server;WebSession;true;getAttributes;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.server;WebSession;true;getCreationTime;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.server;WebSession;true;getLastAccessTime;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.server;WebSession;true;getMaxIdleTime;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.server;WebSession;true;getRequiredAttribute;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.server;WebSession;true;setMaxIdleTime;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.config.annotation;AsyncSupportConfigurer;true;registerCallableInterceptors;(CallableProcessingInterceptor[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.config.annotation;AsyncSupportConfigurer;true;registerCallableInterceptors;(CallableProcessingInterceptor[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.config.annotation;AsyncSupportConfigurer;true;registerCallableInterceptors;(CallableProcessingInterceptor[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.config.annotation;AsyncSupportConfigurer;true;registerDeferredResultInterceptors;(DeferredResultProcessingInterceptor[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.config.annotation;AsyncSupportConfigurer;true;registerDeferredResultInterceptors;(DeferredResultProcessingInterceptor[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.config.annotation;AsyncSupportConfigurer;true;registerDeferredResultInterceptors;(DeferredResultProcessingInterceptor[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.config.annotation;AsyncSupportConfigurer;true;setDefaultTimeout;(long);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.config.annotation;AsyncSupportConfigurer;true;setTaskExecutor;(AsyncTaskExecutor);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.config.annotation;AsyncSupportConfigurer;true;setTaskExecutor;(AsyncTaskExecutor);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.config.annotation;AsyncSupportConfigurer;true;setTaskExecutor;(AsyncTaskExecutor);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.config.annotation;ContentNegotiationConfigurer;true;ContentNegotiationConfigurer;(ServletContext);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.config.annotation;ContentNegotiationConfigurer;true;defaultContentType;(MediaType[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.config.annotation;ContentNegotiationConfigurer;true;defaultContentType;(MediaType[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.config.annotation;ContentNegotiationConfigurer;true;defaultContentType;(MediaType[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.config.annotation;ContentNegotiationConfigurer;true;defaultContentTypeStrategy;(ContentNegotiationStrategy);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.config.annotation;ContentNegotiationConfigurer;true;defaultContentTypeStrategy;(ContentNegotiationStrategy);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.config.annotation;ContentNegotiationConfigurer;true;defaultContentTypeStrategy;(ContentNegotiationStrategy);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.config.annotation;ContentNegotiationConfigurer;true;favorParameter;(boolean);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.config.annotation;ContentNegotiationConfigurer;true;favorPathExtension;(boolean);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.config.annotation;ContentNegotiationConfigurer;true;ignoreAcceptHeader;(boolean);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.config.annotation;ContentNegotiationConfigurer;true;ignoreUnknownPathExtensions;(boolean);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.config.annotation;ContentNegotiationConfigurer;true;mediaType;(String,MediaType);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.config.annotation;ContentNegotiationConfigurer;true;mediaType;(String,MediaType);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.config.annotation;ContentNegotiationConfigurer;true;mediaType;(String,MediaType);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.config.annotation;ContentNegotiationConfigurer;true;mediaType;(String,MediaType);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.config.annotation;ContentNegotiationConfigurer;true;mediaType;(String,MediaType);;Argument[1];ReturnValue;taint",
        "org.springframework.web.servlet.config.annotation;ContentNegotiationConfigurer;true;mediaTypes;(Map);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.config.annotation;ContentNegotiationConfigurer;true;mediaTypes;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.config.annotation;ContentNegotiationConfigurer;true;mediaTypes;(Map);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.config.annotation;ContentNegotiationConfigurer;true;parameterName;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.config.annotation;ContentNegotiationConfigurer;true;parameterName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.config.annotation;ContentNegotiationConfigurer;true;parameterName;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.config.annotation;ContentNegotiationConfigurer;true;replaceMediaTypes;(Map);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.config.annotation;ContentNegotiationConfigurer;true;replaceMediaTypes;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.config.annotation;ContentNegotiationConfigurer;true;replaceMediaTypes;(Map);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.config.annotation;ContentNegotiationConfigurer;true;strategies;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.config.annotation;ContentNegotiationConfigurer;true;useJaf;(boolean);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.config.annotation;ContentNegotiationConfigurer;true;useRegisteredExtensionsOnly;(boolean);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.config.annotation;CorsRegistration;true;CorsRegistration;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.config.annotation;CorsRegistration;true;allowCredentials;(boolean);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.config.annotation;CorsRegistration;true;allowedHeaders;(String[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.config.annotation;CorsRegistration;true;allowedHeaders;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.config.annotation;CorsRegistration;true;allowedHeaders;(String[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.config.annotation;CorsRegistration;true;allowedMethods;(String[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.config.annotation;CorsRegistration;true;allowedMethods;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.config.annotation;CorsRegistration;true;allowedMethods;(String[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.config.annotation;CorsRegistration;true;allowedOriginPatterns;(String[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.config.annotation;CorsRegistration;true;allowedOriginPatterns;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.config.annotation;CorsRegistration;true;allowedOriginPatterns;(String[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.config.annotation;CorsRegistration;true;allowedOrigins;(String[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.config.annotation;CorsRegistration;true;combine;(CorsConfiguration);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.config.annotation;CorsRegistration;true;exposedHeaders;(String[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.config.annotation;CorsRegistration;true;exposedHeaders;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.config.annotation;CorsRegistration;true;exposedHeaders;(String[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.config.annotation;CorsRegistration;true;maxAge;(long);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.config.annotation;CorsRegistry;true;addMapping;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.config.annotation;CorsRegistry;true;addMapping;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.config.annotation;DefaultServletHandlerConfigurer;true;DefaultServletHandlerConfigurer;(ServletContext);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.config.annotation;DefaultServletHandlerConfigurer;true;enable;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.config.annotation;DelegatingWebMvcConfiguration;true;setConfigurers;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.config.annotation;InterceptorRegistration;true;InterceptorRegistration;(HandlerInterceptor);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.config.annotation;InterceptorRegistration;true;addPathPatterns;(List);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.config.annotation;InterceptorRegistration;true;addPathPatterns;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.config.annotation;InterceptorRegistration;true;addPathPatterns;(List);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.config.annotation;InterceptorRegistration;true;addPathPatterns;(String[]);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.config.annotation;InterceptorRegistration;true;addPathPatterns;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.config.annotation;InterceptorRegistration;true;addPathPatterns;(String[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.config.annotation;InterceptorRegistration;true;excludePathPatterns;(List);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.config.annotation;InterceptorRegistration;true;excludePathPatterns;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.config.annotation;InterceptorRegistration;true;excludePathPatterns;(List);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.config.annotation;InterceptorRegistration;true;excludePathPatterns;(String[]);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.config.annotation;InterceptorRegistration;true;excludePathPatterns;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.config.annotation;InterceptorRegistration;true;excludePathPatterns;(String[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.config.annotation;InterceptorRegistration;true;order;(int);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.config.annotation;InterceptorRegistration;true;pathMatcher;(PathMatcher);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.config.annotation;InterceptorRegistration;true;pathMatcher;(PathMatcher);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.config.annotation;InterceptorRegistration;true;pathMatcher;(PathMatcher);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.config.annotation;InterceptorRegistry;true;addInterceptor;(HandlerInterceptor);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.config.annotation;InterceptorRegistry;true;addInterceptor;(HandlerInterceptor);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.config.annotation;InterceptorRegistry;true;addWebRequestInterceptor;(WebRequestInterceptor);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.config.annotation;InterceptorRegistry;true;addWebRequestInterceptor;(WebRequestInterceptor);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.config.annotation;PathMatchConfigurer;true;addPathPrefix;(String,Predicate);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.config.annotation;PathMatchConfigurer;true;addPathPrefix;(String,Predicate);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.config.annotation;PathMatchConfigurer;true;addPathPrefix;(String,Predicate);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.config.annotation;PathMatchConfigurer;true;addPathPrefix;(String,Predicate);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.config.annotation;PathMatchConfigurer;true;addPathPrefix;(String,Predicate);;Argument[1];ReturnValue;taint",
        "org.springframework.web.servlet.config.annotation;PathMatchConfigurer;true;getPathMatcher;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.config.annotation;PathMatchConfigurer;true;getPatternParser;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.config.annotation;PathMatchConfigurer;true;getPatternParserOrDefault;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.config.annotation;PathMatchConfigurer;true;getUrlPathHelper;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.config.annotation;PathMatchConfigurer;true;setPathMatcher;(PathMatcher);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.config.annotation;PathMatchConfigurer;true;setPathMatcher;(PathMatcher);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.config.annotation;PathMatchConfigurer;true;setPathMatcher;(PathMatcher);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.config.annotation;PathMatchConfigurer;true;setPatternParser;(PathPatternParser);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.config.annotation;PathMatchConfigurer;true;setPatternParser;(PathPatternParser);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.config.annotation;PathMatchConfigurer;true;setPatternParser;(PathPatternParser);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.config.annotation;PathMatchConfigurer;true;setUrlPathHelper;(UrlPathHelper);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.config.annotation;PathMatchConfigurer;true;setUrlPathHelper;(UrlPathHelper);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.config.annotation;PathMatchConfigurer;true;setUrlPathHelper;(UrlPathHelper);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.config.annotation;PathMatchConfigurer;true;setUseRegisteredSuffixPatternMatch;(Boolean);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.config.annotation;PathMatchConfigurer;true;setUseSuffixPatternMatch;(Boolean);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.config.annotation;PathMatchConfigurer;true;setUseTrailingSlashMatch;(Boolean);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.config.annotation;RedirectViewControllerRegistration;true;RedirectViewControllerRegistration;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.config.annotation;RedirectViewControllerRegistration;true;RedirectViewControllerRegistration;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.config.annotation;RedirectViewControllerRegistration;true;setContextRelative;(boolean);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.config.annotation;RedirectViewControllerRegistration;true;setKeepQueryParams;(boolean);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.config.annotation;RedirectViewControllerRegistration;true;setStatusCode;(HttpStatus);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.config.annotation;ResourceChainRegistration;true;ResourceChainRegistration;(boolean,Cache);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.config.annotation;ResourceChainRegistration;true;addResolver;(ResourceResolver);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.config.annotation;ResourceChainRegistration;true;addResolver;(ResourceResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.config.annotation;ResourceChainRegistration;true;addResolver;(ResourceResolver);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.config.annotation;ResourceChainRegistration;true;addTransformer;(ResourceTransformer);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.config.annotation;ResourceChainRegistration;true;addTransformer;(ResourceTransformer);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.config.annotation;ResourceChainRegistration;true;addTransformer;(ResourceTransformer);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.config.annotation;ResourceHandlerRegistration;true;ResourceHandlerRegistration;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.config.annotation;ResourceHandlerRegistration;true;addResourceLocations;(Resource[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.config.annotation;ResourceHandlerRegistration;true;addResourceLocations;(String[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.config.annotation;ResourceHandlerRegistration;true;addResourceLocations;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.config.annotation;ResourceHandlerRegistration;true;addResourceLocations;(String[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.config.annotation;ResourceHandlerRegistration;true;resourceChain;(boolean);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.config.annotation;ResourceHandlerRegistration;true;resourceChain;(boolean,Cache);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.config.annotation;ResourceHandlerRegistration;true;resourceChain;(boolean,Cache);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.config.annotation;ResourceHandlerRegistration;true;resourceChain;(boolean,Cache);;Argument[1];ReturnValue;taint",
        "org.springframework.web.servlet.config.annotation;ResourceHandlerRegistration;true;setCacheControl;(CacheControl);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.config.annotation;ResourceHandlerRegistration;true;setCacheControl;(CacheControl);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.config.annotation;ResourceHandlerRegistration;true;setCacheControl;(CacheControl);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.config.annotation;ResourceHandlerRegistration;true;setCachePeriod;(Integer);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.config.annotation;ResourceHandlerRegistration;true;setUseLastModified;(boolean);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.config.annotation;ResourceHandlerRegistry;true;ResourceHandlerRegistry;(ApplicationContext,ServletContext);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.config.annotation;ResourceHandlerRegistry;true;ResourceHandlerRegistry;(ApplicationContext,ServletContext);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.config.annotation;ResourceHandlerRegistry;true;ResourceHandlerRegistry;(ApplicationContext,ServletContext,ContentNegotiationManager);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.config.annotation;ResourceHandlerRegistry;true;ResourceHandlerRegistry;(ApplicationContext,ServletContext,ContentNegotiationManager);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.config.annotation;ResourceHandlerRegistry;true;ResourceHandlerRegistry;(ApplicationContext,ServletContext,ContentNegotiationManager);;Argument[2];Argument[-1];taint",
        "org.springframework.web.servlet.config.annotation;ResourceHandlerRegistry;true;ResourceHandlerRegistry;(ApplicationContext,ServletContext,ContentNegotiationManager,UrlPathHelper);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.config.annotation;ResourceHandlerRegistry;true;ResourceHandlerRegistry;(ApplicationContext,ServletContext,ContentNegotiationManager,UrlPathHelper);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.config.annotation;ResourceHandlerRegistry;true;ResourceHandlerRegistry;(ApplicationContext,ServletContext,ContentNegotiationManager,UrlPathHelper);;Argument[2];Argument[-1];taint",
        "org.springframework.web.servlet.config.annotation;ResourceHandlerRegistry;true;ResourceHandlerRegistry;(ApplicationContext,ServletContext,ContentNegotiationManager,UrlPathHelper);;Argument[3];Argument[-1];taint",
        "org.springframework.web.servlet.config.annotation;ResourceHandlerRegistry;true;addResourceHandler;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.config.annotation;ResourceHandlerRegistry;true;addResourceHandler;(String[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.config.annotation;ResourceHandlerRegistry;true;setOrder;(int);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.config.annotation;UrlBasedViewResolverRegistration;true;UrlBasedViewResolverRegistration;(UrlBasedViewResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.config.annotation;UrlBasedViewResolverRegistration;true;attributes;(Map);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.config.annotation;UrlBasedViewResolverRegistration;true;attributes;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.config.annotation;UrlBasedViewResolverRegistration;true;attributes;(Map);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.config.annotation;UrlBasedViewResolverRegistration;true;cache;(boolean);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.config.annotation;UrlBasedViewResolverRegistration;true;cacheLimit;(int);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.config.annotation;UrlBasedViewResolverRegistration;true;prefix;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.config.annotation;UrlBasedViewResolverRegistration;true;prefix;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.config.annotation;UrlBasedViewResolverRegistration;true;prefix;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.config.annotation;UrlBasedViewResolverRegistration;true;suffix;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.config.annotation;UrlBasedViewResolverRegistration;true;suffix;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.config.annotation;UrlBasedViewResolverRegistration;true;suffix;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.config.annotation;UrlBasedViewResolverRegistration;true;viewClass;(Class);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.config.annotation;UrlBasedViewResolverRegistration;true;viewNames;(String[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.config.annotation;UrlBasedViewResolverRegistration;true;viewNames;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.config.annotation;UrlBasedViewResolverRegistration;true;viewNames;(String[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.config.annotation;ViewControllerRegistration;true;ViewControllerRegistration;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.config.annotation;ViewControllerRegistration;true;setStatusCode;(HttpStatus);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.config.annotation;ViewControllerRegistration;true;setViewName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.config.annotation;ViewControllerRegistry;true;ViewControllerRegistry;(ApplicationContext);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.config.annotation;ViewControllerRegistry;true;addRedirectViewController;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.config.annotation;ViewControllerRegistry;true;addRedirectViewController;(String,String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.config.annotation;ViewControllerRegistry;true;addRedirectViewController;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.config.annotation;ViewControllerRegistry;true;addRedirectViewController;(String,String);;Argument[1];ReturnValue;taint",
        "org.springframework.web.servlet.config.annotation;ViewControllerRegistry;true;addStatusController;(String,HttpStatus);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.config.annotation;ViewControllerRegistry;true;addViewController;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.config.annotation;ViewControllerRegistry;true;addViewController;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.config.annotation;ViewResolverRegistry;true;ViewResolverRegistry;(ContentNegotiationManager,ApplicationContext);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.config.annotation;ViewResolverRegistry;true;ViewResolverRegistry;(ContentNegotiationManager,ApplicationContext);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.config.annotation;ViewResolverRegistry;true;enableContentNegotiation;(View[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.config.annotation;ViewResolverRegistry;true;enableContentNegotiation;(boolean,View[]);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.config.annotation;ViewResolverRegistry;true;jsp;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.config.annotation;ViewResolverRegistry;true;jsp;(String,String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.config.annotation;ViewResolverRegistry;true;jsp;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.config.annotation;ViewResolverRegistry;true;jsp;(String,String);;Argument[1];ReturnValue;taint",
        "org.springframework.web.servlet.config.annotation;ViewResolverRegistry;true;viewResolver;(ViewResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.config.annotation;WebMvcConfigurationSupport;true;getApplicationContext;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.config.annotation;WebMvcConfigurationSupport;true;getServletContext;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.config.annotation;WebMvcConfigurationSupport;true;handlerExceptionResolver;(ContentNegotiationManager);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.config.annotation;WebMvcConfigurationSupport;true;mvcContentNegotiationManager;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.config.annotation;WebMvcConfigurationSupport;true;mvcPathMatcher;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.config.annotation;WebMvcConfigurationSupport;true;mvcPatternParser;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.config.annotation;WebMvcConfigurationSupport;true;mvcUriComponentsContributor;(FormattingConversionService,RequestMappingHandlerAdapter);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.config.annotation;WebMvcConfigurationSupport;true;mvcUrlPathHelper;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.config.annotation;WebMvcConfigurationSupport;true;requestMappingHandlerAdapter;(ContentNegotiationManager,FormattingConversionService,Validator);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.config.annotation;WebMvcConfigurationSupport;true;requestMappingHandlerAdapter;(ContentNegotiationManager,FormattingConversionService,Validator);;Argument[1];ReturnValue;taint",
        "org.springframework.web.servlet.config.annotation;WebMvcConfigurationSupport;true;requestMappingHandlerAdapter;(ContentNegotiationManager,FormattingConversionService,Validator);;Argument[2];ReturnValue;taint",
        "org.springframework.web.servlet.config.annotation;WebMvcConfigurationSupport;true;requestMappingHandlerMapping;(ContentNegotiationManager,FormattingConversionService,ResourceUrlProvider);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.config.annotation;WebMvcConfigurationSupport;true;resourceHandlerMapping;(ContentNegotiationManager,FormattingConversionService,ResourceUrlProvider);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function.support;RouterFunctionMapping;true;RouterFunctionMapping;(RouterFunction);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.function.support;RouterFunctionMapping;true;getRouterFunction;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.function.support;RouterFunctionMapping;true;setMessageConverters;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.function.support;RouterFunctionMapping;true;setRouterFunction;(RouterFunction);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.function;AsyncServerResponse;true;create;(Object);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;AsyncServerResponse;true;create;(Object,Duration);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;AsyncServerResponse;true;create;(Object,Duration);;Argument[1];ReturnValue;taint",
        "org.springframework.web.servlet.function;ChangePathPatternParserVisitor$Target;true;changeParser;(PathPatternParser);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.function;EntityResponse;true;fromObject;(Object);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;EntityResponse;true;fromObject;(Object,ParameterizedTypeReference);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;RenderingResponse$Builder;true;cookie;(Cookie);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.function;RenderingResponse$Builder;true;cookie;(Cookie);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.function;RenderingResponse$Builder;true;cookie;(Cookie);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;RenderingResponse$Builder;true;cookies;(Consumer);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.function;RenderingResponse$Builder;true;header;(String,String[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.function;RenderingResponse$Builder;true;header;(String,String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.function;RenderingResponse$Builder;true;header;(String,String[]);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;RenderingResponse$Builder;true;header;(String,String[]);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.function;RenderingResponse$Builder;true;header;(String,String[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.web.servlet.function;RenderingResponse$Builder;true;headers;(Consumer);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.function;RenderingResponse$Builder;true;modelAttribute;(Object);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.function;RenderingResponse$Builder;true;modelAttribute;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.function;RenderingResponse$Builder;true;modelAttribute;(Object);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;RenderingResponse$Builder;true;modelAttribute;(String,Object);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.function;RenderingResponse$Builder;true;modelAttribute;(String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.function;RenderingResponse$Builder;true;modelAttribute;(String,Object);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;RenderingResponse$Builder;true;modelAttribute;(String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.function;RenderingResponse$Builder;true;modelAttribute;(String,Object);;Argument[1];ReturnValue;taint",
        "org.springframework.web.servlet.function;RenderingResponse$Builder;true;modelAttributes;(Collection);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.function;RenderingResponse$Builder;true;modelAttributes;(Map);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.function;RenderingResponse$Builder;true;modelAttributes;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.function;RenderingResponse$Builder;true;modelAttributes;(Map);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;RenderingResponse$Builder;true;modelAttributes;(Object[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.function;RenderingResponse$Builder;true;status;(HttpStatus);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.function;RenderingResponse$Builder;true;status;(int);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.function;RenderingResponse;true;create;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;RenderingResponse;true;model;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.function;RenderingResponse;true;name;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.function;RequestPredicate;true;and;(RequestPredicate);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;RequestPredicate;true;nest;(ServerRequest);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;RequestPredicate;true;or;(RequestPredicate);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;RequestPredicates$Visitor;true;header;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.function;RequestPredicates$Visitor;true;header;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.function;RequestPredicates$Visitor;true;method;(Set);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.function;RequestPredicates$Visitor;true;param;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.function;RequestPredicates$Visitor;true;param;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.function;RequestPredicates$Visitor;true;path;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.function;RequestPredicates$Visitor;true;pathExtension;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.function;RequestPredicates$Visitor;true;unknown;(RequestPredicate);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.function;RequestPredicates;true;DELETE;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;RequestPredicates;true;GET;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;RequestPredicates;true;HEAD;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;RequestPredicates;true;OPTIONS;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;RequestPredicates;true;PATCH;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;RequestPredicates;true;POST;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;RequestPredicates;true;PUT;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;RequestPredicates;true;accept;(MediaType[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;RequestPredicates;true;contentType;(MediaType[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;RequestPredicates;true;headers;(Predicate);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;RequestPredicates;true;param;(String,Predicate);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;RequestPredicates;true;param;(String,Predicate);;Argument[1];ReturnValue;taint",
        "org.springframework.web.servlet.function;RequestPredicates;true;param;(String,String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;RequestPredicates;true;param;(String,String);;Argument[1];ReturnValue;taint",
        "org.springframework.web.servlet.function;RequestPredicates;true;path;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;RequestPredicates;true;pathExtension;(Predicate);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;RequestPredicates;true;pathExtension;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunction;true;and;(RouterFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunction;true;andNest;(RequestPredicate,RouterFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunction;true;andNest;(RequestPredicate,RouterFunction);;Argument[1];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunction;true;andOther;(RouterFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunction;true;andRoute;(RequestPredicate,HandlerFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunction;true;andRoute;(RequestPredicate,HandlerFunction);;Argument[1];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunction;true;filter;(HandlerFilterFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunction;true;withAttribute;(String,Object);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunction;true;withAttribute;(String,Object);;Argument[1];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;DELETE;(HandlerFunction);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;DELETE;(HandlerFunction);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;DELETE;(HandlerFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;DELETE;(RequestPredicate,HandlerFunction);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;DELETE;(RequestPredicate,HandlerFunction);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;DELETE;(RequestPredicate,HandlerFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;DELETE;(RequestPredicate,HandlerFunction);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;DELETE;(RequestPredicate,HandlerFunction);;Argument[1];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;DELETE;(String,HandlerFunction);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;DELETE;(String,HandlerFunction);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;DELETE;(String,HandlerFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;DELETE;(String,HandlerFunction);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;DELETE;(String,HandlerFunction);;Argument[1];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;DELETE;(String,RequestPredicate,HandlerFunction);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;DELETE;(String,RequestPredicate,HandlerFunction);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;DELETE;(String,RequestPredicate,HandlerFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;DELETE;(String,RequestPredicate,HandlerFunction);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;DELETE;(String,RequestPredicate,HandlerFunction);;Argument[1];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;DELETE;(String,RequestPredicate,HandlerFunction);;Argument[2];Argument[-1];taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;DELETE;(String,RequestPredicate,HandlerFunction);;Argument[2];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;GET;(HandlerFunction);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;GET;(HandlerFunction);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;GET;(HandlerFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;GET;(RequestPredicate,HandlerFunction);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;GET;(RequestPredicate,HandlerFunction);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;GET;(RequestPredicate,HandlerFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;GET;(RequestPredicate,HandlerFunction);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;GET;(RequestPredicate,HandlerFunction);;Argument[1];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;GET;(String,HandlerFunction);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;GET;(String,HandlerFunction);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;GET;(String,HandlerFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;GET;(String,HandlerFunction);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;GET;(String,HandlerFunction);;Argument[1];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;GET;(String,RequestPredicate,HandlerFunction);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;GET;(String,RequestPredicate,HandlerFunction);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;GET;(String,RequestPredicate,HandlerFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;GET;(String,RequestPredicate,HandlerFunction);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;GET;(String,RequestPredicate,HandlerFunction);;Argument[1];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;GET;(String,RequestPredicate,HandlerFunction);;Argument[2];Argument[-1];taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;GET;(String,RequestPredicate,HandlerFunction);;Argument[2];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;HEAD;(HandlerFunction);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;HEAD;(HandlerFunction);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;HEAD;(HandlerFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;HEAD;(RequestPredicate,HandlerFunction);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;HEAD;(RequestPredicate,HandlerFunction);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;HEAD;(RequestPredicate,HandlerFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;HEAD;(RequestPredicate,HandlerFunction);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;HEAD;(RequestPredicate,HandlerFunction);;Argument[1];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;HEAD;(String,HandlerFunction);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;HEAD;(String,HandlerFunction);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;HEAD;(String,HandlerFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;HEAD;(String,HandlerFunction);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;HEAD;(String,HandlerFunction);;Argument[1];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;HEAD;(String,RequestPredicate,HandlerFunction);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;HEAD;(String,RequestPredicate,HandlerFunction);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;HEAD;(String,RequestPredicate,HandlerFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;HEAD;(String,RequestPredicate,HandlerFunction);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;HEAD;(String,RequestPredicate,HandlerFunction);;Argument[1];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;HEAD;(String,RequestPredicate,HandlerFunction);;Argument[2];Argument[-1];taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;HEAD;(String,RequestPredicate,HandlerFunction);;Argument[2];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;OPTIONS;(HandlerFunction);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;OPTIONS;(HandlerFunction);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;OPTIONS;(HandlerFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;OPTIONS;(RequestPredicate,HandlerFunction);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;OPTIONS;(RequestPredicate,HandlerFunction);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;OPTIONS;(RequestPredicate,HandlerFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;OPTIONS;(RequestPredicate,HandlerFunction);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;OPTIONS;(RequestPredicate,HandlerFunction);;Argument[1];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;OPTIONS;(String,HandlerFunction);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;OPTIONS;(String,HandlerFunction);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;OPTIONS;(String,HandlerFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;OPTIONS;(String,HandlerFunction);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;OPTIONS;(String,HandlerFunction);;Argument[1];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;OPTIONS;(String,RequestPredicate,HandlerFunction);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;OPTIONS;(String,RequestPredicate,HandlerFunction);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;OPTIONS;(String,RequestPredicate,HandlerFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;OPTIONS;(String,RequestPredicate,HandlerFunction);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;OPTIONS;(String,RequestPredicate,HandlerFunction);;Argument[1];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;OPTIONS;(String,RequestPredicate,HandlerFunction);;Argument[2];Argument[-1];taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;OPTIONS;(String,RequestPredicate,HandlerFunction);;Argument[2];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;PATCH;(HandlerFunction);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;PATCH;(HandlerFunction);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;PATCH;(HandlerFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;PATCH;(RequestPredicate,HandlerFunction);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;PATCH;(RequestPredicate,HandlerFunction);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;PATCH;(RequestPredicate,HandlerFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;PATCH;(RequestPredicate,HandlerFunction);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;PATCH;(RequestPredicate,HandlerFunction);;Argument[1];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;PATCH;(String,HandlerFunction);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;PATCH;(String,HandlerFunction);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;PATCH;(String,HandlerFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;PATCH;(String,HandlerFunction);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;PATCH;(String,HandlerFunction);;Argument[1];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;PATCH;(String,RequestPredicate,HandlerFunction);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;PATCH;(String,RequestPredicate,HandlerFunction);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;PATCH;(String,RequestPredicate,HandlerFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;PATCH;(String,RequestPredicate,HandlerFunction);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;PATCH;(String,RequestPredicate,HandlerFunction);;Argument[1];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;PATCH;(String,RequestPredicate,HandlerFunction);;Argument[2];Argument[-1];taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;PATCH;(String,RequestPredicate,HandlerFunction);;Argument[2];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;POST;(HandlerFunction);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;POST;(HandlerFunction);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;POST;(HandlerFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;POST;(RequestPredicate,HandlerFunction);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;POST;(RequestPredicate,HandlerFunction);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;POST;(RequestPredicate,HandlerFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;POST;(RequestPredicate,HandlerFunction);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;POST;(RequestPredicate,HandlerFunction);;Argument[1];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;POST;(String,HandlerFunction);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;POST;(String,HandlerFunction);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;POST;(String,HandlerFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;POST;(String,HandlerFunction);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;POST;(String,HandlerFunction);;Argument[1];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;POST;(String,RequestPredicate,HandlerFunction);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;POST;(String,RequestPredicate,HandlerFunction);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;POST;(String,RequestPredicate,HandlerFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;POST;(String,RequestPredicate,HandlerFunction);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;POST;(String,RequestPredicate,HandlerFunction);;Argument[1];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;POST;(String,RequestPredicate,HandlerFunction);;Argument[2];Argument[-1];taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;POST;(String,RequestPredicate,HandlerFunction);;Argument[2];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;PUT;(HandlerFunction);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;PUT;(HandlerFunction);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;PUT;(HandlerFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;PUT;(RequestPredicate,HandlerFunction);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;PUT;(RequestPredicate,HandlerFunction);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;PUT;(RequestPredicate,HandlerFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;PUT;(RequestPredicate,HandlerFunction);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;PUT;(RequestPredicate,HandlerFunction);;Argument[1];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;PUT;(String,HandlerFunction);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;PUT;(String,HandlerFunction);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;PUT;(String,HandlerFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;PUT;(String,HandlerFunction);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;PUT;(String,HandlerFunction);;Argument[1];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;PUT;(String,RequestPredicate,HandlerFunction);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;PUT;(String,RequestPredicate,HandlerFunction);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;PUT;(String,RequestPredicate,HandlerFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;PUT;(String,RequestPredicate,HandlerFunction);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;PUT;(String,RequestPredicate,HandlerFunction);;Argument[1];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;PUT;(String,RequestPredicate,HandlerFunction);;Argument[2];Argument[-1];taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;PUT;(String,RequestPredicate,HandlerFunction);;Argument[2];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;add;(RouterFunction);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;add;(RouterFunction);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;add;(RouterFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;after;(BiFunction);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;before;(Function);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;filter;(HandlerFilterFunction);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;filter;(HandlerFilterFunction);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;filter;(HandlerFilterFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;nest;(RequestPredicate,Consumer);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;nest;(RequestPredicate,Consumer);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;nest;(RequestPredicate,Consumer);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;nest;(RequestPredicate,Supplier);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;nest;(RequestPredicate,Supplier);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;nest;(RequestPredicate,Supplier);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;onError;(Class,BiFunction);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;onError;(Predicate,BiFunction);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;path;(String,Consumer);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;path;(String,Consumer);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;path;(String,Consumer);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;path;(String,Supplier);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;path;(String,Supplier);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;path;(String,Supplier);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;resources;(Function);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;resources;(Function);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;resources;(Function);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;resources;(String,Resource);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;resources;(String,Resource);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;resources;(String,Resource);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;resources;(String,Resource);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;resources;(String,Resource);;Argument[1];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;route;(RequestPredicate,HandlerFunction);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;route;(RequestPredicate,HandlerFunction);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;route;(RequestPredicate,HandlerFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;route;(RequestPredicate,HandlerFunction);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;route;(RequestPredicate,HandlerFunction);;Argument[1];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;withAttribute;(String,Object);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;withAttribute;(String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;withAttribute;(String,Object);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;withAttribute;(String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;withAttribute;(String,Object);;Argument[1];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions$Builder;true;withAttributes;(Consumer);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.function;RouterFunctions$Visitor;true;resources;(Function);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.function;RouterFunctions$Visitor;true;route;(RequestPredicate,HandlerFunction);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.function;RouterFunctions$Visitor;true;route;(RequestPredicate,HandlerFunction);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.function;RouterFunctions$Visitor;true;startNested;(RequestPredicate);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.function;RouterFunctions$Visitor;true;unknown;(RouterFunction);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.function;RouterFunctions;true;changeParser;(RouterFunction,PathPatternParser);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions;true;nest;(RequestPredicate,RouterFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions;true;nest;(RequestPredicate,RouterFunction);;Argument[1];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions;true;resourceLookupFunction;(String,Resource);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions;true;resourceLookupFunction;(String,Resource);;Argument[1];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions;true;resources;(Function);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions;true;resources;(String,Resource);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions;true;resources;(String,Resource);;Argument[1];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions;true;route;(RequestPredicate,HandlerFunction);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;RouterFunctions;true;route;(RequestPredicate,HandlerFunction);;Argument[1];ReturnValue;taint",
        "org.springframework.web.servlet.function;ServerRequest$Builder;true;attribute;(String,Object);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.function;ServerRequest$Builder;true;attribute;(String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.function;ServerRequest$Builder;true;attribute;(String,Object);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;ServerRequest$Builder;true;attribute;(String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.function;ServerRequest$Builder;true;attribute;(String,Object);;Argument[1];ReturnValue;taint",
        "org.springframework.web.servlet.function;ServerRequest$Builder;true;attributes;(Consumer);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.function;ServerRequest$Builder;true;body;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.function;ServerRequest$Builder;true;body;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.function;ServerRequest$Builder;true;body;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;ServerRequest$Builder;true;body;(byte[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.function;ServerRequest$Builder;true;body;(byte[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.function;ServerRequest$Builder;true;body;(byte[]);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;ServerRequest$Builder;true;cookie;(String,String[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.function;ServerRequest$Builder;true;cookie;(String,String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.function;ServerRequest$Builder;true;cookie;(String,String[]);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;ServerRequest$Builder;true;cookie;(String,String[]);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.function;ServerRequest$Builder;true;cookie;(String,String[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.web.servlet.function;ServerRequest$Builder;true;cookies;(Consumer);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.function;ServerRequest$Builder;true;header;(String,String[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.function;ServerRequest$Builder;true;header;(String,String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.function;ServerRequest$Builder;true;header;(String,String[]);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;ServerRequest$Builder;true;header;(String,String[]);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.function;ServerRequest$Builder;true;header;(String,String[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.web.servlet.function;ServerRequest$Builder;true;headers;(Consumer);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.function;ServerRequest$Builder;true;method;(HttpMethod);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.function;ServerRequest$Builder;true;param;(String,String[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.function;ServerRequest$Builder;true;param;(String,String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.function;ServerRequest$Builder;true;param;(String,String[]);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;ServerRequest$Builder;true;param;(String,String[]);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.function;ServerRequest$Builder;true;param;(String,String[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.web.servlet.function;ServerRequest$Builder;true;params;(Consumer);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.function;ServerRequest$Builder;true;remoteAddress;(InetSocketAddress);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.function;ServerRequest$Builder;true;remoteAddress;(InetSocketAddress);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.function;ServerRequest$Builder;true;remoteAddress;(InetSocketAddress);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;ServerRequest$Builder;true;uri;(URI);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.function;ServerRequest$Builder;true;uri;(URI);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.function;ServerRequest$Builder;true;uri;(URI);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;ServerRequest$Headers;true;accept;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.function;ServerRequest$Headers;true;asHttpHeaders;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.function;ServerRequest$Headers;true;contentType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.function;ServerRequest$Headers;true;firstHeader;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.function;ServerRequest$Headers;true;header;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.function;ServerRequest$Headers;true;host;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.function;ServerRequest;true;attribute;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.function;ServerRequest;true;attribute;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;ServerRequest;true;attributes;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.function;ServerRequest;true;body;(Class);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.function;ServerRequest;true;body;(ParameterizedTypeReference);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.function;ServerRequest;true;cookies;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.function;ServerRequest;true;create;(HttpServletRequest,List);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;ServerRequest;true;create;(HttpServletRequest,List);;Element of Argument[1];ReturnValue;taint",
        "org.springframework.web.servlet.function;ServerRequest;true;headers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.function;ServerRequest;true;messageConverters;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.function;ServerRequest;true;methodName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.function;ServerRequest;true;multipartData;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.function;ServerRequest;true;param;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.function;ServerRequest;true;params;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.function;ServerRequest;true;path;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.function;ServerRequest;true;pathContainer;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.function;ServerRequest;true;pathVariable;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.function;ServerRequest;true;pathVariables;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.function;ServerRequest;true;principal;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.function;ServerRequest;true;remoteAddress;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.function;ServerRequest;true;requestPath;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.function;ServerRequest;true;servletRequest;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.function;ServerRequest;true;session;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.function;ServerRequest;true;uri;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.function;ServerRequest;true;uriBuilder;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.function;ServerResponse$BodyBuilder;true;body;(Object);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;ServerResponse$BodyBuilder;true;body;(Object,ParameterizedTypeReference);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;ServerResponse$BodyBuilder;true;contentLength;(long);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.function;ServerResponse$BodyBuilder;true;contentType;(MediaType);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.function;ServerResponse$BodyBuilder;true;render;(String,Map);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;ServerResponse$BodyBuilder;true;render;(String,Map);;Element of Argument[1];ReturnValue;taint",
        "org.springframework.web.servlet.function;ServerResponse$BodyBuilder;true;render;(String,Object[]);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;ServerResponse$Context;true;messageConverters;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.function;ServerResponse$SseBuilder;true;comment;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.function;ServerResponse$SseBuilder;true;comment;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.function;ServerResponse$SseBuilder;true;comment;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;ServerResponse$SseBuilder;true;data;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.function;ServerResponse$SseBuilder;true;error;(Throwable);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.function;ServerResponse$SseBuilder;true;event;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.function;ServerResponse$SseBuilder;true;event;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.function;ServerResponse$SseBuilder;true;event;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;ServerResponse$SseBuilder;true;id;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.function;ServerResponse$SseBuilder;true;id;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.function;ServerResponse$SseBuilder;true;id;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;ServerResponse$SseBuilder;true;onComplete;(Runnable);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.function;ServerResponse$SseBuilder;true;onComplete;(Runnable);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.function;ServerResponse$SseBuilder;true;onComplete;(Runnable);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;ServerResponse$SseBuilder;true;onError;(Consumer);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.function;ServerResponse$SseBuilder;true;onError;(Consumer);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.function;ServerResponse$SseBuilder;true;onError;(Consumer);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;ServerResponse$SseBuilder;true;onTimeout;(Runnable);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.function;ServerResponse$SseBuilder;true;onTimeout;(Runnable);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.function;ServerResponse$SseBuilder;true;onTimeout;(Runnable);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;ServerResponse$SseBuilder;true;retry;(Duration);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.function;ServerResponse$SseBuilder;true;send;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.function;ServerResponse;true;async;(Object);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;ServerResponse;true;async;(Object,Duration);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;ServerResponse;true;async;(Object,Duration);;Argument[1];ReturnValue;taint",
        "org.springframework.web.servlet.function;ServerResponse;true;cookies;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.function;ServerResponse;true;headers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.function;ServerResponse;true;sse;(Consumer);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;ServerResponse;true;sse;(Consumer,Duration);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.function;ServerResponse;true;sse;(Consumer,Duration);;Argument[1];ReturnValue;taint",
        "org.springframework.web.servlet.handler;AbstractHandlerExceptionResolver;true;setMappedHandlerClasses;(Class[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.handler;AbstractHandlerExceptionResolver;true;setMappedHandlers;(Set);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.handler;AbstractHandlerExceptionResolver;true;setWarnLogCategory;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.handler;AbstractHandlerMapping;true;getCorsConfigurationSource;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.handler;AbstractHandlerMapping;true;getCorsProcessor;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.handler;AbstractHandlerMapping;true;getDefaultHandler;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.handler;AbstractHandlerMapping;true;getPathMatcher;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.handler;AbstractHandlerMapping;true;getPatternParser;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.handler;AbstractHandlerMapping;true;getUrlPathHelper;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.handler;AbstractHandlerMapping;true;setCorsConfigurationSource;(CorsConfigurationSource);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.handler;AbstractHandlerMapping;true;setCorsProcessor;(CorsProcessor);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.handler;AbstractHandlerMapping;true;setDefaultHandler;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.handler;AbstractHandlerMapping;true;setInterceptors;(Object[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.handler;AbstractHandlerMapping;true;setPathMatcher;(PathMatcher);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.handler;AbstractHandlerMapping;true;setPatternParser;(PathPatternParser);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.handler;AbstractHandlerMapping;true;setUrlPathHelper;(UrlPathHelper);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.handler;AbstractHandlerMethodMapping;true;getHandlerMethodsForMappingName;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.handler;AbstractHandlerMethodMapping;true;getNamingStrategy;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.handler;AbstractHandlerMethodMapping;true;registerMapping;(Object,Object,Method);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.handler;AbstractHandlerMethodMapping;true;registerMapping;(Object,Object,Method);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.handler;AbstractHandlerMethodMapping;true;registerMapping;(Object,Object,Method);;Argument[2];Argument[-1];taint",
        "org.springframework.web.servlet.handler;AbstractHandlerMethodMapping;true;setHandlerMethodMappingNamingStrategy;(HandlerMethodMappingNamingStrategy);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.handler;AbstractUrlHandlerMapping;true;getHandlerMap;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.handler;AbstractUrlHandlerMapping;true;getPathPatternHandlerMap;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.handler;AbstractUrlHandlerMapping;true;getRootHandler;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.handler;AbstractUrlHandlerMapping;true;setRootHandler;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.handler;ConversionServiceExposingInterceptor;true;ConversionServiceExposingInterceptor;(ConversionService);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.handler;DispatcherServletWebRequest;true;DispatcherServletWebRequest;(HttpServletRequest);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.handler;DispatcherServletWebRequest;true;DispatcherServletWebRequest;(HttpServletRequest,HttpServletResponse);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.handler;DispatcherServletWebRequest;true;DispatcherServletWebRequest;(HttpServletRequest,HttpServletResponse);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.handler;HandlerExceptionResolverComposite;true;getExceptionResolvers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.handler;HandlerExceptionResolverComposite;true;setExceptionResolvers;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.handler;HandlerMappingIntrospector;true;getHandlerMappings;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.handler;MappedInterceptor;false;MappedInterceptor;(String[],HandlerInterceptor);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.handler;MappedInterceptor;false;MappedInterceptor;(String[],HandlerInterceptor);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.handler;MappedInterceptor;false;MappedInterceptor;(String[],String[],HandlerInterceptor);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.handler;MappedInterceptor;false;MappedInterceptor;(String[],String[],HandlerInterceptor);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.handler;MappedInterceptor;false;MappedInterceptor;(String[],String[],HandlerInterceptor);;Argument[2];Argument[-1];taint",
        "org.springframework.web.servlet.handler;MappedInterceptor;false;MappedInterceptor;(String[],String[],HandlerInterceptor,PathPatternParser);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.handler;MappedInterceptor;false;MappedInterceptor;(String[],String[],HandlerInterceptor,PathPatternParser);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.handler;MappedInterceptor;false;MappedInterceptor;(String[],String[],HandlerInterceptor,PathPatternParser);;Argument[2];Argument[-1];taint",
        "org.springframework.web.servlet.handler;MappedInterceptor;false;MappedInterceptor;(String[],String[],WebRequestInterceptor);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.handler;MappedInterceptor;false;MappedInterceptor;(String[],String[],WebRequestInterceptor);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.handler;MappedInterceptor;false;MappedInterceptor;(String[],String[],WebRequestInterceptor);;Argument[2];Argument[-1];taint",
        "org.springframework.web.servlet.handler;MappedInterceptor;false;MappedInterceptor;(String[],WebRequestInterceptor);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.handler;MappedInterceptor;false;MappedInterceptor;(String[],WebRequestInterceptor);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.handler;MappedInterceptor;false;getInterceptor;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.handler;MappedInterceptor;false;getPathMatcher;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.handler;MappedInterceptor;false;getPathPatterns;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.handler;MappedInterceptor;false;setPathMatcher;(PathMatcher);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.handler;MatchableHandlerMapping;true;match;(HttpServletRequest,String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.handler;MatchableHandlerMapping;true;match;(HttpServletRequest,String);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.handler;MatchableHandlerMapping;true;match;(HttpServletRequest,String);;Argument[1];ReturnValue;taint",
        "org.springframework.web.servlet.handler;RequestMatchResult;true;RequestMatchResult;(PathPattern,PathContainer);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.handler;RequestMatchResult;true;RequestMatchResult;(PathPattern,PathContainer);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.handler;RequestMatchResult;true;RequestMatchResult;(String,String,PathMatcher);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.handler;RequestMatchResult;true;RequestMatchResult;(String,String,PathMatcher);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.handler;RequestMatchResult;true;RequestMatchResult;(String,String,PathMatcher);;Argument[2];Argument[-1];taint",
        "org.springframework.web.servlet.handler;RequestMatchResult;true;extractUriTemplateVariables;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.handler;SimpleMappingExceptionResolver;true;addStatusCode;(String,int);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.handler;SimpleMappingExceptionResolver;true;getStatusCodesAsMap;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.handler;SimpleMappingExceptionResolver;true;setDefaultErrorView;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.handler;SimpleMappingExceptionResolver;true;setExceptionAttribute;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.handler;SimpleMappingExceptionResolver;true;setExceptionMappings;(Properties);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.handler;SimpleMappingExceptionResolver;true;setExcludedExceptions;(Class[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.handler;SimpleUrlHandlerMapping;true;SimpleUrlHandlerMapping;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.handler;SimpleUrlHandlerMapping;true;SimpleUrlHandlerMapping;(Map,int);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.handler;SimpleUrlHandlerMapping;true;getUrlMap;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.handler;SimpleUrlHandlerMapping;true;setMappings;(Properties);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.handler;SimpleUrlHandlerMapping;true;setUrlMap;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.handler;UserRoleAuthorizationInterceptor;true;setAuthorizedRoles;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.handler;WebRequestHandlerInterceptorAdapter;true;WebRequestHandlerInterceptorAdapter;(WebRequestInterceptor);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.i18n;AbstractLocaleContextResolver;true;getDefaultTimeZone;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.i18n;AbstractLocaleContextResolver;true;setDefaultTimeZone;(TimeZone);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.i18n;AbstractLocaleResolver;true;setDefaultLocale;(Locale);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.i18n;AcceptHeaderLocaleResolver;true;getDefaultLocale;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.i18n;AcceptHeaderLocaleResolver;true;getSupportedLocales;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.i18n;AcceptHeaderLocaleResolver;true;setDefaultLocale;(Locale);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.i18n;AcceptHeaderLocaleResolver;true;setSupportedLocales;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.i18n;CookieLocaleResolver;true;setDefaultLocale;(Locale);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.i18n;CookieLocaleResolver;true;setDefaultTimeZone;(TimeZone);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.i18n;FixedLocaleResolver;true;FixedLocaleResolver;(Locale);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.i18n;FixedLocaleResolver;true;FixedLocaleResolver;(Locale,TimeZone);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.i18n;FixedLocaleResolver;true;FixedLocaleResolver;(Locale,TimeZone);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.i18n;LocaleChangeInterceptor;true;getHttpMethods;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.i18n;LocaleChangeInterceptor;true;getParamName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.i18n;LocaleChangeInterceptor;true;setHttpMethods;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.i18n;LocaleChangeInterceptor;true;setParamName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.i18n;SessionLocaleResolver;true;setLocaleAttributeName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.i18n;SessionLocaleResolver;true;setTimeZoneAttributeName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.condition;CompositeRequestCondition;true;CompositeRequestCondition;(RequestCondition[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.condition;CompositeRequestCondition;true;getConditions;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.condition;ConsumesRequestCondition;false;getConsumableMediaTypes;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.condition;ConsumesRequestCondition;false;getExpressions;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.condition;HeadersRequestCondition;false;HeadersRequestCondition;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.condition;HeadersRequestCondition;false;getExpressions;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.condition;MediaTypeExpression;true;getMediaType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.condition;ParamsRequestCondition;false;ParamsRequestCondition;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.condition;ParamsRequestCondition;false;getExpressions;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.condition;PathPatternsRequestCondition;false;PathPatternsRequestCondition;(PathPatternParser,String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.condition;PathPatternsRequestCondition;false;PathPatternsRequestCondition;(PathPatternParser,String[]);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.condition;PathPatternsRequestCondition;false;getDirectPaths;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.condition;PathPatternsRequestCondition;false;getFirstPattern;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.condition;PathPatternsRequestCondition;false;getPatterns;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.condition;PatternsRequestCondition;true;PatternsRequestCondition;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.condition;PatternsRequestCondition;true;PatternsRequestCondition;(String[],UrlPathHelper,PathMatcher,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.condition;PatternsRequestCondition;true;PatternsRequestCondition;(String[],UrlPathHelper,PathMatcher,boolean);;Argument[2];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.condition;PatternsRequestCondition;true;PatternsRequestCondition;(String[],UrlPathHelper,PathMatcher,boolean,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.condition;PatternsRequestCondition;true;PatternsRequestCondition;(String[],UrlPathHelper,PathMatcher,boolean,boolean);;Argument[2];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.condition;PatternsRequestCondition;true;PatternsRequestCondition;(String[],UrlPathHelper,PathMatcher,boolean,boolean,List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.condition;PatternsRequestCondition;true;PatternsRequestCondition;(String[],UrlPathHelper,PathMatcher,boolean,boolean,List);;Argument[2];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.condition;PatternsRequestCondition;true;PatternsRequestCondition;(String[],UrlPathHelper,PathMatcher,boolean,boolean,List);;Argument[5];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.condition;PatternsRequestCondition;true;PatternsRequestCondition;(String[],boolean,PathMatcher);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.condition;PatternsRequestCondition;true;PatternsRequestCondition;(String[],boolean,PathMatcher);;Argument[2];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.condition;PatternsRequestCondition;true;getDirectPaths;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.condition;PatternsRequestCondition;true;getMatchingPatterns;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.condition;PatternsRequestCondition;true;getPatterns;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.condition;ProducesRequestCondition;false;ProducesRequestCondition;(String[],String[],ContentNegotiationManager);;Argument[2];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.condition;ProducesRequestCondition;false;getExpressions;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.condition;ProducesRequestCondition;false;getProducibleMediaTypes;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.condition;RequestConditionHolder;false;RequestConditionHolder;(RequestCondition);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.condition;RequestConditionHolder;false;getCondition;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.condition;RequestMethodsRequestCondition;false;getMethods;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method.annotation;AbstractMessageConverterMethodArgumentResolver;true;AbstractMessageConverterMethodArgumentResolver;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;AbstractMessageConverterMethodArgumentResolver;true;AbstractMessageConverterMethodArgumentResolver;(List,List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;AbstractMessageConverterMethodArgumentResolver;true;AbstractMessageConverterMethodArgumentResolver;(List,List);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;AsyncTaskMethodReturnValueHandler;true;AsyncTaskMethodReturnValueHandler;(BeanFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;ExceptionHandlerExceptionResolver;true;getApplicationContext;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method.annotation;ExceptionHandlerExceptionResolver;true;getArgumentResolvers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method.annotation;ExceptionHandlerExceptionResolver;true;getContentNegotiationManager;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method.annotation;ExceptionHandlerExceptionResolver;true;getCustomArgumentResolvers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method.annotation;ExceptionHandlerExceptionResolver;true;getCustomReturnValueHandlers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method.annotation;ExceptionHandlerExceptionResolver;true;getExceptionHandlerAdviceCache;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method.annotation;ExceptionHandlerExceptionResolver;true;getMessageConverters;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method.annotation;ExceptionHandlerExceptionResolver;true;getReturnValueHandlers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method.annotation;ExceptionHandlerExceptionResolver;true;setArgumentResolvers;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;ExceptionHandlerExceptionResolver;true;setContentNegotiationManager;(ContentNegotiationManager);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;ExceptionHandlerExceptionResolver;true;setCustomArgumentResolvers;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;ExceptionHandlerExceptionResolver;true;setCustomReturnValueHandlers;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;ExceptionHandlerExceptionResolver;true;setMessageConverters;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;ExceptionHandlerExceptionResolver;true;setResponseBodyAdvice;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;ExceptionHandlerExceptionResolver;true;setReturnValueHandlers;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;ExtendedServletRequestDataBinder;true;ExtendedServletRequestDataBinder;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;ExtendedServletRequestDataBinder;true;ExtendedServletRequestDataBinder;(Object,String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;ExtendedServletRequestDataBinder;true;ExtendedServletRequestDataBinder;(Object,String);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;HttpEntityMethodProcessor;true;HttpEntityMethodProcessor;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;HttpEntityMethodProcessor;true;HttpEntityMethodProcessor;(List,ContentNegotiationManager);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;HttpEntityMethodProcessor;true;HttpEntityMethodProcessor;(List,ContentNegotiationManager);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;HttpEntityMethodProcessor;true;HttpEntityMethodProcessor;(List,ContentNegotiationManager,List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;HttpEntityMethodProcessor;true;HttpEntityMethodProcessor;(List,ContentNegotiationManager,List);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;HttpEntityMethodProcessor;true;HttpEntityMethodProcessor;(List,ContentNegotiationManager,List);;Argument[2];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;HttpEntityMethodProcessor;true;HttpEntityMethodProcessor;(List,List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;HttpEntityMethodProcessor;true;HttpEntityMethodProcessor;(List,List);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;ModelAndViewMethodReturnValueHandler;true;getRedirectPatterns;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method.annotation;ModelAndViewMethodReturnValueHandler;true;setRedirectPatterns;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;ModelAndViewResolverMethodReturnValueHandler;true;ModelAndViewResolverMethodReturnValueHandler;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;MvcUriComponentsBuilder$MethodArgumentBuilder;true;MethodArgumentBuilder;(Class,Method);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;MvcUriComponentsBuilder$MethodArgumentBuilder;true;MethodArgumentBuilder;(UriComponentsBuilder,Class,Method);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;MvcUriComponentsBuilder$MethodArgumentBuilder;true;MethodArgumentBuilder;(UriComponentsBuilder,Class,Method);;Argument[2];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;MvcUriComponentsBuilder$MethodArgumentBuilder;true;arg;(int,Object);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.mvc.method.annotation;MvcUriComponentsBuilder$MethodArgumentBuilder;true;arg;(int,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;MvcUriComponentsBuilder$MethodArgumentBuilder;true;arg;(int,Object);;Argument[1];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method.annotation;MvcUriComponentsBuilder$MethodArgumentBuilder;true;build;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method.annotation;MvcUriComponentsBuilder$MethodArgumentBuilder;true;buildAndExpand;(Object[]);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method.annotation;MvcUriComponentsBuilder$MethodArgumentBuilder;true;buildAndExpand;(Object[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method.annotation;MvcUriComponentsBuilder$MethodArgumentBuilder;true;encode;();;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.mvc.method.annotation;MvcUriComponentsBuilder$MethodInvocationInfo;true;getArgumentValues;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method.annotation;MvcUriComponentsBuilder$MethodInvocationInfo;true;getControllerMethod;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method.annotation;MvcUriComponentsBuilder;true;fromController;(UriComponentsBuilder,Class);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method.annotation;MvcUriComponentsBuilder;true;fromMappingName;(UriComponentsBuilder,String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method.annotation;MvcUriComponentsBuilder;true;fromMethod;(Class,Method,Object[]);;Argument[1];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method.annotation;MvcUriComponentsBuilder;true;fromMethod;(Class,Method,Object[]);;ArrayElement of Argument[2];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method.annotation;MvcUriComponentsBuilder;true;fromMethod;(UriComponentsBuilder,Class,Method,Object[]);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method.annotation;MvcUriComponentsBuilder;true;fromMethod;(UriComponentsBuilder,Class,Method,Object[]);;Argument[2];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method.annotation;MvcUriComponentsBuilder;true;fromMethod;(UriComponentsBuilder,Class,Method,Object[]);;ArrayElement of Argument[3];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method.annotation;MvcUriComponentsBuilder;true;fromMethodCall;(UriComponentsBuilder,Object);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method.annotation;MvcUriComponentsBuilder;true;fromMethodName;(Class,String,Object[]);;ArrayElement of Argument[2];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method.annotation;MvcUriComponentsBuilder;true;fromMethodName;(UriComponentsBuilder,Class,String,Object[]);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method.annotation;MvcUriComponentsBuilder;true;fromMethodName;(UriComponentsBuilder,Class,String,Object[]);;ArrayElement of Argument[3];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method.annotation;MvcUriComponentsBuilder;true;relativeTo;(UriComponentsBuilder);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method.annotation;MvcUriComponentsBuilder;true;withController;(Class);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method.annotation;MvcUriComponentsBuilder;true;withMethod;(Class,Method,Object[]);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method.annotation;MvcUriComponentsBuilder;true;withMethod;(Class,Method,Object[]);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;MvcUriComponentsBuilder;true;withMethod;(Class,Method,Object[]);;Argument[1];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method.annotation;MvcUriComponentsBuilder;true;withMethod;(Class,Method,Object[]);;Argument[2];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;MvcUriComponentsBuilder;true;withMethod;(Class,Method,Object[]);;ArrayElement of Argument[2];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method.annotation;MvcUriComponentsBuilder;true;withMethodCall;(Object);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method.annotation;MvcUriComponentsBuilder;true;withMethodName;(Class,String,Object[]);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method.annotation;MvcUriComponentsBuilder;true;withMethodName;(Class,String,Object[]);;Argument[2];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;MvcUriComponentsBuilder;true;withMethodName;(Class,String,Object[]);;ArrayElement of Argument[2];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method.annotation;RequestBodyAdvice;true;afterBodyRead;(Object,HttpInputMessage,MethodParameter,Type,Class);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method.annotation;RequestBodyAdvice;true;beforeBodyRead;(HttpInputMessage,MethodParameter,Type,Class);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method.annotation;RequestBodyAdvice;true;handleEmptyBody;(Object,HttpInputMessage,MethodParameter,Type,Class);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method.annotation;RequestMappingHandlerAdapter;true;getArgumentResolvers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method.annotation;RequestMappingHandlerAdapter;true;getCustomArgumentResolvers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method.annotation;RequestMappingHandlerAdapter;true;getCustomReturnValueHandlers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method.annotation;RequestMappingHandlerAdapter;true;getInitBinderArgumentResolvers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method.annotation;RequestMappingHandlerAdapter;true;getMessageConverters;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method.annotation;RequestMappingHandlerAdapter;true;getModelAndViewResolvers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method.annotation;RequestMappingHandlerAdapter;true;getReactiveAdapterRegistry;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method.annotation;RequestMappingHandlerAdapter;true;getReturnValueHandlers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method.annotation;RequestMappingHandlerAdapter;true;getWebBindingInitializer;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method.annotation;RequestMappingHandlerAdapter;true;setArgumentResolvers;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;RequestMappingHandlerAdapter;true;setCallableInterceptors;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;RequestMappingHandlerAdapter;true;setContentNegotiationManager;(ContentNegotiationManager);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;RequestMappingHandlerAdapter;true;setCustomArgumentResolvers;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;RequestMappingHandlerAdapter;true;setCustomReturnValueHandlers;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;RequestMappingHandlerAdapter;true;setDeferredResultInterceptors;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;RequestMappingHandlerAdapter;true;setInitBinderArgumentResolvers;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;RequestMappingHandlerAdapter;true;setMessageConverters;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;RequestMappingHandlerAdapter;true;setModelAndViewResolvers;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;RequestMappingHandlerAdapter;true;setParameterNameDiscoverer;(ParameterNameDiscoverer);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;RequestMappingHandlerAdapter;true;setReactiveAdapterRegistry;(ReactiveAdapterRegistry);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;RequestMappingHandlerAdapter;true;setRequestBodyAdvice;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;RequestMappingHandlerAdapter;true;setResponseBodyAdvice;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;RequestMappingHandlerAdapter;true;setReturnValueHandlers;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;RequestMappingHandlerAdapter;true;setSessionAttributeStore;(SessionAttributeStore);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;RequestMappingHandlerAdapter;true;setTaskExecutor;(AsyncTaskExecutor);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;RequestMappingHandlerAdapter;true;setWebBindingInitializer;(WebBindingInitializer);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;RequestMappingHandlerMapping;true;getContentNegotiationManager;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method.annotation;RequestMappingHandlerMapping;true;getFileExtensions;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method.annotation;RequestMappingHandlerMapping;true;getPathPrefixes;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method.annotation;RequestMappingHandlerMapping;true;setContentNegotiationManager;(ContentNegotiationManager);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;RequestMappingHandlerMapping;true;setPathPrefixes;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;RequestPartMethodArgumentResolver;true;RequestPartMethodArgumentResolver;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;RequestPartMethodArgumentResolver;true;RequestPartMethodArgumentResolver;(List,List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;RequestPartMethodArgumentResolver;true;RequestPartMethodArgumentResolver;(List,List);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;RequestResponseBodyMethodProcessor;true;RequestResponseBodyMethodProcessor;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;RequestResponseBodyMethodProcessor;true;RequestResponseBodyMethodProcessor;(List,ContentNegotiationManager);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;RequestResponseBodyMethodProcessor;true;RequestResponseBodyMethodProcessor;(List,ContentNegotiationManager);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;RequestResponseBodyMethodProcessor;true;RequestResponseBodyMethodProcessor;(List,ContentNegotiationManager,List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;RequestResponseBodyMethodProcessor;true;RequestResponseBodyMethodProcessor;(List,ContentNegotiationManager,List);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;RequestResponseBodyMethodProcessor;true;RequestResponseBodyMethodProcessor;(List,ContentNegotiationManager,List);;Argument[2];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;RequestResponseBodyMethodProcessor;true;RequestResponseBodyMethodProcessor;(List,List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;RequestResponseBodyMethodProcessor;true;RequestResponseBodyMethodProcessor;(List,List);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;ResponseBodyEmitter$DataWithMediaType;true;DataWithMediaType;(Object,MediaType);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;ResponseBodyEmitter$DataWithMediaType;true;DataWithMediaType;(Object,MediaType);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;ResponseBodyEmitter$DataWithMediaType;true;getData;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method.annotation;ResponseBodyEmitter$DataWithMediaType;true;getMediaType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method.annotation;ResponseBodyEmitter;true;completeWithError;(Throwable);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;ResponseBodyEmitter;true;onCompletion;(Runnable);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;ResponseBodyEmitter;true;onError;(Consumer);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;ResponseBodyEmitter;true;onTimeout;(Runnable);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;ResponseBodyEmitter;true;send;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;ResponseBodyEmitter;true;send;(Object,MediaType);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;ResponseBodyEmitter;true;send;(Object,MediaType);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;ResponseBodyEmitterReturnValueHandler;true;ResponseBodyEmitterReturnValueHandler;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;ResponseBodyEmitterReturnValueHandler;true;ResponseBodyEmitterReturnValueHandler;(List,ReactiveAdapterRegistry,TaskExecutor,ContentNegotiationManager);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;ResponseBodyEmitterReturnValueHandler;true;ResponseBodyEmitterReturnValueHandler;(List,ReactiveAdapterRegistry,TaskExecutor,ContentNegotiationManager);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;ResponseBodyEmitterReturnValueHandler;true;ResponseBodyEmitterReturnValueHandler;(List,ReactiveAdapterRegistry,TaskExecutor,ContentNegotiationManager);;Argument[2];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;ResponseBodyEmitterReturnValueHandler;true;ResponseBodyEmitterReturnValueHandler;(List,ReactiveAdapterRegistry,TaskExecutor,ContentNegotiationManager);;Argument[3];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;ServletCookieValueMethodArgumentResolver;true;ServletCookieValueMethodArgumentResolver;(ConfigurableBeanFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;ServletCookieValueMethodArgumentResolver;true;setUrlPathHelper;(UrlPathHelper);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;ServletInvocableHandlerMethod;true;ServletInvocableHandlerMethod;(Object,Method);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;ServletInvocableHandlerMethod;true;ServletInvocableHandlerMethod;(Object,Method);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;ServletInvocableHandlerMethod;true;ServletInvocableHandlerMethod;(Object,Method,MessageSource);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;ServletInvocableHandlerMethod;true;ServletInvocableHandlerMethod;(Object,Method,MessageSource);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;ServletInvocableHandlerMethod;true;ServletInvocableHandlerMethod;(Object,Method,MessageSource);;Argument[2];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;ServletInvocableHandlerMethod;true;setHandlerMethodReturnValueHandlers;(HandlerMethodReturnValueHandlerComposite);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;ServletRequestDataBinderFactory;true;ServletRequestDataBinderFactory;(List,WebBindingInitializer);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;ServletRequestDataBinderFactory;true;ServletRequestDataBinderFactory;(List,WebBindingInitializer);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;ServletWebArgumentResolverAdapter;true;ServletWebArgumentResolverAdapter;(WebArgumentResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;SseEmitter$SseEventBuilder;true;build;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method.annotation;SseEmitter$SseEventBuilder;true;comment;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.mvc.method.annotation;SseEmitter$SseEventBuilder;true;comment;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;SseEmitter$SseEventBuilder;true;comment;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method.annotation;SseEmitter$SseEventBuilder;true;data;(Object);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method.annotation;SseEmitter$SseEventBuilder;true;data;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;SseEmitter$SseEventBuilder;true;data;(Object);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method.annotation;SseEmitter$SseEventBuilder;true;data;(Object,MediaType);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.mvc.method.annotation;SseEmitter$SseEventBuilder;true;data;(Object,MediaType);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;SseEmitter$SseEventBuilder;true;data;(Object,MediaType);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method.annotation;SseEmitter$SseEventBuilder;true;data;(Object,MediaType);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;SseEmitter$SseEventBuilder;true;data;(Object,MediaType);;Argument[1];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method.annotation;SseEmitter$SseEventBuilder;true;id;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.mvc.method.annotation;SseEmitter$SseEventBuilder;true;id;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;SseEmitter$SseEventBuilder;true;id;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method.annotation;SseEmitter$SseEventBuilder;true;name;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.mvc.method.annotation;SseEmitter$SseEventBuilder;true;name;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method.annotation;SseEmitter$SseEventBuilder;true;name;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method.annotation;SseEmitter$SseEventBuilder;true;reconnectTime;(long);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.mvc.method.annotation;ViewNameMethodReturnValueHandler;true;getRedirectPatterns;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method.annotation;ViewNameMethodReturnValueHandler;true;setRedirectPatterns;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method;RequestMappingInfo$Builder;true;consumes;(String[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.mvc.method;RequestMappingInfo$Builder;true;consumes;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method;RequestMappingInfo$Builder;true;consumes;(String[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method;RequestMappingInfo$Builder;true;customCondition;(RequestCondition);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.mvc.method;RequestMappingInfo$Builder;true;customCondition;(RequestCondition);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method;RequestMappingInfo$Builder;true;customCondition;(RequestCondition);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method;RequestMappingInfo$Builder;true;headers;(String[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.mvc.method;RequestMappingInfo$Builder;true;headers;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method;RequestMappingInfo$Builder;true;headers;(String[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method;RequestMappingInfo$Builder;true;mappingName;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.mvc.method;RequestMappingInfo$Builder;true;mappingName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method;RequestMappingInfo$Builder;true;mappingName;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method;RequestMappingInfo$Builder;true;methods;(RequestMethod[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.mvc.method;RequestMappingInfo$Builder;true;methods;(RequestMethod[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method;RequestMappingInfo$Builder;true;methods;(RequestMethod[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method;RequestMappingInfo$Builder;true;options;(BuilderConfiguration);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.mvc.method;RequestMappingInfo$Builder;true;options;(BuilderConfiguration);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method;RequestMappingInfo$Builder;true;options;(BuilderConfiguration);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method;RequestMappingInfo$Builder;true;params;(String[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.mvc.method;RequestMappingInfo$Builder;true;params;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method;RequestMappingInfo$Builder;true;params;(String[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method;RequestMappingInfo$Builder;true;paths;(String[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.mvc.method;RequestMappingInfo$Builder;true;paths;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method;RequestMappingInfo$Builder;true;paths;(String[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method;RequestMappingInfo$Builder;true;produces;(String[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.mvc.method;RequestMappingInfo$Builder;true;produces;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method;RequestMappingInfo$Builder;true;produces;(String[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method;RequestMappingInfo$BuilderConfiguration;true;getContentNegotiationManager;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method;RequestMappingInfo$BuilderConfiguration;true;getFileExtensions;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method;RequestMappingInfo$BuilderConfiguration;true;getPathMatcher;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method;RequestMappingInfo$BuilderConfiguration;true;getPatternParser;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method;RequestMappingInfo$BuilderConfiguration;true;setContentNegotiationManager;(ContentNegotiationManager);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method;RequestMappingInfo$BuilderConfiguration;true;setPathMatcher;(PathMatcher);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method;RequestMappingInfo$BuilderConfiguration;true;setPatternParser;(PathPatternParser);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method;RequestMappingInfo;false;RequestMappingInfo;(PatternsRequestCondition,RequestMethodsRequestCondition,ParamsRequestCondition,HeadersRequestCondition,ConsumesRequestCondition,ProducesRequestCondition,RequestCondition);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method;RequestMappingInfo;false;RequestMappingInfo;(PatternsRequestCondition,RequestMethodsRequestCondition,ParamsRequestCondition,HeadersRequestCondition,ConsumesRequestCondition,ProducesRequestCondition,RequestCondition);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method;RequestMappingInfo;false;RequestMappingInfo;(PatternsRequestCondition,RequestMethodsRequestCondition,ParamsRequestCondition,HeadersRequestCondition,ConsumesRequestCondition,ProducesRequestCondition,RequestCondition);;Argument[2];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method;RequestMappingInfo;false;RequestMappingInfo;(PatternsRequestCondition,RequestMethodsRequestCondition,ParamsRequestCondition,HeadersRequestCondition,ConsumesRequestCondition,ProducesRequestCondition,RequestCondition);;Argument[3];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method;RequestMappingInfo;false;RequestMappingInfo;(PatternsRequestCondition,RequestMethodsRequestCondition,ParamsRequestCondition,HeadersRequestCondition,ConsumesRequestCondition,ProducesRequestCondition,RequestCondition);;Argument[4];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method;RequestMappingInfo;false;RequestMappingInfo;(PatternsRequestCondition,RequestMethodsRequestCondition,ParamsRequestCondition,HeadersRequestCondition,ConsumesRequestCondition,ProducesRequestCondition,RequestCondition);;Argument[5];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method;RequestMappingInfo;false;RequestMappingInfo;(PatternsRequestCondition,RequestMethodsRequestCondition,ParamsRequestCondition,HeadersRequestCondition,ConsumesRequestCondition,ProducesRequestCondition,RequestCondition);;Argument[6];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method;RequestMappingInfo;false;RequestMappingInfo;(RequestMappingInfo,RequestCondition);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method;RequestMappingInfo;false;RequestMappingInfo;(String,PatternsRequestCondition,RequestMethodsRequestCondition,ParamsRequestCondition,HeadersRequestCondition,ConsumesRequestCondition,ProducesRequestCondition,RequestCondition);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method;RequestMappingInfo;false;RequestMappingInfo;(String,PatternsRequestCondition,RequestMethodsRequestCondition,ParamsRequestCondition,HeadersRequestCondition,ConsumesRequestCondition,ProducesRequestCondition,RequestCondition);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method;RequestMappingInfo;false;RequestMappingInfo;(String,PatternsRequestCondition,RequestMethodsRequestCondition,ParamsRequestCondition,HeadersRequestCondition,ConsumesRequestCondition,ProducesRequestCondition,RequestCondition);;Argument[2];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method;RequestMappingInfo;false;RequestMappingInfo;(String,PatternsRequestCondition,RequestMethodsRequestCondition,ParamsRequestCondition,HeadersRequestCondition,ConsumesRequestCondition,ProducesRequestCondition,RequestCondition);;Argument[3];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method;RequestMappingInfo;false;RequestMappingInfo;(String,PatternsRequestCondition,RequestMethodsRequestCondition,ParamsRequestCondition,HeadersRequestCondition,ConsumesRequestCondition,ProducesRequestCondition,RequestCondition);;Argument[4];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method;RequestMappingInfo;false;RequestMappingInfo;(String,PatternsRequestCondition,RequestMethodsRequestCondition,ParamsRequestCondition,HeadersRequestCondition,ConsumesRequestCondition,ProducesRequestCondition,RequestCondition);;Argument[5];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method;RequestMappingInfo;false;RequestMappingInfo;(String,PatternsRequestCondition,RequestMethodsRequestCondition,ParamsRequestCondition,HeadersRequestCondition,ConsumesRequestCondition,ProducesRequestCondition,RequestCondition);;Argument[6];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method;RequestMappingInfo;false;RequestMappingInfo;(String,PatternsRequestCondition,RequestMethodsRequestCondition,ParamsRequestCondition,HeadersRequestCondition,ConsumesRequestCondition,ProducesRequestCondition,RequestCondition);;Argument[7];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.method;RequestMappingInfo;false;addCustomCondition;(RequestCondition);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method;RequestMappingInfo;false;getActivePatternsCondition;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method;RequestMappingInfo;false;getConsumesCondition;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method;RequestMappingInfo;false;getCustomCondition;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method;RequestMappingInfo;false;getDirectPaths;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method;RequestMappingInfo;false;getHeadersCondition;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method;RequestMappingInfo;false;getMethodsCondition;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method;RequestMappingInfo;false;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method;RequestMappingInfo;false;getParamsCondition;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method;RequestMappingInfo;false;getPathPatternsCondition;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method;RequestMappingInfo;false;getPatternValues;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method;RequestMappingInfo;false;getPatternsCondition;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method;RequestMappingInfo;false;getProducesCondition;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method;RequestMappingInfo;false;paths;(String[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.method;RequestMappingInfo;false;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.support;RedirectAttributes;true;addFlashAttribute;(Object);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.mvc.support;RedirectAttributes;true;addFlashAttribute;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.support;RedirectAttributes;true;addFlashAttribute;(Object);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.support;RedirectAttributes;true;addFlashAttribute;(String,Object);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.mvc.support;RedirectAttributes;true;addFlashAttribute;(String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.support;RedirectAttributes;true;addFlashAttribute;(String,Object);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.support;RedirectAttributes;true;addFlashAttribute;(String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.mvc.support;RedirectAttributes;true;addFlashAttribute;(String,Object);;Argument[1];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.support;RedirectAttributes;true;getFlashAttributes;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.mvc.support;RedirectAttributesModelMap;true;RedirectAttributesModelMap;(DataBinder);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc;AbstractUrlViewController;true;setUrlPathHelper;(UrlPathHelper);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc;ParameterizableViewController;true;getView;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.mvc;ParameterizableViewController;true;getViewName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.mvc;ParameterizableViewController;true;setView;(View);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc;ParameterizableViewController;true;setViewName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc;ParameterizableViewController;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.mvc;ServletForwardingController;true;setServletName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc;ServletWrappingController;true;setInitParameters;(Properties);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc;ServletWrappingController;true;setServletName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc;UrlFilenameViewController;true;setPrefix;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc;UrlFilenameViewController;true;setSuffix;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc;WebContentInterceptor;true;WebContentInterceptor;(PathPatternParser);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc;WebContentInterceptor;true;addCacheMapping;(CacheControl,String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.mvc;WebContentInterceptor;true;addCacheMapping;(CacheControl,String[]);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.mvc;WebContentInterceptor;true;setPathMatcher;(PathMatcher);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.resource;AbstractVersionStrategy;true;getVersionPathStrategy;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.resource;AppCacheManifestTransformer;true;AppCacheManifestTransformer;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.resource;CachingResourceResolver;true;CachingResourceResolver;(Cache);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.resource;CachingResourceResolver;true;CachingResourceResolver;(CacheManager,String);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.resource;CachingResourceResolver;true;getCache;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.resource;CachingResourceResolver;true;getContentCodings;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.resource;CachingResourceResolver;true;setContentCodings;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.resource;CachingResourceTransformer;true;CachingResourceTransformer;(Cache);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.resource;CachingResourceTransformer;true;CachingResourceTransformer;(CacheManager,String);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.resource;CachingResourceTransformer;true;getCache;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.resource;DefaultServletHttpRequestHandler;true;setDefaultServletName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.resource;EncodedResourceResolver;true;getContentCodings;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.resource;EncodedResourceResolver;true;getExtensions;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.resource;EncodedResourceResolver;true;registerExtension;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.resource;EncodedResourceResolver;true;registerExtension;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.resource;EncodedResourceResolver;true;setContentCodings;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.resource;FixedVersionStrategy;true;FixedVersionStrategy;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.resource;HttpResource;true;getResponseHeaders;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.resource;PathResourceResolver;true;getAllowedLocations;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.resource;PathResourceResolver;true;getLocationCharsets;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.resource;PathResourceResolver;true;getUrlPathHelper;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.resource;PathResourceResolver;true;setAllowedLocations;(Resource[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.resource;PathResourceResolver;true;setLocationCharsets;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.resource;PathResourceResolver;true;setUrlPathHelper;(UrlPathHelper);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.resource;ResourceHttpRequestHandler;true;getContentNegotiationManager;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.resource;ResourceHttpRequestHandler;true;getLocations;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.resource;ResourceHttpRequestHandler;true;getMediaTypes;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.resource;ResourceHttpRequestHandler;true;getResourceHttpMessageConverter;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.resource;ResourceHttpRequestHandler;true;getResourceRegionHttpMessageConverter;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.resource;ResourceHttpRequestHandler;true;getResourceResolvers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.resource;ResourceHttpRequestHandler;true;getResourceTransformers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.resource;ResourceHttpRequestHandler;true;getUrlPathHelper;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.resource;ResourceHttpRequestHandler;true;setContentNegotiationManager;(ContentNegotiationManager);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.resource;ResourceHttpRequestHandler;true;setCorsConfiguration;(CorsConfiguration);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.resource;ResourceHttpRequestHandler;true;setLocationValues;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.resource;ResourceHttpRequestHandler;true;setLocations;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.resource;ResourceHttpRequestHandler;true;setResourceHttpMessageConverter;(ResourceHttpMessageConverter);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.resource;ResourceHttpRequestHandler;true;setResourceRegionHttpMessageConverter;(ResourceRegionHttpMessageConverter);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.resource;ResourceHttpRequestHandler;true;setResourceResolvers;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.resource;ResourceHttpRequestHandler;true;setResourceTransformers;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.resource;ResourceHttpRequestHandler;true;setUrlPathHelper;(UrlPathHelper);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.resource;ResourceResolver;true;resolveResource;(HttpServletRequest,String,List,ResourceResolverChain);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.resource;ResourceResolver;true;resolveResource;(HttpServletRequest,String,List,ResourceResolverChain);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.resource;ResourceResolver;true;resolveResource;(HttpServletRequest,String,List,ResourceResolverChain);;Argument[1];ReturnValue;taint",
        "org.springframework.web.servlet.resource;ResourceResolver;true;resolveResource;(HttpServletRequest,String,List,ResourceResolverChain);;Argument[2];Argument[-1];taint",
        "org.springframework.web.servlet.resource;ResourceResolver;true;resolveResource;(HttpServletRequest,String,List,ResourceResolverChain);;Element of Argument[2];ReturnValue;taint",
        "org.springframework.web.servlet.resource;ResourceResolver;true;resolveUrlPath;(String,List,ResourceResolverChain);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.resource;ResourceResolver;true;resolveUrlPath;(String,List,ResourceResolverChain);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.resource;ResourceResolver;true;resolveUrlPath;(String,List,ResourceResolverChain);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.resource;ResourceResolver;true;resolveUrlPath;(String,List,ResourceResolverChain);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.resource;ResourceResolver;true;resolveUrlPath;(String,List,ResourceResolverChain);;Element of Argument[1];ReturnValue;taint",
        "org.springframework.web.servlet.resource;ResourceResolverChain;true;resolveResource;(HttpServletRequest,String,List);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.resource;ResourceResolverChain;true;resolveResource;(HttpServletRequest,String,List);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.resource;ResourceResolverChain;true;resolveResource;(HttpServletRequest,String,List);;Argument[1];ReturnValue;taint",
        "org.springframework.web.servlet.resource;ResourceResolverChain;true;resolveResource;(HttpServletRequest,String,List);;Argument[2];Argument[-1];taint",
        "org.springframework.web.servlet.resource;ResourceResolverChain;true;resolveResource;(HttpServletRequest,String,List);;Element of Argument[2];ReturnValue;taint",
        "org.springframework.web.servlet.resource;ResourceResolverChain;true;resolveUrlPath;(String,List);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.resource;ResourceResolverChain;true;resolveUrlPath;(String,List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.resource;ResourceResolverChain;true;resolveUrlPath;(String,List);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.resource;ResourceResolverChain;true;resolveUrlPath;(String,List);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.resource;ResourceResolverChain;true;resolveUrlPath;(String,List);;Element of Argument[1];ReturnValue;taint",
        "org.springframework.web.servlet.resource;ResourceTransformer;true;transform;(HttpServletRequest,Resource,ResourceTransformerChain);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.resource;ResourceTransformer;true;transform;(HttpServletRequest,Resource,ResourceTransformerChain);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.resource;ResourceTransformer;true;transform;(HttpServletRequest,Resource,ResourceTransformerChain);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.resource;ResourceTransformer;true;transform;(HttpServletRequest,Resource,ResourceTransformerChain);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.resource;ResourceTransformer;true;transform;(HttpServletRequest,Resource,ResourceTransformerChain);;Argument[1];ReturnValue;taint",
        "org.springframework.web.servlet.resource;ResourceTransformerChain;true;getResolverChain;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.resource;ResourceTransformerChain;true;transform;(HttpServletRequest,Resource);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.resource;ResourceTransformerChain;true;transform;(HttpServletRequest,Resource);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.resource;ResourceTransformerChain;true;transform;(HttpServletRequest,Resource);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.resource;ResourceTransformerChain;true;transform;(HttpServletRequest,Resource);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.resource;ResourceTransformerChain;true;transform;(HttpServletRequest,Resource);;Argument[1];ReturnValue;taint",
        "org.springframework.web.servlet.resource;ResourceTransformerSupport;true;getResourceUrlProvider;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.resource;ResourceTransformerSupport;true;setResourceUrlProvider;(ResourceUrlProvider);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.resource;ResourceUrlProvider;true;getForLookupPath;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.resource;ResourceUrlProvider;true;getForLookupPath;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.resource;ResourceUrlProvider;true;getForRequestUrl;(HttpServletRequest,String);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.resource;ResourceUrlProvider;true;getForRequestUrl;(HttpServletRequest,String);;Argument[1];ReturnValue;taint",
        "org.springframework.web.servlet.resource;ResourceUrlProvider;true;getHandlerMap;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.resource;ResourceUrlProvider;true;getPathMatcher;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.resource;ResourceUrlProvider;true;getUrlPathHelper;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.resource;ResourceUrlProvider;true;setHandlerMap;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.resource;ResourceUrlProvider;true;setPathMatcher;(PathMatcher);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.resource;ResourceUrlProvider;true;setUrlPathHelper;(UrlPathHelper);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.resource;ResourceUrlProviderExposingInterceptor;true;ResourceUrlProviderExposingInterceptor;(ResourceUrlProvider);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.resource;TransformedResource;true;TransformedResource;(Resource,byte[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.resource;TransformedResource;true;TransformedResource;(Resource,byte[]);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.resource;VersionPathStrategy;true;addVersion;(String,String);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.resource;VersionPathStrategy;true;addVersion;(String,String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.resource;VersionPathStrategy;true;addVersion;(String,String);;Argument[1];ReturnValue;taint",
        "org.springframework.web.servlet.resource;VersionPathStrategy;true;extractVersion;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.resource;VersionPathStrategy;true;removeVersion;(String,String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.resource;VersionResourceResolver;true;addContentVersionStrategy;(String[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.resource;VersionResourceResolver;true;addContentVersionStrategy;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.resource;VersionResourceResolver;true;addContentVersionStrategy;(String[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.resource;VersionResourceResolver;true;addFixedVersionStrategy;(String,String[]);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.resource;VersionResourceResolver;true;addFixedVersionStrategy;(String,String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.resource;VersionResourceResolver;true;addFixedVersionStrategy;(String,String[]);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.resource;VersionResourceResolver;true;addFixedVersionStrategy;(String,String[]);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.resource;VersionResourceResolver;true;addFixedVersionStrategy;(String,String[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.web.servlet.resource;VersionResourceResolver;true;addVersionStrategy;(VersionStrategy,String[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet.resource;VersionResourceResolver;true;addVersionStrategy;(VersionStrategy,String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.resource;VersionResourceResolver;true;addVersionStrategy;(VersionStrategy,String[]);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.resource;VersionResourceResolver;true;addVersionStrategy;(VersionStrategy,String[]);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.resource;VersionResourceResolver;true;addVersionStrategy;(VersionStrategy,String[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.web.servlet.resource;VersionResourceResolver;true;getStrategyMap;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.resource;VersionResourceResolver;true;setStrategyMap;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.resource;VersionStrategy;true;getResourceVersion;(Resource);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.resource;WebJarsResourceResolver;true;WebJarsResourceResolver;(WebJarAssetLocator);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.support;AbstractFlashMapManager;true;getUrlPathHelper;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.support;AbstractFlashMapManager;true;setUrlPathHelper;(UrlPathHelper);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.support;BindStatus;true;BindStatus;(RequestContext,String,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.support;BindStatus;true;BindStatus;(RequestContext,String,boolean);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.support;BindStatus;true;findEditor;(Class);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.support;BindStatus;true;getActualValue;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.support;BindStatus;true;getDisplayValue;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.support;BindStatus;true;getEditor;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.support;BindStatus;true;getErrorCode;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.support;BindStatus;true;getErrorCodes;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.support;BindStatus;true;getErrorMessage;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.support;BindStatus;true;getErrorMessages;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.support;BindStatus;true;getErrorMessagesAsString;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.support;BindStatus;true;getErrorMessagesAsString;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.support;BindStatus;true;getErrors;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.support;BindStatus;true;getExpression;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.support;BindStatus;true;getPath;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.support;BindStatus;true;getValue;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.support;BindStatus;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.support;JspAwareRequestContext;true;JspAwareRequestContext;(PageContext);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.support;JspAwareRequestContext;true;JspAwareRequestContext;(PageContext,Map);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.support;JspAwareRequestContext;true;JspAwareRequestContext;(PageContext,Map);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.support;JstlUtils;true;getJstlAwareMessageSource;(ServletContext,MessageSource);;Argument[1];ReturnValue;taint",
        "org.springframework.web.servlet.support;RequestContext;true;RequestContext;(HttpServletRequest);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.support;RequestContext;true;RequestContext;(HttpServletRequest,HttpServletResponse);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.support;RequestContext;true;RequestContext;(HttpServletRequest,HttpServletResponse);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.support;RequestContext;true;RequestContext;(HttpServletRequest,HttpServletResponse,ServletContext,Map);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.support;RequestContext;true;RequestContext;(HttpServletRequest,HttpServletResponse,ServletContext,Map);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.support;RequestContext;true;RequestContext;(HttpServletRequest,HttpServletResponse,ServletContext,Map);;Argument[3];Argument[-1];taint",
        "org.springframework.web.servlet.support;RequestContext;true;RequestContext;(HttpServletRequest,Map);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.support;RequestContext;true;RequestContext;(HttpServletRequest,Map);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.support;RequestContext;true;RequestContext;(HttpServletRequest,ServletContext);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.support;RequestContext;true;changeLocale;(Locale);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.support;RequestContext;true;changeLocale;(Locale,TimeZone);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.support;RequestContext;true;changeLocale;(Locale,TimeZone);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.support;RequestContext;true;changeTheme;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.support;RequestContext;true;changeTheme;(Theme);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.support;RequestContext;true;getBindStatus;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.support;RequestContext;true;getBindStatus;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.support;RequestContext;true;getBindStatus;(String,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.support;RequestContext;true;getBindStatus;(String,boolean);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.support;RequestContext;true;getContextPath;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.support;RequestContext;true;getContextUrl;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.support;RequestContext;true;getContextUrl;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.support;RequestContext;true;getErrors;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.support;RequestContext;true;getErrors;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.support;RequestContext;true;getErrors;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.support;RequestContext;true;getErrors;(String,boolean);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.support;RequestContext;true;getErrors;(String,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.support;RequestContext;true;getErrors;(String,boolean);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.support;RequestContext;true;getLocale;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.support;RequestContext;true;getMessage;(MessageSourceResolvable);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.support;RequestContext;true;getMessage;(MessageSourceResolvable,boolean);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.support;RequestContext;true;getMessage;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.support;RequestContext;true;getMessage;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.support;RequestContext;true;getMessage;(String,List);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.support;RequestContext;true;getMessage;(String,List);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.support;RequestContext;true;getMessage;(String,List,String);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.support;RequestContext;true;getMessage;(String,List,String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.support;RequestContext;true;getMessage;(String,List,String);;Argument[2];Argument[-1];taint",
        "org.springframework.web.servlet.support;RequestContext;true;getMessage;(String,List,String);;Argument[2];ReturnValue;taint",
        "org.springframework.web.servlet.support;RequestContext;true;getMessage;(String,Object[]);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.support;RequestContext;true;getMessage;(String,Object[]);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.support;RequestContext;true;getMessage;(String,Object[],String);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.support;RequestContext;true;getMessage;(String,Object[],String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.support;RequestContext;true;getMessage;(String,Object[],String);;Argument[2];Argument[-1];taint",
        "org.springframework.web.servlet.support;RequestContext;true;getMessage;(String,Object[],String);;Argument[2];ReturnValue;taint",
        "org.springframework.web.servlet.support;RequestContext;true;getMessage;(String,Object[],String,boolean);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.support;RequestContext;true;getMessage;(String,Object[],String,boolean);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.support;RequestContext;true;getMessage;(String,Object[],String,boolean);;Argument[2];Argument[-1];taint",
        "org.springframework.web.servlet.support;RequestContext;true;getMessage;(String,Object[],String,boolean);;Argument[2];ReturnValue;taint",
        "org.springframework.web.servlet.support;RequestContext;true;getMessage;(String,Object[],boolean);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.support;RequestContext;true;getMessage;(String,Object[],boolean);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.support;RequestContext;true;getMessage;(String,String);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.support;RequestContext;true;getMessage;(String,String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.support;RequestContext;true;getMessage;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.support;RequestContext;true;getMessage;(String,String);;Argument[1];ReturnValue;taint",
        "org.springframework.web.servlet.support;RequestContext;true;getMessageSource;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.support;RequestContext;true;getModel;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.support;RequestContext;true;getPathToServlet;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.support;RequestContext;true;getQueryString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.support;RequestContext;true;getRequestDataValueProcessor;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.support;RequestContext;true;getRequestUri;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.support;RequestContext;true;getTheme;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.support;RequestContext;true;getThemeMessage;(MessageSourceResolvable);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.support;RequestContext;true;getThemeMessage;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.support;RequestContext;true;getThemeMessage;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.support;RequestContext;true;getThemeMessage;(String,List);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.support;RequestContext;true;getThemeMessage;(String,List);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.support;RequestContext;true;getThemeMessage;(String,List,String);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.support;RequestContext;true;getThemeMessage;(String,List,String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.support;RequestContext;true;getThemeMessage;(String,List,String);;Argument[2];Argument[-1];taint",
        "org.springframework.web.servlet.support;RequestContext;true;getThemeMessage;(String,List,String);;Argument[2];ReturnValue;taint",
        "org.springframework.web.servlet.support;RequestContext;true;getThemeMessage;(String,Object[]);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.support;RequestContext;true;getThemeMessage;(String,Object[]);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.support;RequestContext;true;getThemeMessage;(String,Object[],String);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.support;RequestContext;true;getThemeMessage;(String,Object[],String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.support;RequestContext;true;getThemeMessage;(String,Object[],String);;Argument[2];Argument[-1];taint",
        "org.springframework.web.servlet.support;RequestContext;true;getThemeMessage;(String,Object[],String);;Argument[2];ReturnValue;taint",
        "org.springframework.web.servlet.support;RequestContext;true;getThemeMessage;(String,String);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.support;RequestContext;true;getThemeMessage;(String,String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.support;RequestContext;true;getThemeMessage;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.support;RequestContext;true;getThemeMessage;(String,String);;Argument[1];ReturnValue;taint",
        "org.springframework.web.servlet.support;RequestContext;true;getTimeZone;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.support;RequestContext;true;getUrlPathHelper;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.support;RequestContext;true;getWebApplicationContext;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.support;RequestContext;true;setUrlPathHelper;(UrlPathHelper);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.support;RequestContextUtils;true;getLocale;(HttpServletRequest);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.support;RequestContextUtils;true;getTheme;(HttpServletRequest);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet.support;ServletUriComponentsBuilder;true;removePathExtension;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.support;WebContentGenerator;true;WebContentGenerator;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.support;WebContentGenerator;true;getCacheControl;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.support;WebContentGenerator;true;getSupportedMethods;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.support;WebContentGenerator;true;getVaryByRequestHeaders;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.support;WebContentGenerator;true;setCacheControl;(CacheControl);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.support;WebContentGenerator;true;setSupportedMethods;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.support;WebContentGenerator;true;setVaryByRequestHeaders;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags.form;AbstractDataBoundFormElementTag;true;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.tags.form;AbstractDataBoundFormElementTag;true;setPath;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags.form;AbstractHtmlElementTag;true;setCssClass;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags.form;AbstractHtmlElementTag;true;setCssErrorClass;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags.form;AbstractHtmlElementTag;true;setCssStyle;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags.form;AbstractHtmlElementTag;true;setDir;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags.form;AbstractHtmlElementTag;true;setLang;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags.form;AbstractHtmlElementTag;true;setOnclick;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags.form;AbstractHtmlElementTag;true;setOndblclick;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags.form;AbstractHtmlElementTag;true;setOnkeydown;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags.form;AbstractHtmlElementTag;true;setOnkeypress;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags.form;AbstractHtmlElementTag;true;setOnkeyup;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags.form;AbstractHtmlElementTag;true;setOnmousedown;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags.form;AbstractHtmlElementTag;true;setOnmousemove;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags.form;AbstractHtmlElementTag;true;setOnmouseout;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags.form;AbstractHtmlElementTag;true;setOnmouseover;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags.form;AbstractHtmlElementTag;true;setOnmouseup;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags.form;AbstractHtmlElementTag;true;setTabindex;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags.form;AbstractHtmlElementTag;true;setTitle;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags.form;AbstractHtmlInputElementTag;true;setAccesskey;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags.form;AbstractHtmlInputElementTag;true;setOnblur;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags.form;AbstractHtmlInputElementTag;true;setOnchange;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags.form;AbstractHtmlInputElementTag;true;setOnfocus;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags.form;AbstractMultiCheckedElementTag;true;getDelimiter;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.tags.form;AbstractMultiCheckedElementTag;true;getElement;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.tags.form;AbstractMultiCheckedElementTag;true;setDelimiter;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags.form;AbstractMultiCheckedElementTag;true;setElement;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags.form;AbstractMultiCheckedElementTag;true;setItemLabel;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags.form;AbstractMultiCheckedElementTag;true;setItemValue;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags.form;AbstractMultiCheckedElementTag;true;setItems;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags.form;AbstractSingleCheckedElementTag;true;setLabel;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags.form;AbstractSingleCheckedElementTag;true;setValue;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags.form;ButtonTag;true;getValue;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.tags.form;ButtonTag;true;setName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags.form;ButtonTag;true;setValue;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags.form;ErrorsTag;true;getDelimiter;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.tags.form;ErrorsTag;true;getElement;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.tags.form;ErrorsTag;true;setDelimiter;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags.form;ErrorsTag;true;setElement;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags.form;FormTag;true;getTarget;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.tags.form;FormTag;true;setAcceptCharset;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags.form;FormTag;true;setAction;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags.form;FormTag;true;setAutocomplete;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags.form;FormTag;true;setEnctype;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags.form;FormTag;true;setMethod;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags.form;FormTag;true;setMethodParam;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags.form;FormTag;true;setModelAttribute;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags.form;FormTag;true;setName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags.form;FormTag;true;setOnreset;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags.form;FormTag;true;setOnsubmit;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags.form;FormTag;true;setServletRelativeAction;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags.form;FormTag;true;setTarget;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags.form;InputTag;true;setAlt;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags.form;InputTag;true;setAutocomplete;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags.form;InputTag;true;setMaxlength;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags.form;InputTag;true;setOnselect;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags.form;InputTag;true;setSize;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags.form;LabelTag;true;setFor;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags.form;OptionTag;true;setLabel;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags.form;OptionTag;true;setValue;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags.form;OptionsTag;true;setItemLabel;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags.form;OptionsTag;true;setItemValue;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags.form;OptionsTag;true;setItems;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags.form;SelectTag;true;setItemLabel;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags.form;SelectTag;true;setItemValue;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags.form;SelectTag;true;setItems;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags.form;SelectTag;true;setMultiple;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags.form;SelectTag;true;setSize;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags.form;TagWriter;true;TagWriter;(PageContext);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags.form;TagWriter;true;TagWriter;(Writer);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags.form;TagWriter;true;startTag;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags.form;TextareaTag;true;setCols;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags.form;TextareaTag;true;setOnselect;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags.form;TextareaTag;true;setRows;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags;ArgumentAware;true;addArgument;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags;ArgumentTag;true;setValue;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags;BindErrorsTag;true;getErrors;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.tags;BindErrorsTag;true;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.tags;BindErrorsTag;true;setName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags;BindTag;true;getErrors;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.tags;BindTag;true;getPath;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.tags;BindTag;true;getProperty;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.tags;BindTag;true;setPath;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags;EditorAwareTag;true;getEditor;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.tags;EvalTag;true;setExpression;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags;EvalTag;true;setVar;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags;MessageTag;true;setArgumentSeparator;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags;MessageTag;true;setArguments;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags;MessageTag;true;setCode;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags;MessageTag;true;setMessage;(MessageSourceResolvable);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags;MessageTag;true;setScope;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags;MessageTag;true;setText;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags;MessageTag;true;setVar;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags;NestedPathTag;true;getPath;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.tags;NestedPathTag;true;setPath;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags;Param;true;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.tags;Param;true;getValue;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.tags;Param;true;setName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags;Param;true;setValue;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags;Param;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.tags;ParamAware;true;addParam;(Param);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags;ParamTag;true;setName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags;ParamTag;true;setValue;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags;TransformTag;true;setScope;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags;TransformTag;true;setValue;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags;TransformTag;true;setVar;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags;UrlTag;true;setContext;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags;UrlTag;true;setValue;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.tags;UrlTag;true;setVar;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.theme;AbstractThemeResolver;true;getDefaultThemeName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.theme;AbstractThemeResolver;true;setDefaultThemeName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.theme;CookieThemeResolver;true;getDefaultThemeName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.theme;CookieThemeResolver;true;setDefaultThemeName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.theme;ThemeChangeInterceptor;true;getParamName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.theme;ThemeChangeInterceptor;true;setParamName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view.feed;AbstractAtomFeedView;true;setFeedType;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view.freemarker;FreeMarkerConfig;true;getConfiguration;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.view.freemarker;FreeMarkerConfig;true;getTaglibFactory;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.view.freemarker;FreeMarkerConfigurer;true;setConfiguration;(Configuration);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view.freemarker;FreeMarkerView;true;setConfiguration;(Configuration);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view.freemarker;FreeMarkerView;true;setEncoding;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view.freemarker;FreeMarkerViewResolver;true;FreeMarkerViewResolver;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view.freemarker;FreeMarkerViewResolver;true;FreeMarkerViewResolver;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.view.groovy;GroovyMarkupConfig;true;getTemplateEngine;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.view.groovy;GroovyMarkupConfigurer;true;getResourceLoaderPath;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.view.groovy;GroovyMarkupConfigurer;true;setResourceLoaderPath;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view.groovy;GroovyMarkupConfigurer;true;setTemplateEngine;(MarkupTemplateEngine);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view.groovy;GroovyMarkupView;true;setTemplateEngine;(MarkupTemplateEngine);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view.groovy;GroovyMarkupViewResolver;true;GroovyMarkupViewResolver;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view.groovy;GroovyMarkupViewResolver;true;GroovyMarkupViewResolver;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.view.json;AbstractJackson2View;true;getObjectMapper;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.view.json;AbstractJackson2View;true;setModelKey;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view.json;AbstractJackson2View;true;setObjectMapper;(ObjectMapper);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view.json;MappingJackson2JsonView;true;MappingJackson2JsonView;(ObjectMapper);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view.json;MappingJackson2JsonView;true;getModelKeys;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.view.json;MappingJackson2JsonView;true;setJsonPrefix;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view.json;MappingJackson2JsonView;true;setModelKeys;(Set);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view.script;RenderingContext;true;RenderingContext;(ApplicationContext,Locale,Function,String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view.script;RenderingContext;true;RenderingContext;(ApplicationContext,Locale,Function,String);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.view.script;RenderingContext;true;RenderingContext;(ApplicationContext,Locale,Function,String);;Argument[2];Argument[-1];taint",
        "org.springframework.web.servlet.view.script;RenderingContext;true;RenderingContext;(ApplicationContext,Locale,Function,String);;Argument[3];Argument[-1];taint",
        "org.springframework.web.servlet.view.script;RenderingContext;true;getApplicationContext;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.view.script;RenderingContext;true;getLocale;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.view.script;RenderingContext;true;getTemplateLoader;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.view.script;RenderingContext;true;getUrl;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.view.script;ScriptTemplateConfig;true;getContentType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.view.script;ScriptTemplateConfig;true;getEngine;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.view.script;ScriptTemplateConfig;true;getEngineName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.view.script;ScriptTemplateConfig;true;getEngineSupplier;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.view.script;ScriptTemplateConfig;true;getRenderFunction;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.view.script;ScriptTemplateConfig;true;getRenderObject;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.view.script;ScriptTemplateConfig;true;getResourceLoaderPath;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.view.script;ScriptTemplateConfig;true;getScripts;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.view.script;ScriptTemplateConfigurer;true;ScriptTemplateConfigurer;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view.script;ScriptTemplateConfigurer;true;setContentType;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view.script;ScriptTemplateConfigurer;true;setEngine;(ScriptEngine);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view.script;ScriptTemplateConfigurer;true;setEngineName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view.script;ScriptTemplateConfigurer;true;setEngineSupplier;(Supplier);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view.script;ScriptTemplateConfigurer;true;setRenderFunction;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view.script;ScriptTemplateConfigurer;true;setRenderObject;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view.script;ScriptTemplateConfigurer;true;setResourceLoaderPath;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view.script;ScriptTemplateConfigurer;true;setScripts;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view.script;ScriptTemplateView;true;ScriptTemplateView;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view.script;ScriptTemplateView;true;setEngine;(ScriptEngine);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view.script;ScriptTemplateView;true;setEngineName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view.script;ScriptTemplateView;true;setEngineSupplier;(Supplier);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view.script;ScriptTemplateView;true;setRenderFunction;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view.script;ScriptTemplateView;true;setRenderObject;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view.script;ScriptTemplateView;true;setResourceLoaderPath;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view.script;ScriptTemplateView;true;setScripts;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view.script;ScriptTemplateViewResolver;true;ScriptTemplateViewResolver;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view.script;ScriptTemplateViewResolver;true;ScriptTemplateViewResolver;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.view.tiles3;SpringWildcardServletTilesApplicationContext;true;SpringWildcardServletTilesApplicationContext;(ServletContext);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view.tiles3;TilesConfigurer;true;setDefinitions;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view.tiles3;TilesConfigurer;true;setTilesInitializer;(TilesInitializer);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view.tiles3;TilesView;true;setRenderer;(Renderer);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view.tiles3;TilesViewResolver;true;setRenderer;(Renderer);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view.xml;MappingJackson2XmlView;true;MappingJackson2XmlView;(XmlMapper);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view.xml;MarshallingView;true;MarshallingView;(Marshaller);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view.xml;MarshallingView;true;setMarshaller;(Marshaller);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view.xml;MarshallingView;true;setModelKey;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view.xslt;XsltView;true;setErrorListener;(ErrorListener);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view.xslt;XsltView;true;setOutputProperties;(Properties);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view.xslt;XsltView;true;setSourceKey;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view.xslt;XsltView;true;setUriResolver;(URIResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view.xslt;XsltViewResolver;true;setErrorListener;(ErrorListener);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view.xslt;XsltViewResolver;true;setOutputProperties;(Properties);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view.xslt;XsltViewResolver;true;setSourceKey;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view.xslt;XsltViewResolver;true;setUriResolver;(URIResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view;AbstractCachingViewResolver;true;getCacheFilter;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.view;AbstractCachingViewResolver;true;setCacheFilter;(CacheFilter);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view;AbstractUrlBasedView;true;getUrl;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.view;AbstractUrlBasedView;true;setUrl;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view;AbstractUrlBasedView;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.view;AbstractView;true;addStaticAttribute;(String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view;AbstractView;true;addStaticAttribute;(String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.view;AbstractView;true;getAttributesMap;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.view;AbstractView;true;getBeanName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.view;AbstractView;true;getRequestContextAttribute;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.view;AbstractView;true;getStaticAttributes;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.view;AbstractView;true;setAttributes;(Properties);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view;AbstractView;true;setAttributesCSV;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view;AbstractView;true;setContentType;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view;AbstractView;true;setExposedContextBeanNames;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view;AbstractView;true;setRequestContextAttribute;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view;AbstractView;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.view;ContentNegotiatingViewResolver;true;getContentNegotiationManager;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.view;ContentNegotiatingViewResolver;true;getDefaultViews;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.view;ContentNegotiatingViewResolver;true;getViewResolvers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.view;ContentNegotiatingViewResolver;true;setContentNegotiationManager;(ContentNegotiationManager);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view;ContentNegotiatingViewResolver;true;setDefaultViews;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view;ContentNegotiatingViewResolver;true;setViewResolvers;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view;DefaultRequestToViewNameTranslator;true;setPrefix;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view;DefaultRequestToViewNameTranslator;true;setSeparator;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view;DefaultRequestToViewNameTranslator;true;setSuffix;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view;InternalResourceView;true;InternalResourceView;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view;InternalResourceView;true;InternalResourceView;(String,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view;InternalResourceViewResolver;true;InternalResourceViewResolver;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view;InternalResourceViewResolver;true;InternalResourceViewResolver;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.view;JstlView;true;JstlView;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view;JstlView;true;JstlView;(String,MessageSource);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view;JstlView;true;JstlView;(String,MessageSource);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet.view;RedirectView;true;RedirectView;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view;RedirectView;true;RedirectView;(String,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view;RedirectView;true;RedirectView;(String,boolean,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view;RedirectView;true;RedirectView;(String,boolean,boolean,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view;RedirectView;true;getHosts;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.view;RedirectView;true;setEncodingScheme;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view;RedirectView;true;setHosts;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view;ResourceBundleViewResolver;true;setBasename;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view;ResourceBundleViewResolver;true;setBasenames;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view;ResourceBundleViewResolver;true;setBundleClassLoader;(ClassLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view;ResourceBundleViewResolver;true;setDefaultParentView;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view;ResourceBundleViewResolver;true;setLocalesToInitialize;(Locale[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view;UrlBasedViewResolver;true;getAttributesMap;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.view;UrlBasedViewResolver;true;getRedirectHosts;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.view;UrlBasedViewResolver;true;setAttributes;(Properties);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view;UrlBasedViewResolver;true;setAttributesMap;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view;UrlBasedViewResolver;true;setContentType;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view;UrlBasedViewResolver;true;setExposedContextBeanNames;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view;UrlBasedViewResolver;true;setPrefix;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view;UrlBasedViewResolver;true;setRedirectHosts;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view;UrlBasedViewResolver;true;setRequestContextAttribute;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view;UrlBasedViewResolver;true;setSuffix;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view;UrlBasedViewResolver;true;setViewNames;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view;ViewResolverComposite;true;getViewResolvers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet.view;ViewResolverComposite;true;setViewResolvers;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet.view;XmlViewResolver;true;setLocation;(Resource);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet;DispatcherServlet;true;DispatcherServlet;(WebApplicationContext);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet;DispatcherServlet;true;getHandlerMappings;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet;DispatcherServlet;true;getMultipartResolver;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet;DispatcherServlet;true;getThemeSource;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet;FlashMap;false;addTargetRequestParam;(String,String);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet;FlashMap;false;addTargetRequestParam;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet;FlashMap;false;addTargetRequestParam;(String,String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet;FlashMap;false;addTargetRequestParam;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet;FlashMap;false;addTargetRequestParam;(String,String);;Argument[1];ReturnValue;taint",
        "org.springframework.web.servlet;FlashMap;false;addTargetRequestParams;(MultiValueMap);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet;FlashMap;false;getTargetRequestParams;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet;FlashMap;false;getTargetRequestPath;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet;FlashMap;false;setTargetRequestPath;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet;FlashMap;false;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet;FrameworkServlet;true;FrameworkServlet;(WebApplicationContext);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet;FrameworkServlet;true;getContextAttribute;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet;FrameworkServlet;true;getContextConfigLocation;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet;FrameworkServlet;true;getContextId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet;FrameworkServlet;true;getNamespace;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet;FrameworkServlet;true;getWebApplicationContext;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet;FrameworkServlet;true;setContextAttribute;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet;FrameworkServlet;true;setContextConfigLocation;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet;FrameworkServlet;true;setContextId;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet;FrameworkServlet;true;setContextInitializerClasses;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet;FrameworkServlet;true;setContextInitializers;(ApplicationContextInitializer[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet;FrameworkServlet;true;setNamespace;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet;HandlerExceptionResolver;true;resolveException;(HttpServletRequest,HttpServletResponse,Object,Exception);;Argument[3];ReturnValue;taint",
        "org.springframework.web.servlet;HandlerExecutionChain;true;HandlerExecutionChain;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet;HandlerExecutionChain;true;HandlerExecutionChain;(Object,HandlerInterceptor[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet;HandlerExecutionChain;true;HandlerExecutionChain;(Object,HandlerInterceptor[]);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet;HandlerExecutionChain;true;HandlerExecutionChain;(Object,List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet;HandlerExecutionChain;true;HandlerExecutionChain;(Object,List);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet;HandlerExecutionChain;true;addInterceptor;(HandlerInterceptor);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet;HandlerExecutionChain;true;addInterceptor;(int,HandlerInterceptor);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet;HandlerExecutionChain;true;addInterceptors;(HandlerInterceptor[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet;HandlerExecutionChain;true;getHandler;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet;HandlerExecutionChain;true;getInterceptorList;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet;HandlerExecutionChain;true;getInterceptors;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet;HandlerExecutionChain;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet;HandlerMapping;true;getHandler;(HttpServletRequest);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet;HandlerMapping;true;getHandler;(HttpServletRequest);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet;LocaleResolver;true;resolveLocale;(HttpServletRequest);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet;LocaleResolver;true;resolveLocale;(HttpServletRequest);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet;ModelAndView;true;ModelAndView;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet;ModelAndView;true;ModelAndView;(String,HttpStatus);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet;ModelAndView;true;ModelAndView;(String,Map);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet;ModelAndView;true;ModelAndView;(String,Map);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet;ModelAndView;true;ModelAndView;(String,Map,HttpStatus);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet;ModelAndView;true;ModelAndView;(String,Map,HttpStatus);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet;ModelAndView;true;ModelAndView;(String,String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet;ModelAndView;true;ModelAndView;(String,String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet;ModelAndView;true;ModelAndView;(String,String,Object);;Argument[2];Argument[-1];taint",
        "org.springframework.web.servlet;ModelAndView;true;ModelAndView;(View);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet;ModelAndView;true;ModelAndView;(View,Map);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet;ModelAndView;true;ModelAndView;(View,Map);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet;ModelAndView;true;ModelAndView;(View,String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet;ModelAndView;true;ModelAndView;(View,String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet;ModelAndView;true;ModelAndView;(View,String,Object);;Argument[2];Argument[-1];taint",
        "org.springframework.web.servlet;ModelAndView;true;addAllObjects;(Map);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet;ModelAndView;true;addAllObjects;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet;ModelAndView;true;addAllObjects;(Map);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet;ModelAndView;true;addObject;(Object);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet;ModelAndView;true;addObject;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet;ModelAndView;true;addObject;(Object);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet;ModelAndView;true;addObject;(String,Object);;Argument[-1];ReturnValue;value",
        "org.springframework.web.servlet;ModelAndView;true;addObject;(String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet;ModelAndView;true;addObject;(String,Object);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet;ModelAndView;true;addObject;(String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet;ModelAndView;true;addObject;(String,Object);;Argument[1];ReturnValue;taint",
        "org.springframework.web.servlet;ModelAndView;true;getModel;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet;ModelAndView;true;getModelMap;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet;ModelAndView;true;getView;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet;ModelAndView;true;getViewName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet;ModelAndView;true;setView;(View);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet;ModelAndView;true;setViewName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet;ModelAndView;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet;ModelAndViewDefiningException;true;ModelAndViewDefiningException;(ModelAndView);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet;ModelAndViewDefiningException;true;getModelAndView;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet;NoHandlerFoundException;true;NoHandlerFoundException;(String,String,HttpHeaders);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet;NoHandlerFoundException;true;NoHandlerFoundException;(String,String,HttpHeaders);;Argument[1];Argument[-1];taint",
        "org.springframework.web.servlet;NoHandlerFoundException;true;NoHandlerFoundException;(String,String,HttpHeaders);;Argument[2];Argument[-1];taint",
        "org.springframework.web.servlet;NoHandlerFoundException;true;getHeaders;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet;NoHandlerFoundException;true;getHttpMethod;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet;NoHandlerFoundException;true;getRequestURL;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet;RequestToViewNameTranslator;true;getViewName;(HttpServletRequest);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet;RequestToViewNameTranslator;true;getViewName;(HttpServletRequest);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet;ThemeResolver;true;resolveThemeName;(HttpServletRequest);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet;ThemeResolver;true;resolveThemeName;(HttpServletRequest);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet;ThemeResolver;true;setThemeName;(HttpServletRequest,HttpServletResponse,String);;Argument[2];Argument[0];taint",
        "org.springframework.web.servlet;View;true;getContentType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet;ViewResolver;true;resolveViewName;(String,Locale);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.servlet;ViewResolver;true;resolveViewName;(String,Locale);;Argument[0];Argument[-1];taint",
        "org.springframework.web.servlet;ViewResolver;true;resolveViewName;(String,Locale);;Argument[0];ReturnValue;taint",
        "org.springframework.web.servlet;ViewResolver;true;resolveViewName;(String,Locale);;Argument[1];Argument[-1];taint",
        "org.springframework.web.socket.adapter.jetty;Jetty10WebSocketHandlerAdapter;true;Jetty10WebSocketHandlerAdapter;(WebSocketHandler,JettyWebSocketSession);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.adapter.jetty;Jetty10WebSocketHandlerAdapter;true;Jetty10WebSocketHandlerAdapter;(WebSocketHandler,JettyWebSocketSession);;Argument[1];Argument[-1];taint",
        "org.springframework.web.socket.adapter.jetty;Jetty10WebSocketHandlerAdapter;true;onWebSocketClose;(int,String);;Argument[1];Argument[-1];taint",
        "org.springframework.web.socket.adapter.jetty;Jetty10WebSocketHandlerAdapter;true;onWebSocketConnect;(Session);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.adapter.jetty;JettyWebSocketHandlerAdapter;true;JettyWebSocketHandlerAdapter;(WebSocketHandler,JettyWebSocketSession);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.adapter.jetty;JettyWebSocketHandlerAdapter;true;JettyWebSocketHandlerAdapter;(WebSocketHandler,JettyWebSocketSession);;Argument[1];Argument[-1];taint",
        "org.springframework.web.socket.adapter.jetty;JettyWebSocketHandlerAdapter;true;onWebSocketClose;(int,String);;Argument[1];Argument[-1];taint",
        "org.springframework.web.socket.adapter.jetty;JettyWebSocketHandlerAdapter;true;onWebSocketConnect;(Session);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.adapter.jetty;JettyWebSocketSession;true;JettyWebSocketSession;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.adapter.jetty;JettyWebSocketSession;true;JettyWebSocketSession;(Map,Principal);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.adapter.jetty;JettyWebSocketSession;true;JettyWebSocketSession;(Map,Principal);;Argument[1];Argument[-1];taint",
        "org.springframework.web.socket.adapter.standard;ConvertingEncoderDecoderSupport;true;decode;(Object);;Argument[0];ReturnValue;taint",
        "org.springframework.web.socket.adapter.standard;ConvertingEncoderDecoderSupport;true;encode;(Object);;Argument[0];ReturnValue;taint",
        "org.springframework.web.socket.adapter.standard;StandardWebSocketHandlerAdapter;true;StandardWebSocketHandlerAdapter;(WebSocketHandler,StandardWebSocketSession);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.adapter.standard;StandardWebSocketHandlerAdapter;true;StandardWebSocketHandlerAdapter;(WebSocketHandler,StandardWebSocketSession);;Argument[1];Argument[-1];taint",
        "org.springframework.web.socket.adapter.standard;StandardWebSocketSession;true;StandardWebSocketSession;(HttpHeaders,Map,InetSocketAddress,InetSocketAddress);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.adapter.standard;StandardWebSocketSession;true;StandardWebSocketSession;(HttpHeaders,Map,InetSocketAddress,InetSocketAddress);;Argument[1];Argument[-1];taint",
        "org.springframework.web.socket.adapter.standard;StandardWebSocketSession;true;StandardWebSocketSession;(HttpHeaders,Map,InetSocketAddress,InetSocketAddress);;Argument[2];Argument[-1];taint",
        "org.springframework.web.socket.adapter.standard;StandardWebSocketSession;true;StandardWebSocketSession;(HttpHeaders,Map,InetSocketAddress,InetSocketAddress);;Argument[3];Argument[-1];taint",
        "org.springframework.web.socket.adapter.standard;StandardWebSocketSession;true;StandardWebSocketSession;(HttpHeaders,Map,InetSocketAddress,InetSocketAddress,Principal);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.adapter.standard;StandardWebSocketSession;true;StandardWebSocketSession;(HttpHeaders,Map,InetSocketAddress,InetSocketAddress,Principal);;Argument[1];Argument[-1];taint",
        "org.springframework.web.socket.adapter.standard;StandardWebSocketSession;true;StandardWebSocketSession;(HttpHeaders,Map,InetSocketAddress,InetSocketAddress,Principal);;Argument[2];Argument[-1];taint",
        "org.springframework.web.socket.adapter.standard;StandardWebSocketSession;true;StandardWebSocketSession;(HttpHeaders,Map,InetSocketAddress,InetSocketAddress,Principal);;Argument[3];Argument[-1];taint",
        "org.springframework.web.socket.adapter.standard;StandardWebSocketSession;true;StandardWebSocketSession;(HttpHeaders,Map,InetSocketAddress,InetSocketAddress,Principal);;Argument[4];Argument[-1];taint",
        "org.springframework.web.socket.adapter;AbstractWebSocketSession;true;AbstractWebSocketSession;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.adapter;AbstractWebSocketSession;true;initializeNativeSession;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.adapter;AbstractWebSocketSession;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.adapter;NativeWebSocketSession;true;getNativeSession;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.adapter;NativeWebSocketSession;true;getNativeSession;(Class);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.client.jetty;JettyWebSocketClient;true;JettyWebSocketClient;(WebSocketClient);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.client.jetty;JettyWebSocketClient;true;getTaskExecutor;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.client.jetty;JettyWebSocketClient;true;setTaskExecutor;(AsyncListenableTaskExecutor);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.client.standard;AnnotatedEndpointConnectionManager;true;AnnotatedEndpointConnectionManager;(Class,String,Object[]);;Argument[1];Argument[-1];taint",
        "org.springframework.web.socket.client.standard;AnnotatedEndpointConnectionManager;true;AnnotatedEndpointConnectionManager;(Class,String,Object[]);;Argument[2];Argument[-1];taint",
        "org.springframework.web.socket.client.standard;AnnotatedEndpointConnectionManager;true;AnnotatedEndpointConnectionManager;(Object,String,Object[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.client.standard;AnnotatedEndpointConnectionManager;true;AnnotatedEndpointConnectionManager;(Object,String,Object[]);;Argument[1];Argument[-1];taint",
        "org.springframework.web.socket.client.standard;AnnotatedEndpointConnectionManager;true;AnnotatedEndpointConnectionManager;(Object,String,Object[]);;Argument[2];Argument[-1];taint",
        "org.springframework.web.socket.client.standard;AnnotatedEndpointConnectionManager;true;getTaskExecutor;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.client.standard;AnnotatedEndpointConnectionManager;true;getWebSocketContainer;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.client.standard;AnnotatedEndpointConnectionManager;true;setTaskExecutor;(TaskExecutor);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.client.standard;AnnotatedEndpointConnectionManager;true;setWebSocketContainer;(WebSocketContainer);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.client.standard;EndpointConnectionManager;true;EndpointConnectionManager;(Class,String,Object[]);;Argument[1];Argument[-1];taint",
        "org.springframework.web.socket.client.standard;EndpointConnectionManager;true;EndpointConnectionManager;(Class,String,Object[]);;Argument[2];Argument[-1];taint",
        "org.springframework.web.socket.client.standard;EndpointConnectionManager;true;EndpointConnectionManager;(Endpoint,String,Object[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.client.standard;EndpointConnectionManager;true;EndpointConnectionManager;(Endpoint,String,Object[]);;Argument[1];Argument[-1];taint",
        "org.springframework.web.socket.client.standard;EndpointConnectionManager;true;EndpointConnectionManager;(Endpoint,String,Object[]);;Argument[2];Argument[-1];taint",
        "org.springframework.web.socket.client.standard;EndpointConnectionManager;true;getTaskExecutor;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.client.standard;EndpointConnectionManager;true;getWebSocketContainer;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.client.standard;EndpointConnectionManager;true;setTaskExecutor;(TaskExecutor);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.client.standard;EndpointConnectionManager;true;setWebSocketContainer;(WebSocketContainer);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.client.standard;StandardWebSocketClient;true;StandardWebSocketClient;(WebSocketContainer);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.client.standard;StandardWebSocketClient;true;getTaskExecutor;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.client.standard;StandardWebSocketClient;true;getUserProperties;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.client.standard;StandardWebSocketClient;true;setTaskExecutor;(AsyncListenableTaskExecutor);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.client.standard;StandardWebSocketClient;true;setUserProperties;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.client;ConnectionManagerSupport;true;ConnectionManagerSupport;(String,Object[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.client;ConnectionManagerSupport;true;ConnectionManagerSupport;(String,Object[]);;Argument[1];Argument[-1];taint",
        "org.springframework.web.socket.client;WebSocketClient;true;doHandshake;(WebSocketHandler,String,Object[]);;Argument[1];Argument[-1];taint",
        "org.springframework.web.socket.client;WebSocketClient;true;doHandshake;(WebSocketHandler,String,Object[]);;Argument[2];Argument[-1];taint",
        "org.springframework.web.socket.client;WebSocketClient;true;doHandshake;(WebSocketHandler,WebSocketHttpHeaders,URI);;Argument[2];Argument[-1];taint",
        "org.springframework.web.socket.client;WebSocketConnectionManager;true;WebSocketConnectionManager;(WebSocketClient,WebSocketHandler,String,Object[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.client;WebSocketConnectionManager;true;WebSocketConnectionManager;(WebSocketClient,WebSocketHandler,String,Object[]);;Argument[1];Argument[-1];taint",
        "org.springframework.web.socket.client;WebSocketConnectionManager;true;WebSocketConnectionManager;(WebSocketClient,WebSocketHandler,String,Object[]);;Argument[2];Argument[-1];taint",
        "org.springframework.web.socket.client;WebSocketConnectionManager;true;WebSocketConnectionManager;(WebSocketClient,WebSocketHandler,String,Object[]);;Argument[3];Argument[-1];taint",
        "org.springframework.web.socket.client;WebSocketConnectionManager;true;getHeaders;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.client;WebSocketConnectionManager;true;getOrigin;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.client;WebSocketConnectionManager;true;getSubProtocols;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.client;WebSocketConnectionManager;true;setHeaders;(HttpHeaders);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.client;WebSocketConnectionManager;true;setOrigin;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.config.annotation;DelegatingWebSocketConfiguration;true;setConfigurers;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.config.annotation;DelegatingWebSocketMessageBrokerConfiguration;true;setConfigurers;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.config.annotation;ServletWebSocketHandlerRegistry;true;getUrlPathHelper;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.config.annotation;ServletWebSocketHandlerRegistry;true;setUrlPathHelper;(UrlPathHelper);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.config.annotation;SockJsServiceRegistration;true;setClientLibraryUrl;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.web.socket.config.annotation;SockJsServiceRegistration;true;setClientLibraryUrl;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.config.annotation;SockJsServiceRegistration;true;setClientLibraryUrl;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.socket.config.annotation;SockJsServiceRegistration;true;setDisconnectDelay;(long);;Argument[-1];ReturnValue;value",
        "org.springframework.web.socket.config.annotation;SockJsServiceRegistration;true;setHeartbeatTime;(long);;Argument[-1];ReturnValue;value",
        "org.springframework.web.socket.config.annotation;SockJsServiceRegistration;true;setHttpMessageCacheSize;(int);;Argument[-1];ReturnValue;value",
        "org.springframework.web.socket.config.annotation;SockJsServiceRegistration;true;setInterceptors;(HandshakeInterceptor[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.socket.config.annotation;SockJsServiceRegistration;true;setInterceptors;(HandshakeInterceptor[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.config.annotation;SockJsServiceRegistration;true;setInterceptors;(HandshakeInterceptor[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.web.socket.config.annotation;SockJsServiceRegistration;true;setMessageCodec;(SockJsMessageCodec);;Argument[-1];ReturnValue;value",
        "org.springframework.web.socket.config.annotation;SockJsServiceRegistration;true;setMessageCodec;(SockJsMessageCodec);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.config.annotation;SockJsServiceRegistration;true;setMessageCodec;(SockJsMessageCodec);;Argument[0];ReturnValue;taint",
        "org.springframework.web.socket.config.annotation;SockJsServiceRegistration;true;setSessionCookieNeeded;(boolean);;Argument[-1];ReturnValue;value",
        "org.springframework.web.socket.config.annotation;SockJsServiceRegistration;true;setStreamBytesLimit;(int);;Argument[-1];ReturnValue;value",
        "org.springframework.web.socket.config.annotation;SockJsServiceRegistration;true;setSupressCors;(boolean);;Argument[-1];ReturnValue;value",
        "org.springframework.web.socket.config.annotation;SockJsServiceRegistration;true;setTaskScheduler;(TaskScheduler);;Argument[-1];ReturnValue;value",
        "org.springframework.web.socket.config.annotation;SockJsServiceRegistration;true;setTaskScheduler;(TaskScheduler);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.config.annotation;SockJsServiceRegistration;true;setTaskScheduler;(TaskScheduler);;Argument[0];ReturnValue;taint",
        "org.springframework.web.socket.config.annotation;SockJsServiceRegistration;true;setTransportHandlerOverrides;(TransportHandler[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.socket.config.annotation;SockJsServiceRegistration;true;setTransportHandlerOverrides;(TransportHandler[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.config.annotation;SockJsServiceRegistration;true;setTransportHandlerOverrides;(TransportHandler[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.web.socket.config.annotation;SockJsServiceRegistration;true;setTransportHandlers;(TransportHandler[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.socket.config.annotation;SockJsServiceRegistration;true;setTransportHandlers;(TransportHandler[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.config.annotation;SockJsServiceRegistration;true;setTransportHandlers;(TransportHandler[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.web.socket.config.annotation;SockJsServiceRegistration;true;setWebSocketEnabled;(boolean);;Argument[-1];ReturnValue;value",
        "org.springframework.web.socket.config.annotation;StompEndpointRegistry;true;addEndpoint;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.config.annotation;StompEndpointRegistry;true;addEndpoint;(String[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.web.socket.config.annotation;StompEndpointRegistry;true;setErrorHandler;(StompSubProtocolErrorHandler);;Argument[-1];ReturnValue;value",
        "org.springframework.web.socket.config.annotation;StompEndpointRegistry;true;setErrorHandler;(StompSubProtocolErrorHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.config.annotation;StompEndpointRegistry;true;setErrorHandler;(StompSubProtocolErrorHandler);;Argument[0];ReturnValue;taint",
        "org.springframework.web.socket.config.annotation;StompEndpointRegistry;true;setUrlPathHelper;(UrlPathHelper);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.config.annotation;StompWebSocketEndpointRegistration;true;addInterceptors;(HandshakeInterceptor[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.socket.config.annotation;StompWebSocketEndpointRegistration;true;addInterceptors;(HandshakeInterceptor[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.config.annotation;StompWebSocketEndpointRegistration;true;addInterceptors;(HandshakeInterceptor[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.web.socket.config.annotation;StompWebSocketEndpointRegistration;true;setAllowedOriginPatterns;(String[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.socket.config.annotation;StompWebSocketEndpointRegistration;true;setAllowedOriginPatterns;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.config.annotation;StompWebSocketEndpointRegistration;true;setAllowedOriginPatterns;(String[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.web.socket.config.annotation;StompWebSocketEndpointRegistration;true;setAllowedOrigins;(String[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.socket.config.annotation;StompWebSocketEndpointRegistration;true;setAllowedOrigins;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.config.annotation;StompWebSocketEndpointRegistration;true;setAllowedOrigins;(String[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.web.socket.config.annotation;StompWebSocketEndpointRegistration;true;setHandshakeHandler;(HandshakeHandler);;Argument[-1];ReturnValue;value",
        "org.springframework.web.socket.config.annotation;StompWebSocketEndpointRegistration;true;setHandshakeHandler;(HandshakeHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.config.annotation;StompWebSocketEndpointRegistration;true;setHandshakeHandler;(HandshakeHandler);;Argument[0];ReturnValue;taint",
        "org.springframework.web.socket.config.annotation;StompWebSocketEndpointRegistration;true;withSockJS;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.config.annotation;WebMvcStompEndpointRegistry;true;WebMvcStompEndpointRegistry;(WebSocketHandler,WebSocketTransportRegistration,TaskScheduler);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.config.annotation;WebMvcStompEndpointRegistry;true;WebMvcStompEndpointRegistry;(WebSocketHandler,WebSocketTransportRegistration,TaskScheduler);;Argument[2];Argument[-1];taint",
        "org.springframework.web.socket.config.annotation;WebMvcStompWebSocketEndpointRegistration;true;WebMvcStompWebSocketEndpointRegistration;(String[],WebSocketHandler,TaskScheduler);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.config.annotation;WebMvcStompWebSocketEndpointRegistration;true;WebMvcStompWebSocketEndpointRegistration;(String[],WebSocketHandler,TaskScheduler);;Argument[1];Argument[-1];taint",
        "org.springframework.web.socket.config.annotation;WebMvcStompWebSocketEndpointRegistration;true;WebMvcStompWebSocketEndpointRegistration;(String[],WebSocketHandler,TaskScheduler);;Argument[2];Argument[-1];taint",
        "org.springframework.web.socket.config.annotation;WebMvcStompWebSocketEndpointRegistration;true;getMappings;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.config.annotation;WebSocketConfigurationSupport;true;defaultSockJsTaskScheduler;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.config.annotation;WebSocketHandlerRegistration;true;addHandler;(WebSocketHandler,String[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.socket.config.annotation;WebSocketHandlerRegistration;true;addHandler;(WebSocketHandler,String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.config.annotation;WebSocketHandlerRegistration;true;addHandler;(WebSocketHandler,String[]);;Argument[0];ReturnValue;taint",
        "org.springframework.web.socket.config.annotation;WebSocketHandlerRegistration;true;addHandler;(WebSocketHandler,String[]);;Argument[1];Argument[-1];taint",
        "org.springframework.web.socket.config.annotation;WebSocketHandlerRegistration;true;addHandler;(WebSocketHandler,String[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.web.socket.config.annotation;WebSocketHandlerRegistration;true;addInterceptors;(HandshakeInterceptor[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.socket.config.annotation;WebSocketHandlerRegistration;true;addInterceptors;(HandshakeInterceptor[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.config.annotation;WebSocketHandlerRegistration;true;addInterceptors;(HandshakeInterceptor[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.web.socket.config.annotation;WebSocketHandlerRegistration;true;setAllowedOriginPatterns;(String[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.socket.config.annotation;WebSocketHandlerRegistration;true;setAllowedOriginPatterns;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.config.annotation;WebSocketHandlerRegistration;true;setAllowedOriginPatterns;(String[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.web.socket.config.annotation;WebSocketHandlerRegistration;true;setAllowedOrigins;(String[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.socket.config.annotation;WebSocketHandlerRegistration;true;setAllowedOrigins;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.config.annotation;WebSocketHandlerRegistration;true;setAllowedOrigins;(String[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.web.socket.config.annotation;WebSocketHandlerRegistration;true;setHandshakeHandler;(HandshakeHandler);;Argument[-1];ReturnValue;value",
        "org.springframework.web.socket.config.annotation;WebSocketHandlerRegistration;true;setHandshakeHandler;(HandshakeHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.config.annotation;WebSocketHandlerRegistration;true;setHandshakeHandler;(HandshakeHandler);;Argument[0];ReturnValue;taint",
        "org.springframework.web.socket.config.annotation;WebSocketHandlerRegistration;true;withSockJS;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.config.annotation;WebSocketHandlerRegistry;true;addHandler;(WebSocketHandler,String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.config.annotation;WebSocketHandlerRegistry;true;addHandler;(WebSocketHandler,String[]);;Argument[0];ReturnValue;taint",
        "org.springframework.web.socket.config.annotation;WebSocketHandlerRegistry;true;addHandler;(WebSocketHandler,String[]);;Argument[1];Argument[-1];taint",
        "org.springframework.web.socket.config.annotation;WebSocketHandlerRegistry;true;addHandler;(WebSocketHandler,String[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.web.socket.config.annotation;WebSocketMessageBrokerConfigurationSupport;true;subProtocolWebSocketHandler;(AbstractSubscribableChannel,AbstractSubscribableChannel);;Argument[0];ReturnValue;taint",
        "org.springframework.web.socket.config.annotation;WebSocketMessageBrokerConfigurationSupport;true;subProtocolWebSocketHandler;(AbstractSubscribableChannel,AbstractSubscribableChannel);;Argument[1];ReturnValue;taint",
        "org.springframework.web.socket.config.annotation;WebSocketMessageBrokerConfigurationSupport;true;webSocketMessageBrokerStats;(AbstractBrokerMessageHandler,WebSocketHandler,TaskExecutor,TaskExecutor,TaskScheduler);;Argument[0];ReturnValue;taint",
        "org.springframework.web.socket.config.annotation;WebSocketMessageBrokerConfigurationSupport;true;webSocketMessageBrokerStats;(AbstractBrokerMessageHandler,WebSocketHandler,TaskExecutor,TaskExecutor,TaskScheduler);;Argument[1];ReturnValue;taint",
        "org.springframework.web.socket.config.annotation;WebSocketMessageBrokerConfigurationSupport;true;webSocketMessageBrokerStats;(AbstractBrokerMessageHandler,WebSocketHandler,TaskExecutor,TaskExecutor,TaskScheduler);;Argument[2];ReturnValue;taint",
        "org.springframework.web.socket.config.annotation;WebSocketMessageBrokerConfigurationSupport;true;webSocketMessageBrokerStats;(AbstractBrokerMessageHandler,WebSocketHandler,TaskExecutor,TaskExecutor,TaskScheduler);;Argument[3];ReturnValue;taint",
        "org.springframework.web.socket.config.annotation;WebSocketMessageBrokerConfigurationSupport;true;webSocketMessageBrokerStats;(AbstractBrokerMessageHandler,WebSocketHandler,TaskExecutor,TaskExecutor,TaskScheduler);;Argument[4];ReturnValue;taint",
        "org.springframework.web.socket.config.annotation;WebSocketTransportRegistration;true;addDecoratorFactory;(WebSocketHandlerDecoratorFactory);;Argument[-1];ReturnValue;value",
        "org.springframework.web.socket.config.annotation;WebSocketTransportRegistration;true;addDecoratorFactory;(WebSocketHandlerDecoratorFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.config.annotation;WebSocketTransportRegistration;true;addDecoratorFactory;(WebSocketHandlerDecoratorFactory);;Argument[0];ReturnValue;taint",
        "org.springframework.web.socket.config.annotation;WebSocketTransportRegistration;true;setDecoratorFactories;(WebSocketHandlerDecoratorFactory[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.socket.config.annotation;WebSocketTransportRegistration;true;setDecoratorFactories;(WebSocketHandlerDecoratorFactory[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.config.annotation;WebSocketTransportRegistration;true;setDecoratorFactories;(WebSocketHandlerDecoratorFactory[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.web.socket.config.annotation;WebSocketTransportRegistration;true;setMessageSizeLimit;(int);;Argument[-1];ReturnValue;value",
        "org.springframework.web.socket.config.annotation;WebSocketTransportRegistration;true;setSendBufferSizeLimit;(int);;Argument[-1];ReturnValue;value",
        "org.springframework.web.socket.config.annotation;WebSocketTransportRegistration;true;setSendTimeLimit;(int);;Argument[-1];ReturnValue;value",
        "org.springframework.web.socket.config.annotation;WebSocketTransportRegistration;true;setTimeToFirstMessage;(int);;Argument[-1];ReturnValue;value",
        "org.springframework.web.socket.config;WebSocketMessageBrokerStats;true;setInboundChannelExecutor;(TaskExecutor);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.config;WebSocketMessageBrokerStats;true;setOutboundChannelExecutor;(TaskExecutor);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.config;WebSocketMessageBrokerStats;true;setSockJsTaskScheduler;(TaskScheduler);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.config;WebSocketMessageBrokerStats;true;setStompBrokerRelay;(StompBrokerRelayMessageHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.config;WebSocketMessageBrokerStats;true;setSubProtocolWebSocketHandler;(SubProtocolWebSocketHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.handler;BeanCreatingHandlerProvider;true;getHandler;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.handler;ConcurrentWebSocketSessionDecorator;true;ConcurrentWebSocketSessionDecorator;(WebSocketSession,int,int);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.handler;ConcurrentWebSocketSessionDecorator;true;ConcurrentWebSocketSessionDecorator;(WebSocketSession,int,int,OverflowStrategy);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.handler;ConcurrentWebSocketSessionDecorator;true;setMessageCallback;(Consumer);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.handler;ConcurrentWebSocketSessionDecorator;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.handler;ExceptionWebSocketHandlerDecorator;true;ExceptionWebSocketHandlerDecorator;(WebSocketHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.handler;LoggingWebSocketHandlerDecorator;true;LoggingWebSocketHandlerDecorator;(WebSocketHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.handler;SessionLimitExceededException;true;SessionLimitExceededException;(String,CloseStatus);;Argument[1];Argument[-1];taint",
        "org.springframework.web.socket.handler;SessionLimitExceededException;true;getStatus;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.handler;WebSocketHandlerDecorator;true;WebSocketHandlerDecorator;(WebSocketHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.handler;WebSocketHandlerDecorator;true;getDelegate;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.handler;WebSocketHandlerDecorator;true;getLastHandler;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.handler;WebSocketHandlerDecorator;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.handler;WebSocketHandlerDecorator;true;unwrap;(WebSocketHandler);;Argument[0];ReturnValue;taint",
        "org.springframework.web.socket.handler;WebSocketSessionDecorator;true;WebSocketSessionDecorator;(WebSocketSession);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.handler;WebSocketSessionDecorator;true;getDelegate;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.handler;WebSocketSessionDecorator;true;getLastSession;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.handler;WebSocketSessionDecorator;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.handler;WebSocketSessionDecorator;true;unwrap;(WebSocketSession);;Argument[0];ReturnValue;taint",
        "org.springframework.web.socket.messaging;AbstractSubProtocolEvent;true;getMessage;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.messaging;AbstractSubProtocolEvent;true;getUser;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.messaging;AbstractSubProtocolEvent;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.messaging;DefaultSimpUserRegistry;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.messaging;SessionConnectEvent;true;SessionConnectEvent;(Object,Message);;Argument[1];Argument[-1];taint",
        "org.springframework.web.socket.messaging;SessionConnectEvent;true;SessionConnectEvent;(Object,Message,Principal);;Argument[1];Argument[-1];taint",
        "org.springframework.web.socket.messaging;SessionConnectEvent;true;SessionConnectEvent;(Object,Message,Principal);;Argument[2];Argument[-1];taint",
        "org.springframework.web.socket.messaging;SessionConnectedEvent;true;SessionConnectedEvent;(Object,Message);;Argument[1];Argument[-1];taint",
        "org.springframework.web.socket.messaging;SessionConnectedEvent;true;SessionConnectedEvent;(Object,Message,Principal);;Argument[1];Argument[-1];taint",
        "org.springframework.web.socket.messaging;SessionConnectedEvent;true;SessionConnectedEvent;(Object,Message,Principal);;Argument[2];Argument[-1];taint",
        "org.springframework.web.socket.messaging;SessionDisconnectEvent;true;SessionDisconnectEvent;(Object,Message,String,CloseStatus);;Argument[1];Argument[-1];taint",
        "org.springframework.web.socket.messaging;SessionDisconnectEvent;true;SessionDisconnectEvent;(Object,Message,String,CloseStatus);;Argument[2];Argument[-1];taint",
        "org.springframework.web.socket.messaging;SessionDisconnectEvent;true;SessionDisconnectEvent;(Object,Message,String,CloseStatus);;Argument[3];Argument[-1];taint",
        "org.springframework.web.socket.messaging;SessionDisconnectEvent;true;SessionDisconnectEvent;(Object,Message,String,CloseStatus,Principal);;Argument[1];Argument[-1];taint",
        "org.springframework.web.socket.messaging;SessionDisconnectEvent;true;SessionDisconnectEvent;(Object,Message,String,CloseStatus,Principal);;Argument[2];Argument[-1];taint",
        "org.springframework.web.socket.messaging;SessionDisconnectEvent;true;SessionDisconnectEvent;(Object,Message,String,CloseStatus,Principal);;Argument[3];Argument[-1];taint",
        "org.springframework.web.socket.messaging;SessionDisconnectEvent;true;SessionDisconnectEvent;(Object,Message,String,CloseStatus,Principal);;Argument[4];Argument[-1];taint",
        "org.springframework.web.socket.messaging;SessionDisconnectEvent;true;getCloseStatus;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.messaging;SessionDisconnectEvent;true;getSessionId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.messaging;SessionDisconnectEvent;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.messaging;SessionSubscribeEvent;true;SessionSubscribeEvent;(Object,Message);;Argument[1];Argument[-1];taint",
        "org.springframework.web.socket.messaging;SessionSubscribeEvent;true;SessionSubscribeEvent;(Object,Message,Principal);;Argument[1];Argument[-1];taint",
        "org.springframework.web.socket.messaging;SessionSubscribeEvent;true;SessionSubscribeEvent;(Object,Message,Principal);;Argument[2];Argument[-1];taint",
        "org.springframework.web.socket.messaging;SessionUnsubscribeEvent;true;SessionUnsubscribeEvent;(Object,Message);;Argument[1];Argument[-1];taint",
        "org.springframework.web.socket.messaging;SessionUnsubscribeEvent;true;SessionUnsubscribeEvent;(Object,Message,Principal);;Argument[1];Argument[-1];taint",
        "org.springframework.web.socket.messaging;SessionUnsubscribeEvent;true;SessionUnsubscribeEvent;(Object,Message,Principal);;Argument[2];Argument[-1];taint",
        "org.springframework.web.socket.messaging;StompSubProtocolHandler;true;getErrorHandler;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.messaging;StompSubProtocolHandler;true;getHeaderInitializer;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.messaging;StompSubProtocolHandler;true;getStats;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.messaging;StompSubProtocolHandler;true;setDecoder;(StompDecoder);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.messaging;StompSubProtocolHandler;true;setEncoder;(StompEncoder);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.messaging;StompSubProtocolHandler;true;setErrorHandler;(StompSubProtocolErrorHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.messaging;StompSubProtocolHandler;true;setHeaderInitializer;(MessageHeaderInitializer);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.messaging;SubProtocolHandler;true;afterSessionEnded;(WebSocketSession,CloseStatus,MessageChannel);;Argument[1];Argument[-1];taint",
        "org.springframework.web.socket.messaging;SubProtocolHandler;true;handleMessageToClient;(WebSocketSession,Message);;Argument[1];Argument[-1];taint",
        "org.springframework.web.socket.messaging;SubProtocolWebSocketHandler;true;SubProtocolWebSocketHandler;(MessageChannel,SubscribableChannel);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.messaging;SubProtocolWebSocketHandler;true;SubProtocolWebSocketHandler;(MessageChannel,SubscribableChannel);;Argument[1];Argument[-1];taint",
        "org.springframework.web.socket.messaging;SubProtocolWebSocketHandler;true;addProtocolHandler;(SubProtocolHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.messaging;SubProtocolWebSocketHandler;true;getDefaultProtocolHandler;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.messaging;SubProtocolWebSocketHandler;true;getProtocolHandlerMap;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.messaging;SubProtocolWebSocketHandler;true;getProtocolHandlers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.messaging;SubProtocolWebSocketHandler;true;getStats;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.messaging;SubProtocolWebSocketHandler;true;setDefaultProtocolHandler;(SubProtocolHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.messaging;SubProtocolWebSocketHandler;true;setProtocolHandlers;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.messaging;SubProtocolWebSocketHandler;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.messaging;WebSocketAnnotationMethodMessageHandler;true;WebSocketAnnotationMethodMessageHandler;(SubscribableChannel,MessageChannel,SimpMessageSendingOperations);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.messaging;WebSocketAnnotationMethodMessageHandler;true;WebSocketAnnotationMethodMessageHandler;(SubscribableChannel,MessageChannel,SimpMessageSendingOperations);;Argument[1];Argument[-1];taint",
        "org.springframework.web.socket.messaging;WebSocketAnnotationMethodMessageHandler;true;WebSocketAnnotationMethodMessageHandler;(SubscribableChannel,MessageChannel,SimpMessageSendingOperations);;Argument[2];Argument[-1];taint",
        "org.springframework.web.socket.messaging;WebSocketStompClient;true;WebSocketStompClient;(WebSocketClient);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.messaging;WebSocketStompClient;true;connect;(String,StompSessionHandler,Object[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.messaging;WebSocketStompClient;true;connect;(String,StompSessionHandler,Object[]);;Argument[2];Argument[-1];taint",
        "org.springframework.web.socket.messaging;WebSocketStompClient;true;connect;(String,WebSocketHttpHeaders,StompHeaders,StompSessionHandler,Object[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.messaging;WebSocketStompClient;true;connect;(String,WebSocketHttpHeaders,StompHeaders,StompSessionHandler,Object[]);;Argument[4];Argument[-1];taint",
        "org.springframework.web.socket.messaging;WebSocketStompClient;true;connect;(String,WebSocketHttpHeaders,StompSessionHandler,Object[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.messaging;WebSocketStompClient;true;connect;(String,WebSocketHttpHeaders,StompSessionHandler,Object[]);;Argument[3];Argument[-1];taint",
        "org.springframework.web.socket.messaging;WebSocketStompClient;true;connect;(URI,WebSocketHttpHeaders,StompHeaders,StompSessionHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.messaging;WebSocketStompClient;true;getWebSocketClient;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.server.jetty;JettyRequestUpgradeStrategy;true;JettyRequestUpgradeStrategy;(WebSocketPolicy);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.server.jetty;JettyRequestUpgradeStrategy;true;JettyRequestUpgradeStrategy;(WebSocketServerFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.server.standard;ServerEndpointExporter;true;setAnnotatedEndpointClasses;(Class[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.server.standard;ServerEndpointExporter;true;setServerContainer;(ServerContainer);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.server.standard;ServerEndpointRegistration;true;ServerEndpointRegistration;(String,Class);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.server.standard;ServerEndpointRegistration;true;ServerEndpointRegistration;(String,Endpoint);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.server.standard;ServerEndpointRegistration;true;ServerEndpointRegistration;(String,Endpoint);;Argument[1];Argument[-1];taint",
        "org.springframework.web.socket.server.standard;ServerEndpointRegistration;true;getEndpoint;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.server.standard;ServerEndpointRegistration;true;setDecoders;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.server.standard;ServerEndpointRegistration;true;setEncoders;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.server.standard;ServerEndpointRegistration;true;setExtensions;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.server.standard;ServerEndpointRegistration;true;setSubprotocols;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.server.standard;ServerEndpointRegistration;true;setUserProperties;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.server.standard;ServerEndpointRegistration;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.server.support;AbstractHandshakeHandler;true;getRequestUpgradeStrategy;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.server.support;AbstractHandshakeHandler;true;getSupportedProtocols;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.server.support;AbstractHandshakeHandler;true;setSupportedProtocols;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.server.support;DefaultHandshakeHandler;true;DefaultHandshakeHandler;(RequestUpgradeStrategy);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.server.support;HandshakeInterceptorChain;true;HandshakeInterceptorChain;(List,WebSocketHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.server.support;HandshakeInterceptorChain;true;HandshakeInterceptorChain;(List,WebSocketHandler);;Argument[1];Argument[-1];taint",
        "org.springframework.web.socket.server.support;HttpSessionHandshakeInterceptor;true;HttpSessionHandshakeInterceptor;(Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.server.support;HttpSessionHandshakeInterceptor;true;getAttributeNames;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.server.support;OriginHandshakeInterceptor;true;getAllowedOrigins;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.server.support;OriginHandshakeInterceptor;true;setAllowedOriginPatterns;(Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.server.support;WebSocketHttpRequestHandler;true;WebSocketHttpRequestHandler;(WebSocketHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.server.support;WebSocketHttpRequestHandler;true;WebSocketHttpRequestHandler;(WebSocketHandler,HandshakeHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.server.support;WebSocketHttpRequestHandler;true;WebSocketHttpRequestHandler;(WebSocketHandler,HandshakeHandler);;Argument[1];Argument[-1];taint",
        "org.springframework.web.socket.server.support;WebSocketHttpRequestHandler;true;getHandshakeHandler;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.server.support;WebSocketHttpRequestHandler;true;getHandshakeInterceptors;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.server.support;WebSocketHttpRequestHandler;true;getWebSocketHandler;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.server.support;WebSocketHttpRequestHandler;true;setHandshakeInterceptors;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.server;RequestUpgradeStrategy;true;getSupportedExtensions;(ServerHttpRequest);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.sockjs.client;AbstractClientSockJsSession;true;afterTransportClosed;(CloseStatus);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.sockjs.client;AbstractClientSockJsSession;true;getMessageCodec;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.sockjs.client;AbstractClientSockJsSession;true;getWebSocketHandler;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.sockjs.client;AbstractClientSockJsSession;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.sockjs.client;JettyXhrTransport;true;JettyXhrTransport;(HttpClient);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.sockjs.client;JettyXhrTransport;true;getHttpClient;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.sockjs.client;RestTemplateXhrTransport;true;RestTemplateXhrTransport;(RestOperations);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.sockjs.client;RestTemplateXhrTransport;true;getRestTemplate;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.sockjs.client;RestTemplateXhrTransport;true;getTaskExecutor;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.sockjs.client;RestTemplateXhrTransport;true;setTaskExecutor;(TaskExecutor);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.sockjs.client;SockJsClient;true;SockJsClient;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.sockjs.client;SockJsClient;true;getHttpHeaderNames;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.sockjs.client;SockJsClient;true;getInfoReceiver;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.sockjs.client;SockJsClient;true;getMessageCodec;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.sockjs.client;SockJsClient;true;setConnectTimeoutScheduler;(TaskScheduler);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.sockjs.client;SockJsClient;true;setHttpHeaderNames;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.sockjs.client;SockJsClient;true;setInfoReceiver;(InfoReceiver);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.sockjs.client;SockJsClient;true;setMessageCodec;(SockJsMessageCodec);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.sockjs.client;SockJsUrlInfo;true;SockJsUrlInfo;(URI);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.sockjs.client;SockJsUrlInfo;true;getInfoUrl;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.sockjs.client;SockJsUrlInfo;true;getServerId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.sockjs.client;SockJsUrlInfo;true;getSessionId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.sockjs.client;SockJsUrlInfo;true;getSockJsUrl;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.sockjs.client;SockJsUrlInfo;true;getTransportUrl;(TransportType);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.sockjs.client;SockJsUrlInfo;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.sockjs.client;TransportRequest;true;addTimeoutTask;(Runnable);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.sockjs.client;TransportRequest;true;getHandshakeHeaders;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.sockjs.client;TransportRequest;true;getHttpRequestHeaders;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.sockjs.client;TransportRequest;true;getMessageCodec;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.sockjs.client;TransportRequest;true;getSockJsUrlInfo;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.sockjs.client;TransportRequest;true;getTransportUrl;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.sockjs.client;TransportRequest;true;getUser;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.sockjs.client;UndertowXhrTransport;true;UndertowXhrTransport;(OptionMap);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.sockjs.client;UndertowXhrTransport;true;getHttpClient;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.sockjs.client;UndertowXhrTransport;true;getWorker;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.sockjs.client;WebSocketClientSockJsSession;true;WebSocketClientSockJsSession;(TransportRequest,WebSocketHandler,SettableListenableFuture);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.sockjs.client;WebSocketClientSockJsSession;true;WebSocketClientSockJsSession;(TransportRequest,WebSocketHandler,SettableListenableFuture);;Argument[1];Argument[-1];taint",
        "org.springframework.web.socket.sockjs.client;WebSocketClientSockJsSession;true;WebSocketClientSockJsSession;(TransportRequest,WebSocketHandler,SettableListenableFuture);;Argument[2];Argument[-1];taint",
        "org.springframework.web.socket.sockjs.client;WebSocketClientSockJsSession;true;initializeDelegateSession;(WebSocketSession);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.sockjs.client;WebSocketTransport;true;WebSocketTransport;(WebSocketClient);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.sockjs.client;WebSocketTransport;true;getWebSocketClient;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.sockjs.client;WebSocketTransport;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.sockjs.client;XhrClientSockJsSession;true;XhrClientSockJsSession;(TransportRequest,WebSocketHandler,XhrTransport,SettableListenableFuture);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.sockjs.client;XhrClientSockJsSession;true;XhrClientSockJsSession;(TransportRequest,WebSocketHandler,XhrTransport,SettableListenableFuture);;Argument[1];Argument[-1];taint",
        "org.springframework.web.socket.sockjs.client;XhrClientSockJsSession;true;XhrClientSockJsSession;(TransportRequest,WebSocketHandler,XhrTransport,SettableListenableFuture);;Argument[2];Argument[-1];taint",
        "org.springframework.web.socket.sockjs.client;XhrClientSockJsSession;true;XhrClientSockJsSession;(TransportRequest,WebSocketHandler,XhrTransport,SettableListenableFuture);;Argument[3];Argument[-1];taint",
        "org.springframework.web.socket.sockjs.client;XhrClientSockJsSession;true;getHeaders;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.sockjs.frame;DefaultSockJsFrameFormat;true;DefaultSockJsFrameFormat;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.sockjs.frame;Jackson2SockJsMessageCodec;true;Jackson2SockJsMessageCodec;(ObjectMapper);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.sockjs.frame;SockJsFrame;true;SockJsFrame;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.sockjs.frame;SockJsFrame;true;closeFrame;(int,String);;Argument[1];ReturnValue;taint",
        "org.springframework.web.socket.sockjs.frame;SockJsFrame;true;getContent;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.sockjs.frame;SockJsFrame;true;getContentBytes;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.sockjs.frame;SockJsFrame;true;getFrameData;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.sockjs.frame;SockJsFrame;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.sockjs.frame;SockJsFrameFormat;true;format;(SockJsFrame);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.sockjs.frame;SockJsMessageCodec;true;decode;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.socket.sockjs.frame;SockJsMessageCodec;true;decodeInputStream;(InputStream);;Argument[0];ReturnValue;taint",
        "org.springframework.web.socket.sockjs.support;AbstractSockJsService;true;AbstractSockJsService;(TaskScheduler);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.sockjs.support;AbstractSockJsService;true;getAllowedOrigins;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.sockjs.support;AbstractSockJsService;true;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.sockjs.support;AbstractSockJsService;true;getSockJsClientLibraryUrl;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.sockjs.support;AbstractSockJsService;true;getTaskScheduler;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.sockjs.support;AbstractSockJsService;true;setAllowedOriginPatterns;(Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.sockjs.support;AbstractSockJsService;true;setName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.sockjs.support;AbstractSockJsService;true;setSockJsClientLibraryUrl;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.sockjs.support;SockJsHttpRequestHandler;true;SockJsHttpRequestHandler;(SockJsService,WebSocketHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.sockjs.support;SockJsHttpRequestHandler;true;SockJsHttpRequestHandler;(SockJsService,WebSocketHandler);;Argument[1];Argument[-1];taint",
        "org.springframework.web.socket.sockjs.support;SockJsHttpRequestHandler;true;getSockJsService;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.sockjs.support;SockJsHttpRequestHandler;true;getWebSocketHandler;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.sockjs.transport.handler;AbstractTransportHandler;true;getServiceConfig;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.sockjs.transport.handler;DefaultSockJsService;true;DefaultSockJsService;(TaskScheduler);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.sockjs.transport.handler;DefaultSockJsService;true;DefaultSockJsService;(TaskScheduler,Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.sockjs.transport.handler;DefaultSockJsService;true;DefaultSockJsService;(TaskScheduler,Collection);;Argument[1];Argument[-1];taint",
        "org.springframework.web.socket.sockjs.transport.handler;DefaultSockJsService;true;DefaultSockJsService;(TaskScheduler,TransportHandler[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.sockjs.transport.handler;DefaultSockJsService;true;DefaultSockJsService;(TaskScheduler,TransportHandler[]);;Argument[1];Argument[-1];taint",
        "org.springframework.web.socket.sockjs.transport.handler;SockJsWebSocketHandler;true;SockJsWebSocketHandler;(SockJsServiceConfig,WebSocketHandler,WebSocketServerSockJsSession);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.sockjs.transport.handler;SockJsWebSocketHandler;true;SockJsWebSocketHandler;(SockJsServiceConfig,WebSocketHandler,WebSocketServerSockJsSession);;Argument[2];Argument[-1];taint",
        "org.springframework.web.socket.sockjs.transport.handler;WebSocketTransportHandler;true;WebSocketTransportHandler;(HandshakeHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.sockjs.transport.handler;WebSocketTransportHandler;true;getHandshakeHandler;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.sockjs.transport.session;AbstractHttpSockJsSession;true;AbstractHttpSockJsSession;(String,SockJsServiceConfig,WebSocketHandler,Map);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.sockjs.transport.session;AbstractHttpSockJsSession;true;AbstractHttpSockJsSession;(String,SockJsServiceConfig,WebSocketHandler,Map);;Argument[1];Argument[-1];taint",
        "org.springframework.web.socket.sockjs.transport.session;AbstractHttpSockJsSession;true;AbstractHttpSockJsSession;(String,SockJsServiceConfig,WebSocketHandler,Map);;Argument[2];Argument[-1];taint",
        "org.springframework.web.socket.sockjs.transport.session;AbstractHttpSockJsSession;true;AbstractHttpSockJsSession;(String,SockJsServiceConfig,WebSocketHandler,Map);;Argument[3];Argument[-1];taint",
        "org.springframework.web.socket.sockjs.transport.session;AbstractHttpSockJsSession;true;handleInitialRequest;(ServerHttpRequest,ServerHttpResponse,SockJsFrameFormat);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.sockjs.transport.session;AbstractHttpSockJsSession;true;handleInitialRequest;(ServerHttpRequest,ServerHttpResponse,SockJsFrameFormat);;Argument[1];Argument[-1];taint",
        "org.springframework.web.socket.sockjs.transport.session;AbstractHttpSockJsSession;true;handleInitialRequest;(ServerHttpRequest,ServerHttpResponse,SockJsFrameFormat);;Argument[2];Argument[-1];taint",
        "org.springframework.web.socket.sockjs.transport.session;AbstractHttpSockJsSession;true;handleSuccessiveRequest;(ServerHttpRequest,ServerHttpResponse,SockJsFrameFormat);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.sockjs.transport.session;AbstractHttpSockJsSession;true;handleSuccessiveRequest;(ServerHttpRequest,ServerHttpResponse,SockJsFrameFormat);;Argument[1];Argument[-1];taint",
        "org.springframework.web.socket.sockjs.transport.session;AbstractHttpSockJsSession;true;handleSuccessiveRequest;(ServerHttpRequest,ServerHttpResponse,SockJsFrameFormat);;Argument[2];Argument[-1];taint",
        "org.springframework.web.socket.sockjs.transport.session;AbstractHttpSockJsSession;true;setAcceptedProtocol;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.sockjs.transport.session;AbstractSockJsSession;true;AbstractSockJsSession;(String,SockJsServiceConfig,WebSocketHandler,Map);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.sockjs.transport.session;AbstractSockJsSession;true;AbstractSockJsSession;(String,SockJsServiceConfig,WebSocketHandler,Map);;Argument[1];Argument[-1];taint",
        "org.springframework.web.socket.sockjs.transport.session;AbstractSockJsSession;true;AbstractSockJsSession;(String,SockJsServiceConfig,WebSocketHandler,Map);;Argument[2];Argument[-1];taint",
        "org.springframework.web.socket.sockjs.transport.session;AbstractSockJsSession;true;AbstractSockJsSession;(String,SockJsServiceConfig,WebSocketHandler,Map);;Argument[3];Argument[-1];taint",
        "org.springframework.web.socket.sockjs.transport.session;AbstractSockJsSession;true;delegateConnectionClosed;(CloseStatus);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.sockjs.transport.session;AbstractSockJsSession;true;getSockJsServiceConfig;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.sockjs.transport.session;AbstractSockJsSession;true;sendMessageInternal;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.sockjs.transport.session;AbstractSockJsSession;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.sockjs.transport.session;AbstractSockJsSession;true;tryCloseWithSockJsTransportError;(Throwable,CloseStatus);;Argument[1];Argument[-1];taint",
        "org.springframework.web.socket.sockjs.transport.session;PollingSockJsSession;true;PollingSockJsSession;(String,SockJsServiceConfig,WebSocketHandler,Map);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.sockjs.transport.session;PollingSockJsSession;true;PollingSockJsSession;(String,SockJsServiceConfig,WebSocketHandler,Map);;Argument[1];Argument[-1];taint",
        "org.springframework.web.socket.sockjs.transport.session;PollingSockJsSession;true;PollingSockJsSession;(String,SockJsServiceConfig,WebSocketHandler,Map);;Argument[2];Argument[-1];taint",
        "org.springframework.web.socket.sockjs.transport.session;PollingSockJsSession;true;PollingSockJsSession;(String,SockJsServiceConfig,WebSocketHandler,Map);;Argument[3];Argument[-1];taint",
        "org.springframework.web.socket.sockjs.transport.session;StreamingSockJsSession;true;StreamingSockJsSession;(String,SockJsServiceConfig,WebSocketHandler,Map);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.sockjs.transport.session;StreamingSockJsSession;true;StreamingSockJsSession;(String,SockJsServiceConfig,WebSocketHandler,Map);;Argument[1];Argument[-1];taint",
        "org.springframework.web.socket.sockjs.transport.session;StreamingSockJsSession;true;StreamingSockJsSession;(String,SockJsServiceConfig,WebSocketHandler,Map);;Argument[2];Argument[-1];taint",
        "org.springframework.web.socket.sockjs.transport.session;StreamingSockJsSession;true;StreamingSockJsSession;(String,SockJsServiceConfig,WebSocketHandler,Map);;Argument[3];Argument[-1];taint",
        "org.springframework.web.socket.sockjs.transport.session;WebSocketServerSockJsSession;true;WebSocketServerSockJsSession;(String,SockJsServiceConfig,WebSocketHandler,Map);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.sockjs.transport.session;WebSocketServerSockJsSession;true;WebSocketServerSockJsSession;(String,SockJsServiceConfig,WebSocketHandler,Map);;Argument[1];Argument[-1];taint",
        "org.springframework.web.socket.sockjs.transport.session;WebSocketServerSockJsSession;true;WebSocketServerSockJsSession;(String,SockJsServiceConfig,WebSocketHandler,Map);;Argument[2];Argument[-1];taint",
        "org.springframework.web.socket.sockjs.transport.session;WebSocketServerSockJsSession;true;WebSocketServerSockJsSession;(String,SockJsServiceConfig,WebSocketHandler,Map);;Argument[3];Argument[-1];taint",
        "org.springframework.web.socket.sockjs.transport.session;WebSocketServerSockJsSession;true;initializeDelegateSession;(WebSocketSession);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.sockjs.transport;SockJsServiceConfig;true;getMessageCodec;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.sockjs.transport;SockJsSessionFactory;true;createSession;(String,WebSocketHandler,Map);;Argument[0];ReturnValue;taint",
        "org.springframework.web.socket.sockjs.transport;SockJsSessionFactory;true;createSession;(String,WebSocketHandler,Map);;Argument[1];ReturnValue;taint",
        "org.springframework.web.socket.sockjs.transport;SockJsSessionFactory;true;createSession;(String,WebSocketHandler,Map);;Element of Argument[2];ReturnValue;taint",
        "org.springframework.web.socket.sockjs.transport;TransportHandler;true;initialize;(SockJsServiceConfig);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.sockjs.transport;TransportHandlingSockJsService;true;TransportHandlingSockJsService;(TaskScheduler,Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.sockjs.transport;TransportHandlingSockJsService;true;TransportHandlingSockJsService;(TaskScheduler,Collection);;Argument[1];Argument[-1];taint",
        "org.springframework.web.socket.sockjs.transport;TransportHandlingSockJsService;true;TransportHandlingSockJsService;(TaskScheduler,TransportHandler[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.sockjs.transport;TransportHandlingSockJsService;true;TransportHandlingSockJsService;(TaskScheduler,TransportHandler[]);;Argument[1];Argument[-1];taint",
        "org.springframework.web.socket.sockjs.transport;TransportHandlingSockJsService;true;getHandshakeInterceptors;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.sockjs.transport;TransportHandlingSockJsService;true;getTransportHandlers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.sockjs.transport;TransportHandlingSockJsService;true;setHandshakeInterceptors;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.sockjs.transport;TransportHandlingSockJsService;true;setMessageCodec;(SockJsMessageCodec);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.sockjs;SockJsException;true;SockJsException;(String,String,Throwable);;Argument[1];Argument[-1];taint",
        "org.springframework.web.socket.sockjs;SockJsException;true;getSockJsSessionId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.sockjs;SockJsMessageDeliveryException;true;SockJsMessageDeliveryException;(String,List,String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.sockjs;SockJsMessageDeliveryException;true;SockJsMessageDeliveryException;(String,List,String);;Argument[1];Argument[-1];taint",
        "org.springframework.web.socket.sockjs;SockJsMessageDeliveryException;true;SockJsMessageDeliveryException;(String,List,Throwable);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket.sockjs;SockJsMessageDeliveryException;true;SockJsMessageDeliveryException;(String,List,Throwable);;Argument[1];Argument[-1];taint",
        "org.springframework.web.socket.sockjs;SockJsMessageDeliveryException;true;getUndeliveredMessages;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket.sockjs;SockJsService;true;handleRequest;(ServerHttpRequest,ServerHttpResponse,String,WebSocketHandler);;Argument[3];Argument[-1];taint",
        "org.springframework.web.socket.sockjs;SockJsTransportFailureException;true;SockJsTransportFailureException;(String,String,Throwable);;Argument[1];Argument[-1];taint",
        "org.springframework.web.socket;AbstractWebSocketMessage;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket;BinaryMessage;false;BinaryMessage;(ByteBuffer);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket;BinaryMessage;false;BinaryMessage;(ByteBuffer,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket;CloseStatus;false;CloseStatus;(int,String);;Argument[1];Argument[-1];taint",
        "org.springframework.web.socket;CloseStatus;false;getReason;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket;CloseStatus;false;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket;CloseStatus;false;withReason;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.socket;PingMessage;false;PingMessage;(ByteBuffer);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket;PongMessage;false;PongMessage;(ByteBuffer);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket;SubProtocolCapable;true;getSubProtocols;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket;TextMessage;false;TextMessage;(CharSequence);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket;TextMessage;false;TextMessage;(CharSequence,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket;TextMessage;false;TextMessage;(byte[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket;TextMessage;false;asBytes;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket;WebSocketExtension;true;WebSocketExtension;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket;WebSocketExtension;true;WebSocketExtension;(String,Map);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket;WebSocketExtension;true;WebSocketExtension;(String,Map);;Argument[1];Argument[-1];taint",
        "org.springframework.web.socket;WebSocketExtension;true;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket;WebSocketExtension;true;getParameters;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket;WebSocketExtension;true;parseExtensions;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.socket;WebSocketExtension;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket;WebSocketHandler;true;afterConnectionClosed;(WebSocketSession,CloseStatus);;Argument[1];Argument[-1];taint",
        "org.springframework.web.socket;WebSocketHandler;true;afterConnectionEstablished;(WebSocketSession);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket;WebSocketHttpHeaders;true;WebSocketHttpHeaders;(HttpHeaders);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket;WebSocketHttpHeaders;true;getSecWebSocketAccept;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket;WebSocketHttpHeaders;true;getSecWebSocketKey;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket;WebSocketHttpHeaders;true;getSecWebSocketProtocol;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket;WebSocketHttpHeaders;true;getSecWebSocketVersion;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket;WebSocketHttpHeaders;true;setSecWebSocketAccept;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket;WebSocketHttpHeaders;true;setSecWebSocketKey;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket;WebSocketHttpHeaders;true;setSecWebSocketProtocol;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket;WebSocketHttpHeaders;true;setSecWebSocketVersion;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket;WebSocketHttpHeaders;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket;WebSocketSession;true;close;(CloseStatus);;Argument[0];Argument[-1];taint",
        "org.springframework.web.socket;WebSocketSession;true;getAcceptedProtocol;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket;WebSocketSession;true;getAttributes;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket;WebSocketSession;true;getExtensions;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket;WebSocketSession;true;getHandshakeHeaders;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket;WebSocketSession;true;getId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket;WebSocketSession;true;getLocalAddress;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket;WebSocketSession;true;getPrincipal;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket;WebSocketSession;true;getRemoteAddress;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket;WebSocketSession;true;getUri;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.socket;WebSocketSession;true;sendMessage;(WebSocketMessage);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.http.client.reactive;MockClientHttpRequest;true;MockClientHttpRequest;(HttpMethod,String,Object[]);;Argument[1];Argument[-1];taint",
        "org.springframework.web.testfixture.http.client.reactive;MockClientHttpRequest;true;MockClientHttpRequest;(HttpMethod,String,Object[]);;Argument[2];Argument[-1];taint",
        "org.springframework.web.testfixture.http.client.reactive;MockClientHttpRequest;true;MockClientHttpRequest;(HttpMethod,URI);;Argument[1];Argument[-1];taint",
        "org.springframework.web.testfixture.http.client.reactive;MockClientHttpRequest;true;getBody;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.testfixture.http.client.reactive;MockClientHttpRequest;true;setWriteHandler;(Function);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.http.client.reactive;MockClientHttpResponse;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.testfixture.http.server.reactive.bootstrap;AbstractHttpServer;true;getHost;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.testfixture.http.server.reactive.bootstrap;AbstractHttpServer;true;getHttpHandler;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.testfixture.http.server.reactive.bootstrap;AbstractHttpServer;true;getHttpHandlerMap;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.testfixture.http.server.reactive.bootstrap;AbstractHttpServer;true;registerHttpHandler;(String,HttpHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.http.server.reactive.bootstrap;AbstractHttpServer;true;registerHttpHandler;(String,HttpHandler);;Argument[1];Argument[-1];taint",
        "org.springframework.web.testfixture.http.server.reactive.bootstrap;HttpServer;true;setHandler;(HttpHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.http.server.reactive.bootstrap;HttpServer;true;setHost;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.http.server.reactive.bootstrap;TomcatHttpServer;true;TomcatHttpServer;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.http.server.reactive.bootstrap;TomcatHttpServer;true;TomcatHttpServer;(String,Class);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.http.server.reactive.bootstrap;TomcatHttpServer;true;setContextPath;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.http.server.reactive.bootstrap;TomcatHttpServer;true;setServletMapping;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.http.server.reactive;MockServerHttpRequest$BodyBuilder;true;contentLength;(long);;Argument[-1];ReturnValue;value",
        "org.springframework.web.testfixture.http.server.reactive;MockServerHttpRequest$BodyBuilder;true;contentType;(MediaType);;Argument[-1];ReturnValue;value",
        "org.springframework.web.testfixture.http.server.reactive;MockServerHttpRequest;false;delete;(String,Object[]);;Argument[0];ReturnValue;taint",
        "org.springframework.web.testfixture.http.server.reactive;MockServerHttpRequest;false;delete;(String,Object[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.web.testfixture.http.server.reactive;MockServerHttpRequest;false;get;(String,Object[]);;Argument[0];ReturnValue;taint",
        "org.springframework.web.testfixture.http.server.reactive;MockServerHttpRequest;false;get;(String,Object[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.web.testfixture.http.server.reactive;MockServerHttpRequest;false;head;(String,Object[]);;Argument[0];ReturnValue;taint",
        "org.springframework.web.testfixture.http.server.reactive;MockServerHttpRequest;false;head;(String,Object[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.web.testfixture.http.server.reactive;MockServerHttpRequest;false;method;(HttpMethod,String,Object[]);;Argument[1];ReturnValue;taint",
        "org.springframework.web.testfixture.http.server.reactive;MockServerHttpRequest;false;method;(HttpMethod,String,Object[]);;ArrayElement of Argument[2];ReturnValue;taint",
        "org.springframework.web.testfixture.http.server.reactive;MockServerHttpRequest;false;method;(HttpMethod,URI);;Argument[1];ReturnValue;taint",
        "org.springframework.web.testfixture.http.server.reactive;MockServerHttpRequest;false;method;(String,String,Object[]);;Argument[0];ReturnValue;taint",
        "org.springframework.web.testfixture.http.server.reactive;MockServerHttpRequest;false;method;(String,String,Object[]);;Argument[1];ReturnValue;taint",
        "org.springframework.web.testfixture.http.server.reactive;MockServerHttpRequest;false;method;(String,String,Object[]);;ArrayElement of Argument[2];ReturnValue;taint",
        "org.springframework.web.testfixture.http.server.reactive;MockServerHttpRequest;false;options;(String,Object[]);;Argument[0];ReturnValue;taint",
        "org.springframework.web.testfixture.http.server.reactive;MockServerHttpRequest;false;options;(String,Object[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.web.testfixture.http.server.reactive;MockServerHttpRequest;false;patch;(String,Object[]);;Argument[0];ReturnValue;taint",
        "org.springframework.web.testfixture.http.server.reactive;MockServerHttpRequest;false;patch;(String,Object[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.web.testfixture.http.server.reactive;MockServerHttpRequest;false;post;(String,Object[]);;Argument[0];ReturnValue;taint",
        "org.springframework.web.testfixture.http.server.reactive;MockServerHttpRequest;false;post;(String,Object[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.web.testfixture.http.server.reactive;MockServerHttpRequest;false;put;(String,Object[]);;Argument[0];ReturnValue;taint",
        "org.springframework.web.testfixture.http.server.reactive;MockServerHttpRequest;false;put;(String,Object[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.web.testfixture.http.server.reactive;MockServerHttpResponse;true;MockServerHttpResponse;(DataBufferFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.http.server.reactive;MockServerHttpResponse;true;getBody;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.testfixture.http.server.reactive;MockServerHttpResponse;true;setWriteHandler;(Function);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.method;MvcAnnotationPredicates$MatrixVariablePredicate;true;name;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.web.testfixture.method;MvcAnnotationPredicates$MatrixVariablePredicate;true;name;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.method;MvcAnnotationPredicates$MatrixVariablePredicate;true;name;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.testfixture.method;MvcAnnotationPredicates$MatrixVariablePredicate;true;noName;();;Argument[-1];ReturnValue;value",
        "org.springframework.web.testfixture.method;MvcAnnotationPredicates$MatrixVariablePredicate;true;noPathVar;();;Argument[-1];ReturnValue;value",
        "org.springframework.web.testfixture.method;MvcAnnotationPredicates$MatrixVariablePredicate;true;pathVar;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.web.testfixture.method;MvcAnnotationPredicates$MatrixVariablePredicate;true;pathVar;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.method;MvcAnnotationPredicates$MatrixVariablePredicate;true;pathVar;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.testfixture.method;MvcAnnotationPredicates$ModelAttributeMethodPredicate;true;name;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.web.testfixture.method;MvcAnnotationPredicates$ModelAttributeMethodPredicate;true;name;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.method;MvcAnnotationPredicates$ModelAttributeMethodPredicate;true;name;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.testfixture.method;MvcAnnotationPredicates$ModelAttributeMethodPredicate;true;noName;();;Argument[-1];ReturnValue;value",
        "org.springframework.web.testfixture.method;MvcAnnotationPredicates$ModelAttributePredicate;true;name;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.web.testfixture.method;MvcAnnotationPredicates$ModelAttributePredicate;true;name;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.method;MvcAnnotationPredicates$ModelAttributePredicate;true;name;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.testfixture.method;MvcAnnotationPredicates$ModelAttributePredicate;true;noBinding;();;Argument[-1];ReturnValue;value",
        "org.springframework.web.testfixture.method;MvcAnnotationPredicates$ModelAttributePredicate;true;noName;();;Argument[-1];ReturnValue;value",
        "org.springframework.web.testfixture.method;MvcAnnotationPredicates$RequestAttributePredicate;true;name;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.web.testfixture.method;MvcAnnotationPredicates$RequestAttributePredicate;true;name;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.method;MvcAnnotationPredicates$RequestAttributePredicate;true;name;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.testfixture.method;MvcAnnotationPredicates$RequestAttributePredicate;true;noName;();;Argument[-1];ReturnValue;value",
        "org.springframework.web.testfixture.method;MvcAnnotationPredicates$RequestAttributePredicate;true;notRequired;();;Argument[-1];ReturnValue;value",
        "org.springframework.web.testfixture.method;MvcAnnotationPredicates$RequestBodyPredicate;true;notRequired;();;Argument[-1];ReturnValue;value",
        "org.springframework.web.testfixture.method;MvcAnnotationPredicates$RequestMappingPredicate;true;method;(RequestMethod[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.testfixture.method;MvcAnnotationPredicates$RequestMappingPredicate;true;method;(RequestMethod[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.method;MvcAnnotationPredicates$RequestMappingPredicate;true;method;(RequestMethod[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.web.testfixture.method;MvcAnnotationPredicates$RequestMappingPredicate;true;params;(String[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.testfixture.method;MvcAnnotationPredicates$RequestMappingPredicate;true;params;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.method;MvcAnnotationPredicates$RequestMappingPredicate;true;params;(String[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.web.testfixture.method;MvcAnnotationPredicates$RequestParamPredicate;true;name;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.web.testfixture.method;MvcAnnotationPredicates$RequestParamPredicate;true;name;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.method;MvcAnnotationPredicates$RequestParamPredicate;true;name;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.testfixture.method;MvcAnnotationPredicates$RequestParamPredicate;true;noName;();;Argument[-1];ReturnValue;value",
        "org.springframework.web.testfixture.method;MvcAnnotationPredicates$RequestParamPredicate;true;notRequired;();;Argument[-1];ReturnValue;value",
        "org.springframework.web.testfixture.method;MvcAnnotationPredicates$RequestParamPredicate;true;notRequired;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.web.testfixture.method;MvcAnnotationPredicates$RequestParamPredicate;true;notRequired;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.method;MvcAnnotationPredicates$RequestParamPredicate;true;notRequired;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.testfixture.method;MvcAnnotationPredicates$RequestPartPredicate;true;name;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.web.testfixture.method;MvcAnnotationPredicates$RequestPartPredicate;true;name;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.method;MvcAnnotationPredicates$RequestPartPredicate;true;name;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.testfixture.method;MvcAnnotationPredicates$RequestPartPredicate;true;noName;();;Argument[-1];ReturnValue;value",
        "org.springframework.web.testfixture.method;MvcAnnotationPredicates$RequestPartPredicate;true;notRequired;();;Argument[-1];ReturnValue;value",
        "org.springframework.web.testfixture.method;MvcAnnotationPredicates;true;deleteMapping;(String[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.web.testfixture.method;MvcAnnotationPredicates;true;getMapping;(String[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.web.testfixture.method;MvcAnnotationPredicates;true;headMapping;(String[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.web.testfixture.method;MvcAnnotationPredicates;true;optionsMapping;(String[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.web.testfixture.method;MvcAnnotationPredicates;true;postMapping;(String[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.web.testfixture.method;MvcAnnotationPredicates;true;putMapping;(String[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.web.testfixture.method;MvcAnnotationPredicates;true;requestMapping;(String[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.web.testfixture.method;ResolvableMethod$ArgResolver;true;annot;(Predicate[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.testfixture.method;ResolvableMethod$ArgResolver;true;annot;(Predicate[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.method;ResolvableMethod$ArgResolver;true;annot;(Predicate[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.web.testfixture.method;ResolvableMethod$ArgResolver;true;annotNotPresent;(Class[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.testfixture.method;ResolvableMethod$ArgResolver;true;annotPresent;(Class[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.testfixture.method;ResolvableMethod$Builder;true;annot;(Predicate[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.testfixture.method;ResolvableMethod$Builder;true;annot;(Predicate[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.method;ResolvableMethod$Builder;true;annot;(Predicate[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.web.testfixture.method;ResolvableMethod$Builder;true;annotNotPresent;(Class[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.testfixture.method;ResolvableMethod$Builder;true;annotPresent;(Class[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.testfixture.method;ResolvableMethod$Builder;true;argTypes;(Class[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.testfixture.method;ResolvableMethod$Builder;true;named;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.web.testfixture.method;ResolvableMethod$Builder;true;named;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.method;ResolvableMethod$Builder;true;named;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.testfixture.method;ResolvableMethod$Builder;true;resolveMethod;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.method;ResolvableMethod$Builder;true;resolveReturnType;(Class,Class[]);;Argument[1];Argument[-1];taint",
        "org.springframework.web.testfixture.method;ResolvableMethod$Builder;true;resolveReturnType;(Class,ResolvableType,ResolvableType[]);;Argument[1];Argument[-1];taint",
        "org.springframework.web.testfixture.method;ResolvableMethod$Builder;true;resolveReturnType;(Class,ResolvableType,ResolvableType[]);;Argument[2];Argument[-1];taint",
        "org.springframework.web.testfixture.method;ResolvableMethod$Builder;true;resolveReturnType;(ResolvableType);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.method;ResolvableMethod$Builder;true;returning;(Class,Class[]);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.testfixture.method;ResolvableMethod$Builder;true;returning;(Class,Class[]);;Argument[1];Argument[-1];taint",
        "org.springframework.web.testfixture.method;ResolvableMethod$Builder;true;returning;(Class,Class[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.web.testfixture.method;ResolvableMethod$Builder;true;returning;(Class,ResolvableType,ResolvableType[]);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.testfixture.method;ResolvableMethod$Builder;true;returning;(Class,ResolvableType,ResolvableType[]);;Argument[1];Argument[-1];taint",
        "org.springframework.web.testfixture.method;ResolvableMethod$Builder;true;returning;(Class,ResolvableType,ResolvableType[]);;Argument[1];ReturnValue;taint",
        "org.springframework.web.testfixture.method;ResolvableMethod$Builder;true;returning;(Class,ResolvableType,ResolvableType[]);;Argument[2];Argument[-1];taint",
        "org.springframework.web.testfixture.method;ResolvableMethod$Builder;true;returning;(Class,ResolvableType,ResolvableType[]);;ArrayElement of Argument[2];ReturnValue;taint",
        "org.springframework.web.testfixture.method;ResolvableMethod$Builder;true;returning;(ResolvableType);;Argument[-1];ReturnValue;value",
        "org.springframework.web.testfixture.method;ResolvableMethod$Builder;true;returning;(ResolvableType);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.method;ResolvableMethod$Builder;true;returning;(ResolvableType);;Argument[0];ReturnValue;taint",
        "org.springframework.web.testfixture.method;ResolvableMethod;true;annot;(Predicate[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.web.testfixture.method;ResolvableMethod;true;method;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.testfixture.server;MockServerWebExchange$Builder;true;Builder;(MockServerHttpRequest);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.server;MockServerWebExchange$Builder;true;session;(WebSession);;Argument[-1];ReturnValue;value",
        "org.springframework.web.testfixture.server;MockServerWebExchange$Builder;true;sessionManager;(WebSessionManager);;Argument[-1];ReturnValue;value",
        "org.springframework.web.testfixture.server;MockServerWebExchange$Builder;true;sessionManager;(WebSessionManager);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.server;MockServerWebExchange$Builder;true;sessionManager;(WebSessionManager);;Argument[0];ReturnValue;taint",
        "org.springframework.web.testfixture.server;MockServerWebExchange;false;builder;(MockServerHttpRequest);;Argument[0];ReturnValue;taint",
        "org.springframework.web.testfixture.server;MockServerWebExchange;false;from;(MockServerHttpRequest);;Argument[0];ReturnValue;taint",
        "org.springframework.web.testfixture.servlet;DelegatingServletInputStream;true;DelegatingServletInputStream;(InputStream);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;DelegatingServletInputStream;true;getSourceStream;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.testfixture.servlet;DelegatingServletOutputStream;true;DelegatingServletOutputStream;(OutputStream);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;DelegatingServletOutputStream;true;getTargetStream;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.testfixture.servlet;MockAsyncContext;true;MockAsyncContext;(ServletRequest,ServletResponse);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockAsyncContext;true;MockAsyncContext;(ServletRequest,ServletResponse);;Argument[1];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockAsyncContext;true;addDispatchHandler;(Runnable);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockAsyncContext;true;getDispatchedPath;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.testfixture.servlet;MockAsyncContext;true;getListeners;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.testfixture.servlet;MockBodyContent;true;MockBodyContent;(String,HttpServletResponse);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockBodyContent;true;MockBodyContent;(String,HttpServletResponse,Writer);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockBodyContent;true;MockBodyContent;(String,Writer);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockCookie;true;MockCookie;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockCookie;true;MockCookie;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockCookie;true;getExpires;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.testfixture.servlet;MockCookie;true;getSameSite;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.testfixture.servlet;MockCookie;true;parse;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.testfixture.servlet;MockCookie;true;setExpires;(ZonedDateTime);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockCookie;true;setSameSite;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockExpressionEvaluator;true;MockExpressionEvaluator;(PageContext);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockFilterChain;true;MockFilterChain;(Servlet);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockFilterChain;true;MockFilterChain;(Servlet,Filter[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockFilterChain;true;MockFilterChain;(Servlet,Filter[]);;Argument[1];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockFilterChain;true;getRequest;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.testfixture.servlet;MockFilterChain;true;getResponse;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.testfixture.servlet;MockFilterConfig;true;MockFilterConfig;(ServletContext);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockFilterConfig;true;MockFilterConfig;(ServletContext,String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockFilterConfig;true;MockFilterConfig;(ServletContext,String);;Argument[1];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockFilterConfig;true;MockFilterConfig;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockFilterConfig;true;addInitParameter;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockFilterConfig;true;addInitParameter;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockHttpServletMapping;true;MockHttpServletMapping;(String,String,String,MappingMatch);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockHttpServletMapping;true;MockHttpServletMapping;(String,String,String,MappingMatch);;Argument[1];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockHttpServletMapping;true;MockHttpServletMapping;(String,String,String,MappingMatch);;Argument[2];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockHttpServletMapping;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.testfixture.servlet;MockHttpServletRequest;true;MockHttpServletRequest;(ServletContext);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockHttpServletRequest;true;MockHttpServletRequest;(ServletContext,String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockHttpServletRequest;true;MockHttpServletRequest;(ServletContext,String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockHttpServletRequest;true;MockHttpServletRequest;(ServletContext,String,String);;Argument[2];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockHttpServletRequest;true;MockHttpServletRequest;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockHttpServletRequest;true;MockHttpServletRequest;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockHttpServletRequest;true;addHeader;(String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockHttpServletRequest;true;addParameter;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockHttpServletRequest;true;addParameter;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockHttpServletRequest;true;addParameter;(String,String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockHttpServletRequest;true;addParameter;(String,String[]);;Argument[1];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockHttpServletRequest;true;addPart;(Part);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockHttpServletRequest;true;addPreferredLocale;(Locale);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockHttpServletRequest;true;addUserRole;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockHttpServletRequest;true;getContentAsByteArray;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.testfixture.servlet;MockHttpServletRequest;true;getContentAsString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.testfixture.servlet;MockHttpServletRequest;true;setAsyncContext;(MockAsyncContext);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockHttpServletRequest;true;setAuthType;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockHttpServletRequest;true;setContent;(byte[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockHttpServletRequest;true;setContentType;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockHttpServletRequest;true;setContextPath;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockHttpServletRequest;true;setCookies;(Cookie[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockHttpServletRequest;true;setHttpServletMapping;(HttpServletMapping);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockHttpServletRequest;true;setLocalAddr;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockHttpServletRequest;true;setLocalName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockHttpServletRequest;true;setMethod;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockHttpServletRequest;true;setParameter;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockHttpServletRequest;true;setParameter;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockHttpServletRequest;true;setParameter;(String,String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockHttpServletRequest;true;setParameter;(String,String[]);;Argument[1];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockHttpServletRequest;true;setPathInfo;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockHttpServletRequest;true;setPreferredLocales;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockHttpServletRequest;true;setProtocol;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockHttpServletRequest;true;setQueryString;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockHttpServletRequest;true;setRemoteAddr;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockHttpServletRequest;true;setRemoteHost;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockHttpServletRequest;true;setRemoteUser;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockHttpServletRequest;true;setRequestURI;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockHttpServletRequest;true;setRequestedSessionId;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockHttpServletRequest;true;setScheme;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockHttpServletRequest;true;setServerName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockHttpServletRequest;true;setServletPath;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockHttpServletRequest;true;setSession;(HttpSession);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockHttpServletRequest;true;setUserPrincipal;(Principal);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockHttpServletResponse;true;addIncludedUrl;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockHttpServletResponse;true;getContentAsByteArray;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.testfixture.servlet;MockHttpServletResponse;true;getContentAsString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.testfixture.servlet;MockHttpServletResponse;true;getContentAsString;(Charset);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.testfixture.servlet;MockHttpServletResponse;true;getCookie;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.testfixture.servlet;MockHttpServletResponse;true;getCookies;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.testfixture.servlet;MockHttpServletResponse;true;getErrorMessage;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.testfixture.servlet;MockHttpServletResponse;true;getForwardedUrl;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.testfixture.servlet;MockHttpServletResponse;true;getHeaderValue;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.testfixture.servlet;MockHttpServletResponse;true;getHeaderValues;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.testfixture.servlet;MockHttpServletResponse;true;getIncludedUrl;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.testfixture.servlet;MockHttpServletResponse;true;getIncludedUrls;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.testfixture.servlet;MockHttpServletResponse;true;setDefaultCharacterEncoding;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockHttpServletResponse;true;setForwardedUrl;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockHttpServletResponse;true;setIncludedUrl;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockHttpSession;true;MockHttpSession;(ServletContext);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockHttpSession;true;MockHttpSession;(ServletContext,String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockHttpSession;true;MockHttpSession;(ServletContext,String);;Argument[1];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockHttpSession;true;changeSessionId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.testfixture.servlet;MockHttpSession;true;deserializeState;(Serializable);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockHttpSession;true;serializeState;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.testfixture.servlet;MockJspWriter;true;MockJspWriter;(HttpServletResponse);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockJspWriter;true;MockJspWriter;(HttpServletResponse,Writer);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockJspWriter;true;MockJspWriter;(HttpServletResponse,Writer);;Argument[1];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockJspWriter;true;MockJspWriter;(Writer);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockMultipartFile;true;MockMultipartFile;(String,InputStream);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockMultipartFile;true;MockMultipartFile;(String,InputStream);;Argument[1];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockMultipartFile;true;MockMultipartFile;(String,String,String,InputStream);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockMultipartFile;true;MockMultipartFile;(String,String,String,InputStream);;Argument[1];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockMultipartFile;true;MockMultipartFile;(String,String,String,InputStream);;Argument[2];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockMultipartFile;true;MockMultipartFile;(String,String,String,InputStream);;Argument[3];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockMultipartFile;true;MockMultipartFile;(String,String,String,byte[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockMultipartFile;true;MockMultipartFile;(String,String,String,byte[]);;Argument[1];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockMultipartFile;true;MockMultipartFile;(String,String,String,byte[]);;Argument[2];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockMultipartFile;true;MockMultipartFile;(String,String,String,byte[]);;Argument[3];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockMultipartFile;true;MockMultipartFile;(String,byte[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockMultipartFile;true;MockMultipartFile;(String,byte[]);;Argument[1];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockMultipartHttpServletRequest;true;MockMultipartHttpServletRequest;(ServletContext);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockMultipartHttpServletRequest;true;addFile;(MultipartFile);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockPageContext;true;MockPageContext;(ServletContext);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockPageContext;true;MockPageContext;(ServletContext,HttpServletRequest);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockPageContext;true;MockPageContext;(ServletContext,HttpServletRequest);;Argument[1];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockPageContext;true;MockPageContext;(ServletContext,HttpServletRequest,HttpServletResponse);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockPageContext;true;MockPageContext;(ServletContext,HttpServletRequest,HttpServletResponse);;Argument[1];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockPageContext;true;MockPageContext;(ServletContext,HttpServletRequest,HttpServletResponse);;Argument[2];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockPageContext;true;MockPageContext;(ServletContext,HttpServletRequest,HttpServletResponse,ServletConfig);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockPageContext;true;MockPageContext;(ServletContext,HttpServletRequest,HttpServletResponse,ServletConfig);;Argument[1];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockPageContext;true;MockPageContext;(ServletContext,HttpServletRequest,HttpServletResponse,ServletConfig);;Argument[2];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockPageContext;true;MockPageContext;(ServletContext,HttpServletRequest,HttpServletResponse,ServletConfig);;Argument[3];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockPageContext;true;getAttributeNames;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.testfixture.servlet;MockPageContext;true;getContentAsByteArray;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.testfixture.servlet;MockPageContext;true;getContentAsString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.testfixture.servlet;MockPart;true;MockPart;(String,String,byte[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockPart;true;MockPart;(String,String,byte[]);;Argument[1];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockPart;true;MockPart;(String,String,byte[]);;Argument[2];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockPart;true;MockPart;(String,byte[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockPart;true;MockPart;(String,byte[]);;Argument[1];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockPart;true;getHeaders;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.testfixture.servlet;MockRequestDispatcher;true;MockRequestDispatcher;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockServletConfig;true;MockServletConfig;(ServletContext);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockServletConfig;true;MockServletConfig;(ServletContext,String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockServletConfig;true;MockServletConfig;(ServletContext,String);;Argument[1];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockServletConfig;true;MockServletConfig;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockServletConfig;true;addInitParameter;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockServletConfig;true;addInitParameter;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockServletContext;true;MockServletContext;(ResourceLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockServletContext;true;MockServletContext;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockServletContext;true;MockServletContext;(String,ResourceLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockServletContext;true;MockServletContext;(String,ResourceLoader);;Argument[1];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockServletContext;true;addInitParameter;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockServletContext;true;addInitParameter;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockServletContext;true;addMimeType;(String,MediaType);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockServletContext;true;addMimeType;(String,MediaType);;Argument[1];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockServletContext;true;getDeclaredRoles;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.testfixture.servlet;MockServletContext;true;getDefaultServletName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.testfixture.servlet;MockServletContext;true;registerContext;(String,ServletContext);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockServletContext;true;registerContext;(String,ServletContext);;Argument[1];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockServletContext;true;registerNamedDispatcher;(String,RequestDispatcher);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockServletContext;true;registerNamedDispatcher;(String,RequestDispatcher);;Argument[1];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockServletContext;true;setContextPath;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockServletContext;true;setDefaultServletName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;MockServletContext;true;setServletContextName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;PassThroughFilterChain;true;PassThroughFilterChain;(Filter,FilterChain);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;PassThroughFilterChain;true;PassThroughFilterChain;(Filter,FilterChain);;Argument[1];Argument[-1];taint",
        "org.springframework.web.testfixture.servlet;PassThroughFilterChain;true;PassThroughFilterChain;(Servlet);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.xml;Pojo;true;Pojo;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.xml;Pojo;true;Pojo;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.web.testfixture.xml;Pojo;true;getBar;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.testfixture.xml;Pojo;true;getFoo;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.testfixture.xml;Pojo;true;setBar;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.xml;Pojo;true;setFoo;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.testfixture.xml;Pojo;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.util.pattern;PathPattern$PathMatchInfo;true;getMatrixVariables;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.util.pattern;PathPattern$PathMatchInfo;true;getUriVariables;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.util.pattern;PathPattern$PathMatchInfo;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.util.pattern;PathPattern$PathRemainingMatchInfo;true;getMatrixVariables;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.util.pattern;PathPattern$PathRemainingMatchInfo;true;getPathMatched;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.util.pattern;PathPattern$PathRemainingMatchInfo;true;getPathRemaining;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.util.pattern;PathPattern$PathRemainingMatchInfo;true;getUriVariables;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.util.pattern;PathPattern;true;combine;(PathPattern);;Argument[-1];ReturnValue;value",
        "org.springframework.web.util.pattern;PathPattern;true;combine;(PathPattern);;Argument[0];ReturnValue;taint",
        "org.springframework.web.util.pattern;PathPattern;true;extractPathWithinPattern;(PathContainer);;Argument[0];ReturnValue;taint",
        "org.springframework.web.util.pattern;PathPattern;true;getPatternString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.util.pattern;PathPattern;true;matchStartOfPath;(PathContainer);;Argument[0];ReturnValue;taint",
        "org.springframework.web.util.pattern;PathPattern;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.util.pattern;PathPatternParser;true;getPathOptions;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.util.pattern;PathPatternParser;true;parse;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.util.pattern;PathPatternParser;true;setPathOptions;(Options);;Argument[0];Argument[-1];taint",
        "org.springframework.web.util.pattern;PathPatternRouteMatcher;true;PathPatternRouteMatcher;(PathPatternParser);;Argument[0];Argument[-1];taint",
        "org.springframework.web.util.pattern;PatternParseException;true;getInserts;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.util.pattern;PatternParseException;true;toDetailedString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.util;AbstractUriTemplateHandler;true;getBaseUrl;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.util;AbstractUriTemplateHandler;true;getDefaultUriVariables;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.util;AbstractUriTemplateHandler;true;setBaseUrl;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.util;AbstractUriTemplateHandler;true;setDefaultUriVariables;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.web.util;ContentCachingRequestWrapper;true;getContentAsByteArray;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.util;ContentCachingResponseWrapper;true;getContentAsByteArray;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.util;ContentCachingResponseWrapper;true;getContentInputStream;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.util;CookieGenerator;true;getCookieDomain;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.util;CookieGenerator;true;getCookieName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.util;CookieGenerator;true;getCookiePath;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.util;CookieGenerator;true;setCookieDomain;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.util;CookieGenerator;true;setCookieName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.util;CookieGenerator;true;setCookiePath;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.util;DefaultUriBuilderFactory;true;DefaultUriBuilderFactory;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.util;DefaultUriBuilderFactory;true;DefaultUriBuilderFactory;(UriComponentsBuilder);;Argument[0];Argument[-1];taint",
        "org.springframework.web.util;DefaultUriBuilderFactory;true;getDefaultUriVariables;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.util;DefaultUriBuilderFactory;true;setDefaultUriVariables;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.web.util;HtmlUtils;true;htmlEscape;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.util;HtmlUtils;true;htmlEscapeDecimal;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.util;HtmlUtils;true;htmlEscapeHex;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.util;ServletContextPropertyUtils;true;resolvePlaceholders;(String,ServletContext);;Argument[0];ReturnValue;taint",
        "org.springframework.web.util;ServletContextPropertyUtils;true;resolvePlaceholders;(String,ServletContext);;Argument[1];ReturnValue;taint",
        "org.springframework.web.util;ServletContextPropertyUtils;true;resolvePlaceholders;(String,ServletContext,boolean);;Argument[0];ReturnValue;taint",
        "org.springframework.web.util;ServletRequestPathUtils;true;getCachedPathValue;(ServletRequest);;Argument[0];ReturnValue;taint",
        "org.springframework.web.util;UriBuilder;true;build;(Map);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.util;UriBuilder;true;build;(Map);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.web.util;UriBuilder;true;build;(Object[]);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.util;UriBuilder;true;build;(Object[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.web.util;UriBuilder;true;fragment;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.web.util;UriBuilder;true;fragment;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.util;UriBuilder;true;fragment;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.util;UriBuilder;true;host;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.web.util;UriBuilder;true;host;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.util;UriBuilder;true;host;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.util;UriBuilder;true;path;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.web.util;UriBuilder;true;path;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.util;UriBuilder;true;path;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.util;UriBuilder;true;pathSegment;(String[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.util;UriBuilder;true;pathSegment;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.util;UriBuilder;true;pathSegment;(String[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.web.util;UriBuilder;true;port;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.web.util;UriBuilder;true;port;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.util;UriBuilder;true;port;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.util;UriBuilder;true;port;(int);;Argument[-1];ReturnValue;value",
        "org.springframework.web.util;UriBuilder;true;query;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.web.util;UriBuilder;true;query;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.util;UriBuilder;true;query;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.util;UriBuilder;true;queryParam;(String,Collection);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.util;UriBuilder;true;queryParam;(String,Collection);;Argument[-1];ReturnValue;value",
        "org.springframework.web.util;UriBuilder;true;queryParam;(String,Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.web.util;UriBuilder;true;queryParam;(String,Collection);;Argument[0];ReturnValue;taint",
        "org.springframework.web.util;UriBuilder;true;queryParam;(String,Collection);;Argument[1];Argument[-1];taint",
        "org.springframework.web.util;UriBuilder;true;queryParam;(String,Collection);;Element of Argument[1];ReturnValue;taint",
        "org.springframework.web.util;UriBuilder;true;queryParam;(String,Object[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.util;UriBuilder;true;queryParam;(String,Object[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.util;UriBuilder;true;queryParam;(String,Object[]);;Argument[0];ReturnValue;taint",
        "org.springframework.web.util;UriBuilder;true;queryParam;(String,Object[]);;Argument[1];Argument[-1];taint",
        "org.springframework.web.util;UriBuilder;true;queryParam;(String,Object[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.web.util;UriBuilder;true;queryParamIfPresent;(String,Optional);;Argument[-1];ReturnValue;value",
        "org.springframework.web.util;UriBuilder;true;queryParamIfPresent;(String,Optional);;Argument[0];Argument[-1];taint",
        "org.springframework.web.util;UriBuilder;true;queryParamIfPresent;(String,Optional);;Argument[0];ReturnValue;taint",
        "org.springframework.web.util;UriBuilder;true;queryParamIfPresent;(String,Optional);;Argument[1];Argument[-1];taint",
        "org.springframework.web.util;UriBuilder;true;queryParamIfPresent;(String,Optional);;Argument[1];ReturnValue;taint",
        "org.springframework.web.util;UriBuilder;true;queryParams;(MultiValueMap);;Argument[-1];ReturnValue;value",
        "org.springframework.web.util;UriBuilder;true;queryParams;(MultiValueMap);;Argument[0];Argument[-1];taint",
        "org.springframework.web.util;UriBuilder;true;queryParams;(MultiValueMap);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.web.util;UriBuilder;true;replacePath;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.web.util;UriBuilder;true;replacePath;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.util;UriBuilder;true;replacePath;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.util;UriBuilder;true;replaceQuery;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.web.util;UriBuilder;true;replaceQuery;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.util;UriBuilder;true;replaceQuery;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.util;UriBuilder;true;replaceQueryParam;(String,Collection);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.util;UriBuilder;true;replaceQueryParam;(String,Collection);;Argument[-1];ReturnValue;value",
        "org.springframework.web.util;UriBuilder;true;replaceQueryParam;(String,Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.web.util;UriBuilder;true;replaceQueryParam;(String,Collection);;Argument[0];ReturnValue;taint",
        "org.springframework.web.util;UriBuilder;true;replaceQueryParam;(String,Collection);;Argument[1];Argument[-1];taint",
        "org.springframework.web.util;UriBuilder;true;replaceQueryParam;(String,Collection);;Element of Argument[1];ReturnValue;taint",
        "org.springframework.web.util;UriBuilder;true;replaceQueryParam;(String,Object[]);;Argument[-1];ReturnValue;value",
        "org.springframework.web.util;UriBuilder;true;replaceQueryParam;(String,Object[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web.util;UriBuilder;true;replaceQueryParam;(String,Object[]);;Argument[0];ReturnValue;taint",
        "org.springframework.web.util;UriBuilder;true;replaceQueryParam;(String,Object[]);;Argument[1];Argument[-1];taint",
        "org.springframework.web.util;UriBuilder;true;replaceQueryParam;(String,Object[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.web.util;UriBuilder;true;replaceQueryParams;(MultiValueMap);;Argument[-1];ReturnValue;value",
        "org.springframework.web.util;UriBuilder;true;replaceQueryParams;(MultiValueMap);;Argument[0];Argument[-1];taint",
        "org.springframework.web.util;UriBuilder;true;replaceQueryParams;(MultiValueMap);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.web.util;UriBuilder;true;scheme;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.web.util;UriBuilder;true;scheme;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.util;UriBuilder;true;scheme;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.util;UriBuilder;true;userInfo;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.web.util;UriBuilder;true;userInfo;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.util;UriBuilder;true;userInfo;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.util;UriBuilderFactory;true;uriString;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.util;UriComponents$UriTemplateVariables;true;getValue;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.util;UriComponents;true;encode;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.util;UriComponents;true;encode;(Charset);;Argument[-1];ReturnValue;value",
        "org.springframework.web.util;UriComponents;true;expand;(Map);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.util;UriComponents;true;expand;(Object[]);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.util;UriComponents;true;expand;(UriTemplateVariables);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.util;UriComponents;true;getFragment;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.util;UriComponents;true;getHost;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.util;UriComponents;true;getPath;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.util;UriComponents;true;getPathSegments;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.util;UriComponents;true;getQueryParams;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.util;UriComponents;true;getScheme;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.util;UriComponents;true;getSchemeSpecificPart;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.util;UriComponents;true;getUserInfo;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.util;UriComponents;true;normalize;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.util;UriComponents;true;normalize;();;Argument[-1];ReturnValue;value",
        "org.springframework.web.util;UriComponents;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.util;UriComponents;true;toUri;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.util;UriComponents;true;toUriString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.util;UriComponentsBuilder;true;build;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.util;UriComponentsBuilder;true;build;(boolean);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.util;UriComponentsBuilder;true;buildAndExpand;(Map);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.util;UriComponentsBuilder;true;buildAndExpand;(Map);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.web.util;UriComponentsBuilder;true;buildAndExpand;(Object[]);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.util;UriComponentsBuilder;true;buildAndExpand;(Object[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.web.util;UriComponentsBuilder;true;encode;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.util;UriComponentsBuilder;true;encode;(Charset);;Argument[-1];ReturnValue;value",
        "org.springframework.web.util;UriComponentsBuilder;true;fromPath;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.util;UriComponentsBuilder;true;fromUri;(URI);;Argument[0];ReturnValue;taint",
        "org.springframework.web.util;UriComponentsBuilder;true;fromUriString;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.util;UriComponentsBuilder;true;schemeSpecificPart;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.web.util;UriComponentsBuilder;true;schemeSpecificPart;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.util;UriComponentsBuilder;true;schemeSpecificPart;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.util;UriComponentsBuilder;true;toUriString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.util;UriComponentsBuilder;true;uri;(URI);;Argument[-1];ReturnValue;value",
        "org.springframework.web.util;UriComponentsBuilder;true;uri;(URI);;Argument[0];ReturnValue;taint",
        "org.springframework.web.util;UriComponentsBuilder;true;uriComponents;(UriComponents);;Argument[-1];ReturnValue;value",
        "org.springframework.web.util;UriComponentsBuilder;true;uriComponents;(UriComponents);;Argument[0];Argument[-1];taint",
        "org.springframework.web.util;UriComponentsBuilder;true;uriComponents;(UriComponents);;Argument[0];ReturnValue;taint",
        "org.springframework.web.util;UriComponentsBuilder;true;uriVariables;(Map);;Argument[-1];ReturnValue;value",
        "org.springframework.web.util;UriComponentsBuilder;true;uriVariables;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.web.util;UriComponentsBuilder;true;uriVariables;(Map);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.web.util;UriTemplate;true;UriTemplate;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.util;UriTemplate;true;expand;(Map);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.util;UriTemplate;true;expand;(Map);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.web.util;UriTemplate;true;expand;(Object[]);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.util;UriTemplate;true;expand;(Object[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.web.util;UriTemplate;true;getVariableNames;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.util;UriTemplate;true;match;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.util;UriTemplate;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web.util;UriTemplateHandler;true;expand;(String,Map);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.util;UriTemplateHandler;true;expand;(String,Map);;Argument[0];ReturnValue;taint",
        "org.springframework.web.util;UriTemplateHandler;true;expand;(String,Map);;Element of Argument[1];ReturnValue;taint",
        "org.springframework.web.util;UriTemplateHandler;true;expand;(String,Object[]);;Argument[-1];ReturnValue;taint",
        "org.springframework.web.util;UriTemplateHandler;true;expand;(String,Object[]);;Argument[0];ReturnValue;taint",
        "org.springframework.web.util;UriTemplateHandler;true;expand;(String,Object[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.web.util;UriUtils;true;decode;(String,Charset);;Argument[0];ReturnValue;taint",
        "org.springframework.web.util;UriUtils;true;decode;(String,String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.util;UriUtils;true;encode;(String,Charset);;Argument[0];ReturnValue;taint",
        "org.springframework.web.util;UriUtils;true;encode;(String,String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.util;UriUtils;true;encodeAuthority;(String,Charset);;Argument[0];ReturnValue;taint",
        "org.springframework.web.util;UriUtils;true;encodeAuthority;(String,String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.util;UriUtils;true;encodeFragment;(String,Charset);;Argument[0];ReturnValue;taint",
        "org.springframework.web.util;UriUtils;true;encodeFragment;(String,String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.util;UriUtils;true;encodeHost;(String,Charset);;Argument[0];ReturnValue;taint",
        "org.springframework.web.util;UriUtils;true;encodeHost;(String,String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.util;UriUtils;true;encodePath;(String,Charset);;Argument[0];ReturnValue;taint",
        "org.springframework.web.util;UriUtils;true;encodePath;(String,String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.util;UriUtils;true;encodePathSegment;(String,Charset);;Argument[0];ReturnValue;taint",
        "org.springframework.web.util;UriUtils;true;encodePathSegment;(String,String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.util;UriUtils;true;encodePort;(String,Charset);;Argument[0];ReturnValue;taint",
        "org.springframework.web.util;UriUtils;true;encodePort;(String,String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.util;UriUtils;true;encodeQuery;(String,Charset);;Argument[0];ReturnValue;taint",
        "org.springframework.web.util;UriUtils;true;encodeQuery;(String,String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.util;UriUtils;true;encodeQueryParam;(String,Charset);;Argument[0];ReturnValue;taint",
        "org.springframework.web.util;UriUtils;true;encodeQueryParam;(String,String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.util;UriUtils;true;encodeQueryParams;(MultiValueMap);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.web.util;UriUtils;true;encodeScheme;(String,Charset);;Argument[0];ReturnValue;taint",
        "org.springframework.web.util;UriUtils;true;encodeScheme;(String,String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.util;UriUtils;true;encodeUserInfo;(String,Charset);;Argument[0];ReturnValue;taint",
        "org.springframework.web.util;UriUtils;true;encodeUserInfo;(String,String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.util;UriUtils;true;extractFileExtension;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.util;UrlPathHelper;true;decodeMatrixVariables;(HttpServletRequest,MultiValueMap);;Element of Argument[1];ReturnValue;taint",
        "org.springframework.web.util;UrlPathHelper;true;decodePathVariables;(HttpServletRequest,Map);;Element of Argument[1];ReturnValue;taint",
        "org.springframework.web.util;UrlPathHelper;true;decodeRequestString;(HttpServletRequest,String);;Argument[1];ReturnValue;taint",
        "org.springframework.web.util;UrlPathHelper;true;getLookupPathForRequest;(HttpServletRequest);;Argument[0];ReturnValue;taint",
        "org.springframework.web.util;UrlPathHelper;true;getLookupPathForRequest;(HttpServletRequest,String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.util;UrlPathHelper;true;getLookupPathForRequest;(HttpServletRequest,String);;Argument[1];ReturnValue;taint",
        "org.springframework.web.util;UrlPathHelper;true;getPathWithinApplication;(HttpServletRequest);;Argument[0];ReturnValue;taint",
        "org.springframework.web.util;UrlPathHelper;true;getPathWithinServletMapping;(HttpServletRequest);;Argument[0];ReturnValue;taint",
        "org.springframework.web.util;UrlPathHelper;true;removeSemicolonContent;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.util;UrlPathHelper;true;resolveAndCacheLookupPath;(HttpServletRequest);;Argument[0];ReturnValue;taint",
        "org.springframework.web.util;UrlPathHelper;true;setDefaultEncoding;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web.util;WebUtils;true;findParameterValue;(Map,String);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.web.util;WebUtils;true;getNativeRequest;(ServletRequest,Class);;Argument[0];ReturnValue;taint",
        "org.springframework.web.util;WebUtils;true;getNativeResponse;(ServletResponse,Class);;Argument[0];ReturnValue;taint",
        "org.springframework.web.util;WebUtils;true;getRequiredSessionAttribute;(HttpServletRequest,String);;Argument[0];ReturnValue;taint",
        "org.springframework.web.util;WebUtils;true;getSessionMutex;(HttpSession);;Argument[0];ReturnValue;taint",
        "org.springframework.web.util;WebUtils;true;parseMatrixVariables;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.web;HttpMediaTypeException;true;getSupportedMediaTypes;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web;HttpMediaTypeNotAcceptableException;true;HttpMediaTypeNotAcceptableException;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.web;HttpMediaTypeNotSupportedException;true;HttpMediaTypeNotSupportedException;(MediaType,List);;Argument[0];Argument[-1];taint",
        "org.springframework.web;HttpMediaTypeNotSupportedException;true;HttpMediaTypeNotSupportedException;(MediaType,List);;Argument[1];Argument[-1];taint",
        "org.springframework.web;HttpMediaTypeNotSupportedException;true;HttpMediaTypeNotSupportedException;(MediaType,List,String);;Argument[0];Argument[-1];taint",
        "org.springframework.web;HttpMediaTypeNotSupportedException;true;HttpMediaTypeNotSupportedException;(MediaType,List,String);;Argument[1];Argument[-1];taint",
        "org.springframework.web;HttpMediaTypeNotSupportedException;true;getContentType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web;HttpRequestHandler;true;handleRequest;(HttpServletRequest,HttpServletResponse);;Argument[0];Argument[-1];taint",
        "org.springframework.web;HttpRequestMethodNotSupportedException;true;HttpRequestMethodNotSupportedException;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.web;HttpRequestMethodNotSupportedException;true;HttpRequestMethodNotSupportedException;(String,Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.web;HttpRequestMethodNotSupportedException;true;HttpRequestMethodNotSupportedException;(String,Collection);;Argument[1];Argument[-1];taint",
        "org.springframework.web;HttpRequestMethodNotSupportedException;true;HttpRequestMethodNotSupportedException;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.web;HttpRequestMethodNotSupportedException;true;HttpRequestMethodNotSupportedException;(String,String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.web;HttpRequestMethodNotSupportedException;true;HttpRequestMethodNotSupportedException;(String,String[]);;Argument[1];Argument[-1];taint",
        "org.springframework.web;HttpRequestMethodNotSupportedException;true;HttpRequestMethodNotSupportedException;(String,String[],String);;Argument[0];Argument[-1];taint",
        "org.springframework.web;HttpRequestMethodNotSupportedException;true;HttpRequestMethodNotSupportedException;(String,String[],String);;Argument[1];Argument[-1];taint",
        "org.springframework.web;HttpRequestMethodNotSupportedException;true;getMethod;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web;HttpRequestMethodNotSupportedException;true;getSupportedMethods;();;Argument[-1];ReturnValue;taint",
        "org.springframework.web;HttpSessionRequiredException;true;HttpSessionRequiredException;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.web;HttpSessionRequiredException;true;getExpectedAttribute;();;Argument[-1];ReturnValue;taint"
      ]
  }
}
