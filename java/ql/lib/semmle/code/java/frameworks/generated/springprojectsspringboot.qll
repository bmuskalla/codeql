/** Definitions of taint steps in the springprojectsspringboot framework */

import java
private import semmle.code.java.dataflow.ExternalFlow

private class SpringprojectsspringbootSinksCsv extends SinkModelCsv {
  override predicate row(string row) {
    row =
      [
        "org.springframework.boot.buildpack.platform.docker.transport;HttpTransport;true;delete;(URI);;Argument[0];open-url",
        "org.springframework.boot.buildpack.platform.docker.transport;HttpTransport;true;get;(URI);;Argument[0];open-url",
        "org.springframework.boot.buildpack.platform.docker.transport;HttpTransport;true;post;(URI);;Argument[0];open-url",
        "org.springframework.boot.buildpack.platform.docker.transport;HttpTransport;true;post;(URI,String);;Argument[0];open-url",
        "org.springframework.boot.buildpack.platform.docker.transport;HttpTransport;true;post;(URI,String,IOConsumer);;Argument[0];open-url",
        "org.springframework.boot.buildpack.platform.docker.transport;HttpTransport;true;put;(URI,String,IOConsumer);;Argument[0];open-url",
        "org.springframework.boot.devtools.restart.classloader;RestartClassLoader;true;RestartClassLoader;(ClassLoader,URL[]);;Argument[1];open-url",
        "org.springframework.boot.devtools.restart.classloader;RestartClassLoader;true;RestartClassLoader;(ClassLoader,URL[],ClassLoaderFileRepository);;Argument[1];open-url",
        "org.springframework.boot.devtools.restart.classloader;RestartClassLoader;true;RestartClassLoader;(ClassLoader,URL[],ClassLoaderFileRepository,Log);;Argument[1];open-url",
        "org.springframework.boot.loader.archive;JarFileArchive;true;JarFileArchive;(File);;Argument[0];create-file",
        "org.springframework.boot.loader.archive;JarFileArchive;true;JarFileArchive;(File,URL);;Argument[0];create-file",
        "org.springframework.boot.loader.data;RandomAccessDataFile;true;RandomAccessDataFile;(File);;Argument[0];create-file",
        "org.springframework.boot.loader.jar;JarFile;true;JarFile;(File);;Argument[0];create-file",
        "org.springframework.boot.loader.jarmode;JarMode;true;run;(String,String[]);;Argument[1];create-file",
        "org.springframework.boot.loader.jarmode;JarModeLauncher;false;main;(String[]);;Argument[0];create-file",
        "org.springframework.boot.loader.tools;BuildPropertiesWriter;false;writeBuildProperties;(ProjectDetails);;Argument[-1];create-file",
        "org.springframework.boot.loader.tools;JarWriter;true;JarWriter;(File);;Argument[0];create-file",
        "org.springframework.boot.loader.tools;JarWriter;true;JarWriter;(File,LaunchScript);;Argument[0];create-file",
        "org.springframework.boot.loader.tools;JarWriter;true;JarWriter;(File,LaunchScript,FileTime);;Argument[0];create-file",
        "org.springframework.boot.loader;LaunchedURLClassLoader;true;LaunchedURLClassLoader;(URL[],ClassLoader);;Argument[0];open-url",
        "org.springframework.boot.loader;LaunchedURLClassLoader;true;LaunchedURLClassLoader;(boolean,Archive,URL[],ClassLoader);;Argument[2];open-url",
        "org.springframework.boot.loader;LaunchedURLClassLoader;true;LaunchedURLClassLoader;(boolean,URL[],ClassLoader);;Argument[1];open-url",
        "org.springframework.boot.logging;LoggingSystem;true;initialize;(LoggingInitializationContext,String,LogFile);;Argument[1];open-url",
        "org.springframework.boot.system;ApplicationPid;true;write;(File);;Argument[0];create-file",
        "org.springframework.boot.test.web.client;TestRestTemplate;true;delete;(String,Map);;Argument[0];open-url",
        "org.springframework.boot.test.web.client;TestRestTemplate;true;delete;(String,Object[]);;Argument[0];open-url",
        "org.springframework.boot.test.web.client;TestRestTemplate;true;delete;(URI);;Argument[0];open-url",
        "org.springframework.boot.test.web.client;TestRestTemplate;true;exchange;(RequestEntity,Class);;Argument[0];open-url",
        "org.springframework.boot.test.web.client;TestRestTemplate;true;exchange;(RequestEntity,ParameterizedTypeReference);;Argument[0];open-url",
        "org.springframework.boot.test.web.client;TestRestTemplate;true;exchange;(String,HttpMethod,HttpEntity,Class,Map);;Argument[0];open-url",
        "org.springframework.boot.test.web.client;TestRestTemplate;true;exchange;(String,HttpMethod,HttpEntity,Class,Object[]);;Argument[0];open-url",
        "org.springframework.boot.test.web.client;TestRestTemplate;true;exchange;(String,HttpMethod,HttpEntity,ParameterizedTypeReference,Map);;Argument[0];open-url",
        "org.springframework.boot.test.web.client;TestRestTemplate;true;exchange;(String,HttpMethod,HttpEntity,ParameterizedTypeReference,Object[]);;Argument[0];open-url",
        "org.springframework.boot.test.web.client;TestRestTemplate;true;exchange;(URI,HttpMethod,HttpEntity,Class);;Argument[0];open-url",
        "org.springframework.boot.test.web.client;TestRestTemplate;true;exchange;(URI,HttpMethod,HttpEntity,ParameterizedTypeReference);;Argument[0];open-url",
        "org.springframework.boot.test.web.client;TestRestTemplate;true;execute;(String,HttpMethod,RequestCallback,ResponseExtractor,Map);;Argument[0];open-url",
        "org.springframework.boot.test.web.client;TestRestTemplate;true;execute;(String,HttpMethod,RequestCallback,ResponseExtractor,Object[]);;Argument[0];open-url",
        "org.springframework.boot.test.web.client;TestRestTemplate;true;execute;(URI,HttpMethod,RequestCallback,ResponseExtractor);;Argument[0];open-url",
        "org.springframework.boot.test.web.client;TestRestTemplate;true;getForEntity;(String,Class,Map);;Argument[0];open-url",
        "org.springframework.boot.test.web.client;TestRestTemplate;true;getForEntity;(String,Class,Object[]);;Argument[0];open-url",
        "org.springframework.boot.test.web.client;TestRestTemplate;true;getForEntity;(URI,Class);;Argument[0];open-url",
        "org.springframework.boot.test.web.client;TestRestTemplate;true;getForObject;(String,Class,Map);;Argument[0];open-url",
        "org.springframework.boot.test.web.client;TestRestTemplate;true;getForObject;(String,Class,Object[]);;Argument[0];open-url",
        "org.springframework.boot.test.web.client;TestRestTemplate;true;getForObject;(URI,Class);;Argument[0];open-url",
        "org.springframework.boot.test.web.client;TestRestTemplate;true;headForHeaders;(String,Map);;Argument[0];open-url",
        "org.springframework.boot.test.web.client;TestRestTemplate;true;headForHeaders;(String,Object[]);;Argument[0];open-url",
        "org.springframework.boot.test.web.client;TestRestTemplate;true;headForHeaders;(URI);;Argument[0];open-url",
        "org.springframework.boot.test.web.client;TestRestTemplate;true;optionsForAllow;(String,Map);;Argument[0];open-url",
        "org.springframework.boot.test.web.client;TestRestTemplate;true;optionsForAllow;(String,Object[]);;Argument[0];open-url",
        "org.springframework.boot.test.web.client;TestRestTemplate;true;optionsForAllow;(URI);;Argument[0];open-url",
        "org.springframework.boot.test.web.client;TestRestTemplate;true;patchForObject;(String,Object,Class,Map);;Argument[0];open-url",
        "org.springframework.boot.test.web.client;TestRestTemplate;true;patchForObject;(String,Object,Class,Object[]);;Argument[0];open-url",
        "org.springframework.boot.test.web.client;TestRestTemplate;true;patchForObject;(URI,Object,Class);;Argument[0];open-url",
        "org.springframework.boot.test.web.client;TestRestTemplate;true;postForEntity;(String,Object,Class,Map);;Argument[0];open-url",
        "org.springframework.boot.test.web.client;TestRestTemplate;true;postForEntity;(String,Object,Class,Object[]);;Argument[0];open-url",
        "org.springframework.boot.test.web.client;TestRestTemplate;true;postForEntity;(URI,Object,Class);;Argument[0];open-url",
        "org.springframework.boot.test.web.client;TestRestTemplate;true;postForLocation;(String,Object,Map);;Argument[0];open-url",
        "org.springframework.boot.test.web.client;TestRestTemplate;true;postForLocation;(String,Object,Object[]);;Argument[0];open-url",
        "org.springframework.boot.test.web.client;TestRestTemplate;true;postForLocation;(URI,Object);;Argument[0];open-url",
        "org.springframework.boot.test.web.client;TestRestTemplate;true;postForObject;(String,Object,Class,Map);;Argument[0];open-url",
        "org.springframework.boot.test.web.client;TestRestTemplate;true;postForObject;(String,Object,Class,Object[]);;Argument[0];open-url",
        "org.springframework.boot.test.web.client;TestRestTemplate;true;postForObject;(URI,Object,Class);;Argument[0];open-url",
        "org.springframework.boot.test.web.client;TestRestTemplate;true;put;(String,Object,Map);;Argument[0];open-url",
        "org.springframework.boot.test.web.client;TestRestTemplate;true;put;(String,Object,Object[]);;Argument[0];open-url",
        "org.springframework.boot.test.web.client;TestRestTemplate;true;put;(URI,Object);;Argument[0];open-url",
        "org.springframework.boot.testsupport.gradle.testkit;GradleBuild;true;prepareRunner;(String[]);;Argument[-1];create-file"
      ]
  }
}

private class SpringprojectsspringbootSourcesCsv extends SourceModelCsv {
  override predicate row(string row) {
    row =
      [
        "org.springframework.boot.actuate.trace.http;TraceableRequest;true;getUri;();;ReturnValue;remote",
        "org.springframework.boot.buildpack.platform.docker.transport;HttpTransport$Response;true;getContent;();;ReturnValue;remote",
        "org.springframework.boot.test.web.client;TestRestTemplate;true;exchange;(RequestEntity,Class);;ReturnValue;remote",
        "org.springframework.boot.test.web.client;TestRestTemplate;true;exchange;(RequestEntity,ParameterizedTypeReference);;ReturnValue;remote",
        "org.springframework.boot.test.web.client;TestRestTemplate;true;exchange;(String,HttpMethod,HttpEntity,Class,Map);;ReturnValue;remote",
        "org.springframework.boot.test.web.client;TestRestTemplate;true;exchange;(String,HttpMethod,HttpEntity,Class,Object[]);;ReturnValue;remote",
        "org.springframework.boot.test.web.client;TestRestTemplate;true;exchange;(String,HttpMethod,HttpEntity,ParameterizedTypeReference,Map);;ReturnValue;remote",
        "org.springframework.boot.test.web.client;TestRestTemplate;true;exchange;(String,HttpMethod,HttpEntity,ParameterizedTypeReference,Object[]);;ReturnValue;remote",
        "org.springframework.boot.test.web.client;TestRestTemplate;true;exchange;(URI,HttpMethod,HttpEntity,Class);;ReturnValue;remote",
        "org.springframework.boot.test.web.client;TestRestTemplate;true;exchange;(URI,HttpMethod,HttpEntity,ParameterizedTypeReference);;ReturnValue;remote",
        "org.springframework.boot.test.web.client;TestRestTemplate;true;getForEntity;(String,Class,Map);;ReturnValue;remote",
        "org.springframework.boot.test.web.client;TestRestTemplate;true;getForEntity;(String,Class,Object[]);;ReturnValue;remote",
        "org.springframework.boot.test.web.client;TestRestTemplate;true;getForEntity;(URI,Class);;ReturnValue;remote",
        "org.springframework.boot.test.web.client;TestRestTemplate;true;postForEntity;(String,Object,Class,Map);;ReturnValue;remote",
        "org.springframework.boot.test.web.client;TestRestTemplate;true;postForEntity;(String,Object,Class,Object[]);;ReturnValue;remote",
        "org.springframework.boot.test.web.client;TestRestTemplate;true;postForEntity;(URI,Object,Class);;ReturnValue;remote"
      ]
  }
}

private class SpringprojectsspringbootSummaryCsv extends SummaryModelCsv {
  override predicate row(string row) {
    row =
      [
        "org.springframework.boot.actuate.amqp;RabbitHealthIndicator;true;RabbitHealthIndicator;(RabbitTemplate);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.audit.listener;AuditApplicationEvent;true;AuditApplicationEvent;(AuditEvent);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.audit.listener;AuditApplicationEvent;true;AuditApplicationEvent;(Instant,String,String,Map);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.audit.listener;AuditApplicationEvent;true;AuditApplicationEvent;(Instant,String,String,Map);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.audit.listener;AuditApplicationEvent;true;AuditApplicationEvent;(Instant,String,String,Map);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.actuate.audit.listener;AuditApplicationEvent;true;AuditApplicationEvent;(Instant,String,String,Map);;Argument[3];Argument[-1];taint",
        "org.springframework.boot.actuate.audit.listener;AuditApplicationEvent;true;AuditApplicationEvent;(String,String,Map);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.audit.listener;AuditApplicationEvent;true;AuditApplicationEvent;(String,String,Map);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.audit.listener;AuditApplicationEvent;true;AuditApplicationEvent;(String,String,Map);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.actuate.audit.listener;AuditApplicationEvent;true;AuditApplicationEvent;(String,String,String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.audit.listener;AuditApplicationEvent;true;AuditApplicationEvent;(String,String,String[]);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.audit.listener;AuditApplicationEvent;true;AuditApplicationEvent;(String,String,String[]);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.actuate.audit.listener;AuditApplicationEvent;true;getAuditEvent;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.audit.listener;AuditListener;true;AuditListener;(AuditEventRepository);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.audit;AuditEvent;true;AuditEvent;(Instant,String,String,Map);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.audit;AuditEvent;true;AuditEvent;(Instant,String,String,Map);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.audit;AuditEvent;true;AuditEvent;(Instant,String,String,Map);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.actuate.audit;AuditEvent;true;AuditEvent;(Instant,String,String,Map);;Argument[3];Argument[-1];taint",
        "org.springframework.boot.actuate.audit;AuditEvent;true;AuditEvent;(String,String,Map);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.audit;AuditEvent;true;AuditEvent;(String,String,Map);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.audit;AuditEvent;true;AuditEvent;(String,String,Map);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.actuate.audit;AuditEvent;true;AuditEvent;(String,String,String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.audit;AuditEvent;true;AuditEvent;(String,String,String[]);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.audit;AuditEvent;true;AuditEvent;(String,String,String[]);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.actuate.audit;AuditEvent;true;getData;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.audit;AuditEvent;true;getPrincipal;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.audit;AuditEvent;true;getTimestamp;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.audit;AuditEvent;true;getType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.audit;AuditEvent;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.audit;AuditEventRepository;true;add;(AuditEvent);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.audit;AuditEventRepository;true;find;(String,Instant,String);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.audit;AuditEventsEndpoint$AuditEventsDescriptor;false;getEvents;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.audit;AuditEventsEndpoint;true;AuditEventsEndpoint;(AuditEventRepository);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.amqp;RabbitHealthContributorAutoConfiguration;true;rabbitHealthContributor;(Map);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.audit;AuditAutoConfiguration;true;auditListener;(AuditEventRepository);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.audit;AuditEventsEndpointAutoConfiguration;true;auditEventsEndpoint;(AuditEventRepository);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.availability;AvailabilityHealthContributorAutoConfiguration;true;livenessStateHealthIndicator;(ApplicationAvailability);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.availability;AvailabilityHealthContributorAutoConfiguration;true;readinessStateHealthIndicator;(ApplicationAvailability);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.availability;AvailabilityProbesAutoConfiguration;true;livenessStateHealthIndicator;(ApplicationAvailability);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.availability;AvailabilityProbesAutoConfiguration;true;readinessStateHealthIndicator;(ApplicationAvailability);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.beans;BeansEndpointAutoConfiguration;true;beansEndpoint;(ConfigurableApplicationContext);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.cache;CachesEndpointAutoConfiguration;true;cachesEndpoint;(Map);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.cache;CachesEndpointAutoConfiguration;true;cachesEndpointWebExtension;(CachesEndpoint);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.cloudfoundry.reactive;CloudFoundryReactiveHealthEndpointWebExtension;true;CloudFoundryReactiveHealthEndpointWebExtension;(ReactiveHealthEndpointWebExtension);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.cloudfoundry.reactive;ReactiveCloudFoundryActuatorAutoConfiguration;true;cloudFoundryReactiveHealthEndpointWebExtension;(ReactiveHealthEndpointWebExtension);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.cloudfoundry.reactive;ReactiveCloudFoundryActuatorAutoConfiguration;true;cloudFoundryWebFluxEndpointHandlerMapping;(ParameterValueMapper,EndpointMediaTypes,Builder,ControllerEndpointsSupplier,ApplicationContext);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.cloudfoundry.reactive;ReactiveCloudFoundryActuatorAutoConfiguration;true;cloudFoundryWebFluxEndpointHandlerMapping;(ParameterValueMapper,EndpointMediaTypes,Builder,ControllerEndpointsSupplier,ApplicationContext);;Argument[1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.cloudfoundry.reactive;ReactiveCloudFoundryActuatorAutoConfiguration;true;cloudFoundryWebFluxEndpointHandlerMapping;(ParameterValueMapper,EndpointMediaTypes,Builder,ControllerEndpointsSupplier,ApplicationContext);;Argument[3];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.cloudfoundry.reactive;ReactiveCloudFoundryActuatorAutoConfiguration;true;cloudFoundryWebFluxEndpointHandlerMapping;(ParameterValueMapper,EndpointMediaTypes,Builder,ControllerEndpointsSupplier,ApplicationContext);;Argument[4];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.cloudfoundry.servlet;CloudFoundryActuatorAutoConfiguration;true;cloudFoundryHealthEndpointWebExtension;(HealthEndpointWebExtension);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.cloudfoundry.servlet;CloudFoundryActuatorAutoConfiguration;true;cloudFoundryWebEndpointServletHandlerMapping;(ParameterValueMapper,EndpointMediaTypes,RestTemplateBuilder,ServletEndpointsSupplier,ControllerEndpointsSupplier,ApplicationContext);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.cloudfoundry.servlet;CloudFoundryActuatorAutoConfiguration;true;cloudFoundryWebEndpointServletHandlerMapping;(ParameterValueMapper,EndpointMediaTypes,RestTemplateBuilder,ServletEndpointsSupplier,ControllerEndpointsSupplier,ApplicationContext);;Argument[1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.cloudfoundry.servlet;CloudFoundryActuatorAutoConfiguration;true;cloudFoundryWebEndpointServletHandlerMapping;(ParameterValueMapper,EndpointMediaTypes,RestTemplateBuilder,ServletEndpointsSupplier,ControllerEndpointsSupplier,ApplicationContext);;Argument[3];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.cloudfoundry.servlet;CloudFoundryActuatorAutoConfiguration;true;cloudFoundryWebEndpointServletHandlerMapping;(ParameterValueMapper,EndpointMediaTypes,RestTemplateBuilder,ServletEndpointsSupplier,ControllerEndpointsSupplier,ApplicationContext);;Argument[4];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.cloudfoundry.servlet;CloudFoundryActuatorAutoConfiguration;true;cloudFoundryWebEndpointServletHandlerMapping;(ParameterValueMapper,EndpointMediaTypes,RestTemplateBuilder,ServletEndpointsSupplier,ControllerEndpointsSupplier,ApplicationContext);;Argument[5];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.cloudfoundry.servlet;CloudFoundryHealthEndpointWebExtension;true;CloudFoundryHealthEndpointWebExtension;(HealthEndpointWebExtension);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.cloudfoundry.servlet;CloudFoundryInfoEndpointWebExtension;true;CloudFoundryInfoEndpointWebExtension;(InfoEndpoint);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.cloudfoundry.servlet;CloudFoundryInfoEndpointWebExtension;true;info;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.cloudfoundry;CloudFoundryWebEndpointDiscoverer;true;CloudFoundryWebEndpointDiscoverer;(ApplicationContext,ParameterValueMapper,EndpointMediaTypes,List,Collection,Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.cloudfoundry;CloudFoundryWebEndpointDiscoverer;true;CloudFoundryWebEndpointDiscoverer;(ApplicationContext,ParameterValueMapper,EndpointMediaTypes,List,Collection,Collection);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.cloudfoundry;CloudFoundryWebEndpointDiscoverer;true;CloudFoundryWebEndpointDiscoverer;(ApplicationContext,ParameterValueMapper,EndpointMediaTypes,List,Collection,Collection);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.cloudfoundry;CloudFoundryWebEndpointDiscoverer;true;CloudFoundryWebEndpointDiscoverer;(ApplicationContext,ParameterValueMapper,EndpointMediaTypes,List,Collection,Collection);;Argument[3];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.cloudfoundry;CloudFoundryWebEndpointDiscoverer;true;CloudFoundryWebEndpointDiscoverer;(ApplicationContext,ParameterValueMapper,EndpointMediaTypes,List,Collection,Collection);;Argument[4];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.cloudfoundry;CloudFoundryWebEndpointDiscoverer;true;CloudFoundryWebEndpointDiscoverer;(ApplicationContext,ParameterValueMapper,EndpointMediaTypes,List,Collection,Collection);;Argument[5];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.cloudfoundry;SecurityResponse;true;SecurityResponse;(HttpStatus,String);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.cloudfoundry;SecurityResponse;true;getMessage;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.cloudfoundry;Token;true;Token;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.cloudfoundry;Token;true;getContent;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.cloudfoundry;Token;true;getIssuer;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.cloudfoundry;Token;true;getKeyId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.cloudfoundry;Token;true;getScope;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.cloudfoundry;Token;true;getSignature;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.cloudfoundry;Token;true;getSignatureAlgorithm;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.cloudfoundry;Token;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.condition;ConditionsReportEndpoint$ApplicationConditionEvaluation;false;getContexts;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.condition;ConditionsReportEndpoint$ContextConditionEvaluation;false;getExclusions;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.condition;ConditionsReportEndpoint$ContextConditionEvaluation;false;getNegativeMatches;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.condition;ConditionsReportEndpoint$ContextConditionEvaluation;false;getParentId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.condition;ConditionsReportEndpoint$ContextConditionEvaluation;false;getPositiveMatches;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.condition;ConditionsReportEndpoint$ContextConditionEvaluation;false;getUnconditionalClasses;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.condition;ConditionsReportEndpoint$MessageAndCondition;true;getCondition;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.condition;ConditionsReportEndpoint$MessageAndCondition;true;getMessage;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.condition;ConditionsReportEndpoint$MessageAndConditions;true;getMatched;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.condition;ConditionsReportEndpoint$MessageAndConditions;true;getNotMatched;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.condition;ConditionsReportEndpoint;true;ConditionsReportEndpoint;(ConfigurableApplicationContext);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.condition;ConditionsReportEndpointAutoConfiguration;true;conditionsReportEndpoint;(ConfigurableApplicationContext);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.context.properties;ConfigurationPropertiesReportEndpointAutoConfiguration;true;configurationPropertiesReportEndpointWebExtension;(ConfigurationPropertiesReportEndpoint);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.context.properties;ConfigurationPropertiesReportEndpointProperties;true;getAdditionalKeysToSanitize;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.context.properties;ConfigurationPropertiesReportEndpointProperties;true;getKeysToSanitize;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.context.properties;ConfigurationPropertiesReportEndpointProperties;true;setAdditionalKeysToSanitize;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.context.properties;ConfigurationPropertiesReportEndpointProperties;true;setKeysToSanitize;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.couchbase;CouchbaseHealthContributorAutoConfiguration;true;couchbaseHealthContributor;(Map);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.couchbase;CouchbaseReactiveHealthContributorAutoConfiguration;true;couchbaseHealthContributor;(Map);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.elasticsearch;ElasticSearchReactiveHealthContributorAutoConfiguration;true;elasticsearchHealthContributor;(Map);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.elasticsearch;ElasticSearchRestHealthContributorAutoConfiguration;true;elasticsearchHealthContributor;(Map);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.endpoint.jmx;JmxEndpointAutoConfiguration;true;JmxEndpointAutoConfiguration;(ApplicationContext,JmxEndpointProperties);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.endpoint.jmx;JmxEndpointAutoConfiguration;true;JmxEndpointAutoConfiguration;(ApplicationContext,JmxEndpointProperties);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.endpoint.jmx;JmxEndpointAutoConfiguration;true;endpointObjectNameFactory;(MBeanServer,Environment);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.endpoint.jmx;JmxEndpointAutoConfiguration;true;endpointObjectNameFactory;(MBeanServer,Environment);;Argument[1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.endpoint.jmx;JmxEndpointAutoConfiguration;true;jmxAnnotationEndpointDiscoverer;(ParameterValueMapper,ObjectProvider,ObjectProvider);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.endpoint.jmx;JmxEndpointAutoConfiguration;true;jmxMBeanExporter;(MBeanServer,EndpointObjectNameFactory,ObjectProvider,JmxEndpointsSupplier);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.endpoint.jmx;JmxEndpointAutoConfiguration;true;jmxMBeanExporter;(MBeanServer,EndpointObjectNameFactory,ObjectProvider,JmxEndpointsSupplier);;Argument[1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.endpoint.jmx;JmxEndpointAutoConfiguration;true;jmxMBeanExporter;(MBeanServer,EndpointObjectNameFactory,ObjectProvider,JmxEndpointsSupplier);;Argument[3];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.endpoint.jmx;JmxEndpointProperties$Exposure;true;getExclude;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.endpoint.jmx;JmxEndpointProperties$Exposure;true;getInclude;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.endpoint.jmx;JmxEndpointProperties$Exposure;true;setExclude;(Set);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.endpoint.jmx;JmxEndpointProperties$Exposure;true;setInclude;(Set);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.endpoint.jmx;JmxEndpointProperties;true;getDomain;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.endpoint.jmx;JmxEndpointProperties;true;getExposure;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.endpoint.jmx;JmxEndpointProperties;true;getStaticNames;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.endpoint.jmx;JmxEndpointProperties;true;setDomain;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.endpoint.web.reactive;WebFluxEndpointManagementContextConfiguration;true;managementHealthEndpointWebFluxHandlerMapping;(WebEndpointsSupplier,HealthEndpointGroups);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.endpoint.web.reactive;WebFluxEndpointManagementContextConfiguration;true;webEndpointReactiveHandlerMapping;(WebEndpointsSupplier,ControllerEndpointsSupplier,EndpointMediaTypes,CorsEndpointProperties,WebEndpointProperties,Environment);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.endpoint.web.reactive;WebFluxEndpointManagementContextConfiguration;true;webEndpointReactiveHandlerMapping;(WebEndpointsSupplier,ControllerEndpointsSupplier,EndpointMediaTypes,CorsEndpointProperties,WebEndpointProperties,Environment);;Argument[1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.endpoint.web.reactive;WebFluxEndpointManagementContextConfiguration;true;webEndpointReactiveHandlerMapping;(WebEndpointsSupplier,ControllerEndpointsSupplier,EndpointMediaTypes,CorsEndpointProperties,WebEndpointProperties,Environment);;Argument[2];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.endpoint.web.servlet;WebMvcEndpointManagementContextConfiguration;true;managementHealthEndpointWebMvcHandlerMapping;(WebEndpointsSupplier,HealthEndpointGroups);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.endpoint.web.servlet;WebMvcEndpointManagementContextConfiguration;true;webEndpointServletHandlerMapping;(WebEndpointsSupplier,ServletEndpointsSupplier,ControllerEndpointsSupplier,EndpointMediaTypes,CorsEndpointProperties,WebEndpointProperties,Environment);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.endpoint.web.servlet;WebMvcEndpointManagementContextConfiguration;true;webEndpointServletHandlerMapping;(WebEndpointsSupplier,ServletEndpointsSupplier,ControllerEndpointsSupplier,EndpointMediaTypes,CorsEndpointProperties,WebEndpointProperties,Environment);;Argument[1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.endpoint.web.servlet;WebMvcEndpointManagementContextConfiguration;true;webEndpointServletHandlerMapping;(WebEndpointsSupplier,ServletEndpointsSupplier,ControllerEndpointsSupplier,EndpointMediaTypes,CorsEndpointProperties,WebEndpointProperties,Environment);;Argument[2];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.endpoint.web.servlet;WebMvcEndpointManagementContextConfiguration;true;webEndpointServletHandlerMapping;(WebEndpointsSupplier,ServletEndpointsSupplier,ControllerEndpointsSupplier,EndpointMediaTypes,CorsEndpointProperties,WebEndpointProperties,Environment);;Argument[3];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.endpoint.web;CorsEndpointProperties;true;getAllowedHeaders;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.endpoint.web;CorsEndpointProperties;true;getAllowedMethods;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.endpoint.web;CorsEndpointProperties;true;getAllowedOriginPatterns;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.endpoint.web;CorsEndpointProperties;true;getAllowedOrigins;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.endpoint.web;CorsEndpointProperties;true;getExposedHeaders;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.endpoint.web;CorsEndpointProperties;true;getMaxAge;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.endpoint.web;CorsEndpointProperties;true;setAllowedHeaders;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.endpoint.web;CorsEndpointProperties;true;setAllowedMethods;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.endpoint.web;CorsEndpointProperties;true;setAllowedOriginPatterns;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.endpoint.web;CorsEndpointProperties;true;setAllowedOrigins;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.endpoint.web;CorsEndpointProperties;true;setExposedHeaders;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.endpoint.web;CorsEndpointProperties;true;setMaxAge;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.endpoint.web;ServletEndpointManagementContextConfiguration$JerseyServletEndpointManagementContextConfiguration;true;servletEndpointRegistrar;(WebEndpointProperties,ServletEndpointsSupplier,JerseyApplicationPath);;Argument[1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.endpoint.web;ServletEndpointManagementContextConfiguration$WebMvcServletEndpointManagementContextConfiguration;true;servletEndpointRegistrar;(WebEndpointProperties,ServletEndpointsSupplier,DispatcherServletPath);;Argument[1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.endpoint.web;WebEndpointAutoConfiguration;true;WebEndpointAutoConfiguration;(ApplicationContext,WebEndpointProperties);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.endpoint.web;WebEndpointAutoConfiguration;true;WebEndpointAutoConfiguration;(ApplicationContext,WebEndpointProperties);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.endpoint.web;WebEndpointAutoConfiguration;true;webEndpointDiscoverer;(ParameterValueMapper,EndpointMediaTypes,ObjectProvider,ObjectProvider,ObjectProvider);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.endpoint.web;WebEndpointAutoConfiguration;true;webEndpointDiscoverer;(ParameterValueMapper,EndpointMediaTypes,ObjectProvider,ObjectProvider,ObjectProvider);;Argument[1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.endpoint.web;WebEndpointProperties$Exposure;true;getExclude;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.endpoint.web;WebEndpointProperties$Exposure;true;getInclude;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.endpoint.web;WebEndpointProperties$Exposure;true;setExclude;(Set);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.endpoint.web;WebEndpointProperties$Exposure;true;setInclude;(Set);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.endpoint.web;WebEndpointProperties;true;getBasePath;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.endpoint.web;WebEndpointProperties;true;getDiscovery;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.endpoint.web;WebEndpointProperties;true;getExposure;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.endpoint.web;WebEndpointProperties;true;getPathMapping;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.endpoint.web;WebEndpointProperties;true;setBasePath;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.endpoint;EndpointAutoConfiguration;true;endpointCachingOperationInvokerAdvisor;(Environment);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.env;EnvironmentEndpointAutoConfiguration;true;environmentEndpoint;(Environment,EnvironmentEndpointProperties,ObjectProvider);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.env;EnvironmentEndpointAutoConfiguration;true;environmentEndpointWebExtension;(EnvironmentEndpoint);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.env;EnvironmentEndpointProperties;true;getAdditionalKeysToSanitize;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.env;EnvironmentEndpointProperties;true;getKeysToSanitize;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.env;EnvironmentEndpointProperties;true;setAdditionalKeysToSanitize;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.env;EnvironmentEndpointProperties;true;setKeysToSanitize;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.flyway;FlywayEndpointAutoConfiguration;true;flywayEndpoint;(ApplicationContext);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.hazelcast;HazelcastHealthContributorAutoConfiguration;true;hazelcastHealthContributor;(Map);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.health;HealthEndpointProperties$Group;true;getAdditionalPath;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.health;HealthEndpointProperties$Group;true;getExclude;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.health;HealthEndpointProperties$Group;true;getInclude;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.health;HealthEndpointProperties$Group;true;setAdditionalPath;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.health;HealthEndpointProperties$Group;true;setExclude;(Set);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.health;HealthEndpointProperties$Group;true;setInclude;(Set);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.health;HealthEndpointProperties;true;getGroup;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.health;HealthProperties$Status;true;getHttpMapping;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.health;HealthProperties$Status;true;getOrder;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.health;HealthProperties$Status;true;setOrder;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.health;HealthProperties;true;getRoles;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.health;HealthProperties;true;getStatus;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.health;HealthProperties;true;setRoles;(Set);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.influx;InfluxDbHealthContributorAutoConfiguration;true;influxDbHealthContributor;(Map);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.info;InfoContributorAutoConfiguration;true;buildInfoContributor;(BuildProperties);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.info;InfoContributorAutoConfiguration;true;envInfoContributor;(ConfigurableEnvironment);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.info;InfoContributorAutoConfiguration;true;gitInfoContributor;(GitProperties,InfoContributorProperties);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.info;InfoContributorProperties;true;getGit;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.integration;IntegrationGraphEndpointAutoConfiguration;true;integrationGraphEndpoint;(IntegrationGraphServer);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.jdbc;DataSourceHealthContributorAutoConfiguration;true;dbHealthContributor;(Map,DataSourceHealthIndicatorProperties);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.jms;JmsHealthContributorAutoConfiguration;true;jmsHealthContributor;(Map);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.jolokia;JolokiaEndpoint;true;JolokiaEndpoint;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.jolokia;JolokiaProperties;true;getConfig;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.ldap;LdapHealthContributorAutoConfiguration;true;ldapHealthContributor;(Map);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.liquibase;LiquibaseEndpointAutoConfiguration;true;liquibaseEndpoint;(ApplicationContext);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.logging;LogFileWebEndpointProperties;true;getExternalFile;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.logging;LogFileWebEndpointProperties;true;setExternalFile;(File);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.logging;LoggersEndpointAutoConfiguration;true;loggersEndpoint;(LoggingSystem,ObjectProvider);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.mail;MailHealthContributorAutoConfiguration;true;mailHealthContributor;(Map);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.amqp;RabbitMetricsAutoConfiguration;true;rabbitConnectionFactoryMetricsPostProcessor;(ApplicationContext);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.data;RepositoryMetricsAutoConfiguration;true;RepositoryMetricsAutoConfiguration;(MetricsProperties);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.data;RepositoryMetricsAutoConfiguration;true;metricsRepositoryMethodInvocationListener;(ObjectProvider,RepositoryTagsProvider);;Argument[1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.appoptics;AppOpticsMetricsExportAutoConfiguration;true;AppOpticsMetricsExportAutoConfiguration;(AppOpticsProperties);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.appoptics;AppOpticsProperties;true;getApiToken;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.appoptics;AppOpticsProperties;true;getHostTag;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.appoptics;AppOpticsProperties;true;getUri;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.appoptics;AppOpticsProperties;true;setApiToken;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.appoptics;AppOpticsProperties;true;setHostTag;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.appoptics;AppOpticsProperties;true;setUri;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.atlas;AtlasMetricsExportAutoConfiguration;true;atlasConfig;(AtlasProperties);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.atlas;AtlasProperties;true;getConfigRefreshFrequency;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.atlas;AtlasProperties;true;getConfigTimeToLive;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.atlas;AtlasProperties;true;getConfigUri;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.atlas;AtlasProperties;true;getConnectTimeout;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.atlas;AtlasProperties;true;getEvalUri;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.atlas;AtlasProperties;true;getMeterTimeToLive;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.atlas;AtlasProperties;true;getReadTimeout;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.atlas;AtlasProperties;true;getStep;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.atlas;AtlasProperties;true;getUri;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.atlas;AtlasProperties;true;setConfigRefreshFrequency;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.atlas;AtlasProperties;true;setConfigTimeToLive;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.atlas;AtlasProperties;true;setConfigUri;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.atlas;AtlasProperties;true;setConnectTimeout;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.atlas;AtlasProperties;true;setEvalUri;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.atlas;AtlasProperties;true;setMeterTimeToLive;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.atlas;AtlasProperties;true;setReadTimeout;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.atlas;AtlasProperties;true;setStep;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.atlas;AtlasProperties;true;setUri;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.datadog;DatadogMetricsExportAutoConfiguration;true;DatadogMetricsExportAutoConfiguration;(DatadogProperties);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.datadog;DatadogProperties;true;getApiKey;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.datadog;DatadogProperties;true;getApplicationKey;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.datadog;DatadogProperties;true;getHostTag;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.datadog;DatadogProperties;true;getUri;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.datadog;DatadogProperties;true;setApiKey;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.datadog;DatadogProperties;true;setApplicationKey;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.datadog;DatadogProperties;true;setHostTag;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.datadog;DatadogProperties;true;setUri;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.dynatrace;DynatraceMetricsExportAutoConfiguration;true;DynatraceMetricsExportAutoConfiguration;(DynatraceProperties);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.dynatrace;DynatraceProperties$V1;true;getDeviceId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.dynatrace;DynatraceProperties$V1;true;getGroup;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.dynatrace;DynatraceProperties$V1;true;getTechnologyType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.dynatrace;DynatraceProperties$V1;true;setDeviceId;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.dynatrace;DynatraceProperties$V1;true;setGroup;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.dynatrace;DynatraceProperties$V1;true;setTechnologyType;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.dynatrace;DynatraceProperties$V2;true;getDefaultDimensions;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.dynatrace;DynatraceProperties$V2;true;getMetricKeyPrefix;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.dynatrace;DynatraceProperties$V2;true;setDefaultDimensions;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.dynatrace;DynatraceProperties$V2;true;setMetricKeyPrefix;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.dynatrace;DynatraceProperties;true;getApiToken;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.dynatrace;DynatraceProperties;true;getDeviceId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.dynatrace;DynatraceProperties;true;getGroup;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.dynatrace;DynatraceProperties;true;getTechnologyType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.dynatrace;DynatraceProperties;true;getUri;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.dynatrace;DynatraceProperties;true;getV1;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.dynatrace;DynatraceProperties;true;getV2;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.dynatrace;DynatraceProperties;true;setApiToken;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.dynatrace;DynatraceProperties;true;setDeviceId;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.dynatrace;DynatraceProperties;true;setGroup;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.dynatrace;DynatraceProperties;true;setTechnologyType;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.dynatrace;DynatraceProperties;true;setUri;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.elastic;ElasticMetricsExportAutoConfiguration;true;ElasticMetricsExportAutoConfiguration;(ElasticProperties);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.elastic;ElasticProperties;true;getApiKeyCredentials;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.elastic;ElasticProperties;true;getHost;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.elastic;ElasticProperties;true;getIndex;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.elastic;ElasticProperties;true;getIndexDateFormat;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.elastic;ElasticProperties;true;getIndexDateSeparator;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.elastic;ElasticProperties;true;getPassword;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.elastic;ElasticProperties;true;getPipeline;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.elastic;ElasticProperties;true;getTimestampFieldName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.elastic;ElasticProperties;true;getUserName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.elastic;ElasticProperties;true;setApiKeyCredentials;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.elastic;ElasticProperties;true;setHost;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.elastic;ElasticProperties;true;setIndex;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.elastic;ElasticProperties;true;setIndexDateFormat;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.elastic;ElasticProperties;true;setIndexDateSeparator;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.elastic;ElasticProperties;true;setPassword;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.elastic;ElasticProperties;true;setPipeline;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.elastic;ElasticProperties;true;setTimestampFieldName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.elastic;ElasticProperties;true;setUserName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.ganglia;GangliaMetricsExportAutoConfiguration;true;gangliaConfig;(GangliaProperties);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.ganglia;GangliaProperties;true;getHost;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.ganglia;GangliaProperties;true;getProtocolVersion;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.ganglia;GangliaProperties;true;getStep;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.ganglia;GangliaProperties;true;setHost;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.ganglia;GangliaProperties;true;setProtocolVersion;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.ganglia;GangliaProperties;true;setStep;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.graphite;GraphiteMetricsExportAutoConfiguration;true;graphiteConfig;(GraphiteProperties);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.graphite;GraphiteProperties;true;getHost;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.graphite;GraphiteProperties;true;getStep;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.graphite;GraphiteProperties;true;getTagsAsPrefix;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.graphite;GraphiteProperties;true;setHost;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.graphite;GraphiteProperties;true;setStep;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.graphite;GraphiteProperties;true;setTagsAsPrefix;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.humio;HumioMetricsExportAutoConfiguration;true;HumioMetricsExportAutoConfiguration;(HumioProperties);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.humio;HumioProperties;true;getApiToken;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.humio;HumioProperties;true;getTags;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.humio;HumioProperties;true;getUri;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.humio;HumioProperties;true;setApiToken;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.humio;HumioProperties;true;setTags;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.humio;HumioProperties;true;setUri;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.influx;InfluxMetricsExportAutoConfiguration;true;InfluxMetricsExportAutoConfiguration;(InfluxProperties);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.influx;InfluxProperties;true;getBucket;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.influx;InfluxProperties;true;getDb;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.influx;InfluxProperties;true;getOrg;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.influx;InfluxProperties;true;getPassword;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.influx;InfluxProperties;true;getRetentionDuration;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.influx;InfluxProperties;true;getRetentionPolicy;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.influx;InfluxProperties;true;getRetentionShardDuration;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.influx;InfluxProperties;true;getToken;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.influx;InfluxProperties;true;getUri;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.influx;InfluxProperties;true;getUserName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.influx;InfluxProperties;true;setBucket;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.influx;InfluxProperties;true;setDb;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.influx;InfluxProperties;true;setOrg;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.influx;InfluxProperties;true;setPassword;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.influx;InfluxProperties;true;setRetentionDuration;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.influx;InfluxProperties;true;setRetentionPolicy;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.influx;InfluxProperties;true;setRetentionShardDuration;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.influx;InfluxProperties;true;setToken;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.influx;InfluxProperties;true;setUri;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.influx;InfluxProperties;true;setUserName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.jmx;JmxMetricsExportAutoConfiguration;true;jmxConfig;(JmxProperties);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.jmx;JmxProperties;true;getDomain;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.jmx;JmxProperties;true;getStep;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.jmx;JmxProperties;true;setDomain;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.jmx;JmxProperties;true;setStep;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.kairos;KairosMetricsExportAutoConfiguration;true;KairosMetricsExportAutoConfiguration;(KairosProperties);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.kairos;KairosProperties;true;getPassword;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.kairos;KairosProperties;true;getUri;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.kairos;KairosProperties;true;getUserName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.kairos;KairosProperties;true;setPassword;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.kairos;KairosProperties;true;setUri;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.kairos;KairosProperties;true;setUserName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.newrelic;NewRelicMetricsExportAutoConfiguration;true;NewRelicMetricsExportAutoConfiguration;(NewRelicProperties);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.newrelic;NewRelicProperties;true;getAccountId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.newrelic;NewRelicProperties;true;getApiKey;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.newrelic;NewRelicProperties;true;getEventType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.newrelic;NewRelicProperties;true;getUri;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.newrelic;NewRelicProperties;true;setAccountId;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.newrelic;NewRelicProperties;true;setApiKey;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.newrelic;NewRelicProperties;true;setEventType;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.newrelic;NewRelicProperties;true;setUri;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.newrelic;NewRelicPropertiesConfigAdapter;true;NewRelicPropertiesConfigAdapter;(NewRelicProperties);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.prometheus;PrometheusMetricsExportAutoConfiguration$PrometheusPushGatewayConfiguration;true;prometheusPushGatewayManager;(CollectorRegistry,PrometheusProperties,Environment);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.prometheus;PrometheusMetricsExportAutoConfiguration$PrometheusScrapeEndpointConfiguration;true;prometheusEndpoint;(CollectorRegistry);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.prometheus;PrometheusMetricsExportAutoConfiguration;true;prometheusConfig;(PrometheusProperties);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.prometheus;PrometheusProperties$Pushgateway;true;getBaseUrl;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.prometheus;PrometheusProperties$Pushgateway;true;getGroupingKey;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.prometheus;PrometheusProperties$Pushgateway;true;getJob;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.prometheus;PrometheusProperties$Pushgateway;true;getPassword;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.prometheus;PrometheusProperties$Pushgateway;true;getPushRate;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.prometheus;PrometheusProperties$Pushgateway;true;getUsername;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.prometheus;PrometheusProperties$Pushgateway;true;setBaseUrl;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.prometheus;PrometheusProperties$Pushgateway;true;setGroupingKey;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.prometheus;PrometheusProperties$Pushgateway;true;setJob;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.prometheus;PrometheusProperties$Pushgateway;true;setPassword;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.prometheus;PrometheusProperties$Pushgateway;true;setPushRate;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.prometheus;PrometheusProperties$Pushgateway;true;setUsername;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.prometheus;PrometheusProperties;true;getPushgateway;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.prometheus;PrometheusProperties;true;getStep;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.prometheus;PrometheusProperties;true;setStep;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.properties;PropertiesConfigAdapter;true;PropertiesConfigAdapter;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.properties;PushRegistryProperties;true;getConnectTimeout;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.properties;PushRegistryProperties;true;getReadTimeout;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.properties;PushRegistryProperties;true;getStep;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.properties;PushRegistryProperties;true;setConnectTimeout;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.properties;PushRegistryProperties;true;setReadTimeout;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.properties;PushRegistryProperties;true;setStep;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.properties;PushRegistryPropertiesConfigAdapter;true;PushRegistryPropertiesConfigAdapter;(PushRegistryProperties);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.properties;StepRegistryPropertiesConfigAdapter;true;StepRegistryPropertiesConfigAdapter;(StepRegistryProperties);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.signalfx;SignalFxMetricsExportAutoConfiguration;true;signalfxConfig;(SignalFxProperties);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.signalfx;SignalFxProperties;true;getAccessToken;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.signalfx;SignalFxProperties;true;getSource;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.signalfx;SignalFxProperties;true;getUri;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.signalfx;SignalFxProperties;true;setAccessToken;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.signalfx;SignalFxProperties;true;setSource;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.signalfx;SignalFxProperties;true;setUri;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.signalfx;SignalFxPropertiesConfigAdapter;true;SignalFxPropertiesConfigAdapter;(SignalFxProperties);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.simple;SimpleMetricsExportAutoConfiguration;true;simpleConfig;(SimpleProperties);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.simple;SimpleProperties;true;getStep;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.simple;SimpleProperties;true;setStep;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.simple;SimplePropertiesConfigAdapter;true;SimplePropertiesConfigAdapter;(SimpleProperties);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.stackdriver;StackdriverMetricsExportAutoConfiguration;true;StackdriverMetricsExportAutoConfiguration;(StackdriverProperties);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.stackdriver;StackdriverProperties;true;getProjectId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.stackdriver;StackdriverProperties;true;getResourceLabels;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.stackdriver;StackdriverProperties;true;getResourceType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.stackdriver;StackdriverProperties;true;setProjectId;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.stackdriver;StackdriverProperties;true;setResourceLabels;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.stackdriver;StackdriverProperties;true;setResourceType;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.stackdriver;StackdriverPropertiesConfigAdapter;true;StackdriverPropertiesConfigAdapter;(StackdriverProperties);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.statsd;StatsdMetricsExportAutoConfiguration;true;statsdConfig;(StatsdProperties);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.statsd;StatsdProperties;true;getHost;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.statsd;StatsdProperties;true;getPollingFrequency;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.statsd;StatsdProperties;true;setHost;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.statsd;StatsdProperties;true;setPollingFrequency;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.statsd;StatsdPropertiesConfigAdapter;true;StatsdPropertiesConfigAdapter;(StatsdProperties);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.wavefront;WavefrontMetricsExportAutoConfiguration;true;WavefrontMetricsExportAutoConfiguration;(WavefrontProperties);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.wavefront;WavefrontProperties$Sender;true;getFlushInterval;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.wavefront;WavefrontProperties$Sender;true;getMessageSize;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.wavefront;WavefrontProperties$Sender;true;setFlushInterval;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.wavefront;WavefrontProperties$Sender;true;setMessageSize;(DataSize);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.wavefront;WavefrontProperties;true;getApiToken;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.wavefront;WavefrontProperties;true;getGlobalPrefix;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.wavefront;WavefrontProperties;true;getSender;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.wavefront;WavefrontProperties;true;getSource;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.wavefront;WavefrontProperties;true;getUri;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.wavefront;WavefrontProperties;true;setApiToken;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.wavefront;WavefrontProperties;true;setGlobalPrefix;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.wavefront;WavefrontProperties;true;setSource;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.wavefront;WavefrontProperties;true;setUri;(URI);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.export.wavefront;WavefrontPropertiesConfigAdapter;true;WavefrontPropertiesConfigAdapter;(WavefrontProperties);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.jersey;JerseyServerMetricsAutoConfiguration;true;JerseyServerMetricsAutoConfiguration;(MetricsProperties);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.orm.jpa;HibernateMetricsAutoConfiguration;true;HibernateMetricsAutoConfiguration;(Map,MeterRegistry);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.orm.jpa;HibernateMetricsAutoConfiguration;true;HibernateMetricsAutoConfiguration;(Map,MeterRegistry);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.startup;StartupTimeMetricsListenerAutoConfiguration;true;startupTimeMetrics;(MeterRegistry);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.web.jetty;JettyMetricsAutoConfiguration;true;jettyConnectionMetricsBinder;(MeterRegistry);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.web.jetty;JettyMetricsAutoConfiguration;true;jettyServerThreadPoolMetricsBinder;(MeterRegistry);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.web.jetty;JettyMetricsAutoConfiguration;true;jettySslHandshakeMetricsBinder;(MeterRegistry);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.web.reactive;WebFluxMetricsAutoConfiguration;true;WebFluxMetricsAutoConfiguration;(MetricsProperties);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.web.reactive;WebFluxMetricsAutoConfiguration;true;webfluxMetrics;(MeterRegistry,WebFluxTagsProvider);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.web.reactive;WebFluxMetricsAutoConfiguration;true;webfluxMetrics;(MeterRegistry,WebFluxTagsProvider);;Argument[1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.web.servlet;WebMvcMetricsAutoConfiguration;true;WebMvcMetricsAutoConfiguration;(MetricsProperties);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.web.servlet;WebMvcMetricsAutoConfiguration;true;metricsWebMvcConfigurer;(MeterRegistry,WebMvcTagsProvider);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.web.servlet;WebMvcMetricsAutoConfiguration;true;metricsWebMvcConfigurer;(MeterRegistry,WebMvcTagsProvider);;Argument[1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.web.servlet;WebMvcMetricsAutoConfiguration;true;webMvcMetricsFilter;(MeterRegistry,WebMvcTagsProvider);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.web.servlet;WebMvcMetricsAutoConfiguration;true;webMvcMetricsFilter;(MeterRegistry,WebMvcTagsProvider);;Argument[1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics.web.tomcat;TomcatMetricsAutoConfiguration;true;tomcatMetricsBinder;(MeterRegistry);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics;MeterValue;false;valueOf;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics;MetricsAutoConfiguration;true;meterRegistryPostProcessor;(ObjectProvider,ObjectProvider,ObjectProvider,ObjectProvider,ApplicationContext);;Argument[4];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics;MetricsAutoConfiguration;true;meterRegistryPostProcessor;(ObjectProvider,ObjectProvider,ObjectProvider,ObjectProvider,ApplicationContext);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics;MetricsAutoConfiguration;true;meterRegistryPostProcessor;(ObjectProvider,ObjectProvider,ObjectProvider,ObjectProvider,ApplicationContext);;Element of Argument[1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics;MetricsAutoConfiguration;true;meterRegistryPostProcessor;(ObjectProvider,ObjectProvider,ObjectProvider,ObjectProvider,ApplicationContext);;Element of Argument[2];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics;MetricsAutoConfiguration;true;meterRegistryPostProcessor;(ObjectProvider,ObjectProvider,ObjectProvider,ObjectProvider,ApplicationContext);;Element of Argument[3];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics;MetricsAutoConfiguration;true;propertiesMeterFilter;(MetricsProperties);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics;MetricsEndpointAutoConfiguration;true;metricsEndpoint;(MeterRegistry);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics;MetricsProperties$Data$Repository;true;getAutotime;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics;MetricsProperties$Data$Repository;true;getMetricName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics;MetricsProperties$Data$Repository;true;setMetricName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics;MetricsProperties$Data;true;getRepository;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics;MetricsProperties$Distribution;true;getBufferLength;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics;MetricsProperties$Distribution;true;getExpiry;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics;MetricsProperties$Distribution;true;getMaximumExpectedValue;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics;MetricsProperties$Distribution;true;getMinimumExpectedValue;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics;MetricsProperties$Distribution;true;getPercentiles;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics;MetricsProperties$Distribution;true;getPercentilesHistogram;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics;MetricsProperties$Distribution;true;getSlo;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics;MetricsProperties$System$Diskspace;true;getPaths;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics;MetricsProperties$System$Diskspace;true;setPaths;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics;MetricsProperties$System;true;getDiskspace;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics;MetricsProperties$Web$Client$ClientRequest;true;getAutotime;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics;MetricsProperties$Web$Client$ClientRequest;true;getMetricName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics;MetricsProperties$Web$Client$ClientRequest;true;setMetricName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics;MetricsProperties$Web$Client;true;getRequest;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics;MetricsProperties$Web$Server$ServerRequest;true;getAutotime;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics;MetricsProperties$Web$Server$ServerRequest;true;getMetricName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics;MetricsProperties$Web$Server$ServerRequest;true;setMetricName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics;MetricsProperties$Web$Server;true;getRequest;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics;MetricsProperties$Web;true;getClient;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics;MetricsProperties$Web;true;getServer;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics;MetricsProperties;true;getData;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics;MetricsProperties;true;getDistribution;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics;MetricsProperties;true;getEnable;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics;MetricsProperties;true;getSystem;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics;MetricsProperties;true;getTags;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics;MetricsProperties;true;getWeb;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.metrics;OnlyOnceLoggingDenyMeterFilter;false;OnlyOnceLoggingDenyMeterFilter;(Supplier);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics;PropertiesMeterFilter;true;PropertiesMeterFilter;(MetricsProperties);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.metrics;ServiceLevelObjectiveBoundary;false;valueOf;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.mongo;MongoHealthContributorAutoConfiguration;true;mongoHealthContributor;(Map);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.mongo;MongoReactiveHealthContributorAutoConfiguration;true;mongoHealthContributor;(Map);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.quartz;QuartzEndpointAutoConfiguration;true;quartzEndpoint;(Scheduler);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.quartz;QuartzEndpointAutoConfiguration;true;quartzEndpointWebExtension;(QuartzEndpoint);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.redis;RedisHealthContributorAutoConfiguration;true;redisHealthContributor;(Map);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.security.reactive;EndpointRequest$EndpointServerWebExchangeMatcher;false;excluding;(Class[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.security.reactive;EndpointRequest$EndpointServerWebExchangeMatcher;false;excluding;(String[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.security.reactive;EndpointRequest;false;to;(Class[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.security.reactive;EndpointRequest;false;to;(String[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.security.servlet;EndpointRequest$EndpointRequestMatcher;false;excluding;(Class[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.security.servlet;EndpointRequest$EndpointRequestMatcher;false;excluding;(String[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.security.servlet;EndpointRequest;false;to;(Class[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.security.servlet;EndpointRequest;false;to;(String[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.session;SessionsEndpointAutoConfiguration;true;sessionEndpoint;(FindByIndexNameSessionRepository);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.solr;SolrHealthContributorAutoConfiguration;true;solrHealthContributor;(Map);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.startup;StartupEndpointAutoConfiguration;true;startupEndpoint;(BufferingApplicationStartup);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.system;DiskSpaceHealthIndicatorProperties;true;getPath;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.system;DiskSpaceHealthIndicatorProperties;true;getThreshold;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.system;DiskSpaceHealthIndicatorProperties;true;setPath;(File);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.system;DiskSpaceHealthIndicatorProperties;true;setThreshold;(DataSize);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.trace.http;HttpTraceEndpointAutoConfiguration;true;httpTraceEndpoint;(HttpTraceRepository);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.trace.http;HttpTraceProperties;true;getInclude;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.trace.http;HttpTraceProperties;true;setInclude;(Set);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.web.mappings;MappingsEndpointAutoConfiguration;true;mappingsEndpoint;(ApplicationContext,ObjectProvider);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.web.reactive;ReactiveManagementChildContextConfiguration;true;reactiveManagementWebServerFactoryCustomizer;(ListableBeanFactory);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.web.server;ManagementServerProperties;true;getAddress;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.web.server;ManagementServerProperties;true;getBasePath;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.web.server;ManagementServerProperties;true;getSsl;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.autoconfigure.web.server;ManagementServerProperties;true;setAddress;(InetAddress);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.web.server;ManagementServerProperties;true;setBasePath;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.web.server;ManagementServerProperties;true;setSsl;(Ssl);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.web.servlet;ManagementErrorEndpoint;true;ManagementErrorEndpoint;(ErrorAttributes,ErrorProperties);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.web.servlet;ManagementErrorEndpoint;true;ManagementErrorEndpoint;(ErrorAttributes,ErrorProperties);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.autoconfigure.web;ManagementContextFactory;true;createManagementContext;(ApplicationContext,Class[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.boot.actuate.availability;AvailabilityStateHealthIndicator;true;AvailabilityStateHealthIndicator;(ApplicationAvailability,Class,Consumer);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.availability;LivenessStateHealthIndicator;true;LivenessStateHealthIndicator;(ApplicationAvailability);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.availability;ReadinessStateHealthIndicator;true;ReadinessStateHealthIndicator;(ApplicationAvailability);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.beans;BeansEndpoint$ApplicationBeans;false;getContexts;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.beans;BeansEndpoint$BeanDescriptor;false;getAliases;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.beans;BeansEndpoint$BeanDescriptor;false;getDependencies;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.beans;BeansEndpoint$BeanDescriptor;false;getResource;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.beans;BeansEndpoint$BeanDescriptor;false;getScope;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.beans;BeansEndpoint$ContextBeans;false;getBeans;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.beans;BeansEndpoint$ContextBeans;false;getParentId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.beans;BeansEndpoint;true;BeansEndpoint;(ConfigurableApplicationContext);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.cache;CachesEndpoint$CacheDescriptor;true;CacheDescriptor;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.cache;CachesEndpoint$CacheDescriptor;true;getTarget;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.cache;CachesEndpoint$CacheEntry;false;CacheEntry;(Cache,String);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.cache;CachesEndpoint$CacheEntry;false;getCacheManager;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.cache;CachesEndpoint$CacheEntry;false;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.cache;CachesEndpoint$CacheManagerDescriptor;false;CacheManagerDescriptor;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.cache;CachesEndpoint$CacheManagerDescriptor;false;getCaches;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.cache;CachesEndpoint$CachesReport;false;CachesReport;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.cache;CachesEndpoint$CachesReport;false;getCacheManagers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.cache;CachesEndpoint;true;CachesEndpoint;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.cache;CachesEndpointWebExtension;true;CachesEndpointWebExtension;(CachesEndpoint);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.cache;NonUniqueCacheException;true;NonUniqueCacheException;(String,Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.cache;NonUniqueCacheException;true;NonUniqueCacheException;(String,Collection);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.cache;NonUniqueCacheException;true;getCacheManagerNames;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.cache;NonUniqueCacheException;true;getCacheName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.cassandra;CassandraDriverHealthIndicator;true;CassandraDriverHealthIndicator;(CqlSession);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.cassandra;CassandraDriverReactiveHealthIndicator;true;CassandraDriverReactiveHealthIndicator;(CqlSession);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.context.properties;ConfigurationPropertiesReportEndpoint$ApplicationConfigurationProperties;false;getContexts;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.context.properties;ConfigurationPropertiesReportEndpoint$ConfigurationPropertiesBeanDescriptor;false;getInputs;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.context.properties;ConfigurationPropertiesReportEndpoint$ConfigurationPropertiesBeanDescriptor;false;getPrefix;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.context.properties;ConfigurationPropertiesReportEndpoint$ConfigurationPropertiesBeanDescriptor;false;getProperties;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.context.properties;ConfigurationPropertiesReportEndpoint$ContextConfigurationProperties;false;getBeans;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.context.properties;ConfigurationPropertiesReportEndpoint$ContextConfigurationProperties;false;getParentId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.context.properties;ConfigurationPropertiesReportEndpointWebExtension;true;ConfigurationPropertiesReportEndpointWebExtension;(ConfigurationPropertiesReportEndpoint);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.couchbase;CouchbaseHealthIndicator;true;CouchbaseHealthIndicator;(Cluster);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.couchbase;CouchbaseReactiveHealthIndicator;true;CouchbaseReactiveHealthIndicator;(Cluster);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.elasticsearch;ElasticsearchReactiveHealthIndicator;true;ElasticsearchReactiveHealthIndicator;(ReactiveElasticsearchClient);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.elasticsearch;ElasticsearchRestHealthIndicator;true;ElasticsearchRestHealthIndicator;(RestClient);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.annotation;AbstractDiscoveredEndpoint;true;AbstractDiscoveredEndpoint;(EndpointDiscoverer,Object,EndpointId,boolean,Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.annotation;AbstractDiscoveredEndpoint;true;AbstractDiscoveredEndpoint;(EndpointDiscoverer,Object,EndpointId,boolean,Collection);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.annotation;AbstractDiscoveredEndpoint;true;AbstractDiscoveredEndpoint;(EndpointDiscoverer,Object,EndpointId,boolean,Collection);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.annotation;AbstractDiscoveredEndpoint;true;AbstractDiscoveredEndpoint;(EndpointDiscoverer,Object,EndpointId,boolean,Collection);;Argument[4];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.annotation;AbstractDiscoveredOperation;true;AbstractDiscoveredOperation;(DiscoveredOperationMethod,OperationInvoker);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.annotation;AbstractDiscoveredOperation;true;AbstractDiscoveredOperation;(DiscoveredOperationMethod,OperationInvoker);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.annotation;AbstractDiscoveredOperation;true;getOperationMethod;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.endpoint.annotation;DiscoveredOperationMethod;true;DiscoveredOperationMethod;(Method,OperationType,AnnotationAttributes);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.annotation;DiscoveredOperationMethod;true;getProducesMediaTypes;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.endpoint.annotation;EndpointDiscoverer;true;EndpointDiscoverer;(ApplicationContext,ParameterValueMapper,Collection,Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.annotation;EndpointDiscoverer;true;EndpointDiscoverer;(ApplicationContext,ParameterValueMapper,Collection,Collection);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.annotation;EndpointDiscoverer;true;EndpointDiscoverer;(ApplicationContext,ParameterValueMapper,Collection,Collection);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.annotation;EndpointDiscoverer;true;EndpointDiscoverer;(ApplicationContext,ParameterValueMapper,Collection,Collection);;Argument[3];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.invoke.convert;ConversionServiceParameterValueMapper;true;ConversionServiceParameterValueMapper;(ConversionService);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.invoke.reflect;OperationMethod;true;OperationMethod;(Method,OperationType);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.invoke.reflect;OperationMethod;true;getMethod;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.endpoint.invoke.reflect;OperationMethod;true;getParameters;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.endpoint.invoke.reflect;OperationMethod;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.endpoint.invoke.reflect;ReflectiveOperationInvoker;true;ReflectiveOperationInvoker;(Object,OperationMethod,ParameterValueMapper);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.invoke.reflect;ReflectiveOperationInvoker;true;ReflectiveOperationInvoker;(Object,OperationMethod,ParameterValueMapper);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.invoke.reflect;ReflectiveOperationInvoker;true;ReflectiveOperationInvoker;(Object,OperationMethod,ParameterValueMapper);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.invoke;MissingParametersException;false;MissingParametersException;(Set);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.invoke;MissingParametersException;false;getMissingParameters;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.endpoint.invoke;OperationInvoker;true;invoke;(InvocationContext);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.endpoint.invoke;OperationInvokerAdvisor;true;apply;(EndpointId,OperationType,OperationParameters,OperationInvoker);;Argument[3];ReturnValue;taint",
        "org.springframework.boot.actuate.endpoint.invoke;OperationParameter;true;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.endpoint.invoke;OperationParameters;true;get;(int);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.endpoint.invoke;OperationParameters;true;stream;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.endpoint.invoke;ParameterMappingException;false;ParameterMappingException;(OperationParameter,Object,Throwable);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.invoke;ParameterMappingException;false;ParameterMappingException;(OperationParameter,Object,Throwable);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.invoke;ParameterMappingException;false;getParameter;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.endpoint.invoke;ParameterMappingException;false;getValue;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.endpoint.invoke;ParameterValueMapper;true;mapParameterValue;(OperationParameter,Object);;Argument[1];ReturnValue;taint",
        "org.springframework.boot.actuate.endpoint.invoker.cache;CachingOperationInvokerAdvisor;true;CachingOperationInvokerAdvisor;(Function);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.jmx.annotation;JmxEndpointDiscoverer;true;JmxEndpointDiscoverer;(ApplicationContext,ParameterValueMapper,Collection,Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.jmx.annotation;JmxEndpointDiscoverer;true;JmxEndpointDiscoverer;(ApplicationContext,ParameterValueMapper,Collection,Collection);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.jmx.annotation;JmxEndpointDiscoverer;true;JmxEndpointDiscoverer;(ApplicationContext,ParameterValueMapper,Collection,Collection);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.jmx.annotation;JmxEndpointDiscoverer;true;JmxEndpointDiscoverer;(ApplicationContext,ParameterValueMapper,Collection,Collection);;Argument[3];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.jmx;JacksonJmxOperationResponseMapper;true;JacksonJmxOperationResponseMapper;(ObjectMapper);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.jmx;JmxEndpointExporter;true;JmxEndpointExporter;(MBeanServer,EndpointObjectNameFactory,JmxOperationResponseMapper,Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.jmx;JmxEndpointExporter;true;JmxEndpointExporter;(MBeanServer,EndpointObjectNameFactory,JmxOperationResponseMapper,Collection);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.jmx;JmxEndpointExporter;true;JmxEndpointExporter;(MBeanServer,EndpointObjectNameFactory,JmxOperationResponseMapper,Collection);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.jmx;JmxEndpointExporter;true;JmxEndpointExporter;(MBeanServer,EndpointObjectNameFactory,JmxOperationResponseMapper,Collection);;Argument[3];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.jmx;JmxOperation;true;getDescription;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.endpoint.jmx;JmxOperation;true;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.endpoint.jmx;JmxOperation;true;getParameters;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.endpoint.jmx;JmxOperationParameter;true;getDescription;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.endpoint.jmx;JmxOperationParameter;true;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.endpoint.jmx;JmxOperationResponseMapper;true;mapResponse;(Object);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.endpoint.web.annotation;ControllerEndpointDiscoverer;true;ControllerEndpointDiscoverer;(ApplicationContext,List,Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.web.annotation;ControllerEndpointDiscoverer;true;ControllerEndpointDiscoverer;(ApplicationContext,List,Collection);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.web.annotation;ControllerEndpointDiscoverer;true;ControllerEndpointDiscoverer;(ApplicationContext,List,Collection);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.web.annotation;ExposableControllerEndpoint;true;getController;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.endpoint.web.annotation;ServletEndpointDiscoverer;true;ServletEndpointDiscoverer;(ApplicationContext,List,Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.web.annotation;ServletEndpointDiscoverer;true;ServletEndpointDiscoverer;(ApplicationContext,List,Collection);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.web.annotation;ServletEndpointDiscoverer;true;ServletEndpointDiscoverer;(ApplicationContext,List,Collection);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.web.annotation;WebEndpointDiscoverer;true;WebEndpointDiscoverer;(ApplicationContext,ParameterValueMapper,EndpointMediaTypes,List,Collection,Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.web.annotation;WebEndpointDiscoverer;true;WebEndpointDiscoverer;(ApplicationContext,ParameterValueMapper,EndpointMediaTypes,List,Collection,Collection);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.web.annotation;WebEndpointDiscoverer;true;WebEndpointDiscoverer;(ApplicationContext,ParameterValueMapper,EndpointMediaTypes,List,Collection,Collection);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.web.annotation;WebEndpointDiscoverer;true;WebEndpointDiscoverer;(ApplicationContext,ParameterValueMapper,EndpointMediaTypes,List,Collection,Collection);;Argument[3];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.web.annotation;WebEndpointDiscoverer;true;WebEndpointDiscoverer;(ApplicationContext,ParameterValueMapper,EndpointMediaTypes,List,Collection,Collection);;Argument[4];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.web.annotation;WebEndpointDiscoverer;true;WebEndpointDiscoverer;(ApplicationContext,ParameterValueMapper,EndpointMediaTypes,List,Collection,Collection);;Argument[5];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.web.jersey;JerseyHealthEndpointAdditionalPathResourceFactory;true;JerseyHealthEndpointAdditionalPathResourceFactory;(WebServerNamespace,HealthEndpointGroups);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.web.reactive;AbstractWebFluxEndpointHandlerMapping;true;AbstractWebFluxEndpointHandlerMapping;(EndpointMapping,Collection,EndpointMediaTypes,CorsConfiguration,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.web.reactive;AbstractWebFluxEndpointHandlerMapping;true;AbstractWebFluxEndpointHandlerMapping;(EndpointMapping,Collection,EndpointMediaTypes,CorsConfiguration,boolean);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.web.reactive;AbstractWebFluxEndpointHandlerMapping;true;AbstractWebFluxEndpointHandlerMapping;(EndpointMapping,Collection,EndpointMediaTypes,CorsConfiguration,boolean);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.web.reactive;AbstractWebFluxEndpointHandlerMapping;true;AbstractWebFluxEndpointHandlerMapping;(EndpointMapping,Collection,EndpointMediaTypes,CorsConfiguration,boolean);;Argument[3];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.web.reactive;AbstractWebFluxEndpointHandlerMapping;true;getEndpoints;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.endpoint.web.reactive;AdditionalHealthEndpointPathsWebFluxHandlerMapping;true;AdditionalHealthEndpointPathsWebFluxHandlerMapping;(EndpointMapping,ExposableWebEndpoint,Set);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.web.reactive;AdditionalHealthEndpointPathsWebFluxHandlerMapping;true;AdditionalHealthEndpointPathsWebFluxHandlerMapping;(EndpointMapping,ExposableWebEndpoint,Set);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.web.reactive;AdditionalHealthEndpointPathsWebFluxHandlerMapping;true;AdditionalHealthEndpointPathsWebFluxHandlerMapping;(EndpointMapping,ExposableWebEndpoint,Set);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.web.reactive;ControllerEndpointHandlerMapping;true;ControllerEndpointHandlerMapping;(EndpointMapping,Collection,CorsConfiguration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.web.reactive;ControllerEndpointHandlerMapping;true;ControllerEndpointHandlerMapping;(EndpointMapping,Collection,CorsConfiguration);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.web.reactive;WebFluxEndpointHandlerMapping;true;WebFluxEndpointHandlerMapping;(EndpointMapping,Collection,EndpointMediaTypes,CorsConfiguration,EndpointLinksResolver,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.web.reactive;WebFluxEndpointHandlerMapping;true;WebFluxEndpointHandlerMapping;(EndpointMapping,Collection,EndpointMediaTypes,CorsConfiguration,EndpointLinksResolver,boolean);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.web.reactive;WebFluxEndpointHandlerMapping;true;WebFluxEndpointHandlerMapping;(EndpointMapping,Collection,EndpointMediaTypes,CorsConfiguration,EndpointLinksResolver,boolean);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.web.reactive;WebFluxEndpointHandlerMapping;true;WebFluxEndpointHandlerMapping;(EndpointMapping,Collection,EndpointMediaTypes,CorsConfiguration,EndpointLinksResolver,boolean);;Argument[3];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.web.reactive;WebFluxEndpointHandlerMapping;true;WebFluxEndpointHandlerMapping;(EndpointMapping,Collection,EndpointMediaTypes,CorsConfiguration,EndpointLinksResolver,boolean);;Argument[4];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.web.servlet;AbstractWebMvcEndpointHandlerMapping;true;AbstractWebMvcEndpointHandlerMapping;(EndpointMapping,Collection,EndpointMediaTypes,CorsConfiguration,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.web.servlet;AbstractWebMvcEndpointHandlerMapping;true;AbstractWebMvcEndpointHandlerMapping;(EndpointMapping,Collection,EndpointMediaTypes,CorsConfiguration,boolean);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.web.servlet;AbstractWebMvcEndpointHandlerMapping;true;AbstractWebMvcEndpointHandlerMapping;(EndpointMapping,Collection,EndpointMediaTypes,CorsConfiguration,boolean);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.web.servlet;AbstractWebMvcEndpointHandlerMapping;true;AbstractWebMvcEndpointHandlerMapping;(EndpointMapping,Collection,EndpointMediaTypes,CorsConfiguration,boolean);;Argument[3];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.web.servlet;AbstractWebMvcEndpointHandlerMapping;true;AbstractWebMvcEndpointHandlerMapping;(EndpointMapping,Collection,EndpointMediaTypes,CorsConfiguration,boolean,PathPatternParser);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.web.servlet;AbstractWebMvcEndpointHandlerMapping;true;AbstractWebMvcEndpointHandlerMapping;(EndpointMapping,Collection,EndpointMediaTypes,CorsConfiguration,boolean,PathPatternParser);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.web.servlet;AbstractWebMvcEndpointHandlerMapping;true;AbstractWebMvcEndpointHandlerMapping;(EndpointMapping,Collection,EndpointMediaTypes,CorsConfiguration,boolean,PathPatternParser);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.web.servlet;AbstractWebMvcEndpointHandlerMapping;true;AbstractWebMvcEndpointHandlerMapping;(EndpointMapping,Collection,EndpointMediaTypes,CorsConfiguration,boolean,PathPatternParser);;Argument[3];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.web.servlet;AbstractWebMvcEndpointHandlerMapping;true;AbstractWebMvcEndpointHandlerMapping;(EndpointMapping,Collection,EndpointMediaTypes,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.web.servlet;AbstractWebMvcEndpointHandlerMapping;true;AbstractWebMvcEndpointHandlerMapping;(EndpointMapping,Collection,EndpointMediaTypes,boolean);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.web.servlet;AbstractWebMvcEndpointHandlerMapping;true;AbstractWebMvcEndpointHandlerMapping;(EndpointMapping,Collection,EndpointMediaTypes,boolean);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.web.servlet;AbstractWebMvcEndpointHandlerMapping;true;getEndpoints;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.endpoint.web.servlet;AdditionalHealthEndpointPathsWebMvcHandlerMapping;true;AdditionalHealthEndpointPathsWebMvcHandlerMapping;(ExposableWebEndpoint,Set);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.web.servlet;AdditionalHealthEndpointPathsWebMvcHandlerMapping;true;AdditionalHealthEndpointPathsWebMvcHandlerMapping;(ExposableWebEndpoint,Set);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.web.servlet;ControllerEndpointHandlerMapping;true;ControllerEndpointHandlerMapping;(EndpointMapping,Collection,CorsConfiguration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.web.servlet;ControllerEndpointHandlerMapping;true;ControllerEndpointHandlerMapping;(EndpointMapping,Collection,CorsConfiguration);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.web.servlet;WebMvcEndpointHandlerMapping;true;WebMvcEndpointHandlerMapping;(EndpointMapping,Collection,EndpointMediaTypes,CorsConfiguration,EndpointLinksResolver,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.web.servlet;WebMvcEndpointHandlerMapping;true;WebMvcEndpointHandlerMapping;(EndpointMapping,Collection,EndpointMediaTypes,CorsConfiguration,EndpointLinksResolver,boolean);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.web.servlet;WebMvcEndpointHandlerMapping;true;WebMvcEndpointHandlerMapping;(EndpointMapping,Collection,EndpointMediaTypes,CorsConfiguration,EndpointLinksResolver,boolean);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.web.servlet;WebMvcEndpointHandlerMapping;true;WebMvcEndpointHandlerMapping;(EndpointMapping,Collection,EndpointMediaTypes,CorsConfiguration,EndpointLinksResolver,boolean);;Argument[3];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.web.servlet;WebMvcEndpointHandlerMapping;true;WebMvcEndpointHandlerMapping;(EndpointMapping,Collection,EndpointMediaTypes,CorsConfiguration,EndpointLinksResolver,boolean);;Argument[4];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.web.servlet;WebMvcEndpointHandlerMapping;true;WebMvcEndpointHandlerMapping;(EndpointMapping,Collection,EndpointMediaTypes,CorsConfiguration,EndpointLinksResolver,boolean,PathPatternParser);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.web.servlet;WebMvcEndpointHandlerMapping;true;WebMvcEndpointHandlerMapping;(EndpointMapping,Collection,EndpointMediaTypes,CorsConfiguration,EndpointLinksResolver,boolean,PathPatternParser);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.web.servlet;WebMvcEndpointHandlerMapping;true;WebMvcEndpointHandlerMapping;(EndpointMapping,Collection,EndpointMediaTypes,CorsConfiguration,EndpointLinksResolver,boolean,PathPatternParser);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.web.servlet;WebMvcEndpointHandlerMapping;true;WebMvcEndpointHandlerMapping;(EndpointMapping,Collection,EndpointMediaTypes,CorsConfiguration,EndpointLinksResolver,boolean,PathPatternParser);;Argument[3];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.web.servlet;WebMvcEndpointHandlerMapping;true;WebMvcEndpointHandlerMapping;(EndpointMapping,Collection,EndpointMediaTypes,CorsConfiguration,EndpointLinksResolver,boolean,PathPatternParser);;Argument[4];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.web;EndpointLinksResolver;true;EndpointLinksResolver;(Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.web;EndpointLinksResolver;true;EndpointLinksResolver;(Collection,String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.web;EndpointLinksResolver;true;resolveLinks;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.endpoint.web;EndpointLinksResolver;true;resolveLinks;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.endpoint.web;EndpointMapping;true;EndpointMapping;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.web;EndpointMapping;true;createSubPath;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.endpoint.web;EndpointMapping;true;createSubPath;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.endpoint.web;EndpointMapping;true;getPath;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.endpoint.web;EndpointMediaTypes;true;EndpointMediaTypes;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.web;EndpointMediaTypes;true;EndpointMediaTypes;(List,List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.web;EndpointMediaTypes;true;EndpointMediaTypes;(List,List);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.web;EndpointMediaTypes;true;EndpointMediaTypes;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.web;EndpointMediaTypes;true;getConsumed;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.endpoint.web;EndpointMediaTypes;true;getProduced;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.endpoint.web;EndpointServlet;false;EndpointServlet;(Servlet);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.web;EndpointServlet;false;withInitParameter;(String,String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.endpoint.web;EndpointServlet;false;withInitParameter;(String,String);;Argument[1];ReturnValue;taint",
        "org.springframework.boot.actuate.endpoint.web;EndpointServlet;false;withInitParameters;(Map);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.endpoint.web;ExposableServletEndpoint;true;getEndpointServlet;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.endpoint.web;Link;true;Link;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.web;Link;true;getHref;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.endpoint.web;PathMappedEndpoint;true;getRootPath;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.endpoint.web;PathMappedEndpoints;true;PathMappedEndpoints;(String,Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.web;PathMappedEndpoints;true;PathMappedEndpoints;(String,EndpointsSupplier);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.web;PathMappedEndpoints;true;getBasePath;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.endpoint.web;PathMappedEndpoints;true;getEndpoint;(EndpointId);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.endpoint.web;PathMappedEndpoints;true;getPath;(EndpointId);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.endpoint.web;PathMappedEndpoints;true;getRootPath;(EndpointId);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.endpoint.web;PathMappedEndpoints;true;stream;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.endpoint.web;PathMapper;true;getRootPath;(EndpointId);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.endpoint.web;ServletEndpointRegistrar;true;ServletEndpointRegistrar;(String,Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.web;ServletEndpointRegistrar;true;ServletEndpointRegistrar;(String,Collection);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.web;WebEndpointResponse;false;WebEndpointResponse;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.web;WebEndpointResponse;false;WebEndpointResponse;(Object,MimeType);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.web;WebEndpointResponse;false;WebEndpointResponse;(Object,MimeType);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.web;WebEndpointResponse;false;WebEndpointResponse;(Object,Producible);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.web;WebEndpointResponse;false;WebEndpointResponse;(Object,int);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.web;WebEndpointResponse;false;WebEndpointResponse;(Object,int,MimeType);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.web;WebEndpointResponse;false;WebEndpointResponse;(Object,int,MimeType);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.web;WebEndpointResponse;false;getBody;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.endpoint.web;WebEndpointResponse;false;getContentType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.endpoint.web;WebOperation;true;getId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.endpoint.web;WebOperation;true;getRequestPredicate;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.endpoint.web;WebOperationRequestPredicate;false;WebOperationRequestPredicate;(String,WebEndpointHttpMethod,Collection,Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.web;WebOperationRequestPredicate;false;WebOperationRequestPredicate;(String,WebEndpointHttpMethod,Collection,Collection);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.web;WebOperationRequestPredicate;false;WebOperationRequestPredicate;(String,WebEndpointHttpMethod,Collection,Collection);;Argument[3];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint.web;WebOperationRequestPredicate;false;getConsumes;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.endpoint.web;WebOperationRequestPredicate;false;getMatchAllRemainingPathSegmentsVariable;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.endpoint.web;WebOperationRequestPredicate;false;getPath;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.endpoint.web;WebOperationRequestPredicate;false;getProduces;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.endpoint.web;WebOperationRequestPredicate;false;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.endpoint.web;WebServerNamespace;false;from;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.endpoint.web;WebServerNamespace;false;getValue;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.endpoint;AbstractExposableEndpoint;true;AbstractExposableEndpoint;(EndpointId,boolean,Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint;AbstractExposableEndpoint;true;AbstractExposableEndpoint;(EndpointId,boolean,Collection);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint;EndpointId;false;of;(Environment,String);;Argument[1];ReturnValue;taint",
        "org.springframework.boot.actuate.endpoint;EndpointId;false;of;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.endpoint;EndpointId;false;toLowerCaseString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.endpoint;EndpointId;false;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.endpoint;InvalidEndpointRequestException;true;InvalidEndpointRequestException;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint;InvalidEndpointRequestException;true;InvalidEndpointRequestException;(String,String,Throwable);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint;InvalidEndpointRequestException;true;getReason;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.endpoint;InvocationContext;true;InvocationContext;(ApiVersion,SecurityContext,Map);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint;InvocationContext;true;InvocationContext;(SecurityContext,Map);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint;InvocationContext;true;InvocationContext;(SecurityContext,Map,OperationArgumentResolver[]);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint;InvocationContext;true;InvocationContext;(SecurityContext,Map,OperationArgumentResolver[]);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint;InvocationContext;true;getArguments;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.endpoint;Operation;true;invoke;(InvocationContext);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.endpoint;ProducibleOperationArgumentResolver;true;ProducibleOperationArgumentResolver;(Supplier);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint;SanitizableData;false;SanitizableData;(PropertySource,String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint;SanitizableData;false;SanitizableData;(PropertySource,String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint;SanitizableData;false;SanitizableData;(PropertySource,String,Object);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.actuate.endpoint;SanitizableData;false;getKey;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.endpoint;SanitizableData;false;getPropertySource;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.endpoint;SanitizableData;false;getValue;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.endpoint;SanitizableData;false;withValue;(Object);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.endpoint;Sanitizer;true;sanitize;(String,Object);;Argument[1];ReturnValue;taint",
        "org.springframework.boot.actuate.endpoint;SecurityContext;true;getPrincipal;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.env;EnvironmentEndpoint$EnvironmentDescriptor;false;getActiveProfiles;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.env;EnvironmentEndpoint$EnvironmentDescriptor;false;getPropertySources;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.env;EnvironmentEndpoint$EnvironmentEntryDescriptor;false;getActiveProfiles;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.env;EnvironmentEndpoint$EnvironmentEntryDescriptor;false;getProperty;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.env;EnvironmentEndpoint$EnvironmentEntryDescriptor;false;getPropertySources;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.env;EnvironmentEndpoint$PropertySourceDescriptor;false;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.env;EnvironmentEndpoint$PropertySourceDescriptor;false;getProperties;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.env;EnvironmentEndpoint$PropertySourceEntryDescriptor;false;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.env;EnvironmentEndpoint$PropertySourceEntryDescriptor;false;getProperty;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.env;EnvironmentEndpoint$PropertySummaryDescriptor;false;PropertySummaryDescriptor;(String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.env;EnvironmentEndpoint$PropertySummaryDescriptor;false;PropertySummaryDescriptor;(String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.env;EnvironmentEndpoint$PropertySummaryDescriptor;false;getSource;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.env;EnvironmentEndpoint$PropertySummaryDescriptor;false;getValue;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.env;EnvironmentEndpoint$PropertyValueDescriptor;false;getOrigin;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.env;EnvironmentEndpoint$PropertyValueDescriptor;false;getOriginParents;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.env;EnvironmentEndpoint$PropertyValueDescriptor;false;getValue;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.env;EnvironmentEndpoint;true;EnvironmentEndpoint;(Environment);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.env;EnvironmentEndpoint;true;EnvironmentEndpoint;(Environment,Iterable);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.env;EnvironmentEndpoint;true;sanitize;(String,Object);;Argument[1];ReturnValue;taint",
        "org.springframework.boot.actuate.env;EnvironmentEndpointWebExtension;true;EnvironmentEndpointWebExtension;(EnvironmentEndpoint);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.flyway;FlywayEndpoint$ApplicationFlywayBeans;false;getContexts;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.flyway;FlywayEndpoint$ContextFlywayBeans;false;getFlywayBeans;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.flyway;FlywayEndpoint$ContextFlywayBeans;false;getParentId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.flyway;FlywayEndpoint$FlywayDescriptor;true;FlywayDescriptor;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.flyway;FlywayEndpoint$FlywayDescriptor;true;getMigrations;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.flyway;FlywayEndpoint$FlywayMigration;false;getDescription;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.flyway;FlywayEndpoint$FlywayMigration;false;getInstalledBy;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.flyway;FlywayEndpoint$FlywayMigration;false;getInstalledOn;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.flyway;FlywayEndpoint$FlywayMigration;false;getScript;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.flyway;FlywayEndpoint$FlywayMigration;false;getVersion;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.flyway;FlywayEndpoint;true;FlywayEndpoint;(ApplicationContext);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.hazelcast;HazelcastHealthIndicator;true;HazelcastHealthIndicator;(HazelcastInstance);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.health;AdditionalHealthEndpointPath;false;from;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.health;AdditionalHealthEndpointPath;false;getNamespace;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.health;AdditionalHealthEndpointPath;false;getValue;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.health;AdditionalHealthEndpointPath;false;of;(WebServerNamespace,String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.health;AdditionalHealthEndpointPath;false;of;(WebServerNamespace,String);;Argument[1];ReturnValue;taint",
        "org.springframework.boot.actuate.health;AdditionalHealthEndpointPath;false;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.health;CompositeHealth;true;getComponents;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.health;CompositeHealth;true;getDetails;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.health;CompositeHealthContributor;true;fromMap;(Map);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.health;CompositeHealthContributor;true;fromMap;(Map,Function);;Argument[1];ReturnValue;taint",
        "org.springframework.boot.actuate.health;CompositeHealthContributor;true;fromMap;(Map,Function);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.health;CompositeReactiveHealthContributor;true;fromMap;(Map);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.health;CompositeReactiveHealthContributor;true;fromMap;(Map,Function);;Argument[1];ReturnValue;taint",
        "org.springframework.boot.actuate.health;CompositeReactiveHealthContributor;true;fromMap;(Map,Function);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.health;DefaultHealthContributorRegistry;true;DefaultHealthContributorRegistry;(Map,Function);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.health;DefaultReactiveHealthContributorRegistry;true;DefaultReactiveHealthContributorRegistry;(Map,Function);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.health;Health$Builder;true;Builder;(Status);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.health;Health$Builder;true;Builder;(Status,Map);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.health;Health$Builder;true;Builder;(Status,Map);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.health;Health$Builder;true;down;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.health;Health$Builder;true;down;(Throwable);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.health;Health$Builder;true;down;(Throwable);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.health;Health$Builder;true;down;(Throwable);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.health;Health$Builder;true;outOfService;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.health;Health$Builder;true;status;(Status);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.actuate.health;Health$Builder;true;status;(Status);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.health;Health$Builder;true;status;(Status);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.health;Health$Builder;true;status;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.health;Health$Builder;true;status;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.health;Health$Builder;true;status;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.health;Health$Builder;true;unknown;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.health;Health$Builder;true;up;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.health;Health$Builder;true;withDetail;(String,Object);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.actuate.health;Health$Builder;true;withDetail;(String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.health;Health$Builder;true;withDetail;(String,Object);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.health;Health$Builder;true;withDetail;(String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.health;Health$Builder;true;withDetail;(String,Object);;Argument[1];ReturnValue;taint",
        "org.springframework.boot.actuate.health;Health$Builder;true;withDetails;(Map);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.actuate.health;Health$Builder;true;withDetails;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.health;Health$Builder;true;withDetails;(Map);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.health;Health$Builder;true;withException;(Throwable);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.health;Health$Builder;true;withException;(Throwable);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.health;Health$Builder;true;withException;(Throwable);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.health;Health;false;down;(Exception);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.health;Health;false;getDetails;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.health;Health;false;status;(Status);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.health;Health;false;status;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.health;Health;false;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.health;HealthComponent;true;getStatus;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.health;HealthEndpoint;true;HealthEndpoint;(HealthContributorRegistry,HealthEndpointGroups);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.health;HealthEndpoint;true;HealthEndpoint;(HealthContributorRegistry,HealthEndpointGroups);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.health;HealthEndpointGroup;true;getAdditionalPath;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.health;HealthEndpointGroup;true;getHttpCodeStatusMapper;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.health;HealthEndpointGroup;true;getStatusAggregator;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.health;HealthEndpointGroups;true;get;(AdditionalHealthEndpointPath);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.health;HealthEndpointGroups;true;get;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.health;HealthEndpointGroups;true;getNames;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.health;HealthEndpointGroups;true;getPrimary;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.health;HealthEndpointGroupsPostProcessor;true;postProcessHealthEndpointGroups;(HealthEndpointGroups);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.health;HealthEndpointWebExtension;true;HealthEndpointWebExtension;(HealthContributorRegistry,HealthEndpointGroups);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.health;HealthEndpointWebExtension;true;HealthEndpointWebExtension;(HealthContributorRegistry,HealthEndpointGroups);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.health;ReactiveHealthContributor;true;adapt;(HealthContributor);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.health;ReactiveHealthEndpointWebExtension;true;ReactiveHealthEndpointWebExtension;(ReactiveHealthContributorRegistry,HealthEndpointGroups);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.health;ReactiveHealthEndpointWebExtension;true;ReactiveHealthEndpointWebExtension;(ReactiveHealthContributorRegistry,HealthEndpointGroups);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.health;SimpleHttpCodeStatusMapper;true;SimpleHttpCodeStatusMapper;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.health;Status;false;Status;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.health;Status;false;Status;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.health;Status;false;Status;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.health;Status;false;getCode;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.health;Status;false;getDescription;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.health;Status;false;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.health;StatusAggregator;true;getAggregateStatus;(Set);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.health;StatusAggregator;true;getAggregateStatus;(Status[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.health;SystemHealth;false;getGroups;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.influx;InfluxDbHealthIndicator;true;InfluxDbHealthIndicator;(InfluxDB);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.info;BuildInfoContributor;true;BuildInfoContributor;(BuildProperties);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.info;EnvironmentInfoContributor;true;EnvironmentInfoContributor;(ConfigurableEnvironment);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.info;GitInfoContributor;true;GitInfoContributor;(GitProperties);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.info;GitInfoContributor;true;GitInfoContributor;(GitProperties,Mode);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.info;Info$Builder;true;withDetail;(String,Object);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.actuate.info;Info$Builder;true;withDetail;(String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.info;Info$Builder;true;withDetail;(String,Object);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.info;Info$Builder;true;withDetail;(String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.info;Info$Builder;true;withDetail;(String,Object);;Argument[1];ReturnValue;taint",
        "org.springframework.boot.actuate.info;Info$Builder;true;withDetails;(Map);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.actuate.info;Info$Builder;true;withDetails;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.info;Info$Builder;true;withDetails;(Map);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.info;Info;false;get;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.info;Info;false;get;(String,Class);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.info;Info;false;getDetails;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.info;InfoEndpoint;true;InfoEndpoint;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.info;InfoEndpoint;true;info;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.info;MapInfoContributor;true;MapInfoContributor;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.info;SimpleInfoContributor;true;SimpleInfoContributor;(String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.info;SimpleInfoContributor;true;SimpleInfoContributor;(String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.integration;IntegrationGraphEndpoint;true;IntegrationGraphEndpoint;(IntegrationGraphServer);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.jdbc;DataSourceHealthIndicator;true;DataSourceHealthIndicator;(DataSource);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.jdbc;DataSourceHealthIndicator;true;DataSourceHealthIndicator;(DataSource,String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.jdbc;DataSourceHealthIndicator;true;DataSourceHealthIndicator;(DataSource,String);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.jdbc;DataSourceHealthIndicator;true;getQuery;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.jdbc;DataSourceHealthIndicator;true;setDataSource;(DataSource);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.jdbc;DataSourceHealthIndicator;true;setQuery;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.jms;JmsHealthIndicator;true;JmsHealthIndicator;(ConnectionFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.ldap;LdapHealthIndicator;true;LdapHealthIndicator;(LdapOperations);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.liquibase;LiquibaseEndpoint$ApplicationLiquibaseBeans;false;getContexts;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.liquibase;LiquibaseEndpoint$ChangeSet;true;getAuthor;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.liquibase;LiquibaseEndpoint$ChangeSet;true;getChangeLog;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.liquibase;LiquibaseEndpoint$ChangeSet;true;getChecksum;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.liquibase;LiquibaseEndpoint$ChangeSet;true;getComments;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.liquibase;LiquibaseEndpoint$ChangeSet;true;getContexts;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.liquibase;LiquibaseEndpoint$ChangeSet;true;getDateExecuted;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.liquibase;LiquibaseEndpoint$ChangeSet;true;getDeploymentId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.liquibase;LiquibaseEndpoint$ChangeSet;true;getDescription;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.liquibase;LiquibaseEndpoint$ChangeSet;true;getId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.liquibase;LiquibaseEndpoint$ChangeSet;true;getLabels;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.liquibase;LiquibaseEndpoint$ChangeSet;true;getTag;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.liquibase;LiquibaseEndpoint$ContextExpression;true;ContextExpression;(Set);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.liquibase;LiquibaseEndpoint$ContextExpression;true;getContexts;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.liquibase;LiquibaseEndpoint$ContextLiquibaseBeans;false;getLiquibaseBeans;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.liquibase;LiquibaseEndpoint$ContextLiquibaseBeans;false;getParentId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.liquibase;LiquibaseEndpoint$LiquibaseBean;false;LiquibaseBean;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.liquibase;LiquibaseEndpoint$LiquibaseBean;false;getChangeSets;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.liquibase;LiquibaseEndpoint;true;LiquibaseEndpoint;(ApplicationContext);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.logging;LogFileWebEndpoint;true;LogFileWebEndpoint;(LogFile,File);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.logging;LogFileWebEndpoint;true;LogFileWebEndpoint;(LogFile,File);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.logging;LoggersEndpoint$GroupLoggerLevels;true;GroupLoggerLevels;(LogLevel,List);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.logging;LoggersEndpoint$GroupLoggerLevels;true;getMembers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.logging;LoggersEndpoint$LoggerLevels;true;getConfiguredLevel;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.logging;LoggersEndpoint$SingleLoggerLevels;true;getEffectiveLevel;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.logging;LoggersEndpoint;true;LoggersEndpoint;(LoggingSystem,LoggerGroups);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.logging;LoggersEndpoint;true;LoggersEndpoint;(LoggingSystem,LoggerGroups);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.mail;MailHealthIndicator;true;MailHealthIndicator;(JavaMailSenderImpl);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.management;ThreadDumpEndpoint$ThreadDumpDescriptor;false;getThreads;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.metrics.amqp;RabbitMetrics;true;RabbitMetrics;(ConnectionFactory,Iterable);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.metrics.amqp;RabbitMetrics;true;RabbitMetrics;(ConnectionFactory,Iterable);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.metrics.cache;CacheMetricsRegistrar;true;CacheMetricsRegistrar;(MeterRegistry,Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.metrics.cache;CacheMetricsRegistrar;true;CacheMetricsRegistrar;(MeterRegistry,Collection);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.metrics.cache;RedisCacheMetrics;true;RedisCacheMetrics;(RedisCache,Iterable);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.metrics.data;MetricsRepositoryMethodInvocationListener;true;MetricsRepositoryMethodInvocationListener;(MeterRegistry,RepositoryTagsProvider,String,AutoTimer);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.metrics.data;MetricsRepositoryMethodInvocationListener;true;MetricsRepositoryMethodInvocationListener;(MeterRegistry,RepositoryTagsProvider,String,AutoTimer);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.actuate.metrics.data;MetricsRepositoryMethodInvocationListener;true;MetricsRepositoryMethodInvocationListener;(MeterRegistry,RepositoryTagsProvider,String,AutoTimer);;Argument[3];Argument[-1];taint",
        "org.springframework.boot.actuate.metrics.data;MetricsRepositoryMethodInvocationListener;true;MetricsRepositoryMethodInvocationListener;(Supplier,RepositoryTagsProvider,String,AutoTimer);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.metrics.data;MetricsRepositoryMethodInvocationListener;true;MetricsRepositoryMethodInvocationListener;(Supplier,RepositoryTagsProvider,String,AutoTimer);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.metrics.data;MetricsRepositoryMethodInvocationListener;true;MetricsRepositoryMethodInvocationListener;(Supplier,RepositoryTagsProvider,String,AutoTimer);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.actuate.metrics.data;MetricsRepositoryMethodInvocationListener;true;MetricsRepositoryMethodInvocationListener;(Supplier,RepositoryTagsProvider,String,AutoTimer);;Argument[3];Argument[-1];taint",
        "org.springframework.boot.actuate.metrics.export.prometheus;PrometheusPushGatewayManager;true;PrometheusPushGatewayManager;(PushGateway,CollectorRegistry,Duration,String,Map,ShutdownOperation);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.metrics.export.prometheus;PrometheusPushGatewayManager;true;PrometheusPushGatewayManager;(PushGateway,CollectorRegistry,Duration,String,Map,ShutdownOperation);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.metrics.export.prometheus;PrometheusPushGatewayManager;true;PrometheusPushGatewayManager;(PushGateway,CollectorRegistry,Duration,String,Map,ShutdownOperation);;Argument[3];Argument[-1];taint",
        "org.springframework.boot.actuate.metrics.export.prometheus;PrometheusPushGatewayManager;true;PrometheusPushGatewayManager;(PushGateway,CollectorRegistry,Duration,String,Map,ShutdownOperation);;Argument[4];Argument[-1];taint",
        "org.springframework.boot.actuate.metrics.export.prometheus;PrometheusPushGatewayManager;true;PrometheusPushGatewayManager;(PushGateway,CollectorRegistry,TaskScheduler,Duration,String,Map,ShutdownOperation);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.metrics.export.prometheus;PrometheusPushGatewayManager;true;PrometheusPushGatewayManager;(PushGateway,CollectorRegistry,TaskScheduler,Duration,String,Map,ShutdownOperation);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.metrics.export.prometheus;PrometheusPushGatewayManager;true;PrometheusPushGatewayManager;(PushGateway,CollectorRegistry,TaskScheduler,Duration,String,Map,ShutdownOperation);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.actuate.metrics.export.prometheus;PrometheusPushGatewayManager;true;PrometheusPushGatewayManager;(PushGateway,CollectorRegistry,TaskScheduler,Duration,String,Map,ShutdownOperation);;Argument[4];Argument[-1];taint",
        "org.springframework.boot.actuate.metrics.export.prometheus;PrometheusPushGatewayManager;true;PrometheusPushGatewayManager;(PushGateway,CollectorRegistry,TaskScheduler,Duration,String,Map,ShutdownOperation);;Argument[5];Argument[-1];taint",
        "org.springframework.boot.actuate.metrics.export.prometheus;PrometheusScrapeEndpoint;true;PrometheusScrapeEndpoint;(CollectorRegistry);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.metrics.jdbc;DataSourcePoolMetrics;true;DataSourcePoolMetrics;(DataSource,Collection,String,Iterable);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.metrics.jdbc;DataSourcePoolMetrics;true;DataSourcePoolMetrics;(DataSource,Collection,String,Iterable);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.metrics.jdbc;DataSourcePoolMetrics;true;DataSourcePoolMetrics;(DataSource,DataSourcePoolMetadataProvider,String,Iterable);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.metrics.jdbc;DataSourcePoolMetrics;true;DataSourcePoolMetrics;(DataSource,DataSourcePoolMetadataProvider,String,Iterable);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.metrics.r2dbc;ConnectionPoolMetrics;true;ConnectionPoolMetrics;(ConnectionPool,String,Iterable);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.metrics.startup;StartupTimeMetricsListener;true;StartupTimeMetricsListener;(MeterRegistry);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.metrics.startup;StartupTimeMetricsListener;true;StartupTimeMetricsListener;(MeterRegistry,String,String,Iterable);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.metrics.startup;StartupTimeMetricsListener;true;StartupTimeMetricsListener;(MeterRegistry,String,String,Iterable);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.metrics.startup;StartupTimeMetricsListener;true;StartupTimeMetricsListener;(MeterRegistry,String,String,Iterable);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.actuate.metrics.system;DiskSpaceMetricsBinder;true;DiskSpaceMetricsBinder;(List,Iterable);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.metrics.system;DiskSpaceMetricsBinder;true;DiskSpaceMetricsBinder;(List,Iterable);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.metrics.web.client;MetricsRestTemplateCustomizer;true;MetricsRestTemplateCustomizer;(MeterRegistry,RestTemplateExchangeTagsProvider,String,AutoTimer);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.metrics.web.client;MetricsRestTemplateCustomizer;true;MetricsRestTemplateCustomizer;(MeterRegistry,RestTemplateExchangeTagsProvider,String,AutoTimer);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.metrics.web.client;MetricsRestTemplateCustomizer;true;MetricsRestTemplateCustomizer;(MeterRegistry,RestTemplateExchangeTagsProvider,String,AutoTimer);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.actuate.metrics.web.client;MetricsRestTemplateCustomizer;true;MetricsRestTemplateCustomizer;(MeterRegistry,RestTemplateExchangeTagsProvider,String,AutoTimer);;Argument[3];Argument[-1];taint",
        "org.springframework.boot.actuate.metrics.web.jetty;JettyConnectionMetricsBinder;true;JettyConnectionMetricsBinder;(MeterRegistry);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.metrics.web.jetty;JettyConnectionMetricsBinder;true;JettyConnectionMetricsBinder;(MeterRegistry,Iterable);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.metrics.web.jetty;JettyConnectionMetricsBinder;true;JettyConnectionMetricsBinder;(MeterRegistry,Iterable);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.metrics.web.jetty;JettyServerThreadPoolMetricsBinder;true;JettyServerThreadPoolMetricsBinder;(MeterRegistry);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.metrics.web.jetty;JettyServerThreadPoolMetricsBinder;true;JettyServerThreadPoolMetricsBinder;(MeterRegistry,Iterable);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.metrics.web.jetty;JettyServerThreadPoolMetricsBinder;true;JettyServerThreadPoolMetricsBinder;(MeterRegistry,Iterable);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.metrics.web.jetty;JettySslHandshakeMetricsBinder;true;JettySslHandshakeMetricsBinder;(MeterRegistry);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.metrics.web.jetty;JettySslHandshakeMetricsBinder;true;JettySslHandshakeMetricsBinder;(MeterRegistry,Iterable);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.metrics.web.jetty;JettySslHandshakeMetricsBinder;true;JettySslHandshakeMetricsBinder;(MeterRegistry,Iterable);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.metrics.web.reactive.client;MetricsWebClientCustomizer;true;MetricsWebClientCustomizer;(MeterRegistry,WebClientExchangeTagsProvider,String,AutoTimer);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.metrics.web.reactive.client;MetricsWebClientCustomizer;true;MetricsWebClientCustomizer;(MeterRegistry,WebClientExchangeTagsProvider,String,AutoTimer);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.metrics.web.reactive.client;MetricsWebClientCustomizer;true;MetricsWebClientCustomizer;(MeterRegistry,WebClientExchangeTagsProvider,String,AutoTimer);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.actuate.metrics.web.reactive.client;MetricsWebClientCustomizer;true;MetricsWebClientCustomizer;(MeterRegistry,WebClientExchangeTagsProvider,String,AutoTimer);;Argument[3];Argument[-1];taint",
        "org.springframework.boot.actuate.metrics.web.reactive.client;MetricsWebClientFilterFunction;true;MetricsWebClientFilterFunction;(MeterRegistry,WebClientExchangeTagsProvider,String,AutoTimer);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.metrics.web.reactive.client;MetricsWebClientFilterFunction;true;MetricsWebClientFilterFunction;(MeterRegistry,WebClientExchangeTagsProvider,String,AutoTimer);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.metrics.web.reactive.client;MetricsWebClientFilterFunction;true;MetricsWebClientFilterFunction;(MeterRegistry,WebClientExchangeTagsProvider,String,AutoTimer);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.actuate.metrics.web.reactive.client;MetricsWebClientFilterFunction;true;MetricsWebClientFilterFunction;(MeterRegistry,WebClientExchangeTagsProvider,String,AutoTimer);;Argument[3];Argument[-1];taint",
        "org.springframework.boot.actuate.metrics.web.reactive.server;DefaultWebFluxTagsProvider;true;DefaultWebFluxTagsProvider;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.metrics.web.reactive.server;DefaultWebFluxTagsProvider;true;DefaultWebFluxTagsProvider;(boolean,List);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.metrics.web.reactive.server;MetricsWebFilter;true;MetricsWebFilter;(MeterRegistry,WebFluxTagsProvider,String,AutoTimer);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.metrics.web.reactive.server;MetricsWebFilter;true;MetricsWebFilter;(MeterRegistry,WebFluxTagsProvider,String,AutoTimer);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.metrics.web.reactive.server;MetricsWebFilter;true;MetricsWebFilter;(MeterRegistry,WebFluxTagsProvider,String,AutoTimer);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.actuate.metrics.web.reactive.server;MetricsWebFilter;true;MetricsWebFilter;(MeterRegistry,WebFluxTagsProvider,String,AutoTimer);;Argument[3];Argument[-1];taint",
        "org.springframework.boot.actuate.metrics.web.servlet;DefaultWebMvcTagsProvider;true;DefaultWebMvcTagsProvider;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.metrics.web.servlet;DefaultWebMvcTagsProvider;true;DefaultWebMvcTagsProvider;(boolean,List);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.metrics.web.servlet;LongTaskTimingHandlerInterceptor;true;LongTaskTimingHandlerInterceptor;(MeterRegistry,WebMvcTagsProvider);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.metrics.web.servlet;LongTaskTimingHandlerInterceptor;true;LongTaskTimingHandlerInterceptor;(MeterRegistry,WebMvcTagsProvider);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.metrics.web.servlet;WebMvcMetricsFilter;true;WebMvcMetricsFilter;(MeterRegistry,WebMvcTagsProvider,String,AutoTimer);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.metrics.web.servlet;WebMvcMetricsFilter;true;WebMvcMetricsFilter;(MeterRegistry,WebMvcTagsProvider,String,AutoTimer);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.metrics.web.servlet;WebMvcMetricsFilter;true;WebMvcMetricsFilter;(MeterRegistry,WebMvcTagsProvider,String,AutoTimer);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.actuate.metrics.web.servlet;WebMvcMetricsFilter;true;WebMvcMetricsFilter;(MeterRegistry,WebMvcTagsProvider,String,AutoTimer);;Argument[3];Argument[-1];taint",
        "org.springframework.boot.actuate.metrics.web.tomcat;TomcatMetricsBinder;true;TomcatMetricsBinder;(MeterRegistry);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.metrics.web.tomcat;TomcatMetricsBinder;true;TomcatMetricsBinder;(MeterRegistry,Iterable);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.metrics.web.tomcat;TomcatMetricsBinder;true;TomcatMetricsBinder;(MeterRegistry,Iterable);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.metrics;MetricsEndpoint$AvailableTag;false;getTag;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.metrics;MetricsEndpoint$AvailableTag;false;getValues;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.metrics;MetricsEndpoint$ListNamesResponse;false;getNames;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.metrics;MetricsEndpoint$MetricResponse;false;getAvailableTags;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.metrics;MetricsEndpoint$MetricResponse;false;getBaseUnit;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.metrics;MetricsEndpoint$MetricResponse;false;getDescription;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.metrics;MetricsEndpoint$MetricResponse;false;getMeasurements;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.metrics;MetricsEndpoint$MetricResponse;false;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.metrics;MetricsEndpoint;true;MetricsEndpoint;(MeterRegistry);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.metrics;MetricsEndpoint;true;metric;(String,List);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.mongo;MongoHealthIndicator;true;MongoHealthIndicator;(MongoTemplate);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.mongo;MongoReactiveHealthIndicator;true;MongoReactiveHealthIndicator;(ReactiveMongoTemplate);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.neo4j;Neo4jHealthIndicator;true;Neo4jHealthIndicator;(Driver);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.neo4j;Neo4jReactiveHealthIndicator;false;Neo4jReactiveHealthIndicator;(Driver);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.quartz;QuartzEndpoint$CalendarIntervalTriggerDescription;false;CalendarIntervalTriggerDescription;(CalendarIntervalTrigger);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.quartz;QuartzEndpoint$CronTriggerDescription;false;CronTriggerDescription;(CronTrigger);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.quartz;QuartzEndpoint$CustomTriggerDescription;false;CustomTriggerDescription;(Trigger);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.quartz;QuartzEndpoint$DailyTimeIntervalTriggerDescription;false;DailyTimeIntervalTriggerDescription;(DailyTimeIntervalTrigger);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.quartz;QuartzEndpoint$GroupNames;true;GroupNames;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.quartz;QuartzEndpoint$GroupNames;true;getGroups;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.quartz;QuartzEndpoint$QuartzGroups;true;QuartzGroups;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.quartz;QuartzEndpoint$QuartzGroups;true;getGroups;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.quartz;QuartzEndpoint$QuartzJobDetails;false;getClassName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.quartz;QuartzEndpoint$QuartzJobDetails;false;getData;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.quartz;QuartzEndpoint$QuartzJobDetails;false;getDescription;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.quartz;QuartzEndpoint$QuartzJobDetails;false;getGroup;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.quartz;QuartzEndpoint$QuartzJobDetails;false;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.quartz;QuartzEndpoint$QuartzJobDetails;false;getTriggers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.quartz;QuartzEndpoint$QuartzJobGroupSummary;false;getGroup;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.quartz;QuartzEndpoint$QuartzJobGroupSummary;false;getJobs;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.quartz;QuartzEndpoint$QuartzJobSummary;false;getClassName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.quartz;QuartzEndpoint$QuartzReport;false;getJobs;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.quartz;QuartzEndpoint$QuartzReport;false;getTriggers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.quartz;QuartzEndpoint$QuartzTriggerGroupSummary$Triggers;false;getCalendarInterval;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.quartz;QuartzEndpoint$QuartzTriggerGroupSummary$Triggers;false;getCron;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.quartz;QuartzEndpoint$QuartzTriggerGroupSummary$Triggers;false;getCustom;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.quartz;QuartzEndpoint$QuartzTriggerGroupSummary$Triggers;false;getDailyTimeInterval;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.quartz;QuartzEndpoint$QuartzTriggerGroupSummary$Triggers;false;getSimple;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.quartz;QuartzEndpoint$QuartzTriggerGroupSummary;false;getGroup;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.quartz;QuartzEndpoint$QuartzTriggerGroupSummary;false;getTriggers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.quartz;QuartzEndpoint$SimpleTriggerDescription;false;SimpleTriggerDescription;(SimpleTrigger);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.quartz;QuartzEndpoint$TriggerDescription;true;buildDetails;(TriggerState,Map);;Element of Argument[1];ReturnValue;taint",
        "org.springframework.boot.actuate.quartz;QuartzEndpoint;true;QuartzEndpoint;(Scheduler);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.quartz;QuartzEndpoint;true;QuartzEndpoint;(Scheduler,Sanitizer);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.quartz;QuartzEndpoint;true;QuartzEndpoint;(Scheduler,Sanitizer);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.quartz;QuartzEndpoint;true;quartzJobGroupSummary;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.quartz;QuartzEndpoint;true;quartzTriggerGroupSummary;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.actuate.quartz;QuartzEndpointWebExtension;true;QuartzEndpointWebExtension;(QuartzEndpoint);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.r2dbc;ConnectionFactoryHealthIndicator;true;ConnectionFactoryHealthIndicator;(ConnectionFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.r2dbc;ConnectionFactoryHealthIndicator;true;ConnectionFactoryHealthIndicator;(ConnectionFactory,String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.r2dbc;ConnectionFactoryHealthIndicator;true;ConnectionFactoryHealthIndicator;(ConnectionFactory,String);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.redis;RedisHealthIndicator;true;RedisHealthIndicator;(RedisConnectionFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.redis;RedisReactiveHealthIndicator;true;RedisReactiveHealthIndicator;(ReactiveRedisConnectionFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.scheduling;ScheduledTasksEndpoint$CronTaskDescription;false;getExpression;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.scheduling;ScheduledTasksEndpoint$CustomTriggerTaskDescription;false;getTrigger;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.scheduling;ScheduledTasksEndpoint$RunnableDescription;false;getTarget;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.scheduling;ScheduledTasksEndpoint$ScheduledTasksReport;false;getCron;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.scheduling;ScheduledTasksEndpoint$ScheduledTasksReport;false;getCustom;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.scheduling;ScheduledTasksEndpoint$ScheduledTasksReport;false;getFixedDelay;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.scheduling;ScheduledTasksEndpoint$ScheduledTasksReport;false;getFixedRate;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.scheduling;ScheduledTasksEndpoint$TaskDescription;true;getRunnable;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.scheduling;ScheduledTasksEndpoint;true;ScheduledTasksEndpoint;(Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.session;SessionsEndpoint$SessionDescriptor;false;getAttributeNames;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.session;SessionsEndpoint$SessionDescriptor;false;getCreationTime;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.session;SessionsEndpoint$SessionDescriptor;false;getId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.session;SessionsEndpoint$SessionDescriptor;false;getLastAccessedTime;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.session;SessionsEndpoint$SessionsReport;false;getSessions;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.session;SessionsEndpoint;true;SessionsEndpoint;(FindByIndexNameSessionRepository);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.solr;SolrHealthIndicator;true;SolrHealthIndicator;(SolrClient);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.startup;StartupEndpoint$StartupResponse;false;getSpringBootVersion;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.startup;StartupEndpoint$StartupResponse;false;getTimeline;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.startup;StartupEndpoint;true;StartupEndpoint;(BufferingApplicationStartup);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.system;DiskSpaceHealthIndicator;true;DiskSpaceHealthIndicator;(File,DataSize);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.system;DiskSpaceHealthIndicator;true;DiskSpaceHealthIndicator;(File,DataSize);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.trace.http;HttpExchangeTracer;true;HttpExchangeTracer;(Set);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.trace.http;HttpTrace$Principal;false;Principal;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.trace.http;HttpTrace$Principal;false;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.trace.http;HttpTrace$Request;false;Request;(String,URI,Map,String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.trace.http;HttpTrace$Request;false;Request;(String,URI,Map,String);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.trace.http;HttpTrace$Request;false;Request;(String,URI,Map,String);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.actuate.trace.http;HttpTrace$Request;false;Request;(String,URI,Map,String);;Argument[3];Argument[-1];taint",
        "org.springframework.boot.actuate.trace.http;HttpTrace$Request;false;getHeaders;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.trace.http;HttpTrace$Request;false;getMethod;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.trace.http;HttpTrace$Request;false;getRemoteAddress;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.trace.http;HttpTrace$Request;false;getUri;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.trace.http;HttpTrace$Response;false;Response;(int,Map);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.trace.http;HttpTrace$Response;false;getHeaders;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.trace.http;HttpTrace$Session;false;Session;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.trace.http;HttpTrace$Session;false;getId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.trace.http;HttpTrace;false;HttpTrace;(Request,Response,Instant,Principal,Session,Long);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.trace.http;HttpTrace;false;HttpTrace;(Request,Response,Instant,Principal,Session,Long);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.trace.http;HttpTrace;false;HttpTrace;(Request,Response,Instant,Principal,Session,Long);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.actuate.trace.http;HttpTrace;false;HttpTrace;(Request,Response,Instant,Principal,Session,Long);;Argument[3];Argument[-1];taint",
        "org.springframework.boot.actuate.trace.http;HttpTrace;false;HttpTrace;(Request,Response,Instant,Principal,Session,Long);;Argument[4];Argument[-1];taint",
        "org.springframework.boot.actuate.trace.http;HttpTrace;false;getPrincipal;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.trace.http;HttpTrace;false;getRequest;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.trace.http;HttpTrace;false;getResponse;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.trace.http;HttpTrace;false;getSession;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.trace.http;HttpTrace;false;getTimestamp;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.trace.http;HttpTraceEndpoint$HttpTraceDescriptor;false;getTraces;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.trace.http;HttpTraceEndpoint;true;HttpTraceEndpoint;(HttpTraceRepository);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.trace.http;HttpTraceRepository;true;add;(HttpTrace);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.trace.http;HttpTraceRepository;true;findAll;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.trace.http;TraceableRequest;true;getHeaders;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.trace.http;TraceableRequest;true;getMethod;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.trace.http;TraceableRequest;true;getRemoteAddress;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.trace.http;TraceableRequest;true;getUri;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.trace.http;TraceableResponse;true;getHeaders;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.web.mappings.reactive;DispatcherHandlerMappingDescription;true;getDetails;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.web.mappings.reactive;DispatcherHandlerMappingDescription;true;getHandler;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.web.mappings.reactive;DispatcherHandlerMappingDescription;true;getPredicate;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.web.mappings.reactive;DispatcherHandlerMappingDetails;true;getHandlerFunction;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.web.mappings.reactive;DispatcherHandlerMappingDetails;true;getHandlerMethod;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.web.mappings.reactive;DispatcherHandlerMappingDetails;true;getRequestMappingConditions;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.web.mappings.reactive;HandlerFunctionDescription;true;getClassName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.web.mappings.reactive;RequestMappingConditionsDescription$MediaTypeExpressionDescription;true;getMediaType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.web.mappings.reactive;RequestMappingConditionsDescription$NameValueExpressionDescription;true;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.web.mappings.reactive;RequestMappingConditionsDescription$NameValueExpressionDescription;true;getValue;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.web.mappings.reactive;RequestMappingConditionsDescription;true;getConsumes;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.web.mappings.reactive;RequestMappingConditionsDescription;true;getHeaders;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.web.mappings.reactive;RequestMappingConditionsDescription;true;getMethods;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.web.mappings.reactive;RequestMappingConditionsDescription;true;getParams;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.web.mappings.reactive;RequestMappingConditionsDescription;true;getPatterns;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.web.mappings.reactive;RequestMappingConditionsDescription;true;getProduces;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.web.mappings.servlet;DispatcherServletMappingDescription;true;getDetails;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.web.mappings.servlet;DispatcherServletMappingDescription;true;getHandler;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.web.mappings.servlet;DispatcherServletMappingDescription;true;getPredicate;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.web.mappings.servlet;DispatcherServletMappingDetails;true;getHandlerMethod;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.web.mappings.servlet;DispatcherServletMappingDetails;true;getRequestMappingConditions;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.web.mappings.servlet;FilterRegistrationMappingDescription;true;FilterRegistrationMappingDescription;(FilterRegistration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.web.mappings.servlet;RegistrationMappingDescription;true;RegistrationMappingDescription;(Registration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.web.mappings.servlet;RequestMappingConditionsDescription$MediaTypeExpressionDescription;true;getMediaType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.web.mappings.servlet;RequestMappingConditionsDescription$NameValueExpressionDescription;true;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.web.mappings.servlet;RequestMappingConditionsDescription$NameValueExpressionDescription;true;getValue;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.web.mappings.servlet;RequestMappingConditionsDescription;true;getConsumes;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.web.mappings.servlet;RequestMappingConditionsDescription;true;getHeaders;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.web.mappings.servlet;RequestMappingConditionsDescription;true;getMethods;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.web.mappings.servlet;RequestMappingConditionsDescription;true;getParams;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.web.mappings.servlet;RequestMappingConditionsDescription;true;getPatterns;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.web.mappings.servlet;RequestMappingConditionsDescription;true;getProduces;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.web.mappings.servlet;ServletRegistrationMappingDescription;true;ServletRegistrationMappingDescription;(ServletRegistration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.web.mappings;HandlerMethodDescription;true;getClassName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.web.mappings;HandlerMethodDescription;true;getDescriptor;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.web.mappings;HandlerMethodDescription;true;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.web.mappings;MappingsEndpoint$ApplicationMappings;false;getContexts;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.web.mappings;MappingsEndpoint$ContextMappings;false;getMappings;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.web.mappings;MappingsEndpoint$ContextMappings;false;getParentId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.actuate.web.mappings;MappingsEndpoint;true;MappingsEndpoint;(Collection,ApplicationContext);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.web.mappings;MappingsEndpoint;true;MappingsEndpoint;(Collection,ApplicationContext);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.web.trace.reactive;HttpTraceWebFilter;true;HttpTraceWebFilter;(HttpTraceRepository,HttpExchangeTracer,Set);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.web.trace.reactive;HttpTraceWebFilter;true;HttpTraceWebFilter;(HttpTraceRepository,HttpExchangeTracer,Set);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.actuate.web.trace.reactive;HttpTraceWebFilter;true;HttpTraceWebFilter;(HttpTraceRepository,HttpExchangeTracer,Set);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.actuate.web.trace.servlet;HttpTraceFilter;true;HttpTraceFilter;(HttpTraceRepository,HttpExchangeTracer);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.actuate.web.trace.servlet;HttpTraceFilter;true;HttpTraceFilter;(HttpTraceRepository,HttpExchangeTracer);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.ansi;Ansi8BitColor;false;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.ansi;AnsiColors;false;findClosest;(Color);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.ansi;AnsiOutput;true;encode;(AnsiElement);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.ansi;AnsiOutput;true;toString;(Object[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.boot.ant;FindMainClass;true;setClassesRoot;(File);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.ant;FindMainClass;true;setMainClass;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.ant;FindMainClass;true;setProperty;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.ant;ShareAntlibLoader;true;setRefid;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.amqp;AbstractConnectionFactoryConfigurer;true;setConnectionNameStrategy;(ConnectionNameStrategy);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.amqp;CachingConnectionFactoryConfigurer;true;CachingConnectionFactoryConfigurer;(RabbitProperties);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.amqp;DirectRabbitListenerContainerFactoryConfigurer;false;DirectRabbitListenerContainerFactoryConfigurer;(RabbitProperties);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitConnectionFactoryBeanConfigurer;true;RabbitConnectionFactoryBeanConfigurer;(ResourceLoader,RabbitProperties);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitConnectionFactoryBeanConfigurer;true;RabbitConnectionFactoryBeanConfigurer;(ResourceLoader,RabbitProperties);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitConnectionFactoryBeanConfigurer;true;setCredentialsProvider;(CredentialsProvider);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitConnectionFactoryBeanConfigurer;true;setCredentialsRefreshService;(CredentialsRefreshService);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitProperties$AmqpContainer;true;getIdleEventInterval;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitProperties$AmqpContainer;true;getRetry;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitProperties$AmqpContainer;true;setIdleEventInterval;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitProperties$Cache$Channel;true;getCheckoutTimeout;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitProperties$Cache$Channel;true;setCheckoutTimeout;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitProperties$Cache;true;getChannel;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitProperties$Cache;true;getConnection;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitProperties$Listener;true;getDirect;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitProperties$Listener;true;getSimple;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitProperties$Listener;true;getStream;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitProperties$Retry;true;getInitialInterval;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitProperties$Retry;true;getMaxInterval;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitProperties$Retry;true;setInitialInterval;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitProperties$Retry;true;setMaxInterval;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitProperties$Ssl;true;getAlgorithm;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitProperties$Ssl;true;getKeyStore;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitProperties$Ssl;true;getKeyStoreAlgorithm;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitProperties$Ssl;true;getKeyStorePassword;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitProperties$Ssl;true;getKeyStoreType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitProperties$Ssl;true;getTrustStore;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitProperties$Ssl;true;getTrustStoreAlgorithm;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitProperties$Ssl;true;getTrustStorePassword;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitProperties$Ssl;true;getTrustStoreType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitProperties$Ssl;true;setAlgorithm;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitProperties$Ssl;true;setKeyStore;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitProperties$Ssl;true;setKeyStoreAlgorithm;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitProperties$Ssl;true;setKeyStorePassword;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitProperties$Ssl;true;setKeyStoreType;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitProperties$Ssl;true;setTrustStore;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitProperties$Ssl;true;setTrustStoreAlgorithm;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitProperties$Ssl;true;setTrustStorePassword;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitProperties$Ssl;true;setTrustStoreType;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitProperties$Stream;false;getHost;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitProperties$Stream;false;getPassword;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitProperties$Stream;false;getUsername;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitProperties$Stream;false;setHost;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitProperties$Stream;false;setPassword;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitProperties$Stream;false;setUsername;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitProperties$Template;true;getDefaultReceiveQueue;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitProperties$Template;true;getExchange;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitProperties$Template;true;getReceiveTimeout;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitProperties$Template;true;getReplyTimeout;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitProperties$Template;true;getRetry;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitProperties$Template;true;getRoutingKey;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitProperties$Template;true;setDefaultReceiveQueue;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitProperties$Template;true;setExchange;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitProperties$Template;true;setReceiveTimeout;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitProperties$Template;true;setReplyTimeout;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitProperties$Template;true;setRoutingKey;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitProperties;true;determineAddresses;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitProperties;true;determineHost;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitProperties;true;determinePassword;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitProperties;true;determineUsername;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitProperties;true;determineVirtualHost;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitProperties;true;getAddresses;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitProperties;true;getCache;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitProperties;true;getChannelRpcTimeout;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitProperties;true;getConnectionTimeout;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitProperties;true;getHost;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitProperties;true;getListener;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitProperties;true;getPassword;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitProperties;true;getRequestedHeartbeat;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitProperties;true;getSsl;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitProperties;true;getStream;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitProperties;true;getTemplate;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitProperties;true;getUsername;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitProperties;true;getVirtualHost;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitProperties;true;setAddresses;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitProperties;true;setChannelRpcTimeout;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitProperties;true;setConnectionTimeout;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitProperties;true;setHost;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitProperties;true;setPassword;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitProperties;true;setRequestedHeartbeat;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitProperties;true;setUsername;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitProperties;true;setVirtualHost;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitTemplateConfigurer;true;RabbitTemplateConfigurer;(RabbitProperties);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitTemplateConfigurer;true;setMessageConverter;(MessageConverter);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.amqp;RabbitTemplateConfigurer;true;setRetryTemplateCustomizers;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.amqp;SimpleRabbitListenerContainerFactoryConfigurer;false;SimpleRabbitListenerContainerFactoryConfigurer;(RabbitProperties);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.batch;BatchAutoConfiguration;true;jobLauncherApplicationRunner;(JobLauncher,JobExplorer,JobRepository,BatchProperties);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.batch;BatchAutoConfiguration;true;jobLauncherApplicationRunner;(JobLauncher,JobExplorer,JobRepository,BatchProperties);;Argument[1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.batch;BatchAutoConfiguration;true;jobLauncherApplicationRunner;(JobLauncher,JobExplorer,JobRepository,BatchProperties);;Argument[2];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.batch;BatchDataSourceInitializer;true;BatchDataSourceInitializer;(DataSource,ResourceLoader,BatchProperties);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.batch;BatchDataSourceInitializer;true;BatchDataSourceInitializer;(DataSource,ResourceLoader,BatchProperties);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.batch;BatchDataSourceScriptDatabaseInitializer;true;BatchDataSourceScriptDatabaseInitializer;(DataSource,DatabaseInitializationSettings);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.batch;BatchDataSourceScriptDatabaseInitializer;true;BatchDataSourceScriptDatabaseInitializer;(DataSource,DatabaseInitializationSettings);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.batch;BatchDataSourceScriptDatabaseInitializer;true;BatchDataSourceScriptDatabaseInitializer;(DataSource,Jdbc);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.batch;BatchProperties$Jdbc;true;getSchema;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.batch;BatchProperties$Jdbc;true;getTablePrefix;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.batch;BatchProperties$Jdbc;true;setSchema;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.batch;BatchProperties$Jdbc;true;setTablePrefix;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.batch;BatchProperties$Job;true;getNames;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.batch;BatchProperties$Job;true;setNames;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.batch;BatchProperties;true;getJdbc;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.batch;BatchProperties;true;getJob;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.batch;BatchProperties;true;getSchema;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.batch;BatchProperties;true;getTablePrefix;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.batch;BatchProperties;true;setSchema;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.batch;BatchProperties;true;setTablePrefix;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.batch;JobExecutionEvent;true;JobExecutionEvent;(JobExecution);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.batch;JobExecutionEvent;true;getJobExecution;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.batch;JobLauncherApplicationRunner;true;JobLauncherApplicationRunner;(JobLauncher,JobExplorer,JobRepository);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.batch;JobLauncherApplicationRunner;true;JobLauncherApplicationRunner;(JobLauncher,JobExplorer,JobRepository);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.batch;JobLauncherApplicationRunner;true;JobLauncherApplicationRunner;(JobLauncher,JobExplorer,JobRepository);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.batch;JobLauncherApplicationRunner;true;setJobNames;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.batch;JobLauncherApplicationRunner;true;setJobParametersConverter;(JobParametersConverter);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.batch;JobLauncherApplicationRunner;true;setJobRegistry;(JobRegistry);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.batch;JobLauncherApplicationRunner;true;setJobs;(Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.cache;CacheAutoConfiguration;true;cacheAutoConfigurationValidator;(CacheProperties,ObjectProvider);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.cache;CacheAutoConfiguration;true;cacheAutoConfigurationValidator;(CacheProperties,ObjectProvider);;Element of Argument[1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.cache;CacheManagerCustomizers;true;CacheManagerCustomizers;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.cache;CacheManagerCustomizers;true;customize;(CacheManager);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.cache;CacheProperties$Caffeine;true;getSpec;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.cache;CacheProperties$Caffeine;true;setSpec;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.cache;CacheProperties$Couchbase;true;getExpiration;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.cache;CacheProperties$Couchbase;true;setExpiration;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.cache;CacheProperties$EhCache;true;getConfig;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.cache;CacheProperties$EhCache;true;setConfig;(Resource);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.cache;CacheProperties$Infinispan;true;getConfig;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.cache;CacheProperties$Infinispan;true;setConfig;(Resource);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.cache;CacheProperties$JCache;true;getConfig;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.cache;CacheProperties$JCache;true;getProvider;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.cache;CacheProperties$JCache;true;setConfig;(Resource);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.cache;CacheProperties$JCache;true;setProvider;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.cache;CacheProperties$Redis;true;getKeyPrefix;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.cache;CacheProperties$Redis;true;getTimeToLive;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.cache;CacheProperties$Redis;true;setKeyPrefix;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.cache;CacheProperties$Redis;true;setTimeToLive;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.cache;CacheProperties;true;getCacheNames;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.cache;CacheProperties;true;getCaffeine;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.cache;CacheProperties;true;getCouchbase;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.cache;CacheProperties;true;getEhcache;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.cache;CacheProperties;true;getInfinispan;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.cache;CacheProperties;true;getJcache;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.cache;CacheProperties;true;getRedis;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.cache;CacheProperties;true;resolveConfigLocation;(Resource);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.cache;CacheProperties;true;setCacheNames;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.cassandra;CassandraProperties$Connection;true;getConnectTimeout;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.cassandra;CassandraProperties$Connection;true;getInitQueryTimeout;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.cassandra;CassandraProperties$Connection;true;setConnectTimeout;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.cassandra;CassandraProperties$Connection;true;setInitQueryTimeout;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.cassandra;CassandraProperties$Controlconnection;true;getTimeout;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.cassandra;CassandraProperties$Controlconnection;true;setTimeout;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.cassandra;CassandraProperties$Pool;true;getHeartbeatInterval;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.cassandra;CassandraProperties$Pool;true;getIdleTimeout;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.cassandra;CassandraProperties$Pool;true;setHeartbeatInterval;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.cassandra;CassandraProperties$Pool;true;setIdleTimeout;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.cassandra;CassandraProperties$Request;true;getThrottler;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.cassandra;CassandraProperties$Request;true;getTimeout;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.cassandra;CassandraProperties$Request;true;setTimeout;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.cassandra;CassandraProperties$Throttler;true;getDrainInterval;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.cassandra;CassandraProperties$Throttler;true;setDrainInterval;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.cassandra;CassandraProperties;true;getConfig;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.cassandra;CassandraProperties;true;getConnection;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.cassandra;CassandraProperties;true;getContactPoints;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.cassandra;CassandraProperties;true;getControlconnection;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.cassandra;CassandraProperties;true;getKeyspaceName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.cassandra;CassandraProperties;true;getLocalDatacenter;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.cassandra;CassandraProperties;true;getPassword;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.cassandra;CassandraProperties;true;getPool;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.cassandra;CassandraProperties;true;getRequest;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.cassandra;CassandraProperties;true;getSchemaAction;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.cassandra;CassandraProperties;true;getSessionName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.cassandra;CassandraProperties;true;getUsername;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.cassandra;CassandraProperties;true;setConfig;(Resource);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.cassandra;CassandraProperties;true;setKeyspaceName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.cassandra;CassandraProperties;true;setLocalDatacenter;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.cassandra;CassandraProperties;true;setPassword;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.cassandra;CassandraProperties;true;setSchemaAction;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.cassandra;CassandraProperties;true;setSessionName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.cassandra;CassandraProperties;true;setUsername;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.codec;CodecProperties;true;getMaxInMemorySize;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.codec;CodecProperties;true;setMaxInMemorySize;(DataSize);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.condition;ConditionEvaluationReport$ConditionAndOutcome;true;ConditionAndOutcome;(Condition,ConditionOutcome);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.condition;ConditionEvaluationReport$ConditionAndOutcome;true;ConditionAndOutcome;(Condition,ConditionOutcome);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.condition;ConditionEvaluationReport$ConditionAndOutcome;true;getCondition;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.condition;ConditionEvaluationReport$ConditionAndOutcome;true;getOutcome;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.condition;ConditionEvaluationReport$ConditionAndOutcome;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.condition;ConditionEvaluationReport$ConditionAndOutcomes;true;add;(Condition,ConditionOutcome);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.condition;ConditionEvaluationReport$ConditionAndOutcomes;true;add;(Condition,ConditionOutcome);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.condition;ConditionEvaluationReport;false;getConditionAndOutcomesBySource;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.condition;ConditionEvaluationReport;false;getExclusions;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.condition;ConditionEvaluationReport;false;getParent;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.condition;ConditionEvaluationReport;false;getUnconditionalClasses;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.condition;ConditionEvaluationReport;false;recordConditionEvaluation;(String,Condition,ConditionOutcome);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.condition;ConditionEvaluationReport;false;recordConditionEvaluation;(String,Condition,ConditionOutcome);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.condition;ConditionEvaluationReport;false;recordConditionEvaluation;(String,Condition,ConditionOutcome);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.condition;ConditionEvaluationReport;false;recordEvaluationCandidates;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.condition;ConditionEvaluationReport;false;recordExclusions;(Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.condition;ConditionMessage$Builder;false;available;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.condition;ConditionMessage$Builder;false;because;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.condition;ConditionMessage$Builder;false;didNotFind;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.condition;ConditionMessage$Builder;false;didNotFind;(String,String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.condition;ConditionMessage$Builder;false;didNotFind;(String,String);;Argument[1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.condition;ConditionMessage$Builder;false;found;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.condition;ConditionMessage$Builder;false;found;(String,String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.condition;ConditionMessage$Builder;false;found;(String,String);;Argument[1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.condition;ConditionMessage$Builder;false;foundExactly;(Object);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.condition;ConditionMessage$Builder;false;notAvailable;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.condition;ConditionMessage$Builder;false;resultedIn;(Object);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.condition;ConditionMessage$ItemsBuilder;false;items;(Collection);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.condition;ConditionMessage$ItemsBuilder;false;items;(Object[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.condition;ConditionMessage$ItemsBuilder;false;items;(Style,Collection);;Element of Argument[1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.condition;ConditionMessage$ItemsBuilder;false;items;(Style,Object[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.condition;ConditionMessage$Style;true;applyTo;(Collection);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.condition;ConditionMessage;false;andCondition;(Class,Object[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.condition;ConditionMessage;false;andCondition;(String,Object[]);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.condition;ConditionMessage;false;andCondition;(String,Object[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.condition;ConditionMessage;false;append;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.autoconfigure.condition;ConditionMessage;false;append;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.condition;ConditionMessage;false;forCondition;(Class,Object[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.condition;ConditionMessage;false;forCondition;(String,Object[]);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.condition;ConditionMessage;false;forCondition;(String,Object[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.condition;ConditionMessage;false;of;(String,Object[]);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.condition;ConditionMessage;false;of;(String,Object[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.condition;ConditionMessage;false;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.condition;ConditionOutcome;true;ConditionOutcome;(boolean,ConditionMessage);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.condition;ConditionOutcome;true;ConditionOutcome;(boolean,String);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.condition;ConditionOutcome;true;getConditionMessage;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.condition;ConditionOutcome;true;getMessage;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.condition;ConditionOutcome;true;match;(ConditionMessage);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.condition;ConditionOutcome;true;match;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.condition;ConditionOutcome;true;noMatch;(ConditionMessage);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.condition;ConditionOutcome;true;noMatch;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.condition;ConditionOutcome;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.context;LifecycleProperties;true;getTimeoutPerShutdownPhase;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.context;LifecycleProperties;true;setTimeoutPerShutdownPhase;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.context;MessageSourceProperties;true;getBasename;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.context;MessageSourceProperties;true;getCacheDuration;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.context;MessageSourceProperties;true;setBasename;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.context;MessageSourceProperties;true;setCacheDuration;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.couchbase;CouchbaseProperties$Env;true;getIo;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.couchbase;CouchbaseProperties$Env;true;getSsl;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.couchbase;CouchbaseProperties$Env;true;getTimeouts;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.couchbase;CouchbaseProperties$Io;true;getIdleHttpConnectionTimeout;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.couchbase;CouchbaseProperties$Io;true;setIdleHttpConnectionTimeout;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.couchbase;CouchbaseProperties$Ssl;true;getKeyStore;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.couchbase;CouchbaseProperties$Ssl;true;getKeyStorePassword;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.couchbase;CouchbaseProperties$Ssl;true;setKeyStore;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.couchbase;CouchbaseProperties$Ssl;true;setKeyStorePassword;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.couchbase;CouchbaseProperties$Timeouts;true;getAnalytics;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.couchbase;CouchbaseProperties$Timeouts;true;getConnect;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.couchbase;CouchbaseProperties$Timeouts;true;getDisconnect;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.couchbase;CouchbaseProperties$Timeouts;true;getKeyValue;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.couchbase;CouchbaseProperties$Timeouts;true;getKeyValueDurable;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.couchbase;CouchbaseProperties$Timeouts;true;getManagement;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.couchbase;CouchbaseProperties$Timeouts;true;getQuery;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.couchbase;CouchbaseProperties$Timeouts;true;getSearch;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.couchbase;CouchbaseProperties$Timeouts;true;getView;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.couchbase;CouchbaseProperties$Timeouts;true;setAnalytics;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.couchbase;CouchbaseProperties$Timeouts;true;setConnect;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.couchbase;CouchbaseProperties$Timeouts;true;setDisconnect;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.couchbase;CouchbaseProperties$Timeouts;true;setKeyValue;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.couchbase;CouchbaseProperties$Timeouts;true;setKeyValueDurable;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.couchbase;CouchbaseProperties$Timeouts;true;setManagement;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.couchbase;CouchbaseProperties$Timeouts;true;setQuery;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.couchbase;CouchbaseProperties$Timeouts;true;setSearch;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.couchbase;CouchbaseProperties$Timeouts;true;setView;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.couchbase;CouchbaseProperties;true;getConnectionString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.couchbase;CouchbaseProperties;true;getEnv;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.couchbase;CouchbaseProperties;true;getPassword;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.couchbase;CouchbaseProperties;true;getUsername;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.couchbase;CouchbaseProperties;true;setConnectionString;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.couchbase;CouchbaseProperties;true;setPassword;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.couchbase;CouchbaseProperties;true;setUsername;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.data.cassandra;CassandraDataAutoConfiguration;true;CassandraDataAutoConfiguration;(CqlSession);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.data.couchbase;CouchbaseDataProperties;true;getBucketName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.data.couchbase;CouchbaseDataProperties;true;getScopeName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.data.couchbase;CouchbaseDataProperties;true;getTypeKey;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.data.couchbase;CouchbaseDataProperties;true;setBucketName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.data.couchbase;CouchbaseDataProperties;true;setScopeName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.data.couchbase;CouchbaseDataProperties;true;setTypeKey;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.data.elasticsearch;ReactiveElasticsearchRestClientProperties;true;getMaxInMemorySize;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.data.elasticsearch;ReactiveElasticsearchRestClientProperties;true;setMaxInMemorySize;(DataSize);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.data.neo4j;Neo4jDataProperties;true;getDatabase;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.data.neo4j;Neo4jDataProperties;true;setDatabase;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.data.r2dbc;R2dbcDataAutoConfiguration;true;R2dbcDataAutoConfiguration;(DatabaseClient);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.data.redis;RedisProperties$Cluster;true;getNodes;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.data.redis;RedisProperties$Cluster;true;setNodes;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.data.redis;RedisProperties$Jedis;true;getPool;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.data.redis;RedisProperties$Lettuce$Cluster$Refresh;true;getPeriod;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.data.redis;RedisProperties$Lettuce$Cluster$Refresh;true;setPeriod;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.data.redis;RedisProperties$Lettuce$Cluster;true;getRefresh;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.data.redis;RedisProperties$Lettuce;true;getCluster;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.data.redis;RedisProperties$Lettuce;true;getPool;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.data.redis;RedisProperties$Lettuce;true;getShutdownTimeout;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.data.redis;RedisProperties$Lettuce;true;setShutdownTimeout;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.data.redis;RedisProperties$Pool;true;getMaxWait;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.data.redis;RedisProperties$Pool;true;getTimeBetweenEvictionRuns;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.data.redis;RedisProperties$Pool;true;setMaxWait;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.data.redis;RedisProperties$Pool;true;setTimeBetweenEvictionRuns;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.data.redis;RedisProperties$Sentinel;true;getMaster;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.data.redis;RedisProperties$Sentinel;true;getNodes;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.data.redis;RedisProperties$Sentinel;true;getPassword;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.data.redis;RedisProperties$Sentinel;true;setMaster;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.data.redis;RedisProperties$Sentinel;true;setNodes;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.data.redis;RedisProperties$Sentinel;true;setPassword;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.data.redis;RedisProperties;true;getClientName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.data.redis;RedisProperties;true;getCluster;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.data.redis;RedisProperties;true;getConnectTimeout;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.data.redis;RedisProperties;true;getHost;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.data.redis;RedisProperties;true;getJedis;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.data.redis;RedisProperties;true;getLettuce;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.data.redis;RedisProperties;true;getPassword;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.data.redis;RedisProperties;true;getSentinel;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.data.redis;RedisProperties;true;getTimeout;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.data.redis;RedisProperties;true;getUrl;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.data.redis;RedisProperties;true;getUsername;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.data.redis;RedisProperties;true;setClientName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.data.redis;RedisProperties;true;setCluster;(Cluster);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.data.redis;RedisProperties;true;setConnectTimeout;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.data.redis;RedisProperties;true;setHost;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.data.redis;RedisProperties;true;setPassword;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.data.redis;RedisProperties;true;setSentinel;(Sentinel);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.data.redis;RedisProperties;true;setTimeout;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.data.redis;RedisProperties;true;setUrl;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.data.redis;RedisProperties;true;setUsername;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.data.rest;RepositoryRestMvcAutoConfiguration;true;springBootRepositoryRestConfigurer;(ObjectProvider,RepositoryRestProperties);;Argument[1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.data.rest;RepositoryRestProperties;true;getBasePath;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.data.rest;RepositoryRestProperties;true;getDefaultMediaType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.data.rest;RepositoryRestProperties;true;getLimitParamName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.data.rest;RepositoryRestProperties;true;getPageParamName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.data.rest;RepositoryRestProperties;true;getSortParamName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.data.rest;RepositoryRestProperties;true;setBasePath;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.data.rest;RepositoryRestProperties;true;setDefaultMediaType;(MediaType);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.data.rest;RepositoryRestProperties;true;setLimitParamName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.data.rest;RepositoryRestProperties;true;setPageParamName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.data.rest;RepositoryRestProperties;true;setSortParamName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.data.web;SpringDataWebAutoConfiguration;true;SpringDataWebAutoConfiguration;(SpringDataWebProperties);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.data.web;SpringDataWebProperties$Pageable;true;getPageParameter;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.data.web;SpringDataWebProperties$Pageable;true;getPrefix;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.data.web;SpringDataWebProperties$Pageable;true;getQualifierDelimiter;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.data.web;SpringDataWebProperties$Pageable;true;getSizeParameter;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.data.web;SpringDataWebProperties$Pageable;true;setPageParameter;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.data.web;SpringDataWebProperties$Pageable;true;setPrefix;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.data.web;SpringDataWebProperties$Pageable;true;setQualifierDelimiter;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.data.web;SpringDataWebProperties$Pageable;true;setSizeParameter;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.data.web;SpringDataWebProperties$Sort;true;getSortParameter;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.data.web;SpringDataWebProperties$Sort;true;setSortParameter;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.data.web;SpringDataWebProperties;true;getPageable;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.data.web;SpringDataWebProperties;true;getSort;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.domain;EntityScanPackages;true;getPackageNames;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.domain;EntityScanner;true;EntityScanner;(ApplicationContext);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.elasticsearch;ElasticsearchProperties;true;getConnectionTimeout;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.elasticsearch;ElasticsearchProperties;true;getPassword;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.elasticsearch;ElasticsearchProperties;true;getPathPrefix;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.elasticsearch;ElasticsearchProperties;true;getSocketTimeout;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.elasticsearch;ElasticsearchProperties;true;getUris;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.elasticsearch;ElasticsearchProperties;true;getUsername;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.elasticsearch;ElasticsearchProperties;true;setConnectionTimeout;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.elasticsearch;ElasticsearchProperties;true;setPassword;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.elasticsearch;ElasticsearchProperties;true;setPathPrefix;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.elasticsearch;ElasticsearchProperties;true;setSocketTimeout;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.elasticsearch;ElasticsearchProperties;true;setUris;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.elasticsearch;ElasticsearchProperties;true;setUsername;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.elasticsearch;ElasticsearchRestClientProperties$Sniffer;true;getDelayAfterFailure;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.elasticsearch;ElasticsearchRestClientProperties$Sniffer;true;getInterval;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.elasticsearch;ElasticsearchRestClientProperties$Sniffer;true;setDelayAfterFailure;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.elasticsearch;ElasticsearchRestClientProperties$Sniffer;true;setInterval;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.elasticsearch;ElasticsearchRestClientProperties;true;getSniffer;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayAutoConfiguration$FlywayConfiguration;true;flywayInitializer;(Flyway,ObjectProvider);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayAutoConfiguration;true;flywayDefaultDdlModeProvider;(ObjectProvider);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayMigrationInitializer;true;FlywayMigrationInitializer;(Flyway);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayMigrationInitializer;true;FlywayMigrationInitializer;(Flyway,FlywayMigrationStrategy);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayMigrationInitializer;true;FlywayMigrationInitializer;(Flyway,FlywayMigrationStrategy);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayMigrationScriptMissingException;true;getLocations;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayProperties;true;getBaselineDescription;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayProperties;true;getBaselineMigrationPrefix;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayProperties;true;getBaselineVersion;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayProperties;true;getCherryPick;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayProperties;true;getConnectRetriesInterval;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayProperties;true;getDefaultSchema;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayProperties;true;getDriverClassName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayProperties;true;getDryRunOutput;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayProperties;true;getErrorOverrides;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayProperties;true;getIgnoreMigrationPatterns;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayProperties;true;getInitSqls;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayProperties;true;getInstalledBy;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayProperties;true;getJdbcProperties;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayProperties;true;getKerberosConfigFile;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayProperties;true;getLicenseKey;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayProperties;true;getLocations;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayProperties;true;getOracleKerberosCacheFile;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayProperties;true;getOracleKerberosConfigFile;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayProperties;true;getOracleWalletLocation;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayProperties;true;getPassword;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayProperties;true;getPlaceholderPrefix;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayProperties;true;getPlaceholderSuffix;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayProperties;true;getPlaceholders;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayProperties;true;getRepeatableSqlMigrationPrefix;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayProperties;true;getSchemas;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayProperties;true;getScriptPlaceholderPrefix;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayProperties;true;getScriptPlaceholderSuffix;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayProperties;true;getSqlMigrationPrefix;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayProperties;true;getSqlMigrationSeparator;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayProperties;true;getSqlMigrationSuffixes;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayProperties;true;getSqlServerKerberosLoginFile;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayProperties;true;getTable;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayProperties;true;getTablespace;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayProperties;true;getTarget;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayProperties;true;getUndoSqlMigrationPrefix;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayProperties;true;getUrl;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayProperties;true;getUser;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayProperties;true;setBaselineDescription;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayProperties;true;setBaselineMigrationPrefix;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayProperties;true;setBaselineVersion;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayProperties;true;setCherryPick;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayProperties;true;setConnectRetriesInterval;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayProperties;true;setDefaultSchema;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayProperties;true;setDriverClassName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayProperties;true;setDryRunOutput;(File);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayProperties;true;setErrorOverrides;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayProperties;true;setIgnoreMigrationPatterns;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayProperties;true;setInitSqls;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayProperties;true;setInstalledBy;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayProperties;true;setJdbcProperties;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayProperties;true;setKerberosConfigFile;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayProperties;true;setLicenseKey;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayProperties;true;setLocations;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayProperties;true;setOracleKerberosCacheFile;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayProperties;true;setOracleKerberosConfigFile;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayProperties;true;setOracleWalletLocation;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayProperties;true;setPassword;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayProperties;true;setPlaceholderPrefix;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayProperties;true;setPlaceholderSuffix;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayProperties;true;setPlaceholders;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayProperties;true;setRepeatableSqlMigrationPrefix;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayProperties;true;setSchemas;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayProperties;true;setScriptPlaceholderPrefix;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayProperties;true;setScriptPlaceholderSuffix;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayProperties;true;setSqlMigrationPrefix;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayProperties;true;setSqlMigrationSeparator;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayProperties;true;setSqlMigrationSuffixes;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayProperties;true;setSqlServerKerberosLoginFile;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayProperties;true;setTable;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayProperties;true;setTablespace;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayProperties;true;setTarget;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayProperties;true;setUndoSqlMigrationPrefix;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayProperties;true;setUrl;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.flyway;FlywayProperties;true;setUser;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.freemarker;FreeMarkerAutoConfiguration;true;FreeMarkerAutoConfiguration;(ApplicationContext,FreeMarkerProperties);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.freemarker;FreeMarkerAutoConfiguration;true;FreeMarkerAutoConfiguration;(ApplicationContext,FreeMarkerProperties);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.freemarker;FreeMarkerProperties;true;getSettings;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.freemarker;FreeMarkerProperties;true;getTemplateLoaderPath;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.freemarker;FreeMarkerProperties;true;setSettings;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.freemarker;FreeMarkerProperties;true;setTemplateLoaderPath;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.groovy.template;GroovyTemplateAutoConfiguration$GroovyMarkupConfiguration;true;GroovyMarkupConfiguration;(ApplicationContext,GroovyTemplateProperties);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.groovy.template;GroovyTemplateAutoConfiguration$GroovyMarkupConfiguration;true;GroovyMarkupConfiguration;(ApplicationContext,GroovyTemplateProperties);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.groovy.template;GroovyTemplateProperties;true;getResourceLoaderPath;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.groovy.template;GroovyTemplateProperties;true;setResourceLoaderPath;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.gson;GsonAutoConfiguration;true;standardGsonBuilderCustomizer;(GsonProperties);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.gson;GsonProperties;true;getDateFormat;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.gson;GsonProperties;true;setDateFormat;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.h2;H2ConsoleProperties$Settings;true;getWebAdminPassword;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.h2;H2ConsoleProperties$Settings;true;setWebAdminPassword;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.h2;H2ConsoleProperties;true;getPath;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.h2;H2ConsoleProperties;true;getSettings;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.h2;H2ConsoleProperties;true;setPath;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.hazelcast;HazelcastProperties;true;getConfig;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.hazelcast;HazelcastProperties;true;resolveConfigLocation;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.hazelcast;HazelcastProperties;true;setConfig;(Resource);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.http;HttpMessageConverters;true;HttpMessageConverters;(Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.http;HttpMessageConverters;true;HttpMessageConverters;(HttpMessageConverter[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.http;HttpMessageConverters;true;HttpMessageConverters;(boolean,Collection);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.http;HttpMessageConverters;true;getConverters;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.influx;InfluxDbProperties;true;getPassword;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.influx;InfluxDbProperties;true;getUrl;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.influx;InfluxDbProperties;true;getUser;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.influx;InfluxDbProperties;true;setPassword;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.influx;InfluxDbProperties;true;setUrl;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.influx;InfluxDbProperties;true;setUser;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.info;ProjectInfoAutoConfiguration;true;ProjectInfoAutoConfiguration;(ProjectInfoProperties);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.info;ProjectInfoProperties$Build;true;getLocation;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.info;ProjectInfoProperties$Build;true;setLocation;(Resource);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.info;ProjectInfoProperties$Git;true;getLocation;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.info;ProjectInfoProperties$Git;true;setLocation;(Resource);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.info;ProjectInfoProperties;true;getBuild;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.info;ProjectInfoProperties;true;getGit;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.integration;IntegrationDataSourceInitializer;true;IntegrationDataSourceInitializer;(DataSource,ResourceLoader,IntegrationProperties);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.integration;IntegrationDataSourceInitializer;true;IntegrationDataSourceInitializer;(DataSource,ResourceLoader,IntegrationProperties);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.integration;IntegrationDataSourceScriptDatabaseInitializer;true;IntegrationDataSourceScriptDatabaseInitializer;(DataSource,DatabaseInitializationSettings);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.integration;IntegrationDataSourceScriptDatabaseInitializer;true;IntegrationDataSourceScriptDatabaseInitializer;(DataSource,DatabaseInitializationSettings);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.integration;IntegrationDataSourceScriptDatabaseInitializer;true;IntegrationDataSourceScriptDatabaseInitializer;(DataSource,Jdbc);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.integration;IntegrationProperties$Endpoint;true;getNoAutoStartup;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.integration;IntegrationProperties$Endpoint;true;getReadOnlyHeaders;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.integration;IntegrationProperties$Endpoint;true;setNoAutoStartup;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.integration;IntegrationProperties$Endpoint;true;setReadOnlyHeaders;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.integration;IntegrationProperties$Jdbc;true;getSchema;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.integration;IntegrationProperties$Jdbc;true;setSchema;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.integration;IntegrationProperties$Poller;true;getCron;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.integration;IntegrationProperties$Poller;true;getFixedDelay;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.integration;IntegrationProperties$Poller;true;getFixedRate;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.integration;IntegrationProperties$Poller;true;getInitialDelay;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.integration;IntegrationProperties$Poller;true;getReceiveTimeout;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.integration;IntegrationProperties$Poller;true;setCron;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.integration;IntegrationProperties$Poller;true;setFixedDelay;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.integration;IntegrationProperties$Poller;true;setFixedRate;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.integration;IntegrationProperties$Poller;true;setInitialDelay;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.integration;IntegrationProperties$Poller;true;setReceiveTimeout;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.integration;IntegrationProperties$RSocket$Client;true;getHost;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.integration;IntegrationProperties$RSocket$Client;true;getUri;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.integration;IntegrationProperties$RSocket$Client;true;setHost;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.integration;IntegrationProperties$RSocket$Client;true;setUri;(URI);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.integration;IntegrationProperties$RSocket;true;getClient;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.integration;IntegrationProperties$RSocket;true;getServer;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.integration;IntegrationProperties;true;getChannel;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.integration;IntegrationProperties;true;getEndpoint;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.integration;IntegrationProperties;true;getError;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.integration;IntegrationProperties;true;getJdbc;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.integration;IntegrationProperties;true;getManagement;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.integration;IntegrationProperties;true;getPoller;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.integration;IntegrationProperties;true;getRsocket;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.jackson;JacksonProperties;true;getDateFormat;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.jackson;JacksonProperties;true;getDeserialization;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.jackson;JacksonProperties;true;getGenerator;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.jackson;JacksonProperties;true;getLocale;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.jackson;JacksonProperties;true;getMapper;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.jackson;JacksonProperties;true;getParser;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.jackson;JacksonProperties;true;getPropertyNamingStrategy;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.jackson;JacksonProperties;true;getSerialization;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.jackson;JacksonProperties;true;getTimeZone;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.jackson;JacksonProperties;true;getVisibility;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.jackson;JacksonProperties;true;setDateFormat;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.jackson;JacksonProperties;true;setLocale;(Locale);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.jackson;JacksonProperties;true;setPropertyNamingStrategy;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.jackson;JacksonProperties;true;setTimeZone;(TimeZone);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.jdbc;DataSourceProperties$Xa;true;getDataSourceClassName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.jdbc;DataSourceProperties$Xa;true;getProperties;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.jdbc;DataSourceProperties$Xa;true;setDataSourceClassName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.jdbc;DataSourceProperties$Xa;true;setProperties;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.jdbc;DataSourceProperties;true;determineDatabaseName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.jdbc;DataSourceProperties;true;determineDriverClassName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.jdbc;DataSourceProperties;true;determinePassword;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.jdbc;DataSourceProperties;true;determineUrl;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.jdbc;DataSourceProperties;true;determineUsername;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.jdbc;DataSourceProperties;true;getClassLoader;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.jdbc;DataSourceProperties;true;getData;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.jdbc;DataSourceProperties;true;getDataPassword;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.jdbc;DataSourceProperties;true;getDataUsername;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.jdbc;DataSourceProperties;true;getDriverClassName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.jdbc;DataSourceProperties;true;getJndiName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.jdbc;DataSourceProperties;true;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.jdbc;DataSourceProperties;true;getPassword;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.jdbc;DataSourceProperties;true;getPlatform;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.jdbc;DataSourceProperties;true;getSchema;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.jdbc;DataSourceProperties;true;getSchemaPassword;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.jdbc;DataSourceProperties;true;getSchemaUsername;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.jdbc;DataSourceProperties;true;getSeparator;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.jdbc;DataSourceProperties;true;getUrl;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.jdbc;DataSourceProperties;true;getUsername;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.jdbc;DataSourceProperties;true;getXa;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.jdbc;DataSourceProperties;true;setData;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.jdbc;DataSourceProperties;true;setDataPassword;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.jdbc;DataSourceProperties;true;setDataUsername;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.jdbc;DataSourceProperties;true;setDriverClassName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.jdbc;DataSourceProperties;true;setJndiName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.jdbc;DataSourceProperties;true;setName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.jdbc;DataSourceProperties;true;setPassword;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.jdbc;DataSourceProperties;true;setPlatform;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.jdbc;DataSourceProperties;true;setSchema;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.jdbc;DataSourceProperties;true;setSchemaPassword;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.jdbc;DataSourceProperties;true;setSchemaUsername;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.jdbc;DataSourceProperties;true;setSeparator;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.jdbc;DataSourceProperties;true;setUrl;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.jdbc;DataSourceProperties;true;setUsername;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.jdbc;DataSourceProperties;true;setXa;(Xa);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.jdbc;JdbcProperties$Template;true;getQueryTimeout;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.jdbc;JdbcProperties$Template;true;setQueryTimeout;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.jdbc;JdbcProperties;true;getTemplate;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.jersey;JerseyAutoConfiguration;true;JerseyAutoConfiguration;(JerseyProperties,ResourceConfig,ObjectProvider);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.jersey;JerseyAutoConfiguration;true;JerseyAutoConfiguration;(JerseyProperties,ResourceConfig,ObjectProvider);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.jersey;JerseyProperties;true;getApplicationPath;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.jersey;JerseyProperties;true;getFilter;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.jersey;JerseyProperties;true;getInit;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.jersey;JerseyProperties;true;getServlet;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.jersey;JerseyProperties;true;setApplicationPath;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.jersey;JerseyProperties;true;setInit;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.jms.activemq;ActiveMQProperties$Packages;true;getTrusted;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.jms.activemq;ActiveMQProperties$Packages;true;setTrusted;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.jms.activemq;ActiveMQProperties;true;getBrokerUrl;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.jms.activemq;ActiveMQProperties;true;getCloseTimeout;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.jms.activemq;ActiveMQProperties;true;getPackages;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.jms.activemq;ActiveMQProperties;true;getPassword;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.jms.activemq;ActiveMQProperties;true;getPool;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.jms.activemq;ActiveMQProperties;true;getSendTimeout;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.jms.activemq;ActiveMQProperties;true;getUser;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.jms.activemq;ActiveMQProperties;true;setBrokerUrl;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.jms.activemq;ActiveMQProperties;true;setCloseTimeout;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.jms.activemq;ActiveMQProperties;true;setPassword;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.jms.activemq;ActiveMQProperties;true;setSendTimeout;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.jms.activemq;ActiveMQProperties;true;setUser;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.jms.artemis;ArtemisProperties$Embedded;true;getClusterPassword;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.jms.artemis;ArtemisProperties$Embedded;true;getDataDirectory;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.jms.artemis;ArtemisProperties$Embedded;true;getQueues;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.jms.artemis;ArtemisProperties$Embedded;true;getTopics;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.jms.artemis;ArtemisProperties$Embedded;true;setClusterPassword;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.jms.artemis;ArtemisProperties$Embedded;true;setDataDirectory;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.jms.artemis;ArtemisProperties$Embedded;true;setQueues;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.jms.artemis;ArtemisProperties$Embedded;true;setTopics;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.jms.artemis;ArtemisProperties;true;getBrokerUrl;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.jms.artemis;ArtemisProperties;true;getEmbedded;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.jms.artemis;ArtemisProperties;true;getHost;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.jms.artemis;ArtemisProperties;true;getPassword;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.jms.artemis;ArtemisProperties;true;getPool;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.jms.artemis;ArtemisProperties;true;getUser;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.jms.artemis;ArtemisProperties;true;setBrokerUrl;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.jms.artemis;ArtemisProperties;true;setHost;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.jms.artemis;ArtemisProperties;true;setPassword;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.jms.artemis;ArtemisProperties;true;setUser;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.jms;JmsPoolConnectionFactoryFactory;true;JmsPoolConnectionFactoryFactory;(JmsPoolConnectionFactoryProperties);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.jms;JmsPoolConnectionFactoryProperties;true;getBlockIfFullTimeout;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.jms;JmsPoolConnectionFactoryProperties;true;getIdleTimeout;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.jms;JmsPoolConnectionFactoryProperties;true;getTimeBetweenExpirationCheck;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.jms;JmsPoolConnectionFactoryProperties;true;setBlockIfFullTimeout;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.jms;JmsPoolConnectionFactoryProperties;true;setIdleTimeout;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.jms;JmsPoolConnectionFactoryProperties;true;setTimeBetweenExpirationCheck;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.jms;JmsProperties$Listener;true;getReceiveTimeout;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.jms;JmsProperties$Listener;true;setReceiveTimeout;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.jms;JmsProperties$Template;true;getDefaultDestination;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.jms;JmsProperties$Template;true;getDeliveryDelay;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.jms;JmsProperties$Template;true;getReceiveTimeout;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.jms;JmsProperties$Template;true;getTimeToLive;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.jms;JmsProperties$Template;true;setDefaultDestination;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.jms;JmsProperties$Template;true;setDeliveryDelay;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.jms;JmsProperties$Template;true;setReceiveTimeout;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.jms;JmsProperties$Template;true;setTimeToLive;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.jms;JmsProperties;true;getCache;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.jms;JmsProperties;true;getJndiName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.jms;JmsProperties;true;getListener;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.jms;JmsProperties;true;getTemplate;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.jms;JmsProperties;true;setJndiName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.jmx;JmxAutoConfiguration;true;JmxAutoConfiguration;(Environment);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.jooq;JooqAutoConfiguration;true;transactionProvider;(PlatformTransactionManager);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.jooq;SpringTransactionProvider;true;SpringTransactionProvider;(PlatformTransactionManager);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.kafka;ConcurrentKafkaListenerContainerFactoryConfigurer;true;setCommonErrorHandler;(CommonErrorHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaAutoConfiguration;true;KafkaAutoConfiguration;(KafkaProperties);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Admin;true;buildProperties;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Admin;true;getClientId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Admin;true;getProperties;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Admin;true;getSecurity;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Admin;true;getSsl;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Admin;true;setClientId;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Consumer;true;buildProperties;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Consumer;true;getAutoCommitInterval;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Consumer;true;getAutoOffsetReset;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Consumer;true;getBootstrapServers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Consumer;true;getClientId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Consumer;true;getFetchMaxWait;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Consumer;true;getFetchMinSize;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Consumer;true;getGroupId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Consumer;true;getHeartbeatInterval;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Consumer;true;getProperties;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Consumer;true;getSecurity;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Consumer;true;getSsl;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Consumer;true;setAutoCommitInterval;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Consumer;true;setAutoOffsetReset;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Consumer;true;setBootstrapServers;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Consumer;true;setClientId;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Consumer;true;setFetchMaxWait;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Consumer;true;setFetchMinSize;(DataSize);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Consumer;true;setGroupId;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Consumer;true;setHeartbeatInterval;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Jaas;true;getLoginModule;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Jaas;true;getOptions;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Jaas;true;setLoginModule;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Jaas;true;setOptions;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Listener;true;getAckTime;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Listener;true;getClientId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Listener;true;getIdleBetweenPolls;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Listener;true;getIdleEventInterval;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Listener;true;getMonitorInterval;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Listener;true;getPollTimeout;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Listener;true;setAckTime;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Listener;true;setClientId;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Listener;true;setIdleBetweenPolls;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Listener;true;setIdleEventInterval;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Listener;true;setMonitorInterval;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Listener;true;setPollTimeout;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Producer;true;buildProperties;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Producer;true;getAcks;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Producer;true;getBatchSize;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Producer;true;getBootstrapServers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Producer;true;getBufferMemory;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Producer;true;getClientId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Producer;true;getCompressionType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Producer;true;getProperties;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Producer;true;getSecurity;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Producer;true;getSsl;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Producer;true;getTransactionIdPrefix;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Producer;true;setAcks;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Producer;true;setBatchSize;(DataSize);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Producer;true;setBootstrapServers;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Producer;true;setBufferMemory;(DataSize);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Producer;true;setClientId;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Producer;true;setCompressionType;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Producer;true;setTransactionIdPrefix;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Security;true;getProtocol;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Security;true;setProtocol;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Ssl;true;getKeyPassword;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Ssl;true;getKeyStoreCertificateChain;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Ssl;true;getKeyStoreKey;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Ssl;true;getKeyStoreLocation;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Ssl;true;getKeyStorePassword;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Ssl;true;getKeyStoreType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Ssl;true;getProtocol;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Ssl;true;getTrustStoreCertificates;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Ssl;true;getTrustStoreLocation;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Ssl;true;getTrustStorePassword;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Ssl;true;getTrustStoreType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Ssl;true;setKeyPassword;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Ssl;true;setKeyStoreCertificateChain;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Ssl;true;setKeyStoreKey;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Ssl;true;setKeyStoreLocation;(Resource);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Ssl;true;setKeyStorePassword;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Ssl;true;setKeyStoreType;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Ssl;true;setProtocol;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Ssl;true;setTrustStoreCertificates;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Ssl;true;setTrustStoreLocation;(Resource);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Ssl;true;setTrustStorePassword;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Ssl;true;setTrustStoreType;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Streams;true;buildProperties;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Streams;true;getApplicationId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Streams;true;getBootstrapServers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Streams;true;getCacheMaxSizeBuffering;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Streams;true;getCleanup;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Streams;true;getClientId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Streams;true;getProperties;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Streams;true;getSecurity;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Streams;true;getSsl;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Streams;true;getStateDir;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Streams;true;setApplicationId;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Streams;true;setBootstrapServers;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Streams;true;setCacheMaxSizeBuffering;(DataSize);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Streams;true;setClientId;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Streams;true;setStateDir;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Template;true;getDefaultTopic;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties$Template;true;setDefaultTopic;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties;true;buildAdminProperties;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties;true;buildConsumerProperties;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties;true;buildProducerProperties;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties;true;buildStreamsProperties;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties;true;getAdmin;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties;true;getBootstrapServers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties;true;getClientId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties;true;getConsumer;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties;true;getJaas;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties;true;getListener;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties;true;getProducer;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties;true;getProperties;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties;true;getSecurity;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties;true;getSsl;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties;true;getStreams;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties;true;getTemplate;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties;true;setBootstrapServers;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.kafka;KafkaProperties;true;setClientId;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.ldap.embedded;EmbeddedLdapAutoConfiguration;true;EmbeddedLdapAutoConfiguration;(EmbeddedLdapProperties);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.ldap.embedded;EmbeddedLdapAutoConfiguration;true;directoryServer;(ApplicationContext);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.ldap.embedded;EmbeddedLdapProperties$Credential;true;getPassword;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.ldap.embedded;EmbeddedLdapProperties$Credential;true;getUsername;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.ldap.embedded;EmbeddedLdapProperties$Credential;true;setPassword;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.ldap.embedded;EmbeddedLdapProperties$Credential;true;setUsername;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.ldap.embedded;EmbeddedLdapProperties$Validation;true;getSchema;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.ldap.embedded;EmbeddedLdapProperties$Validation;true;setSchema;(Resource);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.ldap.embedded;EmbeddedLdapProperties;true;getBaseDn;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.ldap.embedded;EmbeddedLdapProperties;true;getCredential;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.ldap.embedded;EmbeddedLdapProperties;true;getLdif;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.ldap.embedded;EmbeddedLdapProperties;true;getValidation;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.ldap.embedded;EmbeddedLdapProperties;true;setBaseDn;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.ldap.embedded;EmbeddedLdapProperties;true;setCredential;(Credential);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.ldap.embedded;EmbeddedLdapProperties;true;setLdif;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.ldap;LdapProperties;true;determineUrls;(Environment);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.ldap;LdapProperties;true;getBase;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.ldap;LdapProperties;true;getBaseEnvironment;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.ldap;LdapProperties;true;getPassword;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.ldap;LdapProperties;true;getTemplate;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.ldap;LdapProperties;true;getUrls;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.ldap;LdapProperties;true;getUsername;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.ldap;LdapProperties;true;setBase;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.ldap;LdapProperties;true;setPassword;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.ldap;LdapProperties;true;setUrls;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.ldap;LdapProperties;true;setUsername;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.liquibase;LiquibaseAutoConfiguration$LiquibaseConfiguration;true;LiquibaseConfiguration;(LiquibaseProperties);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.liquibase;LiquibaseAutoConfiguration;true;liquibaseDefaultDdlModeProvider;(ObjectProvider);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.liquibase;LiquibaseProperties;true;getChangeLog;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.liquibase;LiquibaseProperties;true;getContexts;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.liquibase;LiquibaseProperties;true;getDatabaseChangeLogLockTable;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.liquibase;LiquibaseProperties;true;getDatabaseChangeLogTable;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.liquibase;LiquibaseProperties;true;getDefaultSchema;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.liquibase;LiquibaseProperties;true;getDriverClassName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.liquibase;LiquibaseProperties;true;getLabels;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.liquibase;LiquibaseProperties;true;getLiquibaseSchema;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.liquibase;LiquibaseProperties;true;getLiquibaseTablespace;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.liquibase;LiquibaseProperties;true;getParameters;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.liquibase;LiquibaseProperties;true;getPassword;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.liquibase;LiquibaseProperties;true;getRollbackFile;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.liquibase;LiquibaseProperties;true;getTag;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.liquibase;LiquibaseProperties;true;getUrl;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.liquibase;LiquibaseProperties;true;getUser;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.liquibase;LiquibaseProperties;true;setChangeLog;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.liquibase;LiquibaseProperties;true;setContexts;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.liquibase;LiquibaseProperties;true;setDatabaseChangeLogLockTable;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.liquibase;LiquibaseProperties;true;setDatabaseChangeLogTable;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.liquibase;LiquibaseProperties;true;setDefaultSchema;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.liquibase;LiquibaseProperties;true;setDriverClassName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.liquibase;LiquibaseProperties;true;setLabels;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.liquibase;LiquibaseProperties;true;setLiquibaseSchema;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.liquibase;LiquibaseProperties;true;setLiquibaseTablespace;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.liquibase;LiquibaseProperties;true;setParameters;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.liquibase;LiquibaseProperties;true;setPassword;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.liquibase;LiquibaseProperties;true;setRollbackFile;(File);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.liquibase;LiquibaseProperties;true;setTag;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.liquibase;LiquibaseProperties;true;setUrl;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.liquibase;LiquibaseProperties;true;setUser;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.logging;ConditionEvaluationReportMessage;true;ConditionEvaluationReportMessage;(ConditionEvaluationReport,String);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.logging;ConditionEvaluationReportMessage;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.mail;MailProperties;true;getHost;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.mail;MailProperties;true;getJndiName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.mail;MailProperties;true;getPassword;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.mail;MailProperties;true;getProperties;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.mail;MailProperties;true;getProtocol;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.mail;MailProperties;true;getUsername;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.mail;MailProperties;true;setHost;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.mail;MailProperties;true;setJndiName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.mail;MailProperties;true;setPassword;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.mail;MailProperties;true;setProtocol;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.mail;MailProperties;true;setUsername;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.mail;MailSenderValidatorAutoConfiguration;true;MailSenderValidatorAutoConfiguration;(JavaMailSenderImpl);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.mongo.embedded;EmbeddedMongoAutoConfiguration;true;EmbeddedMongoAutoConfiguration;(MongoProperties);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.mongo.embedded;EmbeddedMongoProperties$Storage;true;getDatabaseDir;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.mongo.embedded;EmbeddedMongoProperties$Storage;true;getOplogSize;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.mongo.embedded;EmbeddedMongoProperties$Storage;true;getReplSetName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.mongo.embedded;EmbeddedMongoProperties$Storage;true;setDatabaseDir;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.mongo.embedded;EmbeddedMongoProperties$Storage;true;setOplogSize;(DataSize);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.mongo.embedded;EmbeddedMongoProperties$Storage;true;setReplSetName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.mongo.embedded;EmbeddedMongoProperties;true;getFeatures;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.mongo.embedded;EmbeddedMongoProperties;true;getStorage;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.mongo.embedded;EmbeddedMongoProperties;true;getVersion;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.mongo.embedded;EmbeddedMongoProperties;true;setFeatures;(Set);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.mongo.embedded;EmbeddedMongoProperties;true;setVersion;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.mongo;MongoClientFactory;true;MongoClientFactory;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.mongo;MongoProperties$Gridfs;true;getBucket;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.mongo;MongoProperties$Gridfs;true;getDatabase;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.mongo;MongoProperties$Gridfs;true;setBucket;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.mongo;MongoProperties$Gridfs;true;setDatabase;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.mongo;MongoProperties;true;determineUri;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.mongo;MongoProperties;true;getAuthenticationDatabase;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.mongo;MongoProperties;true;getDatabase;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.mongo;MongoProperties;true;getGridfs;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.mongo;MongoProperties;true;getHost;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.mongo;MongoProperties;true;getMongoClientDatabase;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.mongo;MongoProperties;true;getPassword;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.mongo;MongoProperties;true;getReplicaSetName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.mongo;MongoProperties;true;getUri;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.mongo;MongoProperties;true;getUsername;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.mongo;MongoProperties;true;setAuthenticationDatabase;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.mongo;MongoProperties;true;setDatabase;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.mongo;MongoProperties;true;setHost;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.mongo;MongoProperties;true;setPassword;(char[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.mongo;MongoProperties;true;setReplicaSetName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.mongo;MongoProperties;true;setUri;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.mongo;MongoProperties;true;setUsername;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.mongo;MongoPropertiesClientSettingsBuilderCustomizer;true;MongoPropertiesClientSettingsBuilderCustomizer;(MongoProperties,Environment);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.mongo;MongoPropertiesClientSettingsBuilderCustomizer;true;MongoPropertiesClientSettingsBuilderCustomizer;(MongoProperties,Environment);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.mongo;ReactiveMongoClientFactory;true;ReactiveMongoClientFactory;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.mustache;MustacheAutoConfiguration;true;MustacheAutoConfiguration;(MustacheProperties,ApplicationContext);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.mustache;MustacheAutoConfiguration;true;MustacheAutoConfiguration;(MustacheProperties,ApplicationContext);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.mustache;MustacheResourceTemplateLoader;true;MustacheResourceTemplateLoader;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.mustache;MustacheResourceTemplateLoader;true;MustacheResourceTemplateLoader;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.mustache;MustacheResourceTemplateLoader;true;setCharset;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.neo4j;Neo4jProperties$Authentication;true;getKerberosTicket;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.neo4j;Neo4jProperties$Authentication;true;getPassword;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.neo4j;Neo4jProperties$Authentication;true;getRealm;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.neo4j;Neo4jProperties$Authentication;true;getUsername;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.neo4j;Neo4jProperties$Authentication;true;setKerberosTicket;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.neo4j;Neo4jProperties$Authentication;true;setPassword;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.neo4j;Neo4jProperties$Authentication;true;setRealm;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.neo4j;Neo4jProperties$Authentication;true;setUsername;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.neo4j;Neo4jProperties$Pool;true;getConnectionAcquisitionTimeout;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.neo4j;Neo4jProperties$Pool;true;getIdleTimeBeforeConnectionTest;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.neo4j;Neo4jProperties$Pool;true;getMaxConnectionLifetime;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.neo4j;Neo4jProperties$Pool;true;setConnectionAcquisitionTimeout;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.neo4j;Neo4jProperties$Pool;true;setIdleTimeBeforeConnectionTest;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.neo4j;Neo4jProperties$Pool;true;setMaxConnectionLifetime;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.neo4j;Neo4jProperties$Security;true;getCertFile;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.neo4j;Neo4jProperties$Security;true;setCertFile;(File);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.neo4j;Neo4jProperties;true;getAuthentication;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.neo4j;Neo4jProperties;true;getConnectionTimeout;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.neo4j;Neo4jProperties;true;getMaxTransactionRetryTime;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.neo4j;Neo4jProperties;true;getPool;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.neo4j;Neo4jProperties;true;getSecurity;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.neo4j;Neo4jProperties;true;getUri;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.neo4j;Neo4jProperties;true;setConnectionTimeout;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.neo4j;Neo4jProperties;true;setMaxTransactionRetryTime;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.neo4j;Neo4jProperties;true;setUri;(URI);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.orm.jpa;HibernateProperties$Naming;true;getImplicitStrategy;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.orm.jpa;HibernateProperties$Naming;true;getPhysicalStrategy;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.orm.jpa;HibernateProperties$Naming;true;setImplicitStrategy;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.orm.jpa;HibernateProperties$Naming;true;setPhysicalStrategy;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.orm.jpa;HibernateProperties;true;determineHibernateProperties;(Map,HibernateSettings);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.orm.jpa;HibernateProperties;true;determineHibernateProperties;(Map,HibernateSettings);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.orm.jpa;HibernateProperties;true;getDdlAuto;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.orm.jpa;HibernateProperties;true;getNaming;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.orm.jpa;HibernateProperties;true;setDdlAuto;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.orm.jpa;HibernatePropertiesCustomizer;true;customize;(Map);;Argument[-1];Element of Argument[0];taint",
        "org.springframework.boot.autoconfigure.orm.jpa;HibernatePropertiesCustomizer;true;customize;(Map);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.orm.jpa;HibernateSettings;true;ddlAuto;(Supplier);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.autoconfigure.orm.jpa;HibernateSettings;true;ddlAuto;(Supplier);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.orm.jpa;HibernateSettings;true;ddlAuto;(Supplier);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.orm.jpa;HibernateSettings;true;getHibernatePropertiesCustomizers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.orm.jpa;HibernateSettings;true;hibernatePropertiesCustomizers;(Collection);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.autoconfigure.orm.jpa;HibernateSettings;true;hibernatePropertiesCustomizers;(Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.orm.jpa;HibernateSettings;true;hibernatePropertiesCustomizers;(Collection);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.orm.jpa;JpaBaseConfiguration;true;entityManagerFactoryBuilder;(JpaVendorAdapter,ObjectProvider,ObjectProvider);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.orm.jpa;JpaProperties;true;getDatabasePlatform;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.orm.jpa;JpaProperties;true;getMappingResources;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.orm.jpa;JpaProperties;true;getProperties;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.orm.jpa;JpaProperties;true;setDatabasePlatform;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.orm.jpa;JpaProperties;true;setProperties;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.quartz;QuartzDataSourceInitializer;true;QuartzDataSourceInitializer;(DataSource,ResourceLoader,QuartzProperties);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.quartz;QuartzDataSourceInitializer;true;QuartzDataSourceInitializer;(DataSource,ResourceLoader,QuartzProperties);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.quartz;QuartzDataSourceInitializer;true;QuartzDataSourceInitializer;(DataSource,ResourceLoader,QuartzProperties);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.quartz;QuartzDataSourceScriptDatabaseInitializer;true;QuartzDataSourceScriptDatabaseInitializer;(DataSource,DatabaseInitializationSettings);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.quartz;QuartzDataSourceScriptDatabaseInitializer;true;QuartzDataSourceScriptDatabaseInitializer;(DataSource,DatabaseInitializationSettings);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.quartz;QuartzDataSourceScriptDatabaseInitializer;true;QuartzDataSourceScriptDatabaseInitializer;(DataSource,QuartzProperties);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.quartz;QuartzProperties$Jdbc;true;getCommentPrefix;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.quartz;QuartzProperties$Jdbc;true;getSchema;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.quartz;QuartzProperties$Jdbc;true;setCommentPrefix;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.quartz;QuartzProperties$Jdbc;true;setSchema;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.quartz;QuartzProperties;true;getJdbc;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.quartz;QuartzProperties;true;getProperties;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.quartz;QuartzProperties;true;getSchedulerName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.quartz;QuartzProperties;true;getStartupDelay;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.quartz;QuartzProperties;true;setSchedulerName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.quartz;QuartzProperties;true;setStartupDelay;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.r2dbc;ConnectionFactoryBuilder;false;configure;(Consumer);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.autoconfigure.r2dbc;ConnectionFactoryBuilder;false;database;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.r2dbc;ConnectionFactoryBuilder;false;hostname;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.r2dbc;ConnectionFactoryBuilder;false;password;(CharSequence);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.r2dbc;ConnectionFactoryBuilder;false;port;(int);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.r2dbc;ConnectionFactoryBuilder;false;username;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.r2dbc;EmbeddedDatabaseConnection;false;getUrl;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.r2dbc;R2dbcProperties$Pool;true;getMaxAcquireTime;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.r2dbc;R2dbcProperties$Pool;true;getMaxCreateConnectionTime;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.r2dbc;R2dbcProperties$Pool;true;getMaxIdleTime;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.r2dbc;R2dbcProperties$Pool;true;getMaxLifeTime;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.r2dbc;R2dbcProperties$Pool;true;getValidationQuery;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.r2dbc;R2dbcProperties$Pool;true;setMaxAcquireTime;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.r2dbc;R2dbcProperties$Pool;true;setMaxCreateConnectionTime;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.r2dbc;R2dbcProperties$Pool;true;setMaxIdleTime;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.r2dbc;R2dbcProperties$Pool;true;setMaxLifeTime;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.r2dbc;R2dbcProperties$Pool;true;setValidationQuery;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.r2dbc;R2dbcProperties;true;determineUniqueName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.r2dbc;R2dbcProperties;true;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.r2dbc;R2dbcProperties;true;getPassword;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.r2dbc;R2dbcProperties;true;getPool;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.r2dbc;R2dbcProperties;true;getProperties;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.r2dbc;R2dbcProperties;true;getUrl;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.r2dbc;R2dbcProperties;true;getUsername;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.r2dbc;R2dbcProperties;true;setName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.r2dbc;R2dbcProperties;true;setPassword;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.r2dbc;R2dbcProperties;true;setUrl;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.r2dbc;R2dbcProperties;true;setUsername;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.rsocket;RSocketProperties$Server;true;getAddress;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.rsocket;RSocketProperties$Server;true;getFragmentSize;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.rsocket;RSocketProperties$Server;true;getMappingPath;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.rsocket;RSocketProperties$Server;true;getSsl;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.rsocket;RSocketProperties$Server;true;setAddress;(InetAddress);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.rsocket;RSocketProperties$Server;true;setFragmentSize;(DataSize);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.rsocket;RSocketProperties$Server;true;setMappingPath;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.rsocket;RSocketProperties$Server;true;setSsl;(Ssl);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.rsocket;RSocketProperties;true;getServer;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.security.oauth2.client;OAuth2ClientProperties$Provider;true;getAuthorizationUri;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.security.oauth2.client;OAuth2ClientProperties$Provider;true;getIssuerUri;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.security.oauth2.client;OAuth2ClientProperties$Provider;true;getJwkSetUri;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.security.oauth2.client;OAuth2ClientProperties$Provider;true;getTokenUri;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.security.oauth2.client;OAuth2ClientProperties$Provider;true;getUserInfoAuthenticationMethod;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.security.oauth2.client;OAuth2ClientProperties$Provider;true;getUserInfoUri;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.security.oauth2.client;OAuth2ClientProperties$Provider;true;getUserNameAttribute;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.security.oauth2.client;OAuth2ClientProperties$Provider;true;setAuthorizationUri;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.security.oauth2.client;OAuth2ClientProperties$Provider;true;setIssuerUri;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.security.oauth2.client;OAuth2ClientProperties$Provider;true;setJwkSetUri;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.security.oauth2.client;OAuth2ClientProperties$Provider;true;setTokenUri;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.security.oauth2.client;OAuth2ClientProperties$Provider;true;setUserInfoAuthenticationMethod;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.security.oauth2.client;OAuth2ClientProperties$Provider;true;setUserInfoUri;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.security.oauth2.client;OAuth2ClientProperties$Provider;true;setUserNameAttribute;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.security.oauth2.client;OAuth2ClientProperties$Registration;true;getAuthorizationGrantType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.security.oauth2.client;OAuth2ClientProperties$Registration;true;getClientAuthenticationMethod;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.security.oauth2.client;OAuth2ClientProperties$Registration;true;getClientId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.security.oauth2.client;OAuth2ClientProperties$Registration;true;getClientName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.security.oauth2.client;OAuth2ClientProperties$Registration;true;getClientSecret;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.security.oauth2.client;OAuth2ClientProperties$Registration;true;getProvider;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.security.oauth2.client;OAuth2ClientProperties$Registration;true;getRedirectUri;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.security.oauth2.client;OAuth2ClientProperties$Registration;true;getScope;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.security.oauth2.client;OAuth2ClientProperties$Registration;true;setAuthorizationGrantType;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.security.oauth2.client;OAuth2ClientProperties$Registration;true;setClientAuthenticationMethod;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.security.oauth2.client;OAuth2ClientProperties$Registration;true;setClientId;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.security.oauth2.client;OAuth2ClientProperties$Registration;true;setClientName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.security.oauth2.client;OAuth2ClientProperties$Registration;true;setClientSecret;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.security.oauth2.client;OAuth2ClientProperties$Registration;true;setProvider;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.security.oauth2.client;OAuth2ClientProperties$Registration;true;setRedirectUri;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.security.oauth2.client;OAuth2ClientProperties$Registration;true;setScope;(Set);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.security.oauth2.client;OAuth2ClientProperties;true;getProvider;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.security.oauth2.client;OAuth2ClientProperties;true;getRegistration;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.security.oauth2.resource;OAuth2ResourceServerProperties$Jwt;true;getIssuerUri;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.security.oauth2.resource;OAuth2ResourceServerProperties$Jwt;true;getJwkSetUri;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.security.oauth2.resource;OAuth2ResourceServerProperties$Jwt;true;getJwsAlgorithm;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.security.oauth2.resource;OAuth2ResourceServerProperties$Jwt;true;getPublicKeyLocation;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.security.oauth2.resource;OAuth2ResourceServerProperties$Jwt;true;setIssuerUri;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.security.oauth2.resource;OAuth2ResourceServerProperties$Jwt;true;setJwkSetUri;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.security.oauth2.resource;OAuth2ResourceServerProperties$Jwt;true;setJwsAlgorithm;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.security.oauth2.resource;OAuth2ResourceServerProperties$Jwt;true;setPublicKeyLocation;(Resource);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.security.oauth2.resource;OAuth2ResourceServerProperties$Opaquetoken;true;getClientId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.security.oauth2.resource;OAuth2ResourceServerProperties$Opaquetoken;true;getClientSecret;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.security.oauth2.resource;OAuth2ResourceServerProperties$Opaquetoken;true;getIntrospectionUri;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.security.oauth2.resource;OAuth2ResourceServerProperties$Opaquetoken;true;setClientId;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.security.oauth2.resource;OAuth2ResourceServerProperties$Opaquetoken;true;setClientSecret;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.security.oauth2.resource;OAuth2ResourceServerProperties$Opaquetoken;true;setIntrospectionUri;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.security.oauth2.resource;OAuth2ResourceServerProperties;true;getJwt;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.security.oauth2.resource;OAuth2ResourceServerProperties;true;getOpaquetoken;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.security.reactive;StaticResourceRequest;false;at;(Set);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.security.saml2;Saml2RelyingPartyProperties$Decryption$Credential;true;getCertificateLocation;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.security.saml2;Saml2RelyingPartyProperties$Decryption$Credential;true;getPrivateKeyLocation;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.security.saml2;Saml2RelyingPartyProperties$Decryption$Credential;true;setCertificateLocation;(Resource);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.security.saml2;Saml2RelyingPartyProperties$Decryption$Credential;true;setPrivateKeyLocation;(Resource);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.security.saml2;Saml2RelyingPartyProperties$Decryption;true;getCredentials;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.security.saml2;Saml2RelyingPartyProperties$Decryption;true;setCredentials;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.security.saml2;Saml2RelyingPartyProperties$Identityprovider$Singlesignon;true;getUrl;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.security.saml2;Saml2RelyingPartyProperties$Identityprovider$Singlesignon;true;setUrl;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.security.saml2;Saml2RelyingPartyProperties$Identityprovider$Verification$Credential;true;getCertificateLocation;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.security.saml2;Saml2RelyingPartyProperties$Identityprovider$Verification$Credential;true;setCertificateLocation;(Resource);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.security.saml2;Saml2RelyingPartyProperties$Identityprovider$Verification;true;getCredentials;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.security.saml2;Saml2RelyingPartyProperties$Identityprovider$Verification;true;setCredentials;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.security.saml2;Saml2RelyingPartyProperties$Identityprovider;true;getEntityId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.security.saml2;Saml2RelyingPartyProperties$Identityprovider;true;getMetadataUri;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.security.saml2;Saml2RelyingPartyProperties$Identityprovider;true;getSinglesignon;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.security.saml2;Saml2RelyingPartyProperties$Identityprovider;true;getVerification;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.security.saml2;Saml2RelyingPartyProperties$Identityprovider;true;setEntityId;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.security.saml2;Saml2RelyingPartyProperties$Identityprovider;true;setMetadataUri;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.security.saml2;Saml2RelyingPartyProperties$Registration$Acs;true;getLocation;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.security.saml2;Saml2RelyingPartyProperties$Registration$Acs;true;setLocation;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.security.saml2;Saml2RelyingPartyProperties$Registration$Signing$Credential;true;getCertificateLocation;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.security.saml2;Saml2RelyingPartyProperties$Registration$Signing$Credential;true;getPrivateKeyLocation;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.security.saml2;Saml2RelyingPartyProperties$Registration$Signing$Credential;true;setCertificateLocation;(Resource);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.security.saml2;Saml2RelyingPartyProperties$Registration$Signing$Credential;true;setPrivateKeyLocation;(Resource);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.security.saml2;Saml2RelyingPartyProperties$Registration$Signing;true;getCredentials;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.security.saml2;Saml2RelyingPartyProperties$Registration$Signing;true;setCredentials;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.security.saml2;Saml2RelyingPartyProperties$Registration;true;getAcs;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.security.saml2;Saml2RelyingPartyProperties$Registration;true;getDecryption;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.security.saml2;Saml2RelyingPartyProperties$Registration;true;getEntityId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.security.saml2;Saml2RelyingPartyProperties$Registration;true;getIdentityprovider;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.security.saml2;Saml2RelyingPartyProperties$Registration;true;getSigning;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.security.saml2;Saml2RelyingPartyProperties$Registration;true;setEntityId;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.security.saml2;Saml2RelyingPartyProperties;true;getRegistration;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.security.servlet;AntPathRequestMatcherProvider;true;AntPathRequestMatcherProvider;(Function);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.security.servlet;StaticResourceRequest;false;at;(Set);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.security;SecurityProperties$Filter;true;getDispatcherTypes;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.security;SecurityProperties$Filter;true;setDispatcherTypes;(Set);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.security;SecurityProperties$User;true;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.security;SecurityProperties$User;true;getPassword;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.security;SecurityProperties$User;true;getRoles;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.security;SecurityProperties$User;true;setName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.security;SecurityProperties$User;true;setPassword;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.security;SecurityProperties$User;true;setRoles;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.security;SecurityProperties;true;getFilter;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.security;SecurityProperties;true;getUser;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.sendgrid;SendGridProperties$Proxy;true;getHost;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.sendgrid;SendGridProperties$Proxy;true;setHost;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.sendgrid;SendGridProperties;true;getApiKey;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.sendgrid;SendGridProperties;true;getProxy;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.sendgrid;SendGridProperties;true;setApiKey;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.sendgrid;SendGridProperties;true;setProxy;(Proxy);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.session;HazelcastSessionProperties;true;getMapName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.session;HazelcastSessionProperties;true;setMapName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.session;JdbcSessionDataSourceInitializer;true;JdbcSessionDataSourceInitializer;(DataSource,ResourceLoader,JdbcSessionProperties);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.session;JdbcSessionDataSourceInitializer;true;JdbcSessionDataSourceInitializer;(DataSource,ResourceLoader,JdbcSessionProperties);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.session;JdbcSessionDataSourceInitializer;true;JdbcSessionDataSourceInitializer;(DataSource,ResourceLoader,JdbcSessionProperties);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.session;JdbcSessionDataSourceScriptDatabaseInitializer;true;JdbcSessionDataSourceScriptDatabaseInitializer;(DataSource,DatabaseInitializationSettings);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.session;JdbcSessionDataSourceScriptDatabaseInitializer;true;JdbcSessionDataSourceScriptDatabaseInitializer;(DataSource,DatabaseInitializationSettings);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.session;JdbcSessionDataSourceScriptDatabaseInitializer;true;JdbcSessionDataSourceScriptDatabaseInitializer;(DataSource,JdbcSessionProperties);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.session;JdbcSessionProperties;true;getCleanupCron;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.session;JdbcSessionProperties;true;getSchema;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.session;JdbcSessionProperties;true;getTableName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.session;JdbcSessionProperties;true;setCleanupCron;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.session;JdbcSessionProperties;true;setSchema;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.session;JdbcSessionProperties;true;setTableName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.session;MongoSessionProperties;true;getCollectionName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.session;MongoSessionProperties;true;setCollectionName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.session;NonUniqueSessionRepositoryException;true;NonUniqueSessionRepositoryException;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.session;NonUniqueSessionRepositoryException;true;getAvailableCandidates;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.session;RedisSessionProperties;true;getCleanupCron;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.session;RedisSessionProperties;true;getNamespace;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.session;RedisSessionProperties;true;setCleanupCron;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.session;RedisSessionProperties;true;setNamespace;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.session;SessionProperties$Servlet;true;getFilterDispatcherTypes;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.session;SessionProperties$Servlet;true;setFilterDispatcherTypes;(Set);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.session;SessionProperties;true;determineTimeout;(Supplier);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.session;SessionProperties;true;getServlet;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.session;SessionProperties;true;getTimeout;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.session;SessionProperties;true;setServlet;(Servlet);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.session;SessionProperties;true;setTimeout;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.solr;SolrProperties;true;getHost;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.solr;SolrProperties;true;getZkHost;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.solr;SolrProperties;true;setHost;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.solr;SolrProperties;true;setZkHost;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.sql.init;SqlDataSourceScriptDatabaseInitializer;true;SqlDataSourceScriptDatabaseInitializer;(DataSource,DatabaseInitializationSettings);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.sql.init;SqlDataSourceScriptDatabaseInitializer;true;SqlDataSourceScriptDatabaseInitializer;(DataSource,DatabaseInitializationSettings);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.sql.init;SqlDataSourceScriptDatabaseInitializer;true;SqlDataSourceScriptDatabaseInitializer;(DataSource,SqlInitializationProperties);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.sql.init;SqlInitializationProperties;true;getDataLocations;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.sql.init;SqlInitializationProperties;true;getPassword;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.sql.init;SqlInitializationProperties;true;getPlatform;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.sql.init;SqlInitializationProperties;true;getSchemaLocations;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.sql.init;SqlInitializationProperties;true;getSeparator;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.sql.init;SqlInitializationProperties;true;getUsername;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.sql.init;SqlInitializationProperties;true;setDataLocations;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.sql.init;SqlInitializationProperties;true;setPassword;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.sql.init;SqlInitializationProperties;true;setPlatform;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.sql.init;SqlInitializationProperties;true;setSchemaLocations;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.sql.init;SqlInitializationProperties;true;setSeparator;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.sql.init;SqlInitializationProperties;true;setUsername;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.sql.init;SqlR2dbcScriptDatabaseInitializer;true;SqlR2dbcScriptDatabaseInitializer;(ConnectionFactory,DatabaseInitializationSettings);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.sql.init;SqlR2dbcScriptDatabaseInitializer;true;SqlR2dbcScriptDatabaseInitializer;(ConnectionFactory,DatabaseInitializationSettings);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.sql.init;SqlR2dbcScriptDatabaseInitializer;true;SqlR2dbcScriptDatabaseInitializer;(ConnectionFactory,SqlInitializationProperties);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.task;TaskExecutionProperties$Pool;true;getKeepAlive;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.task;TaskExecutionProperties$Pool;true;setKeepAlive;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.task;TaskExecutionProperties$Shutdown;true;getAwaitTerminationPeriod;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.task;TaskExecutionProperties$Shutdown;true;setAwaitTerminationPeriod;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.task;TaskExecutionProperties;true;getPool;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.task;TaskExecutionProperties;true;getShutdown;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.task;TaskExecutionProperties;true;getThreadNamePrefix;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.task;TaskExecutionProperties;true;setThreadNamePrefix;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.task;TaskSchedulingProperties$Shutdown;true;getAwaitTerminationPeriod;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.task;TaskSchedulingProperties$Shutdown;true;setAwaitTerminationPeriod;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.task;TaskSchedulingProperties;true;getPool;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.task;TaskSchedulingProperties;true;getShutdown;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.task;TaskSchedulingProperties;true;getThreadNamePrefix;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.task;TaskSchedulingProperties;true;setThreadNamePrefix;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.template;AbstractTemplateViewResolverProperties;true;getPrefix;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.template;AbstractTemplateViewResolverProperties;true;getRequestContextAttribute;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.template;AbstractTemplateViewResolverProperties;true;getSuffix;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.template;AbstractTemplateViewResolverProperties;true;setPrefix;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.template;AbstractTemplateViewResolverProperties;true;setRequestContextAttribute;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.template;AbstractTemplateViewResolverProperties;true;setSuffix;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.template;AbstractViewResolverProperties;true;getContentType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.template;AbstractViewResolverProperties;true;getViewNames;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.template;AbstractViewResolverProperties;true;setContentType;(MimeType);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.template;AbstractViewResolverProperties;true;setViewNames;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.template;PathBasedTemplateAvailabilityProvider;true;PathBasedTemplateAvailabilityProvider;(String,Class,String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.template;PathBasedTemplateAvailabilityProvider;true;PathBasedTemplateAvailabilityProvider;(String,Class,String);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.template;TemplateAvailabilityProviders;true;getProvider;(String,ApplicationContext);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.template;TemplateAvailabilityProviders;true;getProvider;(String,ApplicationContext);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.template;TemplateAvailabilityProviders;true;getProvider;(String,Environment,ClassLoader,ResourceLoader);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.template;TemplateAvailabilityProviders;true;getProvider;(String,Environment,ClassLoader,ResourceLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.template;TemplateAvailabilityProviders;true;getProviders;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.template;TemplateLocation;true;TemplateLocation;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.template;TemplateLocation;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.thymeleaf;ThymeleafProperties$Reactive;true;getChunkedModeViewNames;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.thymeleaf;ThymeleafProperties$Reactive;true;getFullModeViewNames;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.thymeleaf;ThymeleafProperties$Reactive;true;getMaxChunkSize;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.thymeleaf;ThymeleafProperties$Reactive;true;getMediaTypes;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.thymeleaf;ThymeleafProperties$Reactive;true;setChunkedModeViewNames;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.thymeleaf;ThymeleafProperties$Reactive;true;setFullModeViewNames;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.thymeleaf;ThymeleafProperties$Reactive;true;setMaxChunkSize;(DataSize);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.thymeleaf;ThymeleafProperties$Reactive;true;setMediaTypes;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.thymeleaf;ThymeleafProperties$Servlet;true;getContentType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.thymeleaf;ThymeleafProperties$Servlet;true;setContentType;(MimeType);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.thymeleaf;ThymeleafProperties;true;getExcludedViewNames;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.thymeleaf;ThymeleafProperties;true;getMode;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.thymeleaf;ThymeleafProperties;true;getPrefix;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.thymeleaf;ThymeleafProperties;true;getReactive;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.thymeleaf;ThymeleafProperties;true;getServlet;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.thymeleaf;ThymeleafProperties;true;getSuffix;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.thymeleaf;ThymeleafProperties;true;getViewNames;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.thymeleaf;ThymeleafProperties;true;setExcludedViewNames;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.thymeleaf;ThymeleafProperties;true;setMode;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.thymeleaf;ThymeleafProperties;true;setPrefix;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.thymeleaf;ThymeleafProperties;true;setSuffix;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.thymeleaf;ThymeleafProperties;true;setViewNames;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.transaction.jta;JtaProperties;true;getLogDir;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.transaction.jta;JtaProperties;true;getTransactionManagerId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.transaction.jta;JtaProperties;true;setLogDir;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.transaction.jta;JtaProperties;true;setTransactionManagerId;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.transaction;TransactionManagerCustomizers;true;TransactionManagerCustomizers;(Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.transaction;TransactionProperties;true;getDefaultTimeout;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.transaction;TransactionProperties;true;setDefaultTimeout;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.validation;ValidatorAdapter;true;get;(ApplicationContext,Validator);;Argument[1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.validation;ValidatorAdapter;true;getTarget;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web.client;RestTemplateBuilderConfigurer;false;configure;(RestTemplateBuilder);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web.embedded;EmbeddedWebServerFactoryCustomizerAutoConfiguration$JettyWebServerFactoryCustomizerConfiguration;true;jettyWebServerFactoryCustomizer;(Environment,ServerProperties);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web.embedded;EmbeddedWebServerFactoryCustomizerAutoConfiguration$JettyWebServerFactoryCustomizerConfiguration;true;jettyWebServerFactoryCustomizer;(Environment,ServerProperties);;Argument[1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web.embedded;EmbeddedWebServerFactoryCustomizerAutoConfiguration$NettyWebServerFactoryCustomizerConfiguration;true;nettyWebServerFactoryCustomizer;(Environment,ServerProperties);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web.embedded;EmbeddedWebServerFactoryCustomizerAutoConfiguration$NettyWebServerFactoryCustomizerConfiguration;true;nettyWebServerFactoryCustomizer;(Environment,ServerProperties);;Argument[1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web.embedded;EmbeddedWebServerFactoryCustomizerAutoConfiguration$TomcatWebServerFactoryCustomizerConfiguration;true;tomcatWebServerFactoryCustomizer;(Environment,ServerProperties);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web.embedded;EmbeddedWebServerFactoryCustomizerAutoConfiguration$TomcatWebServerFactoryCustomizerConfiguration;true;tomcatWebServerFactoryCustomizer;(Environment,ServerProperties);;Argument[1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web.embedded;EmbeddedWebServerFactoryCustomizerAutoConfiguration$UndertowWebServerFactoryCustomizerConfiguration;true;undertowWebServerFactoryCustomizer;(Environment,ServerProperties);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web.embedded;EmbeddedWebServerFactoryCustomizerAutoConfiguration$UndertowWebServerFactoryCustomizerConfiguration;true;undertowWebServerFactoryCustomizer;(Environment,ServerProperties);;Argument[1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web.embedded;JettyWebServerFactoryCustomizer;true;JettyWebServerFactoryCustomizer;(Environment,ServerProperties);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.embedded;JettyWebServerFactoryCustomizer;true;JettyWebServerFactoryCustomizer;(Environment,ServerProperties);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.embedded;NettyWebServerFactoryCustomizer;true;NettyWebServerFactoryCustomizer;(Environment,ServerProperties);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.embedded;NettyWebServerFactoryCustomizer;true;NettyWebServerFactoryCustomizer;(Environment,ServerProperties);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.embedded;TomcatWebServerFactoryCustomizer;true;TomcatWebServerFactoryCustomizer;(Environment,ServerProperties);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.embedded;TomcatWebServerFactoryCustomizer;true;TomcatWebServerFactoryCustomizer;(Environment,ServerProperties);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.embedded;UndertowWebServerFactoryCustomizer;true;UndertowWebServerFactoryCustomizer;(Environment,ServerProperties);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.embedded;UndertowWebServerFactoryCustomizer;true;UndertowWebServerFactoryCustomizer;(Environment,ServerProperties);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.format;DateTimeFormatters;true;dateFormat;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.autoconfigure.web.format;DateTimeFormatters;true;dateFormat;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.format;DateTimeFormatters;true;dateFormat;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web.format;DateTimeFormatters;true;dateTimeFormat;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.autoconfigure.web.format;DateTimeFormatters;true;timeFormat;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.autoconfigure.web.reactive.error;AbstractErrorWebExceptionHandler;true;AbstractErrorWebExceptionHandler;(ErrorAttributes,Resources,ApplicationContext);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.reactive.error;AbstractErrorWebExceptionHandler;true;AbstractErrorWebExceptionHandler;(ErrorAttributes,Resources,ApplicationContext);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.reactive.error;AbstractErrorWebExceptionHandler;true;AbstractErrorWebExceptionHandler;(ErrorAttributes,Resources,ApplicationContext);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.reactive.error;AbstractErrorWebExceptionHandler;true;setMessageReaders;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.reactive.error;AbstractErrorWebExceptionHandler;true;setMessageWriters;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.reactive.error;AbstractErrorWebExceptionHandler;true;setViewResolvers;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.reactive.error;DefaultErrorWebExceptionHandler;true;DefaultErrorWebExceptionHandler;(ErrorAttributes,Resources,ErrorProperties,ApplicationContext);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.reactive.error;DefaultErrorWebExceptionHandler;true;DefaultErrorWebExceptionHandler;(ErrorAttributes,Resources,ErrorProperties,ApplicationContext);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.reactive.error;DefaultErrorWebExceptionHandler;true;DefaultErrorWebExceptionHandler;(ErrorAttributes,Resources,ErrorProperties,ApplicationContext);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.reactive.error;DefaultErrorWebExceptionHandler;true;DefaultErrorWebExceptionHandler;(ErrorAttributes,Resources,ErrorProperties,ApplicationContext);;Argument[3];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.reactive.error;ErrorWebFluxAutoConfiguration;true;ErrorWebFluxAutoConfiguration;(ServerProperties);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.reactive.error;ErrorWebFluxAutoConfiguration;true;errorWebExceptionHandler;(ErrorAttributes,WebProperties,ObjectProvider,ServerCodecConfigurer,ApplicationContext);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web.reactive.error;ErrorWebFluxAutoConfiguration;true;errorWebExceptionHandler;(ErrorAttributes,WebProperties,ObjectProvider,ServerCodecConfigurer,ApplicationContext);;Argument[4];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web.reactive.function.client;ReactorNettyHttpClientMapper;true;configure;(HttpClient);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web.reactive.function.client;WebClientCodecCustomizer;true;WebClientCodecCustomizer;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.reactive;HttpHandlerAutoConfiguration$AnnotationConfig;true;AnnotationConfig;(ApplicationContext);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.reactive;ReactiveMultipartProperties;true;getFileStorageDirectory;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web.reactive;ReactiveMultipartProperties;true;getMaxDiskUsagePerPart;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web.reactive;ReactiveMultipartProperties;true;getMaxHeadersSize;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web.reactive;ReactiveMultipartProperties;true;getMaxInMemorySize;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web.reactive;ReactiveMultipartProperties;true;setFileStorageDirectory;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.reactive;ReactiveMultipartProperties;true;setMaxDiskUsagePerPart;(DataSize);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.reactive;ReactiveMultipartProperties;true;setMaxHeadersSize;(DataSize);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.reactive;ReactiveMultipartProperties;true;setMaxInMemorySize;(DataSize);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.reactive;ReactiveWebServerFactoryAutoConfiguration;true;reactiveWebServerFactoryCustomizer;(ServerProperties);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web.reactive;ReactiveWebServerFactoryAutoConfiguration;true;tomcatReactiveWebServerFactoryCustomizer;(ServerProperties);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web.reactive;ReactiveWebServerFactoryCustomizer;true;ReactiveWebServerFactoryCustomizer;(ServerProperties);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.reactive;TomcatReactiveWebServerFactoryCustomizer;true;TomcatReactiveWebServerFactoryCustomizer;(ServerProperties);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.reactive;WebFluxAutoConfiguration$EnableWebFluxConfiguration;true;EnableWebFluxConfiguration;(WebFluxProperties,WebProperties,ServerProperties,ObjectProvider);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.reactive;WebFluxAutoConfiguration$EnableWebFluxConfiguration;true;EnableWebFluxConfiguration;(WebFluxProperties,WebProperties,ServerProperties,ObjectProvider);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.reactive;WebFluxAutoConfiguration$EnableWebFluxConfiguration;true;EnableWebFluxConfiguration;(WebFluxProperties,WebProperties,ServerProperties,ObjectProvider);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.reactive;WebFluxAutoConfiguration$WebFluxConfig;true;WebFluxConfig;(WebProperties,WebFluxProperties,ListableBeanFactory,ObjectProvider,ObjectProvider,ObjectProvider,ObjectProvider);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.reactive;WebFluxAutoConfiguration$WebFluxConfig;true;WebFluxConfig;(WebProperties,WebFluxProperties,ListableBeanFactory,ObjectProvider,ObjectProvider,ObjectProvider,ObjectProvider);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.reactive;WebFluxAutoConfiguration$WebFluxConfig;true;WebFluxConfig;(WebProperties,WebFluxProperties,ListableBeanFactory,ObjectProvider,ObjectProvider,ObjectProvider,ObjectProvider);;Argument[3];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.reactive;WebFluxAutoConfiguration$WebFluxConfig;true;WebFluxConfig;(WebProperties,WebFluxProperties,ListableBeanFactory,ObjectProvider,ObjectProvider,ObjectProvider,ObjectProvider);;Argument[4];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.reactive;WebFluxAutoConfiguration$WebFluxConfig;true;WebFluxConfig;(WebProperties,WebFluxProperties,ListableBeanFactory,ObjectProvider,ObjectProvider,ObjectProvider,ObjectProvider);;Argument[6];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.reactive;WebFluxProperties$Format;true;getDate;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web.reactive;WebFluxProperties$Format;true;getDateTime;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web.reactive;WebFluxProperties$Format;true;getTime;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web.reactive;WebFluxProperties$Format;true;setDate;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.reactive;WebFluxProperties$Format;true;setDateTime;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.reactive;WebFluxProperties$Format;true;setTime;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.reactive;WebFluxProperties$Session;true;getCookie;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web.reactive;WebFluxProperties;true;getBasePath;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web.reactive;WebFluxProperties;true;getFormat;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web.reactive;WebFluxProperties;true;getSession;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web.reactive;WebFluxProperties;true;getStaticPathPattern;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web.reactive;WebFluxProperties;true;setBasePath;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.reactive;WebFluxProperties;true;setStaticPathPattern;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.reactive;WebSessionIdResolverAutoConfiguration;true;WebSessionIdResolverAutoConfiguration;(ServerProperties,WebFluxProperties);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.reactive;WebSessionIdResolverAutoConfiguration;true;WebSessionIdResolverAutoConfiguration;(ServerProperties,WebFluxProperties);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.servlet.error;AbstractErrorController;true;AbstractErrorController;(ErrorAttributes);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.servlet.error;AbstractErrorController;true;AbstractErrorController;(ErrorAttributes,List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.servlet.error;AbstractErrorController;true;AbstractErrorController;(ErrorAttributes,List);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.servlet.error;BasicErrorController;true;BasicErrorController;(ErrorAttributes,ErrorProperties);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.servlet.error;BasicErrorController;true;BasicErrorController;(ErrorAttributes,ErrorProperties);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.servlet.error;BasicErrorController;true;BasicErrorController;(ErrorAttributes,ErrorProperties,List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.servlet.error;BasicErrorController;true;BasicErrorController;(ErrorAttributes,ErrorProperties,List);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.servlet.error;BasicErrorController;true;BasicErrorController;(ErrorAttributes,ErrorProperties,List);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.servlet.error;DefaultErrorViewResolver;true;DefaultErrorViewResolver;(ApplicationContext,Resources);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.servlet.error;DefaultErrorViewResolver;true;DefaultErrorViewResolver;(ApplicationContext,Resources);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.servlet.error;ErrorMvcAutoConfiguration;true;ErrorMvcAutoConfiguration;(ServerProperties);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.servlet.error;ErrorMvcAutoConfiguration;true;basicErrorController;(ErrorAttributes,ObjectProvider);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web.servlet.error;ErrorMvcAutoConfiguration;true;errorPageCustomizer;(DispatcherServletPath);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web.servlet;DefaultJerseyApplicationPath;true;DefaultJerseyApplicationPath;(String,ResourceConfig);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.servlet;DefaultJerseyApplicationPath;true;DefaultJerseyApplicationPath;(String,ResourceConfig);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.servlet;DispatcherServletPath;true;getPath;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web.servlet;DispatcherServletPath;true;getPrefix;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web.servlet;DispatcherServletPath;true;getRelativePath;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web.servlet;DispatcherServletPath;true;getRelativePath;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web.servlet;DispatcherServletPath;true;getServletUrlMapping;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web.servlet;DispatcherServletRegistrationBean;true;DispatcherServletRegistrationBean;(DispatcherServlet,String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.servlet;DispatcherServletRegistrationBean;true;DispatcherServletRegistrationBean;(DispatcherServlet,String);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.servlet;JerseyApplicationPath;true;getPath;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web.servlet;JerseyApplicationPath;true;getPrefix;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web.servlet;JerseyApplicationPath;true;getRelativePath;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web.servlet;JerseyApplicationPath;true;getRelativePath;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web.servlet;JerseyApplicationPath;true;getUrlMapping;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web.servlet;MultipartAutoConfiguration;true;MultipartAutoConfiguration;(MultipartProperties);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.servlet;MultipartProperties;true;getFileSizeThreshold;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web.servlet;MultipartProperties;true;getLocation;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web.servlet;MultipartProperties;true;getMaxFileSize;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web.servlet;MultipartProperties;true;getMaxRequestSize;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web.servlet;MultipartProperties;true;setFileSizeThreshold;(DataSize);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.servlet;MultipartProperties;true;setLocation;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.servlet;MultipartProperties;true;setMaxFileSize;(DataSize);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.servlet;MultipartProperties;true;setMaxRequestSize;(DataSize);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.servlet;ServletWebServerFactoryAutoConfiguration;true;servletWebServerFactoryCustomizer;(ServerProperties,ObjectProvider,ObjectProvider);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web.servlet;ServletWebServerFactoryAutoConfiguration;true;tomcatServletWebServerFactoryCustomizer;(ServerProperties);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web.servlet;ServletWebServerFactoryCustomizer;true;ServletWebServerFactoryCustomizer;(ServerProperties);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.servlet;ServletWebServerFactoryCustomizer;true;ServletWebServerFactoryCustomizer;(ServerProperties,List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.servlet;ServletWebServerFactoryCustomizer;true;ServletWebServerFactoryCustomizer;(ServerProperties,List);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.servlet;TomcatServletWebServerFactoryCustomizer;true;TomcatServletWebServerFactoryCustomizer;(ServerProperties);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.servlet;UndertowServletWebServerFactoryCustomizer;true;UndertowServletWebServerFactoryCustomizer;(ServerProperties);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.servlet;WebMvcAutoConfiguration$EnableWebMvcConfiguration;true;EnableWebMvcConfiguration;(WebMvcProperties,WebProperties,ObjectProvider,ObjectProvider,ListableBeanFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.servlet;WebMvcAutoConfiguration$EnableWebMvcConfiguration;true;EnableWebMvcConfiguration;(WebMvcProperties,WebProperties,ObjectProvider,ObjectProvider,ListableBeanFactory);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.servlet;WebMvcAutoConfiguration$EnableWebMvcConfiguration;true;EnableWebMvcConfiguration;(WebMvcProperties,WebProperties,ObjectProvider,ObjectProvider,ListableBeanFactory);;Argument[4];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.servlet;WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter;true;WebMvcAutoConfigurationAdapter;(WebProperties,WebMvcProperties,ListableBeanFactory,ObjectProvider,ObjectProvider,ObjectProvider,ObjectProvider);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.servlet;WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter;true;WebMvcAutoConfigurationAdapter;(WebProperties,WebMvcProperties,ListableBeanFactory,ObjectProvider,ObjectProvider,ObjectProvider,ObjectProvider);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.servlet;WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter;true;WebMvcAutoConfigurationAdapter;(WebProperties,WebMvcProperties,ListableBeanFactory,ObjectProvider,ObjectProvider,ObjectProvider,ObjectProvider);;Argument[3];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.servlet;WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter;true;WebMvcAutoConfigurationAdapter;(WebProperties,WebMvcProperties,ListableBeanFactory,ObjectProvider,ObjectProvider,ObjectProvider,ObjectProvider);;Argument[5];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.servlet;WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter;true;WebMvcAutoConfigurationAdapter;(WebProperties,WebMvcProperties,ListableBeanFactory,ObjectProvider,ObjectProvider,ObjectProvider,ObjectProvider);;Argument[6];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.servlet;WebMvcProperties$Async;true;getRequestTimeout;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web.servlet;WebMvcProperties$Async;true;setRequestTimeout;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.servlet;WebMvcProperties$Contentnegotiation;true;getMediaTypes;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web.servlet;WebMvcProperties$Contentnegotiation;true;getParameterName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web.servlet;WebMvcProperties$Contentnegotiation;true;setMediaTypes;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.servlet;WebMvcProperties$Contentnegotiation;true;setParameterName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.servlet;WebMvcProperties$Format;true;getDate;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web.servlet;WebMvcProperties$Format;true;getDateTime;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web.servlet;WebMvcProperties$Format;true;getTime;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web.servlet;WebMvcProperties$Format;true;setDate;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.servlet;WebMvcProperties$Format;true;setDateTime;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.servlet;WebMvcProperties$Format;true;setTime;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.servlet;WebMvcProperties$Servlet;true;getPath;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web.servlet;WebMvcProperties$Servlet;true;getPath;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web.servlet;WebMvcProperties$Servlet;true;getPath;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web.servlet;WebMvcProperties$Servlet;true;getServletMapping;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web.servlet;WebMvcProperties$Servlet;true;getServletPrefix;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web.servlet;WebMvcProperties$Servlet;true;setPath;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.servlet;WebMvcProperties$View;true;getPrefix;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web.servlet;WebMvcProperties$View;true;getSuffix;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web.servlet;WebMvcProperties$View;true;setPrefix;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.servlet;WebMvcProperties$View;true;setSuffix;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.servlet;WebMvcProperties;true;getAsync;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web.servlet;WebMvcProperties;true;getContentnegotiation;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web.servlet;WebMvcProperties;true;getDateFormat;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web.servlet;WebMvcProperties;true;getFormat;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web.servlet;WebMvcProperties;true;getPathmatch;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web.servlet;WebMvcProperties;true;getServlet;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web.servlet;WebMvcProperties;true;getStaticPathPattern;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web.servlet;WebMvcProperties;true;getView;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web.servlet;WebMvcProperties;true;setDateFormat;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web.servlet;WebMvcProperties;true;setStaticPathPattern;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web;ErrorProperties;true;getPath;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ErrorProperties;true;getWhitelabel;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ErrorProperties;true;setPath;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Jetty$Accesslog;true;getCustomFormat;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Jetty$Accesslog;true;getFileDateFormat;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Jetty$Accesslog;true;getFilename;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Jetty$Accesslog;true;getIgnorePaths;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Jetty$Accesslog;true;setCustomFormat;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Jetty$Accesslog;true;setFileDateFormat;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Jetty$Accesslog;true;setFilename;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Jetty$Accesslog;true;setIgnorePaths;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Jetty$Threads;true;getIdleTimeout;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Jetty$Threads;true;setIdleTimeout;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Jetty;true;getAccesslog;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Jetty;true;getConnectionIdleTimeout;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Jetty;true;getMaxHttpFormPostSize;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Jetty;true;getThreads;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Jetty;true;setConnectionIdleTimeout;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Jetty;true;setMaxHttpFormPostSize;(DataSize);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Netty;true;getConnectionTimeout;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Netty;true;getH2cMaxContentLength;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Netty;true;getIdleTimeout;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Netty;true;getInitialBufferSize;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Netty;true;getMaxChunkSize;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Netty;true;getMaxInitialLineLength;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Netty;true;setConnectionTimeout;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Netty;true;setH2cMaxContentLength;(DataSize);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Netty;true;setIdleTimeout;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Netty;true;setInitialBufferSize;(DataSize);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Netty;true;setMaxChunkSize;(DataSize);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Netty;true;setMaxInitialLineLength;(DataSize);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Reactive$Session;true;getCookie;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Reactive$Session;true;getTimeout;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Reactive$Session;true;setTimeout;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Reactive;true;getSession;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Servlet;true;getApplicationDisplayName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Servlet;true;getContextParameters;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Servlet;true;getContextPath;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Servlet;true;getEncoding;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Servlet;true;getJsp;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Servlet;true;getSession;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Servlet;true;setApplicationDisplayName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Servlet;true;setContextPath;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Tomcat$Accesslog;true;getConditionIf;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Tomcat$Accesslog;true;getConditionUnless;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Tomcat$Accesslog;true;getDirectory;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Tomcat$Accesslog;true;getEncoding;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Tomcat$Accesslog;true;getFileDateFormat;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Tomcat$Accesslog;true;getLocale;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Tomcat$Accesslog;true;getPattern;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Tomcat$Accesslog;true;getPrefix;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Tomcat$Accesslog;true;getSuffix;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Tomcat$Accesslog;true;setConditionIf;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Tomcat$Accesslog;true;setConditionUnless;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Tomcat$Accesslog;true;setDirectory;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Tomcat$Accesslog;true;setEncoding;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Tomcat$Accesslog;true;setFileDateFormat;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Tomcat$Accesslog;true;setLocale;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Tomcat$Accesslog;true;setPattern;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Tomcat$Accesslog;true;setPrefix;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Tomcat$Accesslog;true;setSuffix;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Tomcat$Remoteip;true;getHostHeader;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Tomcat$Remoteip;true;getInternalProxies;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Tomcat$Remoteip;true;getPortHeader;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Tomcat$Remoteip;true;getProtocolHeader;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Tomcat$Remoteip;true;getProtocolHeaderHttpsValue;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Tomcat$Remoteip;true;getRemoteIpHeader;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Tomcat$Remoteip;true;setHostHeader;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Tomcat$Remoteip;true;setInternalProxies;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Tomcat$Remoteip;true;setPortHeader;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Tomcat$Remoteip;true;setProtocolHeader;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Tomcat$Remoteip;true;setProtocolHeaderHttpsValue;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Tomcat$Remoteip;true;setRemoteIpHeader;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Tomcat$Resource;true;getCacheTtl;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Tomcat$Resource;true;setCacheTtl;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Tomcat;true;getAccesslog;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Tomcat;true;getAdditionalTldSkipPatterns;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Tomcat;true;getBackgroundProcessorDelay;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Tomcat;true;getBasedir;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Tomcat;true;getConnectionTimeout;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Tomcat;true;getKeepAliveTimeout;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Tomcat;true;getMaxHttpFormPostSize;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Tomcat;true;getMaxSwallowSize;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Tomcat;true;getMbeanregistry;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Tomcat;true;getRelaxedPathChars;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Tomcat;true;getRelaxedQueryChars;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Tomcat;true;getRemoteip;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Tomcat;true;getResource;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Tomcat;true;getThreads;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Tomcat;true;setAdditionalTldSkipPatterns;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Tomcat;true;setBackgroundProcessorDelay;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Tomcat;true;setBasedir;(File);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Tomcat;true;setConnectionTimeout;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Tomcat;true;setKeepAliveTimeout;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Tomcat;true;setMaxHttpFormPostSize;(DataSize);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Tomcat;true;setMaxSwallowSize;(DataSize);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Tomcat;true;setRelaxedPathChars;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Tomcat;true;setRelaxedQueryChars;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Undertow$Accesslog;true;getDir;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Undertow$Accesslog;true;getPattern;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Undertow$Accesslog;true;getPrefix;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Undertow$Accesslog;true;getSuffix;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Undertow$Accesslog;true;setDir;(File);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Undertow$Accesslog;true;setPattern;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Undertow$Accesslog;true;setPrefix;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Undertow$Accesslog;true;setSuffix;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Undertow$Options;true;getServer;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Undertow$Options;true;getSocket;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Undertow;true;getAccesslog;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Undertow;true;getBufferSize;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Undertow;true;getMaxHttpPostSize;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Undertow;true;getNoRequestTimeout;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Undertow;true;getOptions;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Undertow;true;getThreads;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Undertow;true;setBufferSize;(DataSize);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Undertow;true;setMaxHttpPostSize;(DataSize);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties$Undertow;true;setNoRequestTimeout;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties;true;getAddress;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties;true;getCompression;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties;true;getError;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties;true;getHttp2;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties;true;getJetty;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties;true;getMaxHttpHeaderSize;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties;true;getNetty;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties;true;getReactive;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties;true;getServerHeader;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties;true;getServlet;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties;true;getSsl;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties;true;getTomcat;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties;true;getUndertow;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties;true;setAddress;(InetAddress);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties;true;setMaxHttpHeaderSize;(DataSize);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties;true;setServerHeader;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web;ServerProperties;true;setSsl;(Ssl);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web;WebProperties$Resources$Cache$Cachecontrol;true;getMaxAge;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;WebProperties$Resources$Cache$Cachecontrol;true;getSMaxAge;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;WebProperties$Resources$Cache$Cachecontrol;true;getStaleIfError;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;WebProperties$Resources$Cache$Cachecontrol;true;getStaleWhileRevalidate;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;WebProperties$Resources$Cache$Cachecontrol;true;setMaxAge;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web;WebProperties$Resources$Cache$Cachecontrol;true;setSMaxAge;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web;WebProperties$Resources$Cache$Cachecontrol;true;setStaleIfError;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web;WebProperties$Resources$Cache$Cachecontrol;true;setStaleWhileRevalidate;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web;WebProperties$Resources$Cache;true;getCachecontrol;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;WebProperties$Resources$Cache;true;getPeriod;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;WebProperties$Resources$Cache;true;setPeriod;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web;WebProperties$Resources$Chain$Strategy$Content;true;getPaths;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;WebProperties$Resources$Chain$Strategy$Content;true;setPaths;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web;WebProperties$Resources$Chain$Strategy$Fixed;true;getPaths;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;WebProperties$Resources$Chain$Strategy$Fixed;true;getVersion;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;WebProperties$Resources$Chain$Strategy$Fixed;true;setPaths;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web;WebProperties$Resources$Chain$Strategy$Fixed;true;setVersion;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web;WebProperties$Resources$Chain$Strategy;true;getContent;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;WebProperties$Resources$Chain$Strategy;true;getFixed;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;WebProperties$Resources$Chain;true;getStrategy;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;WebProperties$Resources;true;getCache;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;WebProperties$Resources;true;getChain;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;WebProperties$Resources;true;getStaticLocations;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;WebProperties$Resources;true;setStaticLocations;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.web;WebProperties;true;getLocale;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;WebProperties;true;getResources;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.web;WebProperties;true;setLocale;(Locale);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.webservices;WebServicesProperties$Servlet;true;getInit;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.webservices;WebServicesProperties$Servlet;true;setInit;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure.webservices;WebServicesProperties;true;getPath;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.webservices;WebServicesProperties;true;getServlet;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure.webservices;WebServicesProperties;true;setPath;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure;AutoConfigurationImportEvent;true;AutoConfigurationImportEvent;(Object,List,Set);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.autoconfigure;AutoConfigurationImportEvent;true;AutoConfigurationImportEvent;(Object,List,Set);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.autoconfigure;AutoConfigurationImportEvent;true;getCandidateConfigurations;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure;AutoConfigurationImportEvent;true;getExclusions;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.autoconfigure;AutoConfigurationImportFilter;true;match;(String[],AutoConfigurationMetadata);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.autoconfigure;AutoConfigurationMetadata;true;get;(String,String,String);;Argument[2];ReturnValue;taint",
        "org.springframework.boot.autoconfigure;AutoConfigurationMetadata;true;getSet;(String,String,Set);;Element of Argument[2];ReturnValue;taint",
        "org.springframework.boot.availability;ApplicationAvailability;true;getLastChangeEvent;(Class);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.availability;ApplicationAvailability;true;getState;(Class,AvailabilityState);;Argument[1];ReturnValue;taint",
        "org.springframework.boot.builder;ParentContextApplicationContextInitializer;true;ParentContextApplicationContextInitializer;(ApplicationContext);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.builder;SpringApplicationBuilder;true;SpringApplicationBuilder;(Class[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.builder;SpringApplicationBuilder;true;SpringApplicationBuilder;(ResourceLoader,Class[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.builder;SpringApplicationBuilder;true;SpringApplicationBuilder;(ResourceLoader,Class[]);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.builder;SpringApplicationBuilder;true;addBootstrapRegistryInitializer;(BootstrapRegistryInitializer);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.builder;SpringApplicationBuilder;true;addBootstrapRegistryInitializer;(BootstrapRegistryInitializer);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.builder;SpringApplicationBuilder;true;addBootstrapRegistryInitializer;(BootstrapRegistryInitializer);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.builder;SpringApplicationBuilder;true;addCommandLineProperties;(boolean);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.builder;SpringApplicationBuilder;true;allowCircularReferences;(boolean);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.builder;SpringApplicationBuilder;true;application;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.builder;SpringApplicationBuilder;true;applicationStartup;(ApplicationStartup);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.builder;SpringApplicationBuilder;true;applicationStartup;(ApplicationStartup);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.builder;SpringApplicationBuilder;true;applicationStartup;(ApplicationStartup);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.builder;SpringApplicationBuilder;true;banner;(Banner);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.builder;SpringApplicationBuilder;true;banner;(Banner);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.builder;SpringApplicationBuilder;true;banner;(Banner);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.builder;SpringApplicationBuilder;true;bannerMode;(Mode);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.builder;SpringApplicationBuilder;true;beanNameGenerator;(BeanNameGenerator);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.builder;SpringApplicationBuilder;true;beanNameGenerator;(BeanNameGenerator);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.builder;SpringApplicationBuilder;true;beanNameGenerator;(BeanNameGenerator);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.builder;SpringApplicationBuilder;true;build;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.builder;SpringApplicationBuilder;true;build;(String[]);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.builder;SpringApplicationBuilder;true;child;(Class[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.boot.builder;SpringApplicationBuilder;true;context;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.builder;SpringApplicationBuilder;true;contextFactory;(ApplicationContextFactory);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.builder;SpringApplicationBuilder;true;contextFactory;(ApplicationContextFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.builder;SpringApplicationBuilder;true;contextFactory;(ApplicationContextFactory);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.builder;SpringApplicationBuilder;true;environment;(ConfigurableEnvironment);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.builder;SpringApplicationBuilder;true;environment;(ConfigurableEnvironment);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.builder;SpringApplicationBuilder;true;environment;(ConfigurableEnvironment);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.builder;SpringApplicationBuilder;true;environmentPrefix;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.builder;SpringApplicationBuilder;true;environmentPrefix;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.builder;SpringApplicationBuilder;true;environmentPrefix;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.builder;SpringApplicationBuilder;true;headless;(boolean);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.builder;SpringApplicationBuilder;true;initializers;(ApplicationContextInitializer[]);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.builder;SpringApplicationBuilder;true;initializers;(ApplicationContextInitializer[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.builder;SpringApplicationBuilder;true;initializers;(ApplicationContextInitializer[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.boot.builder;SpringApplicationBuilder;true;lazyInitialization;(boolean);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.builder;SpringApplicationBuilder;true;listeners;(ApplicationListener[]);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.builder;SpringApplicationBuilder;true;listeners;(ApplicationListener[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.builder;SpringApplicationBuilder;true;listeners;(ApplicationListener[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.boot.builder;SpringApplicationBuilder;true;logStartupInfo;(boolean);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.builder;SpringApplicationBuilder;true;main;(Class);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.builder;SpringApplicationBuilder;true;parent;(Class[]);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.builder;SpringApplicationBuilder;true;parent;(Class[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.builder;SpringApplicationBuilder;true;parent;(Class[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.boot.builder;SpringApplicationBuilder;true;parent;(ConfigurableApplicationContext);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.builder;SpringApplicationBuilder;true;parent;(ConfigurableApplicationContext);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.builder;SpringApplicationBuilder;true;parent;(ConfigurableApplicationContext);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.builder;SpringApplicationBuilder;true;profiles;(String[]);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.builder;SpringApplicationBuilder;true;profiles;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.builder;SpringApplicationBuilder;true;profiles;(String[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.boot.builder;SpringApplicationBuilder;true;properties;(Map);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.builder;SpringApplicationBuilder;true;properties;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.builder;SpringApplicationBuilder;true;properties;(Map);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.boot.builder;SpringApplicationBuilder;true;properties;(Properties);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.builder;SpringApplicationBuilder;true;properties;(Properties);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.builder;SpringApplicationBuilder;true;properties;(Properties);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.boot.builder;SpringApplicationBuilder;true;properties;(String[]);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.builder;SpringApplicationBuilder;true;properties;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.builder;SpringApplicationBuilder;true;properties;(String[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.boot.builder;SpringApplicationBuilder;true;registerShutdownHook;(boolean);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.builder;SpringApplicationBuilder;true;resourceLoader;(ResourceLoader);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.builder;SpringApplicationBuilder;true;resourceLoader;(ResourceLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.builder;SpringApplicationBuilder;true;resourceLoader;(ResourceLoader);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.builder;SpringApplicationBuilder;true;run;(String[]);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.builder;SpringApplicationBuilder;true;setAddConversionService;(boolean);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.builder;SpringApplicationBuilder;true;sibling;(Class[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.boot.builder;SpringApplicationBuilder;true;sibling;(Class[],String[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.boot.builder;SpringApplicationBuilder;true;sources;(Class[]);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.builder;SpringApplicationBuilder;true;sources;(Class[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.builder;SpringApplicationBuilder;true;sources;(Class[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.boot.builder;SpringApplicationBuilder;true;web;(WebApplicationType);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.buildpack.platform.build;BuildLog;true;pullingImage;(ImageReference,ImageType);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.build;BuildLog;true;pushingImage;(ImageReference);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.build;BuildLog;true;to;(PrintStream);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.build;BuildRequest;true;getApplicationContent;(Owner);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.build;BuildRequest;true;getBindings;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.build;BuildRequest;true;getBuildCache;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.build;BuildRequest;true;getBuilder;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.build;BuildRequest;true;getBuildpacks;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.build;BuildRequest;true;getCreator;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.build;BuildRequest;true;getEnv;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.build;BuildRequest;true;getLaunchCache;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.build;BuildRequest;true;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.build;BuildRequest;true;getNetwork;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.build;BuildRequest;true;getRunImage;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.build;BuildRequest;true;getTags;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.build;BuildRequest;true;of;(ImageReference,Function);;Argument[1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.build;BuildRequest;true;withBindings;(Binding[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.build;BuildRequest;true;withBindings;(List);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.build;BuildRequest;true;withBuildCache;(Cache);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.build;BuildRequest;true;withBuilder;(ImageReference);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.build;BuildRequest;true;withBuildpacks;(BuildpackReference[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.build;BuildRequest;true;withBuildpacks;(List);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.build;BuildRequest;true;withCreator;(Creator);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.build;BuildRequest;true;withEnv;(Map);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.build;BuildRequest;true;withEnv;(String,String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.build;BuildRequest;true;withEnv;(String,String);;Argument[1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.build;BuildRequest;true;withLaunchCache;(Cache);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.build;BuildRequest;true;withNetwork;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.build;BuildRequest;true;withRunImage;(ImageReference);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.build;BuildRequest;true;withTags;(ImageReference[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.build;BuildRequest;true;withTags;(List);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.build;Builder;true;Builder;(BuildLog);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.buildpack.platform.build;Builder;true;Builder;(BuildLog,DockerConfiguration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.buildpack.platform.build;Builder;true;Builder;(BuildLog,DockerConfiguration);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.buildpack.platform.build;Builder;true;Builder;(DockerConfiguration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.buildpack.platform.build;BuilderException;true;getOperation;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.build;BuildpackReference;false;of;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.build;BuildpackReference;false;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.build;Cache$Volume;true;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.build;Cache;true;getVolume;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.build;Cache;true;volume;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.build;Creator;true;getVersion;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.build;Creator;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.build;Creator;true;withVersion;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.configuration;DockerConfiguration;false;getBuilderRegistryAuthentication;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.configuration;DockerConfiguration;false;getHost;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.configuration;DockerConfiguration;false;getPublishRegistryAuthentication;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.configuration;DockerConfiguration;false;withBuilderRegistryTokenAuthentication;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.configuration;DockerConfiguration;false;withBuilderRegistryUserAuthentication;(String,String,String,String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.configuration;DockerConfiguration;false;withBuilderRegistryUserAuthentication;(String,String,String,String);;Argument[1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.configuration;DockerConfiguration;false;withBuilderRegistryUserAuthentication;(String,String,String,String);;Argument[2];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.configuration;DockerConfiguration;false;withBuilderRegistryUserAuthentication;(String,String,String,String);;Argument[3];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.configuration;DockerConfiguration;false;withHost;(String,boolean,String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.configuration;DockerConfiguration;false;withHost;(String,boolean,String);;Argument[2];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.configuration;DockerConfiguration;false;withPublishRegistryTokenAuthentication;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.configuration;DockerConfiguration;false;withPublishRegistryUserAuthentication;(String,String,String,String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.configuration;DockerConfiguration;false;withPublishRegistryUserAuthentication;(String,String,String,String);;Argument[1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.configuration;DockerConfiguration;false;withPublishRegistryUserAuthentication;(String,String,String,String);;Argument[2];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.configuration;DockerConfiguration;false;withPublishRegistryUserAuthentication;(String,String,String,String);;Argument[3];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.configuration;DockerHost;true;DockerHost;(String,boolean,String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.buildpack.platform.docker.configuration;DockerHost;true;DockerHost;(String,boolean,String);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.buildpack.platform.docker.configuration;DockerHost;true;getAddress;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.configuration;DockerHost;true;getCertificatePath;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.configuration;DockerRegistryAuthentication;true;getAuthHeader;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.transport;DockerEngineException;true;DockerEngineException;(String,URI,int,String,Errors,Message);;Argument[3];Argument[-1];taint",
        "org.springframework.boot.buildpack.platform.docker.transport;DockerEngineException;true;DockerEngineException;(String,URI,int,String,Errors,Message);;Argument[4];Argument[-1];taint",
        "org.springframework.boot.buildpack.platform.docker.transport;DockerEngineException;true;DockerEngineException;(String,URI,int,String,Errors,Message);;Argument[5];Argument[-1];taint",
        "org.springframework.boot.buildpack.platform.docker.transport;DockerEngineException;true;getErrors;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.transport;DockerEngineException;true;getReasonPhrase;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.transport;DockerEngineException;true;getResponseMessage;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.transport;Errors$Error;true;getCode;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.transport;Errors$Error;true;getMessage;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.transport;Errors$Error;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.transport;Errors;true;stream;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.transport;Message;true;getMessage;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.transport;Message;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.type;Binding;false;from;(String,String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.type;Binding;false;from;(String,String);;Argument[1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.type;Binding;false;from;(VolumeName,String);;Argument[1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.type;Binding;false;of;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.type;Binding;false;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.type;ContainerConfig$Update;true;withArgs;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.buildpack.platform.docker.type;ContainerConfig$Update;true;withBinding;(Binding);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.buildpack.platform.docker.type;ContainerConfig$Update;true;withCommand;(String,String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.buildpack.platform.docker.type;ContainerConfig$Update;true;withCommand;(String,String[]);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.buildpack.platform.docker.type;ContainerConfig$Update;true;withEnv;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.buildpack.platform.docker.type;ContainerConfig$Update;true;withEnv;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.buildpack.platform.docker.type;ContainerConfig$Update;true;withLabel;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.buildpack.platform.docker.type;ContainerConfig$Update;true;withLabel;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.buildpack.platform.docker.type;ContainerConfig$Update;true;withNetworkMode;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.buildpack.platform.docker.type;ContainerConfig$Update;true;withUser;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.buildpack.platform.docker.type;ContainerConfig;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.type;ContainerConfig;true;writeTo;(OutputStream);;Argument[-1];Argument[0];taint",
        "org.springframework.boot.buildpack.platform.docker.type;ContainerReference;false;of;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.type;ContainerReference;false;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.type;ContainerStatus;true;getWaitingErrorMessage;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.type;ContainerStatus;true;of;(int,String);;Argument[1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.type;Image;true;getConfig;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.type;Image;true;getDigests;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.type;Image;true;getLayers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.type;Image;true;getOs;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.type;ImageArchive$Update;false;withCreateDate;(Instant);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.buildpack.platform.docker.type;ImageArchive$Update;false;withNewLayer;(Layer);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.buildpack.platform.docker.type;ImageArchive;true;getCreateDate;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.type;ImageArchive;true;getImageConfig;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.type;ImageArchive;true;getTag;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.type;ImageConfig;true;getEnv;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.type;ImageConfig;true;getLabels;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.type;ImageName;true;getDomain;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.type;ImageName;true;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.type;ImageName;true;of;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.type;ImageName;true;toLegacyString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.type;ImageName;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.type;ImageReference;false;getDigest;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.type;ImageReference;false;getDomain;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.type;ImageReference;false;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.type;ImageReference;false;getTag;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.type;ImageReference;false;inTaggedOrDigestForm;();;Argument[-1];ReturnValue;value",
        "org.springframework.boot.buildpack.platform.docker.type;ImageReference;false;of;(ImageName);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.type;ImageReference;false;of;(ImageName,String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.type;ImageReference;false;of;(ImageName,String);;Argument[1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.type;ImageReference;false;of;(ImageName,String,String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.type;ImageReference;false;of;(ImageName,String,String);;Argument[1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.type;ImageReference;false;of;(ImageName,String,String);;Argument[2];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.type;ImageReference;false;of;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.type;ImageReference;false;random;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.type;ImageReference;false;random;(String,int);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.type;ImageReference;false;toLegacyString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.type;ImageReference;false;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.type;ImageReference;false;withDigest;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.type;Layer;true;getId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.type;LayerId;false;getAlgorithm;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.type;LayerId;false;getHash;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.type;LayerId;false;of;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.type;LayerId;false;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.type;VolumeName;false;basedOn;(Object,Function,String,String,int);;Argument[2];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.type;VolumeName;false;basedOn;(Object,Function,String,String,int);;Argument[3];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.type;VolumeName;false;basedOn;(Object,String,String,int);;Argument[1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.type;VolumeName;false;basedOn;(Object,String,String,int);;Argument[2];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.type;VolumeName;false;of;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.type;VolumeName;false;random;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.type;VolumeName;false;random;(String,int);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker.type;VolumeName;false;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker;DockerApi;true;container;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker;DockerApi;true;image;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker;DockerApi;true;volume;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker;ImageProgressUpdateEvent;true;getId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker;LoadImageUpdateEvent;true;LoadImageUpdateEvent;(String,String,ProgressDetail,String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.buildpack.platform.docker;LoadImageUpdateEvent;true;LoadImageUpdateEvent;(String,String,ProgressDetail,String);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.buildpack.platform.docker;LoadImageUpdateEvent;true;LoadImageUpdateEvent;(String,String,ProgressDetail,String);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.buildpack.platform.docker;LoadImageUpdateEvent;true;LoadImageUpdateEvent;(String,String,ProgressDetail,String);;Argument[3];Argument[-1];taint",
        "org.springframework.boot.buildpack.platform.docker;LoadImageUpdateEvent;true;getStream;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker;LogUpdateEvent;true;getPayload;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker;LogUpdateEvent;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker;ProgressUpdateEvent;true;getProgress;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker;ProgressUpdateEvent;true;getProgressDetail;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker;ProgressUpdateEvent;true;getStatus;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker;PullImageUpdateEvent;true;PullImageUpdateEvent;(String,String,ProgressDetail,String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.buildpack.platform.docker;PullImageUpdateEvent;true;PullImageUpdateEvent;(String,String,ProgressDetail,String);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.buildpack.platform.docker;PullImageUpdateEvent;true;PullImageUpdateEvent;(String,String,ProgressDetail,String);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.buildpack.platform.docker;PullImageUpdateEvent;true;PullImageUpdateEvent;(String,String,ProgressDetail,String);;Argument[3];Argument[-1];taint",
        "org.springframework.boot.buildpack.platform.docker;PushImageUpdateEvent$ErrorDetail;true;ErrorDetail;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.buildpack.platform.docker;PushImageUpdateEvent$ErrorDetail;true;getMessage;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker;PushImageUpdateEvent$ErrorDetail;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker;PushImageUpdateEvent;true;PushImageUpdateEvent;(String,String,ProgressDetail,String,ErrorDetail);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.buildpack.platform.docker;PushImageUpdateEvent;true;PushImageUpdateEvent;(String,String,ProgressDetail,String,ErrorDetail);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.buildpack.platform.docker;PushImageUpdateEvent;true;PushImageUpdateEvent;(String,String,ProgressDetail,String,ErrorDetail);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.buildpack.platform.docker;PushImageUpdateEvent;true;PushImageUpdateEvent;(String,String,ProgressDetail,String,ErrorDetail);;Argument[3];Argument[-1];taint",
        "org.springframework.boot.buildpack.platform.docker;PushImageUpdateEvent;true;PushImageUpdateEvent;(String,String,ProgressDetail,String,ErrorDetail);;Argument[4];Argument[-1];taint",
        "org.springframework.boot.buildpack.platform.docker;PushImageUpdateEvent;true;getErrorDetail;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.docker;TotalProgressBar;true;TotalProgressBar;(String,PrintStream);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.buildpack.platform.docker;TotalProgressBar;true;TotalProgressBar;(String,char,boolean,PrintStream);;Argument[3];Argument[-1];taint",
        "org.springframework.boot.buildpack.platform.docker;TotalProgressPullListener;true;TotalProgressPullListener;(Consumer);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.buildpack.platform.docker;TotalProgressPushListener;true;TotalProgressPushListener;(Consumer);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.buildpack.platform.io;Content;true;writeTo;(OutputStream);;Argument[-1];Argument[0];taint",
        "org.springframework.boot.buildpack.platform.io;TarArchive;true;fromZip;(File,Owner);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.io;TarArchive;true;fromZip;(File,Owner);;Argument[1];ReturnValue;taint",
        "org.springframework.boot.buildpack.platform.io;ZipFileTarArchive;true;ZipFileTarArchive;(File,Owner);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.buildpack.platform.io;ZipFileTarArchive;true;ZipFileTarArchive;(File,Owner);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.buildpack.platform.json;JsonStream;true;JsonStream;(ObjectMapper);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.cli.app;SpringApplicationLauncher;true;SpringApplicationLauncher;(ClassLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.cli.command.archive;ResourceMatcher$MatchedResource;false;getFile;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.cli.command.archive;ResourceMatcher$MatchedResource;false;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.cli.command.core;HelpCommand;true;HelpCommand;(CommandRunner);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.cli.command.core;HintCommand;true;HintCommand;(CommandRunner);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.cli.command.init;InitCommand;true;InitCommand;(InitOptionHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.cli.command.options;CompilerOptionHandler;true;getAutoconfigureOption;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.cli.command.options;CompilerOptionHandler;true;getClasspathOption;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.cli.command.options;CompilerOptionHandler;true;getNoGuessDependenciesOption;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.cli.command.options;CompilerOptionHandler;true;getNoGuessImportsOption;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.cli.command.options;OptionHandler;true;OptionHandler;(Function);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.cli.command.options;OptionHandler;true;getHelp;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.cli.command.options;OptionHandler;true;getOptionsHelp;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.cli.command.options;OptionHandler;true;getParser;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.cli.command.options;OptionHelp;true;getOptions;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.cli.command.options;OptionHelp;true;getUsageHelp;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.cli.command.options;OptionSetGroovyCompilerConfiguration;true;OptionSetGroovyCompilerConfiguration;(OptionSet,CompilerOptionHandler,List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.cli.command.options;OptionSetGroovyCompilerConfiguration;true;OptionSetGroovyCompilerConfiguration;(OptionSet,CompilerOptionHandler,List);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.cli.command.options;OptionSetGroovyCompilerConfiguration;true;OptionSetGroovyCompilerConfiguration;(OptionSet,CompilerOptionHandler,List);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.cli.command.options;SourceOptions;true;SourceOptions;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.cli.command.options;SourceOptions;true;getArgs;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.cli.command.options;SourceOptions;true;getSources;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.cli.command.options;SourceOptions;true;getSourcesArray;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.cli.command.shell;CommandCompleter;true;CommandCompleter;(ConsoleReader,ArgumentDelimiter,Iterable);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.cli.command.shell;CommandCompleter;true;CommandCompleter;(ConsoleReader,ArgumentDelimiter,Iterable);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.cli.command.shell;PromptCommand;true;PromptCommand;(ShellPrompts);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.cli.command.shell;ShellPrompts;true;getPrompt;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.cli.command.shell;ShellPrompts;true;pushPrompt;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.cli.command.status;ExitStatus;false;ExitStatus;(int,String);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.cli.command.status;ExitStatus;false;ExitStatus;(int,String,boolean);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.cli.command.status;ExitStatus;false;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.cli.command.status;ExitStatus;false;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.cli.command;Command;true;getDescription;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.cli.command;Command;true;getHelp;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.cli.command;Command;true;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.cli.command;Command;true;getOptionsHelp;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.cli.command;Command;true;getUsageHelp;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.cli.command;Command;true;run;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.cli.command;CommandException;true;getOptions;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.cli.command;CommandRunner;true;CommandRunner;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.cli.command;CommandRunner;true;addCommand;(Command);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.cli.command;CommandRunner;true;addCommands;(Iterable);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.cli.command;CommandRunner;true;findCommand;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.cli.command;CommandRunner;true;findCommand;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.cli.command;CommandRunner;true;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.cli.command;CommandRunner;true;runAndHandleErrors;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.cli.command;CommandRunner;true;setHiddenCommands;(Class[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.cli.command;CommandRunner;true;setOptionCommands;(Class[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.cli.command;HelpExample;true;HelpExample;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.cli.command;HelpExample;true;HelpExample;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.cli.command;HelpExample;true;getDescription;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.cli.command;HelpExample;true;getExample;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.cli.compiler.dependencies;ArtifactCoordinatesResolver;true;getArtifactId;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.cli.compiler.dependencies;ArtifactCoordinatesResolver;true;getGroupId;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.cli.compiler.dependencies;ArtifactCoordinatesResolver;true;getVersion;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.cli.compiler.dependencies;CompositeDependencyManagement;true;CompositeDependencyManagement;(DependencyManagement[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.cli.compiler.dependencies;Dependency$Exclusion;false;getArtifactId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.cli.compiler.dependencies;Dependency$Exclusion;false;getGroupId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.cli.compiler.dependencies;Dependency$Exclusion;false;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.cli.compiler.dependencies;Dependency;false;Dependency;(String,String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.cli.compiler.dependencies;Dependency;false;Dependency;(String,String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.cli.compiler.dependencies;Dependency;false;Dependency;(String,String,String);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.cli.compiler.dependencies;Dependency;false;Dependency;(String,String,String,List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.cli.compiler.dependencies;Dependency;false;Dependency;(String,String,String,List);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.cli.compiler.dependencies;Dependency;false;Dependency;(String,String,String,List);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.cli.compiler.dependencies;Dependency;false;Dependency;(String,String,String,List);;Argument[3];Argument[-1];taint",
        "org.springframework.boot.cli.compiler.dependencies;Dependency;false;getArtifactId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.cli.compiler.dependencies;Dependency;false;getExclusions;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.cli.compiler.dependencies;Dependency;false;getGroupId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.cli.compiler.dependencies;Dependency;false;getVersion;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.cli.compiler.dependencies;Dependency;false;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.cli.compiler.dependencies;DependencyManagement;true;find;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.cli.compiler.dependencies;DependencyManagement;true;getDependencies;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.cli.compiler.dependencies;DependencyManagement;true;getSpringBootVersion;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.cli.compiler.dependencies;DependencyManagementArtifactCoordinatesResolver;true;DependencyManagementArtifactCoordinatesResolver;(DependencyManagement);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.cli.compiler.grape;AetherGrapeEngine;true;AetherGrapeEngine;(GroovyClassLoader,RepositorySystem,DefaultRepositorySystemSession,List,DependencyResolutionContext,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.cli.compiler.grape;AetherGrapeEngine;true;AetherGrapeEngine;(GroovyClassLoader,RepositorySystem,DefaultRepositorySystemSession,List,DependencyResolutionContext,boolean);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.cli.compiler.grape;AetherGrapeEngine;true;AetherGrapeEngine;(GroovyClassLoader,RepositorySystem,DefaultRepositorySystemSession,List,DependencyResolutionContext,boolean);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.cli.compiler.grape;AetherGrapeEngine;true;AetherGrapeEngine;(GroovyClassLoader,RepositorySystem,DefaultRepositorySystemSession,List,DependencyResolutionContext,boolean);;Argument[3];Argument[-1];taint",
        "org.springframework.boot.cli.compiler.grape;AetherGrapeEngine;true;AetherGrapeEngine;(GroovyClassLoader,RepositorySystem,DefaultRepositorySystemSession,List,DependencyResolutionContext,boolean);;Argument[4];Argument[-1];taint",
        "org.springframework.boot.cli.compiler.grape;AetherGrapeEngineFactory;true;create;(GroovyClassLoader,List,DependencyResolutionContext,boolean);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.cli.compiler.grape;AetherGrapeEngineFactory;true;create;(GroovyClassLoader,List,DependencyResolutionContext,boolean);;Argument[2];ReturnValue;taint",
        "org.springframework.boot.cli.compiler.grape;CompositeProxySelector;true;CompositeProxySelector;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.cli.compiler.grape;DependencyResolutionContext;true;addDependencyManagement;(DependencyManagement);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.cli.compiler.grape;DependencyResolutionContext;true;addManagedDependencies;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.cli.compiler.grape;DependencyResolutionContext;true;getArtifactCoordinatesResolver;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.cli.compiler.grape;DependencyResolutionContext;true;getManagedDependencies;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.cli.compiler.grape;RepositoryConfiguration;false;RepositoryConfiguration;(String,URI,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.cli.compiler.grape;RepositoryConfiguration;false;RepositoryConfiguration;(String,URI,boolean);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.cli.compiler.grape;RepositoryConfiguration;false;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.cli.compiler.grape;RepositoryConfiguration;false;getUri;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.cli.compiler.grape;RepositoryConfiguration;false;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.cli.compiler.maven;MavenSettings;true;getActiveProfiles;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.cli.compiler.maven;MavenSettings;true;getAuthenticationSelector;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.cli.compiler.maven;MavenSettings;true;getLocalRepository;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.cli.compiler.maven;MavenSettings;true;getMirrorSelector;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.cli.compiler.maven;MavenSettings;true;getProxySelector;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.cli.compiler.maven;MavenSettingsReader;true;MavenSettingsReader;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.cli.compiler;DependencyAutoConfigurationTransformation;true;DependencyAutoConfigurationTransformation;(GroovyClassLoader,DependencyResolutionContext,Iterable);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.cli.compiler;DependencyAutoConfigurationTransformation;true;DependencyAutoConfigurationTransformation;(GroovyClassLoader,DependencyResolutionContext,Iterable);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.cli.compiler;DependencyAutoConfigurationTransformation;true;DependencyAutoConfigurationTransformation;(GroovyClassLoader,DependencyResolutionContext,Iterable);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.cli.compiler;DependencyCustomizer;true;DependencyCustomizer;(GroovyClassLoader,ModuleNode,DependencyResolutionContext);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.cli.compiler;DependencyCustomizer;true;DependencyCustomizer;(GroovyClassLoader,ModuleNode,DependencyResolutionContext);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.cli.compiler;DependencyCustomizer;true;add;(String,String,String,boolean);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.cli.compiler;DependencyCustomizer;true;add;(String,boolean);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.cli.compiler;DependencyCustomizer;true;add;(String[]);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.cli.compiler;DependencyCustomizer;true;getDependencyResolutionContext;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.cli.compiler;DependencyCustomizer;true;getVersion;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.cli.compiler;DependencyCustomizer;true;getVersion;(String,String);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.cli.compiler;DependencyCustomizer;true;getVersion;(String,String);;Argument[1];ReturnValue;taint",
        "org.springframework.boot.cli.compiler;DependencyManagementBomTransformation;true;DependencyManagementBomTransformation;(DependencyResolutionContext);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.cli.compiler;ExtendedGroovyClassLoader;true;getConfiguration;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.cli.compiler;GroovyCompiler;true;GroovyCompiler;(GroovyCompilerConfiguration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.cli.compiler;GroovyCompiler;true;getAstTransformations;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.cli.compiler;GroovyCompiler;true;getLoader;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.cli.compiler;GroovyCompilerConfiguration;true;getRepositoryConfiguration;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.cli.compiler;ResolveDependencyCoordinatesTransformation;true;ResolveDependencyCoordinatesTransformation;(DependencyResolutionContext);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.cloud;CloudFoundryVcapEnvironmentPostProcessor;true;CloudFoundryVcapEnvironmentPostProcessor;(Log);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.configurationmetadata;ConfigurationMetadataGroup;true;ConfigurationMetadataGroup;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.configurationmetadata;ConfigurationMetadataGroup;true;getId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationmetadata;ConfigurationMetadataGroup;true;getProperties;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationmetadata;ConfigurationMetadataGroup;true;getSources;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationmetadata;ConfigurationMetadataProperty;true;getDefaultValue;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationmetadata;ConfigurationMetadataProperty;true;getDeprecation;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationmetadata;ConfigurationMetadataProperty;true;getDescription;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationmetadata;ConfigurationMetadataProperty;true;getHints;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationmetadata;ConfigurationMetadataProperty;true;getId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationmetadata;ConfigurationMetadataProperty;true;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationmetadata;ConfigurationMetadataProperty;true;getShortDescription;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationmetadata;ConfigurationMetadataProperty;true;getType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationmetadata;ConfigurationMetadataProperty;true;setDefaultValue;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.configurationmetadata;ConfigurationMetadataProperty;true;setDeprecation;(Deprecation);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.configurationmetadata;ConfigurationMetadataProperty;true;setDescription;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.configurationmetadata;ConfigurationMetadataProperty;true;setId;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.configurationmetadata;ConfigurationMetadataProperty;true;setName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.configurationmetadata;ConfigurationMetadataProperty;true;setShortDescription;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.configurationmetadata;ConfigurationMetadataProperty;true;setType;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.configurationmetadata;ConfigurationMetadataRepository;true;getAllGroups;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationmetadata;ConfigurationMetadataRepository;true;getAllProperties;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationmetadata;ConfigurationMetadataRepositoryJsonBuilder;false;create;(InputStream[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.boot.configurationmetadata;ConfigurationMetadataRepositoryJsonBuilder;false;withJsonResource;(InputStream);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationmetadata;ConfigurationMetadataRepositoryJsonBuilder;false;withJsonResource;(InputStream);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.configurationmetadata;ConfigurationMetadataRepositoryJsonBuilder;false;withJsonResource;(InputStream);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.configurationmetadata;ConfigurationMetadataRepositoryJsonBuilder;false;withJsonResource;(InputStream,Charset);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.configurationmetadata;ConfigurationMetadataRepositoryJsonBuilder;false;withJsonResource;(InputStream,Charset);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.configurationmetadata;ConfigurationMetadataRepositoryJsonBuilder;false;withJsonResource;(InputStream,Charset);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.configurationmetadata;ConfigurationMetadataSource;true;getDescription;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationmetadata;ConfigurationMetadataSource;true;getGroupId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationmetadata;ConfigurationMetadataSource;true;getProperties;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationmetadata;ConfigurationMetadataSource;true;getShortDescription;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationmetadata;ConfigurationMetadataSource;true;getSourceMethod;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationmetadata;ConfigurationMetadataSource;true;getSourceType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationmetadata;ConfigurationMetadataSource;true;getType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationmetadata;ConfigurationMetadataSource;true;setShortDescription;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.configurationmetadata;Deprecation;true;getReason;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationmetadata;Deprecation;true;getReplacement;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationmetadata;Deprecation;true;getShortReason;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationmetadata;Deprecation;true;setReason;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.configurationmetadata;Deprecation;true;setReplacement;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.configurationmetadata;Deprecation;true;setShortReason;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.configurationmetadata;Deprecation;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationmetadata;Hints;true;getKeyHints;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationmetadata;Hints;true;getKeyProviders;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationmetadata;Hints;true;getValueHints;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationmetadata;Hints;true;getValueProviders;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationmetadata;ValueHint;true;getDescription;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationmetadata;ValueHint;true;getShortDescription;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationmetadata;ValueHint;true;getValue;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationmetadata;ValueHint;true;setDescription;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.configurationmetadata;ValueHint;true;setShortDescription;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.configurationmetadata;ValueHint;true;setValue;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.configurationmetadata;ValueHint;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationmetadata;ValueProvider;true;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationmetadata;ValueProvider;true;getParameters;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationmetadata;ValueProvider;true;setName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.configurationmetadata;ValueProvider;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.json;JSONArray;true;JSONArray;(Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.configurationprocessor.json;JSONArray;true;get;(int);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.json;JSONArray;true;getJSONArray;(int);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.json;JSONArray;true;getJSONObject;(int);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.json;JSONArray;true;getString;(int);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.json;JSONArray;true;join;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.json;JSONArray;true;opt;(int);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.json;JSONArray;true;optJSONArray;(int);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.json;JSONArray;true;optJSONObject;(int);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.json;JSONArray;true;optString;(int);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.json;JSONArray;true;optString;(int,String);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.json;JSONArray;true;optString;(int,String);;Argument[1];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.json;JSONArray;true;put;(Object);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.configurationprocessor.json;JSONArray;true;put;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.configurationprocessor.json;JSONArray;true;put;(Object);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.json;JSONArray;true;put;(boolean);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.configurationprocessor.json;JSONArray;true;put;(double);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.configurationprocessor.json;JSONArray;true;put;(int);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.configurationprocessor.json;JSONArray;true;put;(int,Object);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.configurationprocessor.json;JSONArray;true;put;(int,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.configurationprocessor.json;JSONArray;true;put;(int,Object);;Argument[1];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.json;JSONArray;true;put;(int,boolean);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.json;JSONArray;true;put;(int,double);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.json;JSONArray;true;put;(int,int);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.json;JSONArray;true;put;(int,long);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.json;JSONArray;true;put;(long);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.configurationprocessor.json;JSONArray;true;remove;(int);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.json;JSONObject;true;JSONObject;(JSONObject,String[]);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.configurationprocessor.json;JSONObject;true;JSONObject;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.configurationprocessor.json;JSONObject;true;accumulate;(String,Object);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.configurationprocessor.json;JSONObject;true;accumulate;(String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.configurationprocessor.json;JSONObject;true;accumulate;(String,Object);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.json;JSONObject;true;accumulate;(String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.configurationprocessor.json;JSONObject;true;accumulate;(String,Object);;Argument[1];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.json;JSONObject;true;get;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.json;JSONObject;true;getJSONArray;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.json;JSONObject;true;getJSONObject;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.json;JSONObject;true;getString;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.json;JSONObject;true;keys;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.json;JSONObject;true;opt;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.json;JSONObject;true;optJSONArray;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.json;JSONObject;true;optJSONObject;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.json;JSONObject;true;optString;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.json;JSONObject;true;optString;(String,String);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.json;JSONObject;true;optString;(String,String);;Argument[1];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.json;JSONObject;true;put;(String,Object);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.configurationprocessor.json;JSONObject;true;put;(String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.configurationprocessor.json;JSONObject;true;put;(String,Object);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.json;JSONObject;true;put;(String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.configurationprocessor.json;JSONObject;true;put;(String,Object);;Argument[1];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.json;JSONObject;true;put;(String,boolean);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.configurationprocessor.json;JSONObject;true;put;(String,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.configurationprocessor.json;JSONObject;true;put;(String,boolean);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.json;JSONObject;true;put;(String,double);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.configurationprocessor.json;JSONObject;true;put;(String,double);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.configurationprocessor.json;JSONObject;true;put;(String,double);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.json;JSONObject;true;put;(String,int);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.configurationprocessor.json;JSONObject;true;put;(String,int);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.configurationprocessor.json;JSONObject;true;put;(String,int);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.json;JSONObject;true;put;(String,long);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.configurationprocessor.json;JSONObject;true;put;(String,long);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.configurationprocessor.json;JSONObject;true;put;(String,long);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.json;JSONObject;true;putOpt;(String,Object);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.configurationprocessor.json;JSONObject;true;putOpt;(String,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.configurationprocessor.json;JSONObject;true;putOpt;(String,Object);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.json;JSONObject;true;putOpt;(String,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.configurationprocessor.json;JSONObject;true;putOpt;(String,Object);;Argument[1];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.json;JSONObject;true;remove;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.json;JSONObject;true;wrap;(Object);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.json;JSONStringer;true;array;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.json;JSONStringer;true;endArray;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.json;JSONStringer;true;endObject;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.json;JSONStringer;true;key;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.configurationprocessor.json;JSONStringer;true;object;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.json;JSONStringer;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.json;JSONStringer;true;value;(Object);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.configurationprocessor.json;JSONStringer;true;value;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.configurationprocessor.json;JSONStringer;true;value;(Object);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.json;JSONStringer;true;value;(boolean);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.configurationprocessor.json;JSONStringer;true;value;(double);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.configurationprocessor.json;JSONStringer;true;value;(long);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.configurationprocessor.json;JSONTokener;true;JSONTokener;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.configurationprocessor.json;JSONTokener;true;next;(int);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.json;JSONTokener;true;nextString;(char);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.json;JSONTokener;true;nextTo;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.json;JSONTokener;true;nextTo;(char);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.json;JSONTokener;true;nextValue;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.json;JSONTokener;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.metadata;ConfigurationMetadata;true;getHints;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.metadata;ConfigurationMetadata;true;getItems;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.metadata;ConfigurationMetadata;true;nestedPrefix;(String,String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.metadata;ItemDeprecation;true;ItemDeprecation;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.configurationprocessor.metadata;ItemDeprecation;true;ItemDeprecation;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.configurationprocessor.metadata;ItemDeprecation;true;ItemDeprecation;(String,String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.configurationprocessor.metadata;ItemDeprecation;true;ItemDeprecation;(String,String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.configurationprocessor.metadata;ItemDeprecation;true;ItemDeprecation;(String,String,String);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.configurationprocessor.metadata;ItemDeprecation;true;getLevel;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.metadata;ItemDeprecation;true;getReason;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.metadata;ItemDeprecation;true;getReplacement;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.metadata;ItemDeprecation;true;setLevel;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.configurationprocessor.metadata;ItemDeprecation;true;setReason;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.configurationprocessor.metadata;ItemDeprecation;true;setReplacement;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.configurationprocessor.metadata;ItemDeprecation;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.metadata;ItemHint$ValueHint;true;ValueHint;(Object,String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.configurationprocessor.metadata;ItemHint$ValueHint;true;ValueHint;(Object,String);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.configurationprocessor.metadata;ItemHint$ValueHint;true;getDescription;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.metadata;ItemHint$ValueHint;true;getValue;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.metadata;ItemHint$ValueHint;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.metadata;ItemHint$ValueProvider;true;ValueProvider;(String,Map);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.configurationprocessor.metadata;ItemHint$ValueProvider;true;ValueProvider;(String,Map);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.configurationprocessor.metadata;ItemHint$ValueProvider;true;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.metadata;ItemHint$ValueProvider;true;getParameters;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.metadata;ItemHint$ValueProvider;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.metadata;ItemHint;true;ItemHint;(String,List,List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.configurationprocessor.metadata;ItemHint;true;ItemHint;(String,List,List);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.configurationprocessor.metadata;ItemHint;true;ItemHint;(String,List,List);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.configurationprocessor.metadata;ItemHint;true;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.metadata;ItemHint;true;getProviders;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.metadata;ItemHint;true;getValues;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.metadata;ItemHint;true;newHint;(String,ValueHint[]);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.metadata;ItemHint;true;newHint;(String,ValueHint[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.metadata;ItemHint;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.metadata;ItemMetadata;false;getDefaultValue;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.metadata;ItemMetadata;false;getDeprecation;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.metadata;ItemMetadata;false;getDescription;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.metadata;ItemMetadata;false;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.metadata;ItemMetadata;false;getSourceMethod;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.metadata;ItemMetadata;false;getSourceType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.metadata;ItemMetadata;false;getType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.metadata;ItemMetadata;false;newGroup;(String,String,String,String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.metadata;ItemMetadata;false;newGroup;(String,String,String,String);;Argument[1];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.metadata;ItemMetadata;false;newGroup;(String,String,String,String);;Argument[2];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.metadata;ItemMetadata;false;newGroup;(String,String,String,String);;Argument[3];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.metadata;ItemMetadata;false;newItemMetadataPrefix;(String,String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.metadata;ItemMetadata;false;newProperty;(String,String,String,String,String,String,Object,ItemDeprecation);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.metadata;ItemMetadata;false;newProperty;(String,String,String,String,String,String,Object,ItemDeprecation);;Argument[2];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.metadata;ItemMetadata;false;newProperty;(String,String,String,String,String,String,Object,ItemDeprecation);;Argument[3];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.metadata;ItemMetadata;false;newProperty;(String,String,String,String,String,String,Object,ItemDeprecation);;Argument[4];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.metadata;ItemMetadata;false;newProperty;(String,String,String,String,String,String,Object,ItemDeprecation);;Argument[5];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.metadata;ItemMetadata;false;newProperty;(String,String,String,String,String,String,Object,ItemDeprecation);;Argument[6];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.metadata;ItemMetadata;false;newProperty;(String,String,String,String,String,String,Object,ItemDeprecation);;Argument[7];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor.metadata;ItemMetadata;false;setDefaultValue;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.configurationprocessor.metadata;ItemMetadata;false;setDeprecation;(ItemDeprecation);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.configurationprocessor.metadata;ItemMetadata;false;setDescription;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.configurationprocessor.metadata;ItemMetadata;false;setName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.configurationprocessor.metadata;ItemMetadata;false;setSourceMethod;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.configurationprocessor.metadata;ItemMetadata;false;setSourceType;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.configurationprocessor.metadata;ItemMetadata;false;setType;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.configurationprocessor.metadata;ItemMetadata;false;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.configurationprocessor;MetadataCollector;true;MetadataCollector;(ProcessingEnvironment,ConfigurationMetadata);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.configurationprocessor;MetadataCollector;true;MetadataCollector;(ProcessingEnvironment,ConfigurationMetadata);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.configurationprocessor;MetadataCollector;true;add;(ItemMetadata);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.configurationprocessor;MetadataStore;true;MetadataStore;(ProcessingEnvironment);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.context.annotation;UserConfigurations;true;of;(Class[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.boot.context.config;ConfigData$PropertySourceOptions;true;always;(Options);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.context.config;ConfigData$PropertySourceOptions;true;get;(PropertySource);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.config;ConfigData;false;ConfigData;(Collection,Option[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.context.config;ConfigData;false;ConfigData;(Collection,PropertySourceOptions);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.context.config;ConfigData;false;ConfigData;(Collection,PropertySourceOptions);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.context.config;ConfigData;false;getOptions;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.config;ConfigData;false;getOptions;(PropertySource);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.config;ConfigData;false;getPropertySources;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.config;ConfigDataEnvironmentPostProcessor;true;ConfigDataEnvironmentPostProcessor;(DeferredLogFactory,ConfigurableBootstrapContext);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.context.config;ConfigDataEnvironmentPostProcessor;true;ConfigDataEnvironmentPostProcessor;(DeferredLogFactory,ConfigurableBootstrapContext);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.context.config;ConfigDataEnvironmentPostProcessor;true;ConfigDataEnvironmentPostProcessor;(DeferredLogFactory,ConfigurableBootstrapContext,ConfigDataEnvironmentUpdateListener);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.context.config;ConfigDataEnvironmentPostProcessor;true;ConfigDataEnvironmentPostProcessor;(DeferredLogFactory,ConfigurableBootstrapContext,ConfigDataEnvironmentUpdateListener);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.context.config;ConfigDataEnvironmentPostProcessor;true;ConfigDataEnvironmentPostProcessor;(DeferredLogFactory,ConfigurableBootstrapContext,ConfigDataEnvironmentUpdateListener);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.context.config;ConfigDataLoaderContext;true;getBootstrapContext;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.config;ConfigDataLocation;false;getNonPrefixedValue;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.config;ConfigDataLocation;false;getValue;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.config;ConfigDataLocation;false;of;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.context.config;ConfigDataLocation;false;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.config;ConfigDataLocationNotFoundException;true;ConfigDataLocationNotFoundException;(ConfigDataLocation);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.context.config;ConfigDataLocationNotFoundException;true;ConfigDataLocationNotFoundException;(ConfigDataLocation,String,Throwable);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.context.config;ConfigDataLocationNotFoundException;true;ConfigDataLocationNotFoundException;(ConfigDataLocation,Throwable);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.context.config;ConfigDataLocationNotFoundException;true;getLocation;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.config;ConfigDataLocationResolverContext;true;getBinder;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.config;ConfigDataLocationResolverContext;true;getBootstrapContext;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.config;ConfigDataLocationResolverContext;true;getParent;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.config;ConfigDataNotFoundException;true;getReferenceDescription;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.config;ConfigDataResourceNotFoundException;true;ConfigDataResourceNotFoundException;(ConfigDataResource);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.context.config;ConfigDataResourceNotFoundException;true;ConfigDataResourceNotFoundException;(ConfigDataResource,Throwable);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.context.config;ConfigDataResourceNotFoundException;true;getLocation;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.config;ConfigDataResourceNotFoundException;true;getResource;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.config;ConfigFileApplicationListener;true;setSearchLocations;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.context.config;ConfigFileApplicationListener;true;setSearchNames;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.context.config;ConfigTreeConfigDataLocationResolver;true;ConfigTreeConfigDataLocationResolver;(ResourceLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.context.config;ConfigTreeConfigDataResource;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.config;InactiveConfigDataAccessException;true;getLocation;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.config;InactiveConfigDataAccessException;true;getOrigin;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.config;InactiveConfigDataAccessException;true;getPropertyName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.config;InactiveConfigDataAccessException;true;getPropertySource;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.config;InvalidConfigDataPropertyException;true;getLocation;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.config;InvalidConfigDataPropertyException;true;getProperty;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.config;InvalidConfigDataPropertyException;true;getReplacement;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.config;Profiles;true;getAccepted;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.config;Profiles;true;getActive;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.config;Profiles;true;getDefault;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.config;StandardConfigDataLocationResolver;true;StandardConfigDataLocationResolver;(Log,Binder,ResourceLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.context.config;StandardConfigDataLocationResolver;true;StandardConfigDataLocationResolver;(Log,Binder,ResourceLoader);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.context.config;StandardConfigDataResource;true;getProfile;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.config;StandardConfigDataResource;true;getResource;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.config;UnsupportedConfigDataLocationException;true;getLocation;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.event;ApplicationContextInitializedEvent;true;ApplicationContextInitializedEvent;(SpringApplication,String[],ConfigurableApplicationContext);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.context.event;ApplicationContextInitializedEvent;true;ApplicationContextInitializedEvent;(SpringApplication,String[],ConfigurableApplicationContext);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.context.event;ApplicationContextInitializedEvent;true;getApplicationContext;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.event;ApplicationEnvironmentPreparedEvent;true;ApplicationEnvironmentPreparedEvent;(ConfigurableBootstrapContext,SpringApplication,String[],ConfigurableEnvironment);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.context.event;ApplicationEnvironmentPreparedEvent;true;ApplicationEnvironmentPreparedEvent;(ConfigurableBootstrapContext,SpringApplication,String[],ConfigurableEnvironment);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.context.event;ApplicationEnvironmentPreparedEvent;true;ApplicationEnvironmentPreparedEvent;(ConfigurableBootstrapContext,SpringApplication,String[],ConfigurableEnvironment);;Argument[3];Argument[-1];taint",
        "org.springframework.boot.context.event;ApplicationEnvironmentPreparedEvent;true;getBootstrapContext;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.event;ApplicationEnvironmentPreparedEvent;true;getEnvironment;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.event;ApplicationFailedEvent;true;ApplicationFailedEvent;(SpringApplication,String[],ConfigurableApplicationContext,Throwable);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.context.event;ApplicationFailedEvent;true;ApplicationFailedEvent;(SpringApplication,String[],ConfigurableApplicationContext,Throwable);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.context.event;ApplicationFailedEvent;true;ApplicationFailedEvent;(SpringApplication,String[],ConfigurableApplicationContext,Throwable);;Argument[3];Argument[-1];taint",
        "org.springframework.boot.context.event;ApplicationFailedEvent;true;getApplicationContext;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.event;ApplicationFailedEvent;true;getException;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.event;ApplicationPreparedEvent;true;ApplicationPreparedEvent;(SpringApplication,String[],ConfigurableApplicationContext);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.context.event;ApplicationPreparedEvent;true;ApplicationPreparedEvent;(SpringApplication,String[],ConfigurableApplicationContext);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.context.event;ApplicationPreparedEvent;true;getApplicationContext;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.event;ApplicationReadyEvent;true;ApplicationReadyEvent;(SpringApplication,String[],ConfigurableApplicationContext);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.context.event;ApplicationReadyEvent;true;ApplicationReadyEvent;(SpringApplication,String[],ConfigurableApplicationContext);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.context.event;ApplicationReadyEvent;true;ApplicationReadyEvent;(SpringApplication,String[],ConfigurableApplicationContext,Duration);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.context.event;ApplicationReadyEvent;true;ApplicationReadyEvent;(SpringApplication,String[],ConfigurableApplicationContext,Duration);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.context.event;ApplicationReadyEvent;true;ApplicationReadyEvent;(SpringApplication,String[],ConfigurableApplicationContext,Duration);;Argument[3];Argument[-1];taint",
        "org.springframework.boot.context.event;ApplicationReadyEvent;true;getApplicationContext;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.event;ApplicationReadyEvent;true;getTimeTaken;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.event;ApplicationStartedEvent;true;ApplicationStartedEvent;(SpringApplication,String[],ConfigurableApplicationContext);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.context.event;ApplicationStartedEvent;true;ApplicationStartedEvent;(SpringApplication,String[],ConfigurableApplicationContext);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.context.event;ApplicationStartedEvent;true;ApplicationStartedEvent;(SpringApplication,String[],ConfigurableApplicationContext,Duration);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.context.event;ApplicationStartedEvent;true;ApplicationStartedEvent;(SpringApplication,String[],ConfigurableApplicationContext,Duration);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.context.event;ApplicationStartedEvent;true;ApplicationStartedEvent;(SpringApplication,String[],ConfigurableApplicationContext,Duration);;Argument[3];Argument[-1];taint",
        "org.springframework.boot.context.event;ApplicationStartedEvent;true;getApplicationContext;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.event;ApplicationStartedEvent;true;getTimeTaken;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.event;ApplicationStartingEvent;true;ApplicationStartingEvent;(ConfigurableBootstrapContext,SpringApplication,String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.context.event;ApplicationStartingEvent;true;ApplicationStartingEvent;(ConfigurableBootstrapContext,SpringApplication,String[]);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.context.event;ApplicationStartingEvent;true;getBootstrapContext;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.event;EventPublishingRunListener;true;EventPublishingRunListener;(SpringApplication,String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.context.event;EventPublishingRunListener;true;EventPublishingRunListener;(SpringApplication,String[]);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.context.event;SpringApplicationEvent;true;SpringApplicationEvent;(SpringApplication,String[]);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.context.event;SpringApplicationEvent;true;getArgs;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.metrics.buffering;StartupTimeline$TimelineEvent;true;getDuration;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.metrics.buffering;StartupTimeline$TimelineEvent;true;getEndTime;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.metrics.buffering;StartupTimeline$TimelineEvent;true;getStartTime;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.metrics.buffering;StartupTimeline$TimelineEvent;true;getStartupStep;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.metrics.buffering;StartupTimeline;true;getEvents;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.metrics.buffering;StartupTimeline;true;getStartTime;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.properties.bind.handler;IgnoreErrorsBindHandler;true;IgnoreErrorsBindHandler;(BindHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.context.properties.bind.handler;IgnoreTopLevelConverterNotFoundBindHandler;true;IgnoreTopLevelConverterNotFoundBindHandler;(BindHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.context.properties.bind.handler;NoUnboundElementsBindHandler;true;NoUnboundElementsBindHandler;(BindHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.context.properties.bind.handler;NoUnboundElementsBindHandler;true;NoUnboundElementsBindHandler;(BindHandler,Function);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.context.properties.bind.handler;NoUnboundElementsBindHandler;true;NoUnboundElementsBindHandler;(BindHandler,Function);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.context.properties.bind.validation;BindValidationException;true;getValidationErrors;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.properties.bind.validation;ValidationBindHandler;true;ValidationBindHandler;(BindHandler,Validator[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.context.properties.bind.validation;ValidationBindHandler;true;ValidationBindHandler;(BindHandler,Validator[]);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.context.properties.bind.validation;ValidationBindHandler;true;ValidationBindHandler;(Validator[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.context.properties.bind.validation;ValidationErrors;true;getAllErrors;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.properties.bind.validation;ValidationErrors;true;getBoundProperties;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.properties.bind.validation;ValidationErrors;true;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.properties.bind;AbstractBindHandler;true;AbstractBindHandler;(BindHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.context.properties.bind;BindContext;true;getConfigurationProperty;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.properties.bind;BindContext;true;getSources;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.properties.bind;BindException;true;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.properties.bind;BindException;true;getProperty;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.properties.bind;BindException;true;getTarget;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.properties.bind;BindHandler;true;onCreate;(ConfigurationPropertyName,Bindable,BindContext,Object);;Argument[3];ReturnValue;taint",
        "org.springframework.boot.context.properties.bind;BindHandler;true;onFailure;(ConfigurationPropertyName,Bindable,BindContext,Exception);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.context.properties.bind;BindHandler;true;onFinish;(ConfigurationPropertyName,Bindable,BindContext,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.context.properties.bind;BindHandler;true;onFinish;(ConfigurationPropertyName,Bindable,BindContext,Object);;Argument[3];Argument[-1];taint",
        "org.springframework.boot.context.properties.bind;BindHandler;true;onStart;(ConfigurationPropertyName,Bindable,BindContext);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.context.properties.bind;BindHandler;true;onStart;(ConfigurationPropertyName,Bindable,BindContext);;Argument[1];ReturnValue;taint",
        "org.springframework.boot.context.properties.bind;BindHandler;true;onSuccess;(ConfigurationPropertyName,Bindable,BindContext,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.context.properties.bind;BindHandler;true;onSuccess;(ConfigurationPropertyName,Bindable,BindContext,Object);;Argument[3];Argument[-1];taint",
        "org.springframework.boot.context.properties.bind;BindHandler;true;onSuccess;(ConfigurationPropertyName,Bindable,BindContext,Object);;Argument[3];ReturnValue;taint",
        "org.springframework.boot.context.properties.bind;BindResult;false;get;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.properties.bind;BindResult;false;orElse;(Object);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.properties.bind;BindResult;false;orElse;(Object);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.context.properties.bind;BindResult;false;orElseGet;(Supplier);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.properties.bind;BindResult;false;orElseThrow;(Supplier);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.properties.bind;Bindable;false;getAnnotation;(Class);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.properties.bind;Bindable;false;getAnnotations;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.properties.bind;Bindable;false;getBoxedType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.properties.bind;Bindable;false;getType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.properties.bind;Bindable;false;getValue;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.properties.bind;Bindable;false;of;(ResolvableType);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.context.properties.bind;Bindable;false;withAnnotations;(Annotation[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.boot.context.properties.bind;Bindable;false;withSuppliedValue;(Supplier);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.context.properties.bind;Binder;true;Binder;(ConfigurationPropertySource[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.context.properties.bind;Binder;true;Binder;(Iterable);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.context.properties.bind;Binder;true;Binder;(Iterable,PlaceholdersResolver);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.context.properties.bind;Binder;true;Binder;(Iterable,PlaceholdersResolver);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.context.properties.bind;Binder;true;Binder;(Iterable,PlaceholdersResolver,ConversionService);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.context.properties.bind;Binder;true;Binder;(Iterable,PlaceholdersResolver,ConversionService);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.context.properties.bind;Binder;true;Binder;(Iterable,PlaceholdersResolver,ConversionService);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.context.properties.bind;Binder;true;Binder;(Iterable,PlaceholdersResolver,ConversionService,Consumer);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.context.properties.bind;Binder;true;Binder;(Iterable,PlaceholdersResolver,ConversionService,Consumer);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.context.properties.bind;Binder;true;Binder;(Iterable,PlaceholdersResolver,ConversionService,Consumer);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.context.properties.bind;Binder;true;Binder;(Iterable,PlaceholdersResolver,ConversionService,Consumer,BindHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.context.properties.bind;Binder;true;Binder;(Iterable,PlaceholdersResolver,ConversionService,Consumer,BindHandler);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.context.properties.bind;Binder;true;Binder;(Iterable,PlaceholdersResolver,ConversionService,Consumer,BindHandler);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.context.properties.bind;Binder;true;Binder;(Iterable,PlaceholdersResolver,ConversionService,Consumer,BindHandler);;Argument[4];Argument[-1];taint",
        "org.springframework.boot.context.properties.bind;Binder;true;Binder;(Iterable,PlaceholdersResolver,ConversionService,Consumer,BindHandler,BindConstructorProvider);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.context.properties.bind;Binder;true;Binder;(Iterable,PlaceholdersResolver,ConversionService,Consumer,BindHandler,BindConstructorProvider);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.context.properties.bind;Binder;true;Binder;(Iterable,PlaceholdersResolver,ConversionService,Consumer,BindHandler,BindConstructorProvider);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.context.properties.bind;Binder;true;Binder;(Iterable,PlaceholdersResolver,ConversionService,Consumer,BindHandler,BindConstructorProvider);;Argument[4];Argument[-1];taint",
        "org.springframework.boot.context.properties.bind;Binder;true;Binder;(Iterable,PlaceholdersResolver,ConversionService,Consumer,BindHandler,BindConstructorProvider);;Argument[5];Argument[-1];taint",
        "org.springframework.boot.context.properties.bind;Binder;true;Binder;(Iterable,PlaceholdersResolver,List,Consumer,BindHandler,BindConstructorProvider);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.context.properties.bind;Binder;true;Binder;(Iterable,PlaceholdersResolver,List,Consumer,BindHandler,BindConstructorProvider);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.context.properties.bind;Binder;true;Binder;(Iterable,PlaceholdersResolver,List,Consumer,BindHandler,BindConstructorProvider);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.context.properties.bind;Binder;true;Binder;(Iterable,PlaceholdersResolver,List,Consumer,BindHandler,BindConstructorProvider);;Argument[4];Argument[-1];taint",
        "org.springframework.boot.context.properties.bind;Binder;true;Binder;(Iterable,PlaceholdersResolver,List,Consumer,BindHandler,BindConstructorProvider);;Argument[5];Argument[-1];taint",
        "org.springframework.boot.context.properties.bind;Binder;true;get;(Environment,BindHandler);;Argument[1];ReturnValue;taint",
        "org.springframework.boot.context.properties.bind;BoundPropertiesTrackingBindHandler;true;BoundPropertiesTrackingBindHandler;(Consumer);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.context.properties.bind;PlaceholdersResolver;true;resolvePlaceholders;(Object);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.context.properties.bind;PropertySourcesPlaceholdersResolver;true;PropertySourcesPlaceholdersResolver;(Iterable);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.context.properties.bind;PropertySourcesPlaceholdersResolver;true;PropertySourcesPlaceholdersResolver;(Iterable,PropertyPlaceholderHelper);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.context.properties.bind;PropertySourcesPlaceholdersResolver;true;PropertySourcesPlaceholdersResolver;(Iterable,PropertyPlaceholderHelper);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.context.properties.bind;UnboundConfigurationPropertiesException;true;UnboundConfigurationPropertiesException;(Set);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.context.properties.bind;UnboundConfigurationPropertiesException;true;getUnboundProperties;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.properties.source;ConfigurationProperty;false;ConfigurationProperty;(ConfigurationPropertyName,Object,Origin);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.context.properties.source;ConfigurationProperty;false;ConfigurationProperty;(ConfigurationPropertyName,Object,Origin);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.context.properties.source;ConfigurationProperty;false;ConfigurationProperty;(ConfigurationPropertyName,Object,Origin);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.context.properties.source;ConfigurationProperty;false;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.properties.source;ConfigurationProperty;false;getSource;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.properties.source;ConfigurationProperty;false;getValue;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.properties.source;ConfigurationPropertyCaching;true;get;(Iterable);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.boot.context.properties.source;ConfigurationPropertyCaching;true;get;(Iterable,Object);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.boot.context.properties.source;ConfigurationPropertyCaching;true;setTimeToLive;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.context.properties.source;ConfigurationPropertyName;false;adapt;(CharSequence,char);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.context.properties.source;ConfigurationPropertyName;false;append;(ConfigurationPropertyName);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.context.properties.source;ConfigurationPropertyName;false;append;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.context.properties.source;ConfigurationPropertyName;false;append;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.context.properties.source;ConfigurationPropertyName;false;chop;(int);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.context.properties.source;ConfigurationPropertyName;false;getElement;(int,Form);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.properties.source;ConfigurationPropertyName;false;getLastElement;(Form);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.properties.source;ConfigurationPropertyName;false;getParent;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.properties.source;ConfigurationPropertyName;false;of;(CharSequence);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.context.properties.source;ConfigurationPropertyName;false;ofIfValid;(CharSequence);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.context.properties.source;ConfigurationPropertyName;false;subName;(int);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.context.properties.source;ConfigurationPropertyName;false;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.properties.source;ConfigurationPropertyNameAliases;false;ConfigurationPropertyNameAliases;(ConfigurationPropertyName,ConfigurationPropertyName[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.context.properties.source;ConfigurationPropertyNameAliases;false;ConfigurationPropertyNameAliases;(ConfigurationPropertyName,ConfigurationPropertyName[]);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.context.properties.source;ConfigurationPropertyNameAliases;false;ConfigurationPropertyNameAliases;(String,String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.context.properties.source;ConfigurationPropertyNameAliases;false;ConfigurationPropertyNameAliases;(String,String[]);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.context.properties.source;ConfigurationPropertyNameAliases;false;addAliases;(ConfigurationPropertyName,ConfigurationPropertyName[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.context.properties.source;ConfigurationPropertyNameAliases;false;addAliases;(ConfigurationPropertyName,ConfigurationPropertyName[]);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.context.properties.source;ConfigurationPropertyNameAliases;false;addAliases;(String,String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.context.properties.source;ConfigurationPropertyNameAliases;false;addAliases;(String,String[]);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.context.properties.source;ConfigurationPropertyNameAliases;false;getAliases;(ConfigurationPropertyName);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.properties.source;ConfigurationPropertyNameAliases;false;getNameForAlias;(ConfigurationPropertyName);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.properties.source;ConfigurationPropertySource;true;filter;(Predicate);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.context.properties.source;ConfigurationPropertySource;true;from;(PropertySource);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.context.properties.source;ConfigurationPropertySource;true;getConfigurationProperty;(ConfigurationPropertyName);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.context.properties.source;ConfigurationPropertySource;true;getUnderlyingSource;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.properties.source;ConfigurationPropertySource;true;withAliases;(ConfigurationPropertyNameAliases);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.boot.context.properties.source;ConfigurationPropertySource;true;withPrefix;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.properties.source;ConfigurationPropertySource;true;withPrefix;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.context.properties.source;ConfigurationPropertySources;false;createPropertyResolver;(MutablePropertySources);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.boot.context.properties.source;ConfigurationPropertySources;false;from;(Iterable);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.boot.context.properties.source;ConfigurationPropertySources;false;from;(PropertySource);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.context.properties.source;InvalidConfigurationPropertyNameException;true;InvalidConfigurationPropertyNameException;(CharSequence,List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.context.properties.source;InvalidConfigurationPropertyNameException;true;InvalidConfigurationPropertyNameException;(CharSequence,List);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.context.properties.source;InvalidConfigurationPropertyNameException;true;getInvalidCharacters;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.properties.source;InvalidConfigurationPropertyNameException;true;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.properties.source;InvalidConfigurationPropertyValueException;true;InvalidConfigurationPropertyValueException;(String,Object,String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.context.properties.source;InvalidConfigurationPropertyValueException;true;InvalidConfigurationPropertyValueException;(String,Object,String);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.context.properties.source;InvalidConfigurationPropertyValueException;true;InvalidConfigurationPropertyValueException;(String,Object,String);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.context.properties.source;InvalidConfigurationPropertyValueException;true;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.properties.source;InvalidConfigurationPropertyValueException;true;getReason;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.properties.source;InvalidConfigurationPropertyValueException;true;getValue;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.properties.source;IterableConfigurationPropertySource;true;stream;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.properties.source;MapConfigurationPropertySource;true;put;(Object,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.context.properties.source;MutuallyExclusiveConfigurationPropertiesException;true;MutuallyExclusiveConfigurationPropertiesException;(Collection,Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.context.properties.source;MutuallyExclusiveConfigurationPropertiesException;true;MutuallyExclusiveConfigurationPropertiesException;(Collection,Collection);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.context.properties.source;MutuallyExclusiveConfigurationPropertiesException;true;getConfiguredNames;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.properties.source;MutuallyExclusiveConfigurationPropertiesException;true;getMutuallyExclusiveNames;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.properties;BoundConfigurationProperties;true;get;(ConfigurationPropertyName);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.properties;BoundConfigurationProperties;true;getAll;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.properties;ConfigurationPropertiesBean;false;asBindTarget;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.properties;ConfigurationPropertiesBean;false;get;(ApplicationContext,Object,String);;Argument[1];ReturnValue;taint",
        "org.springframework.boot.context.properties;ConfigurationPropertiesBean;false;get;(ApplicationContext,Object,String);;Argument[2];ReturnValue;taint",
        "org.springframework.boot.context.properties;ConfigurationPropertiesBean;false;getAnnotation;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.properties;ConfigurationPropertiesBean;false;getInstance;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.properties;ConfigurationPropertiesBean;false;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.properties;ConfigurationPropertiesBindException;true;getAnnotation;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.properties;IncompatibleConfigurationException;true;IncompatibleConfigurationException;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.context.properties;IncompatibleConfigurationException;true;getIncompatibleKeys;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.context.properties;PropertyMapper$Source;false;when;(Predicate);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.context.properties;PropertyMapper;false;alwaysApplying;(SourceOperator);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.context;ApplicationPidFileWriter;true;ApplicationPidFileWriter;(File);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.context;ApplicationPidFileWriter;true;ApplicationPidFileWriter;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.devtools.autoconfigure;DevToolsProperties$Restart;true;getAdditionalExclude;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.devtools.autoconfigure;DevToolsProperties$Restart;true;getAdditionalPaths;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.devtools.autoconfigure;DevToolsProperties$Restart;true;getAllExclude;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.devtools.autoconfigure;DevToolsProperties$Restart;true;getExclude;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.devtools.autoconfigure;DevToolsProperties$Restart;true;getPollInterval;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.devtools.autoconfigure;DevToolsProperties$Restart;true;getQuietPeriod;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.devtools.autoconfigure;DevToolsProperties$Restart;true;getTriggerFile;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.devtools.autoconfigure;DevToolsProperties$Restart;true;setAdditionalExclude;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.devtools.autoconfigure;DevToolsProperties$Restart;true;setAdditionalPaths;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.devtools.autoconfigure;DevToolsProperties$Restart;true;setExclude;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.devtools.autoconfigure;DevToolsProperties$Restart;true;setPollInterval;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.devtools.autoconfigure;DevToolsProperties$Restart;true;setQuietPeriod;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.devtools.autoconfigure;DevToolsProperties$Restart;true;setTriggerFile;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.devtools.autoconfigure;DevToolsProperties;true;getLivereload;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.devtools.autoconfigure;DevToolsProperties;true;getRemote;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.devtools.autoconfigure;DevToolsProperties;true;getRestart;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.devtools.autoconfigure;OptionalLiveReloadServer;true;OptionalLiveReloadServer;(LiveReloadServer);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.devtools.autoconfigure;RemoteDevToolsAutoConfiguration;true;RemoteDevToolsAutoConfiguration;(DevToolsProperties);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.devtools.autoconfigure;RemoteDevToolsAutoConfiguration;true;remoteDevToolsDispatcherFilter;(AccessManager,Collection);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.devtools.autoconfigure;RemoteDevToolsAutoConfiguration;true;remoteDevToolsDispatcherFilter;(AccessManager,Collection);;Element of Argument[1];ReturnValue;taint",
        "org.springframework.boot.devtools.autoconfigure;RemoteDevToolsProperties$Proxy;true;getHost;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.devtools.autoconfigure;RemoteDevToolsProperties$Proxy;true;setHost;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.devtools.autoconfigure;RemoteDevToolsProperties;true;getContextPath;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.devtools.autoconfigure;RemoteDevToolsProperties;true;getProxy;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.devtools.autoconfigure;RemoteDevToolsProperties;true;getRestart;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.devtools.autoconfigure;RemoteDevToolsProperties;true;getSecret;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.devtools.autoconfigure;RemoteDevToolsProperties;true;getSecretHeaderName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.devtools.autoconfigure;RemoteDevToolsProperties;true;setContextPath;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.devtools.autoconfigure;RemoteDevToolsProperties;true;setSecret;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.devtools.autoconfigure;RemoteDevToolsProperties;true;setSecretHeaderName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.devtools.autoconfigure;TriggerFileFilter;true;TriggerFileFilter;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.devtools.classpath;ClassPathChangedEvent;true;ClassPathChangedEvent;(Object,Set,boolean);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.devtools.classpath;ClassPathChangedEvent;true;getChangeSet;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.devtools.classpath;ClassPathDirectories;true;ClassPathDirectories;(URL[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.devtools.classpath;ClassPathFileSystemWatcher;true;ClassPathFileSystemWatcher;(FileSystemWatcherFactory,ClassPathRestartStrategy,URL[]);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.devtools.classpath;PatternClassPathRestartStrategy;true;PatternClassPathRestartStrategy;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.devtools.classpath;PatternClassPathRestartStrategy;true;PatternClassPathRestartStrategy;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.devtools.filewatch;ChangedFile;false;ChangedFile;(File,File,Type);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.devtools.filewatch;ChangedFile;false;ChangedFile;(File,File,Type);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.devtools.filewatch;ChangedFile;false;getFile;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.devtools.filewatch;ChangedFile;false;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.devtools.filewatch;ChangedFiles;false;ChangedFiles;(File,Set);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.devtools.filewatch;ChangedFiles;false;ChangedFiles;(File,Set);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.devtools.filewatch;ChangedFiles;false;getFiles;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.devtools.filewatch;ChangedFiles;false;getSourceDirectory;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.devtools.filewatch;ChangedFiles;false;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.devtools.filewatch;FileSystemWatcher;true;FileSystemWatcher;(boolean,Duration,Duration,SnapshotStateRepository);;Argument[3];Argument[-1];taint",
        "org.springframework.boot.devtools.filewatch;FileSystemWatcher;true;addListener;(FileChangeListener);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.devtools.filewatch;FileSystemWatcher;true;addSourceDirectory;(File);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.devtools.filewatch;FileSystemWatcher;true;setTriggerFilter;(FileFilter);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.devtools.filewatch;SnapshotStateRepository;true;restore;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.devtools.filewatch;SnapshotStateRepository;true;save;(Object);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.devtools.livereload;LiveReloadServer;true;LiveReloadServer;(ThreadFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.devtools.livereload;LiveReloadServer;true;LiveReloadServer;(int,ThreadFactory);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.devtools.remote.client;ClassPathChangeUploader;true;ClassPathChangeUploader;(String,ClientHttpRequestFactory);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.devtools.remote.client;HttpHeaderInterceptor;true;HttpHeaderInterceptor;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.devtools.remote.client;HttpHeaderInterceptor;true;HttpHeaderInterceptor;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.devtools.remote.client;RemoteClientConfiguration;true;RemoteClientConfiguration;(DevToolsProperties);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.devtools.remote.server;Dispatcher;true;Dispatcher;(AccessManager,Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.devtools.remote.server;Dispatcher;true;Dispatcher;(AccessManager,Collection);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.devtools.remote.server;DispatcherFilter;true;DispatcherFilter;(Dispatcher);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.devtools.remote.server;Handler;true;handle;(ServerHttpRequest,ServerHttpResponse);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.devtools.remote.server;Handler;true;handle;(ServerHttpRequest,ServerHttpResponse);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.devtools.remote.server;HandlerMapper;true;getHandler;(ServerHttpRequest);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.devtools.remote.server;HttpHeaderAccessManager;true;HttpHeaderAccessManager;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.devtools.remote.server;HttpHeaderAccessManager;true;HttpHeaderAccessManager;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.devtools.remote.server;UrlHandlerMapper;true;UrlHandlerMapper;(String,Handler);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.devtools.remote.server;UrlHandlerMapper;true;UrlHandlerMapper;(String,Handler);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.devtools.restart.classloader;ClassLoaderFile;true;ClassLoaderFile;(Kind,byte[]);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.devtools.restart.classloader;ClassLoaderFile;true;ClassLoaderFile;(Kind,long,byte[]);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.devtools.restart.classloader;ClassLoaderFile;true;getContents;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.devtools.restart.classloader;ClassLoaderFileRepository;true;getFile;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.devtools.restart.classloader;ClassLoaderFileURLStreamHandler;true;ClassLoaderFileURLStreamHandler;(ClassLoaderFile);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.devtools.restart.classloader;ClassLoaderFiles$SourceDirectory;true;getFiles;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.devtools.restart.classloader;ClassLoaderFiles$SourceDirectory;true;getFilesEntrySet;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.devtools.restart.classloader;ClassLoaderFiles$SourceDirectory;true;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.devtools.restart.classloader;ClassLoaderFiles;true;addFile;(String,String,ClassLoaderFile);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.devtools.restart.classloader;ClassLoaderFiles;true;getSourceDirectories;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.devtools.restart.classloader;RestartClassLoader;true;RestartClassLoader;(ClassLoader,URL[],ClassLoaderFileRepository);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.devtools.restart.classloader;RestartClassLoader;true;RestartClassLoader;(ClassLoader,URL[],ClassLoaderFileRepository,Log);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.devtools.restart.server;HttpRestartServer;true;HttpRestartServer;(RestartServer);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.devtools.restart.server;HttpRestartServer;true;HttpRestartServer;(SourceDirectoryUrlFilter);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.devtools.restart.server;HttpRestartServerHandler;true;HttpRestartServerHandler;(HttpRestartServer);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.devtools.restart.server;RestartServer;true;RestartServer;(SourceDirectoryUrlFilter);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.devtools.restart.server;RestartServer;true;RestartServer;(SourceDirectoryUrlFilter,ClassLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.devtools.restart.server;RestartServer;true;RestartServer;(SourceDirectoryUrlFilter,ClassLoader);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.devtools.restart;Restarter;true;addUrls;(Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.devtools.restart;Restarter;true;getInitialUrls;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.devtools.restart;Restarter;true;getOrAddAttribute;(String,ObjectFactory);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.devtools.restart;Restarter;true;getOrAddAttribute;(String,ObjectFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.devtools.restart;Restarter;true;getOrAddAttribute;(String,ObjectFactory);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.devtools.restart;Restarter;true;removeAttribute;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.devtools.tunnel.client;HttpTunnelConnection;true;HttpTunnelConnection;(String,ClientHttpRequestFactory);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.devtools.tunnel.client;TunnelClient;true;TunnelClient;(int,TunnelConnection);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.devtools.tunnel.client;TunnelClient;true;addListener;(TunnelClientListener);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.devtools.tunnel.client;TunnelConnection;true;open;(WritableByteChannel,Closeable);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.devtools.tunnel.client;TunnelConnection;true;open;(WritableByteChannel,Closeable);;Argument[1];ReturnValue;taint",
        "org.springframework.boot.devtools.tunnel.payload;HttpTunnelPayload;true;HttpTunnelPayload;(long,ByteBuffer);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.devtools.tunnel.payload;HttpTunnelPayloadForwarder;true;HttpTunnelPayloadForwarder;(WritableByteChannel);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.devtools.tunnel.payload;HttpTunnelPayloadForwarder;true;forward;(HttpTunnelPayload);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.devtools.tunnel.server;HttpTunnelServer;true;HttpTunnelServer;(TargetServerConnection);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.devtools.tunnel.server;HttpTunnelServer;true;handle;(ServerHttpRequest,ServerHttpResponse);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.devtools.tunnel.server;HttpTunnelServer;true;handle;(ServerHttpRequest,ServerHttpResponse);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.devtools.tunnel.server;HttpTunnelServerHandler;true;HttpTunnelServerHandler;(HttpTunnelServer);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.devtools.tunnel.server;SocketTargetServerConnection;true;SocketTargetServerConnection;(PortProvider);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.diagnostics;FailureAnalysis;true;FailureAnalysis;(String,String,Throwable);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.diagnostics;FailureAnalysis;true;FailureAnalysis;(String,String,Throwable);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.diagnostics;FailureAnalysis;true;FailureAnalysis;(String,String,Throwable);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.diagnostics;FailureAnalysis;true;getAction;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.diagnostics;FailureAnalysis;true;getCause;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.diagnostics;FailureAnalysis;true;getDescription;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.diagnostics;FailureAnalyzer;true;analyze;(Throwable);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.docs.configurationmetadata.annotationprocessor.automaticmetadatageneration.nestedproperties;MyServerProperties$Host;true;getIp;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.docs.configurationmetadata.annotationprocessor.automaticmetadatageneration.nestedproperties;MyServerProperties$Host;true;setIp;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.docs.configurationmetadata.annotationprocessor.automaticmetadatageneration.nestedproperties;MyServerProperties;true;getHost;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.docs.configurationmetadata.annotationprocessor.automaticmetadatageneration.nestedproperties;MyServerProperties;true;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.docs.configurationmetadata.annotationprocessor.automaticmetadatageneration.nestedproperties;MyServerProperties;true;setHost;(Host);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.docs.configurationmetadata.annotationprocessor.automaticmetadatageneration.nestedproperties;MyServerProperties;true;setName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.docs.configurationmetadata.annotationprocessor.automaticmetadatageneration;MyMessagingProperties;true;getAddresses;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.docs.configurationmetadata.annotationprocessor.automaticmetadatageneration;MyMessagingProperties;true;setAddresses;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.docs.configurationmetadata.annotationprocessor.automaticmetadatageneration;MyServerProperties;true;getIp;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.docs.configurationmetadata.annotationprocessor.automaticmetadatageneration;MyServerProperties;true;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.docs.configurationmetadata.annotationprocessor.automaticmetadatageneration;MyServerProperties;true;setIp;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.docs.configurationmetadata.annotationprocessor.automaticmetadatageneration;MyServerProperties;true;setName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.docs.configurationmetadata.format.group;MyProperties;true;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.docs.configurationmetadata.format.group;MyProperties;true;getTarget;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.docs.configurationmetadata.format.group;MyProperties;true;setName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.docs.configurationmetadata.format.group;MyProperties;true;setTarget;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.docs.configurationmetadata.manualhints.valuehint;MyProperties;true;getContexts;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.docs.configurationmetadata.manualhints.valuehint;MyProperties;true;setContexts;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.docs.data.nosql.cassandra.connecting;MyBean;true;MyBean;(CassandraTemplate);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.docs.data.nosql.couchbase.repositories;MyBean;true;MyBean;(CouchbaseTemplate);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.docs.data.nosql.elasticsearch.connectingusingspringdata;MyBean;true;MyBean;(ElasticsearchRestTemplate);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.docs.data.nosql.ldap.repositories;MyBean;true;MyBean;(LdapTemplate);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.docs.data.nosql.mongodb.connecting;MyBean;true;MyBean;(MongoDatabaseFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.docs.data.nosql.mongodb.template;MyBean;true;MyBean;(MongoTemplate);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.docs.data.nosql.neo4j.connecting;MyBean;true;MyBean;(Driver);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.docs.data.nosql.redis.connecting;MyBean;true;MyBean;(StringRedisTemplate);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.docs.data.nosql.solr.connecting;MyBean;true;MyBean;(SolrClient);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.docs.data.sql.jdbctemplate;MyBean;true;MyBean;(JdbcTemplate);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.docs.data.sql.jooq.dslcontext;MyBean;true;MyBean;(DSLContext);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.docs.data.sql.jpaandspringdata.entityclasses;City;true;City;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.docs.data.sql.jpaandspringdata.entityclasses;City;true;City;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.docs.data.sql.jpaandspringdata.entityclasses;City;true;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.docs.data.sql.jpaandspringdata.entityclasses;City;true;getState;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.docs.data.sql.jpaandspringdata.entityclasses;Country;true;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.docs.data.sql.jpaandspringdata.entityclasses;Country;true;setName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.docs.data.sql.r2dbc.usingdatabaseclient;MyBean;true;MyBean;(DatabaseClient);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.docs.features.developingautoconfiguration.customstarter.configurationkeys;AcmeProperties;true;getLoginTimeout;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.docs.features.developingautoconfiguration.customstarter.configurationkeys;AcmeProperties;true;setLoginTimeout;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.docs.features.developingautoconfiguration.testing;MyService;true;MyService;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.docs.features.developingautoconfiguration.testing;MyService;true;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.docs.features.developingautoconfiguration.testing;MyServiceAutoConfiguration$UserProperties;true;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.docs.features.developingautoconfiguration.testing;MyServiceAutoConfiguration$UserProperties;true;setName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.docs.features.externalconfig.typesafeconfigurationproperties.constructorbinding.nonnull;MyProperties$Security;true;Security;(String,String,List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.docs.features.externalconfig.typesafeconfigurationproperties.constructorbinding.nonnull;MyProperties$Security;true;Security;(String,String,List);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.docs.features.externalconfig.typesafeconfigurationproperties.constructorbinding.nonnull;MyProperties$Security;true;Security;(String,String,List);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.docs.features.externalconfig.typesafeconfigurationproperties.constructorbinding.nonnull;MyProperties$Security;true;getPassword;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.docs.features.externalconfig.typesafeconfigurationproperties.constructorbinding.nonnull;MyProperties$Security;true;getRoles;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.docs.features.externalconfig.typesafeconfigurationproperties.constructorbinding.nonnull;MyProperties$Security;true;getUsername;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.docs.features.externalconfig.typesafeconfigurationproperties.constructorbinding.nonnull;MyProperties;true;MyProperties;(boolean,InetAddress,Security);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.docs.features.externalconfig.typesafeconfigurationproperties.constructorbinding.nonnull;MyProperties;true;MyProperties;(boolean,InetAddress,Security);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.docs.features.externalconfig.typesafeconfigurationproperties.constructorbinding.nonnull;MyProperties;true;getRemoteAddress;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.docs.features.externalconfig.typesafeconfigurationproperties.constructorbinding.nonnull;MyProperties;true;getSecurity;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.docs.features.externalconfig.typesafeconfigurationproperties.constructorbinding;MyProperties$Security;true;Security;(String,String,List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.docs.features.externalconfig.typesafeconfigurationproperties.constructorbinding;MyProperties$Security;true;Security;(String,String,List);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.docs.features.externalconfig.typesafeconfigurationproperties.constructorbinding;MyProperties$Security;true;Security;(String,String,List);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.docs.features.externalconfig.typesafeconfigurationproperties.constructorbinding;MyProperties$Security;true;getPassword;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.docs.features.externalconfig.typesafeconfigurationproperties.constructorbinding;MyProperties$Security;true;getRoles;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.docs.features.externalconfig.typesafeconfigurationproperties.constructorbinding;MyProperties$Security;true;getUsername;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.docs.features.externalconfig.typesafeconfigurationproperties.constructorbinding;MyProperties;true;MyProperties;(boolean,InetAddress,Security);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.docs.features.externalconfig.typesafeconfigurationproperties.constructorbinding;MyProperties;true;MyProperties;(boolean,InetAddress,Security);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.docs.features.externalconfig.typesafeconfigurationproperties.constructorbinding;MyProperties;true;getRemoteAddress;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.docs.features.externalconfig.typesafeconfigurationproperties.constructorbinding;MyProperties;true;getSecurity;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.docs.features.externalconfig.typesafeconfigurationproperties.conversion.datasizes.constructorbinding;MyProperties;true;MyProperties;(DataSize,DataSize);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.docs.features.externalconfig.typesafeconfigurationproperties.conversion.datasizes.constructorbinding;MyProperties;true;MyProperties;(DataSize,DataSize);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.docs.features.externalconfig.typesafeconfigurationproperties.conversion.datasizes.constructorbinding;MyProperties;true;getBufferSize;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.docs.features.externalconfig.typesafeconfigurationproperties.conversion.datasizes.constructorbinding;MyProperties;true;getSizeThreshold;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.docs.features.externalconfig.typesafeconfigurationproperties.conversion.datasizes.javabeanbinding;MyProperties;true;getBufferSize;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.docs.features.externalconfig.typesafeconfigurationproperties.conversion.datasizes.javabeanbinding;MyProperties;true;getSizeThreshold;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.docs.features.externalconfig.typesafeconfigurationproperties.conversion.datasizes.javabeanbinding;MyProperties;true;setBufferSize;(DataSize);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.docs.features.externalconfig.typesafeconfigurationproperties.conversion.datasizes.javabeanbinding;MyProperties;true;setSizeThreshold;(DataSize);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.docs.features.externalconfig.typesafeconfigurationproperties.conversion.durations.constructorbinding;MyProperties;true;MyProperties;(Duration,Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.docs.features.externalconfig.typesafeconfigurationproperties.conversion.durations.constructorbinding;MyProperties;true;MyProperties;(Duration,Duration);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.docs.features.externalconfig.typesafeconfigurationproperties.conversion.durations.constructorbinding;MyProperties;true;getReadTimeout;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.docs.features.externalconfig.typesafeconfigurationproperties.conversion.durations.constructorbinding;MyProperties;true;getSessionTimeout;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.docs.features.externalconfig.typesafeconfigurationproperties.conversion.durations.javabeanbinding;MyProperties;true;getReadTimeout;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.docs.features.externalconfig.typesafeconfigurationproperties.conversion.durations.javabeanbinding;MyProperties;true;getSessionTimeout;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.docs.features.externalconfig.typesafeconfigurationproperties.conversion.durations.javabeanbinding;MyProperties;true;setReadTimeout;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.docs.features.externalconfig.typesafeconfigurationproperties.conversion.durations.javabeanbinding;MyProperties;true;setSessionTimeout;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.docs.features.externalconfig.typesafeconfigurationproperties.javabeanbinding;MyProperties$Security;true;getPassword;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.docs.features.externalconfig.typesafeconfigurationproperties.javabeanbinding;MyProperties$Security;true;getRoles;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.docs.features.externalconfig.typesafeconfigurationproperties.javabeanbinding;MyProperties$Security;true;getUsername;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.docs.features.externalconfig.typesafeconfigurationproperties.javabeanbinding;MyProperties$Security;true;setPassword;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.docs.features.externalconfig.typesafeconfigurationproperties.javabeanbinding;MyProperties$Security;true;setRoles;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.docs.features.externalconfig.typesafeconfigurationproperties.javabeanbinding;MyProperties$Security;true;setUsername;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.docs.features.externalconfig.typesafeconfigurationproperties.javabeanbinding;MyProperties;true;getRemoteAddress;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.docs.features.externalconfig.typesafeconfigurationproperties.javabeanbinding;MyProperties;true;getSecurity;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.docs.features.externalconfig.typesafeconfigurationproperties.javabeanbinding;MyProperties;true;setRemoteAddress;(InetAddress);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.docs.features.externalconfig.typesafeconfigurationproperties.mergingcomplextypes.list;MyProperties;true;getList;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.docs.features.externalconfig.typesafeconfigurationproperties.mergingcomplextypes.map;MyProperties;true;getMap;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.docs.features.externalconfig.typesafeconfigurationproperties.relaxedbinding;MyPersonProperties;true;getFirstName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.docs.features.externalconfig.typesafeconfigurationproperties.relaxedbinding;MyPersonProperties;true;setFirstName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.docs.features.externalconfig.typesafeconfigurationproperties.usingannotatedtypes;MyService;true;MyService;(SomeProperties);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.docs.features.externalconfig.typesafeconfigurationproperties.validate.nested;MyProperties$Security;true;getUsername;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.docs.features.externalconfig.typesafeconfigurationproperties.validate.nested;MyProperties$Security;true;setUsername;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.docs.features.externalconfig.typesafeconfigurationproperties.validate.nested;MyProperties;true;getRemoteAddress;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.docs.features.externalconfig.typesafeconfigurationproperties.validate.nested;MyProperties;true;getSecurity;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.docs.features.externalconfig.typesafeconfigurationproperties.validate.nested;MyProperties;true;setRemoteAddress;(InetAddress);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.docs.features.externalconfig.typesafeconfigurationproperties.validate;MyProperties;true;getRemoteAddress;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.docs.features.externalconfig.typesafeconfigurationproperties.validate;MyProperties;true;setRemoteAddress;(InetAddress);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.docs.features.springapplication.applicationavailability.managing;MyLocalCacheVerifier;true;MyLocalCacheVerifier;(ApplicationEventPublisher);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.docs.howto.springmvc.writexmlrestservice;MyThing;true;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.docs.howto.springmvc.writexmlrestservice;MyThing;true;setName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.docs.howto.webserver.addservletfilterlistener.springbean.disable;MyFilterConfiguration;true;registration;(MyFilter);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.docs.io.quartz;MySampleJob;true;setMyService;(MyService);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.docs.io.quartz;MySampleJob;true;setName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.docs.messaging.amqp.sending;MyBean;true;MyBean;(AmqpAdmin,AmqpTemplate);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.docs.messaging.amqp.sending;MyBean;true;MyBean;(AmqpAdmin,AmqpTemplate);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.docs.messaging.jms.sending;MyBean;true;MyBean;(JmsTemplate);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.docs.messaging.kafka.sending;MyBean;true;MyBean;(KafkaTemplate);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.docs.using.springbeansanddependencyinjection.multipleconstructors;MyAccountService;true;MyAccountService;(RiskAssessor);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.docs.using.springbeansanddependencyinjection.multipleconstructors;MyAccountService;true;MyAccountService;(RiskAssessor,PrintStream);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.docs.using.springbeansanddependencyinjection.multipleconstructors;MyAccountService;true;MyAccountService;(RiskAssessor,PrintStream);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.docs.using.springbeansanddependencyinjection.singleconstructor;MyAccountService;true;MyAccountService;(RiskAssessor);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.docs.web.reactive.webflux.errorhandling;MyErrorWebExceptionHandler;true;MyErrorWebExceptionHandler;(ErrorAttributes,Resources,ApplicationContext);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.docs.web.reactive.webflux.errorhandling;MyErrorWebExceptionHandler;true;MyErrorWebExceptionHandler;(ErrorAttributes,Resources,ApplicationContext);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.docs.web.reactive.webflux.errorhandling;MyErrorWebExceptionHandler;true;MyErrorWebExceptionHandler;(ErrorAttributes,Resources,ApplicationContext);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.docs.web.reactive.webflux;MyRestController;true;MyRestController;(UserRepository,CustomerRepository);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.docs.web.reactive.webflux;MyRestController;true;MyRestController;(UserRepository,CustomerRepository);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.docs.web.servlet.springmvc;MyRestController;true;MyRestController;(UserRepository,CustomerRepository);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.docs.web.servlet.springmvc;MyRestController;true;MyRestController;(UserRepository,CustomerRepository);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.env;EnvironmentPostProcessorsFactory;true;fromSpringFactories;(ClassLoader);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.env;EnvironmentPostProcessorsFactory;true;of;(ClassLoader,String[]);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.env;EnvironmentPostProcessorsFactory;true;of;(ClassLoader,String[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.boot.env;EnvironmentPostProcessorsFactory;true;of;(Class[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.boot.env;EnvironmentPostProcessorsFactory;true;of;(String[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.boot.env;RandomValuePropertySourceEnvironmentPostProcessor;true;RandomValuePropertySourceEnvironmentPostProcessor;(Log);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.gradle.dsl;SpringBootExtension;true;SpringBootExtension;(Project);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.gradle.dsl;SpringBootExtension;true;getMainClass;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.gradle.plugin;ResolveMainClassName;true;getClasspath;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.gradle.plugin;ResolveMainClassName;true;getConfiguredMainClassName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.gradle.plugin;ResolveMainClassName;true;getOutputFile;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.gradle.plugin;ResolveMainClassName;true;setClasspath;(FileCollection);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.gradle.tasks.buildinfo;BuildInfo;true;getProperties;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.gradle.tasks.buildinfo;BuildInfoProperties;true;getAdditional;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.gradle.tasks.buildinfo;BuildInfoProperties;true;getTime;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.gradle.tasks.buildinfo;BuildInfoProperties;true;setAdditional;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.gradle.tasks.bundling;BootArchive;true;getClasspath;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.gradle.tasks.bundling;BootArchive;true;getLaunchScript;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.gradle.tasks.bundling;BootArchive;true;getMainClass;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.gradle.tasks.bundling;BootBuildImage;true;environment;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.gradle.tasks.bundling;BootBuildImage;true;environment;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.gradle.tasks.bundling;BootBuildImage;true;environment;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.gradle.tasks.bundling;BootBuildImage;true;getArchiveFile;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.gradle.tasks.bundling;BootBuildImage;true;getBuildCache;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.gradle.tasks.bundling;BootBuildImage;true;getBuilder;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.gradle.tasks.bundling;BootBuildImage;true;getDocker;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.gradle.tasks.bundling;BootBuildImage;true;getEnvironment;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.gradle.tasks.bundling;BootBuildImage;true;getJar;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.gradle.tasks.bundling;BootBuildImage;true;getLaunchCache;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.gradle.tasks.bundling;BootBuildImage;true;getNetwork;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.gradle.tasks.bundling;BootBuildImage;true;getRunImage;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.gradle.tasks.bundling;BootBuildImage;true;getTargetJavaVersion;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.gradle.tasks.bundling;BootBuildImage;true;setBuilder;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.gradle.tasks.bundling;BootBuildImage;true;setEnvironment;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.gradle.tasks.bundling;BootBuildImage;true;setImageName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.gradle.tasks.bundling;BootBuildImage;true;setNetwork;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.gradle.tasks.bundling;BootBuildImage;true;setRunImage;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.gradle.tasks.bundling;BootJar;true;getLayered;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.gradle.tasks.bundling;BootWar;true;getLayered;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.gradle.tasks.bundling;BootWar;true;getProvidedClasspath;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.gradle.tasks.bundling;CacheSpec$VolumeCacheSpec;true;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.gradle.tasks.bundling;CacheSpec$VolumeCacheSpec;true;setName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.gradle.tasks.bundling;CacheSpec;true;asCache;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.gradle.tasks.bundling;DockerSpec$DockerRegistrySpec;true;getEmail;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.gradle.tasks.bundling;DockerSpec$DockerRegistrySpec;true;getPassword;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.gradle.tasks.bundling;DockerSpec$DockerRegistrySpec;true;getToken;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.gradle.tasks.bundling;DockerSpec$DockerRegistrySpec;true;getUrl;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.gradle.tasks.bundling;DockerSpec$DockerRegistrySpec;true;getUsername;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.gradle.tasks.bundling;DockerSpec$DockerRegistrySpec;true;setEmail;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.gradle.tasks.bundling;DockerSpec$DockerRegistrySpec;true;setPassword;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.gradle.tasks.bundling;DockerSpec$DockerRegistrySpec;true;setToken;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.gradle.tasks.bundling;DockerSpec$DockerRegistrySpec;true;setUrl;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.gradle.tasks.bundling;DockerSpec$DockerRegistrySpec;true;setUsername;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.gradle.tasks.bundling;DockerSpec;true;getBuilderRegistry;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.gradle.tasks.bundling;DockerSpec;true;getCertPath;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.gradle.tasks.bundling;DockerSpec;true;getHost;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.gradle.tasks.bundling;DockerSpec;true;getPublishRegistry;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.gradle.tasks.bundling;DockerSpec;true;setCertPath;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.gradle.tasks.bundling;DockerSpec;true;setHost;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.gradle.tasks.bundling;LaunchScriptConfiguration;true;getProperties;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.gradle.tasks.bundling;LaunchScriptConfiguration;true;getScript;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.gradle.tasks.bundling;LaunchScriptConfiguration;true;properties;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.gradle.tasks.bundling;LaunchScriptConfiguration;true;setScript;(File);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.gradle.tasks.bundling;LayeredSpec$ApplicationSpec;true;ApplicationSpec;(IntoLayerSpec[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.gradle.tasks.bundling;LayeredSpec$DependenciesIntoLayerSpec;true;DependenciesIntoLayerSpec;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.gradle.tasks.bundling;LayeredSpec$DependenciesSpec;true;DependenciesSpec;(DependenciesIntoLayerSpec[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.gradle.tasks.bundling;LayeredSpec$IntoLayerSpec;true;IntoLayerSpec;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.gradle.tasks.bundling;LayeredSpec$IntoLayerSpec;true;exclude;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.gradle.tasks.bundling;LayeredSpec$IntoLayerSpec;true;include;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.gradle.tasks.bundling;LayeredSpec$IntoLayersSpec;true;intoLayer;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.gradle.tasks.bundling;LayeredSpec$IntoLayersSpec;true;intoLayer;(String,Action);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.gradle.tasks.bundling;LayeredSpec$IntoLayersSpec;true;intoLayer;(String,Closure);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.gradle.tasks.bundling;LayeredSpec;true;getApplication;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.gradle.tasks.bundling;LayeredSpec;true;getDependencies;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.gradle.tasks.bundling;LayeredSpec;true;getLayerOrder;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.gradle.tasks.bundling;LayeredSpec;true;setApplication;(ApplicationSpec);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.gradle.tasks.bundling;LayeredSpec;true;setDependencies;(DependenciesSpec);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.gradle.tasks.bundling;LayeredSpec;true;setLayerOrder;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.gradle.tasks.bundling;LayeredSpec;true;setLayerOrder;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.info;BuildProperties;true;BuildProperties;(Properties);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.info;GitProperties;true;GitProperties;(Properties);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.info;InfoProperties$Entry;false;getKey;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.info;InfoProperties$Entry;false;getValue;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.info;InfoProperties;true;InfoProperties;(Properties);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.info;JavaInfo$JavaRuntimeEnvironmentInfo;true;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.info;JavaInfo$JavaRuntimeEnvironmentInfo;true;getVersion;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.info;JavaInfo$JavaVirtualMachineInfo;true;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.info;JavaInfo$JavaVirtualMachineInfo;true;getVendor;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.info;JavaInfo$JavaVirtualMachineInfo;true;getVersion;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.info;JavaInfo;true;getJvm;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.info;JavaInfo;true;getRuntime;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.info;JavaInfo;true;getVendor;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.info;JavaInfo;true;getVersion;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.jdbc.init;DataSourceScriptDatabaseInitializer;true;DataSourceScriptDatabaseInitializer;(DataSource,DatabaseInitializationSettings);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.jdbc.init;DataSourceScriptDatabaseInitializer;true;DataSourceScriptDatabaseInitializer;(DataSource,DatabaseInitializationSettings);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.jdbc.init;PlatformPlaceholderDatabaseDriverResolver;true;PlatformPlaceholderDatabaseDriverResolver;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.jdbc.init;PlatformPlaceholderDatabaseDriverResolver;true;resolveAll;(DataSource,String[]);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.jdbc.init;PlatformPlaceholderDatabaseDriverResolver;true;resolveAll;(DataSource,String[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.boot.jdbc.init;PlatformPlaceholderDatabaseDriverResolver;true;withDriverPlatform;(DatabaseDriver,String);;Argument[1];ReturnValue;taint",
        "org.springframework.boot.jdbc.metadata;CommonsDbcp2DataSourcePoolMetadata;true;CommonsDbcp2DataSourcePoolMetadata;(BasicDataSource);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.jdbc.metadata;CompositeDataSourcePoolMetadataProvider;true;CompositeDataSourcePoolMetadataProvider;(Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.jdbc.metadata;HikariDataSourcePoolMetadata;true;HikariDataSourcePoolMetadata;(HikariDataSource);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.jdbc.metadata;OracleUcpDataSourcePoolMetadata;true;OracleUcpDataSourcePoolMetadata;(PoolDataSource);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.jdbc.metadata;TomcatDataSourcePoolMetadata;true;TomcatDataSourcePoolMetadata;(DataSource);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.jdbc;DataSourceBuilder;false;create;(ClassLoader);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.jdbc;DataSourceBuilder;false;derivedFrom;(DataSource);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.jdbc;DataSourceBuilder;false;driverClassName;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.jdbc;DataSourceBuilder;false;driverClassName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.jdbc;DataSourceBuilder;false;driverClassName;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.jdbc;DataSourceBuilder;false;password;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.jdbc;DataSourceBuilder;false;password;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.jdbc;DataSourceBuilder;false;password;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.jdbc;DataSourceBuilder;false;type;(Class);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.jdbc;DataSourceBuilder;false;url;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.jdbc;DataSourceBuilder;false;url;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.jdbc;DataSourceBuilder;false;url;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.jdbc;DataSourceBuilder;false;username;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.jdbc;DataSourceBuilder;false;username;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.jdbc;DataSourceBuilder;false;username;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.jdbc;EmbeddedDatabaseConnection;false;getUrl;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.json;JacksonJsonParser;true;JacksonJsonParser;(ObjectMapper);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.jta.atomikos;AtomikosProperties$Recovery;true;getDelay;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.jta.atomikos;AtomikosProperties$Recovery;true;getForgetOrphanedLogEntriesDelay;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.jta.atomikos;AtomikosProperties$Recovery;true;getRetryInterval;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.jta.atomikos;AtomikosProperties$Recovery;true;setDelay;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.jta.atomikos;AtomikosProperties$Recovery;true;setForgetOrphanedLogEntriesDelay;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.jta.atomikos;AtomikosProperties$Recovery;true;setRetryInterval;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.jta.atomikos;AtomikosProperties;true;getDefaultJtaTimeout;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.jta.atomikos;AtomikosProperties;true;getLogBaseDir;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.jta.atomikos;AtomikosProperties;true;getLogBaseName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.jta.atomikos;AtomikosProperties;true;getMaxTimeout;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.jta.atomikos;AtomikosProperties;true;getRecovery;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.jta.atomikos;AtomikosProperties;true;getService;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.jta.atomikos;AtomikosProperties;true;getTransactionManagerUniqueName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.jta.atomikos;AtomikosProperties;true;setDefaultJtaTimeout;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.jta.atomikos;AtomikosProperties;true;setLogBaseDir;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.jta.atomikos;AtomikosProperties;true;setLogBaseName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.jta.atomikos;AtomikosProperties;true;setMaxTimeout;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.jta.atomikos;AtomikosProperties;true;setService;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.jta.atomikos;AtomikosProperties;true;setTransactionManagerUniqueName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.loader.archive;Archive$Entry;true;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.loader.archive;Archive;true;getManifest;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.loader.archive;Archive;true;getNestedArchives;(EntryFilter,EntryFilter);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.loader.archive;Archive;true;getNestedArchives;(EntryFilter,EntryFilter);;Argument[1];ReturnValue;taint",
        "org.springframework.boot.loader.archive;Archive;true;getUrl;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.loader.archive;ExplodedArchive;true;ExplodedArchive;(File);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.loader.archive;ExplodedArchive;true;ExplodedArchive;(File,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.loader.archive;JarFileArchive;true;JarFileArchive;(File);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.loader.archive;JarFileArchive;true;JarFileArchive;(File,URL);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.loader.archive;JarFileArchive;true;JarFileArchive;(File,URL);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.loader.archive;JarFileArchive;true;JarFileArchive;(JarFile);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.loader.data;RandomAccessDataFile;true;RandomAccessDataFile;(File);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.loader.data;RandomAccessDataFile;true;getFile;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.loader.jar;AbstractJarFile;true;getUrl;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.loader.jar;Handler;true;Handler;(JarFile);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.loader.jar;JarFile;true;JarFile;(File);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.loader.jar;JarFile;true;containsEntry;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.loader.jar;JarFile;true;getJarEntry;(CharSequence);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.loader.jar;JarFile;true;getJarEntry;(CharSequence);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.loader.jar;JarFile;true;getJarEntry;(CharSequence);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.loader.jar;JarFile;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.loader.tools.layer;ApplicationContentFilter;true;ApplicationContentFilter;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.loader.tools.layer;CustomLayers;true;CustomLayers;(List,List,List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.loader.tools.layer;CustomLayers;true;CustomLayers;(List,List,List);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.loader.tools.layer;CustomLayers;true;CustomLayers;(List,List,List);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.loader.tools.layer;IncludeExcludeContentSelector;true;IncludeExcludeContentSelector;(Layer,List,List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.loader.tools.layer;IncludeExcludeContentSelector;true;IncludeExcludeContentSelector;(Layer,List,List,Function);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.loader.tools;BuildPropertiesWriter$ProjectDetails;false;ProjectDetails;(String,String,String,String,Instant,Map);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.loader.tools;BuildPropertiesWriter$ProjectDetails;false;ProjectDetails;(String,String,String,String,Instant,Map);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.loader.tools;BuildPropertiesWriter$ProjectDetails;false;ProjectDetails;(String,String,String,String,Instant,Map);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.loader.tools;BuildPropertiesWriter$ProjectDetails;false;ProjectDetails;(String,String,String,String,Instant,Map);;Argument[3];Argument[-1];taint",
        "org.springframework.boot.loader.tools;BuildPropertiesWriter$ProjectDetails;false;ProjectDetails;(String,String,String,String,Instant,Map);;Argument[4];Argument[-1];taint",
        "org.springframework.boot.loader.tools;BuildPropertiesWriter$ProjectDetails;false;ProjectDetails;(String,String,String,String,Instant,Map);;Argument[5];Argument[-1];taint",
        "org.springframework.boot.loader.tools;BuildPropertiesWriter$ProjectDetails;false;getAdditionalProperties;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.loader.tools;BuildPropertiesWriter$ProjectDetails;false;getArtifact;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.loader.tools;BuildPropertiesWriter$ProjectDetails;false;getGroup;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.loader.tools;BuildPropertiesWriter$ProjectDetails;false;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.loader.tools;BuildPropertiesWriter$ProjectDetails;false;getTime;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.loader.tools;BuildPropertiesWriter$ProjectDetails;false;getVersion;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.loader.tools;BuildPropertiesWriter;false;BuildPropertiesWriter;(File);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.loader.tools;EntryWriter;true;write;(OutputStream);;Argument[-1];Argument[0];taint",
        "org.springframework.boot.loader.tools;ImagePackager;true;ImagePackager;(File,File);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.loader.tools;JarModeLibrary;true;JarModeLibrary;(LibraryCoordinates);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.loader.tools;JarWriter;true;JarWriter;(File,LaunchScript,FileTime);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.loader.tools;LaunchScript;true;toByteArray;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.loader.tools;Layer;true;Layer;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.loader.tools;Layer;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.loader.tools;Layers;true;getLayer;(Library);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.loader.tools;Layers;true;getLayer;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.loader.tools;Layers;true;stream;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.loader.tools;LayersIndex;true;LayersIndex;(Iterable);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.loader.tools;LayersIndex;true;LayersIndex;(Layer[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.loader.tools;Library;true;Library;(File,LibraryScope);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.loader.tools;Library;true;Library;(File,LibraryScope);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.loader.tools;Library;true;Library;(String,File,LibraryScope,LibraryCoordinates,boolean,boolean,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.loader.tools;Library;true;Library;(String,File,LibraryScope,LibraryCoordinates,boolean,boolean,boolean);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.loader.tools;Library;true;Library;(String,File,LibraryScope,LibraryCoordinates,boolean,boolean,boolean);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.loader.tools;Library;true;Library;(String,File,LibraryScope,LibraryCoordinates,boolean,boolean,boolean);;Argument[3];Argument[-1];taint",
        "org.springframework.boot.loader.tools;Library;true;getCoordinates;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.loader.tools;Library;true;getFile;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.loader.tools;Library;true;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.loader.tools;Library;true;getScope;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.loader.tools;LibraryCoordinates;true;getArtifactId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.loader.tools;LibraryCoordinates;true;getGroupId;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.loader.tools;LibraryCoordinates;true;getVersion;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.loader.tools;LibraryCoordinates;true;of;(String,String,String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.loader.tools;LibraryCoordinates;true;of;(String,String,String);;Argument[1];ReturnValue;taint",
        "org.springframework.boot.loader.tools;LibraryCoordinates;true;of;(String,String,String);;Argument[2];ReturnValue;taint",
        "org.springframework.boot.loader.tools;LoaderClassesWriter;true;writeEntry;(String,InputStream);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.loader.tools;Packager;true;addMainClassTimeoutWarningListener;(MainClassTimeoutWarningListener);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.loader.tools;Packager;true;getBackupFile;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.loader.tools;Packager;true;setLayers;(Layers);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.loader.tools;Packager;true;setLayout;(Layout);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.loader.tools;Packager;true;setLayoutFactory;(LayoutFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.loader.tools;Packager;true;setMainClass;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.loader.tools;Repackager;true;Repackager;(File,LayoutFactory);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.loader.tools;RunProcess;true;RunProcess;(File,String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.loader.tools;RunProcess;true;RunProcess;(File,String[]);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.loader.tools;RunProcess;true;RunProcess;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.loader.tools;RunProcess;true;getRunningProcess;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.loader.util;SystemPropertyUtils;true;getProperty;(String,String);;Argument[1];ReturnValue;taint",
        "org.springframework.boot.loader.util;SystemPropertyUtils;true;getProperty;(String,String,String);;Argument[1];ReturnValue;taint",
        "org.springframework.boot.loader.util;SystemPropertyUtils;true;resolvePlaceholders;(Properties,String);;Argument[1];ReturnValue;taint",
        "org.springframework.boot.loader.util;SystemPropertyUtils;true;resolvePlaceholders;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.loader;LaunchedURLClassLoader;true;LaunchedURLClassLoader;(boolean,Archive,URL[],ClassLoader);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.loader;MainMethodRunner;true;MainMethodRunner;(String,String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.loader;MainMethodRunner;true;MainMethodRunner;(String,String[]);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.loader;PropertiesLauncher;true;toCamelCase;(CharSequence);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.logging.java;JavaLoggingSystem;true;JavaLoggingSystem;(ClassLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.logging.log4j2;Log4J2LoggingSystem;true;Log4J2LoggingSystem;(ClassLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.logging.logback;LogbackLoggingSystem;true;LogbackLoggingSystem;(ClassLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.logging.logback;LogbackLoggingSystemProperties;true;LogbackLoggingSystemProperties;(Environment);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.logging.logback;LogbackLoggingSystemProperties;true;LogbackLoggingSystemProperties;(Environment,BiConsumer);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.logging.logback;LogbackLoggingSystemProperties;true;LogbackLoggingSystemProperties;(Environment,BiConsumer);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.logging;AbstractLoggingSystem;true;AbstractLoggingSystem;(ClassLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.logging;DeferredLog;true;replay;(Log,Log);;Argument[1];ReturnValue;taint",
        "org.springframework.boot.logging;DeferredLog;true;switchTo;(Log);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.logging;DeferredLogFactory;true;getLog;(Supplier);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.logging;DeferredLogFactory;true;getLog;(Supplier);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.logging;LogFile;true;applyTo;(Properties);;Argument[-1];Element of Argument[0];taint",
        "org.springframework.boot.logging;LogFile;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.logging;LoggerConfiguration;false;LoggerConfiguration;(String,LogLevel,LogLevel);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.logging;LoggerConfiguration;false;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.logging;LoggerConfiguration;false;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.logging;LoggerGroup;false;getMembers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.logging;LoggerGroup;false;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.logging;LoggerGroups;false;get;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.logging;LoggingInitializationContext;true;LoggingInitializationContext;(ConfigurableEnvironment);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.logging;LoggingInitializationContext;true;getEnvironment;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.logging;LoggingSystem;true;get;(ClassLoader);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.logging;LoggingSystem;true;getLoggerConfiguration;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.logging;LoggingSystem;true;getSystemProperties;(ConfigurableEnvironment);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.logging;LoggingSystemFactory;true;getLoggingSystem;(ClassLoader);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.logging;LoggingSystemProperties;true;LoggingSystemProperties;(Environment);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.logging;LoggingSystemProperties;true;LoggingSystemProperties;(Environment,BiConsumer);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.logging;LoggingSystemProperties;true;LoggingSystemProperties;(Environment,BiConsumer);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.logging;Slf4JLoggingSystem;true;Slf4JLoggingSystem;(ClassLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.maven;ArtifactsLibraries;true;ArtifactsLibraries;(Set,Collection,Collection,Log);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.maven;ArtifactsLibraries;true;ArtifactsLibraries;(Set,Collection,Collection,Log);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.maven;ArtifactsLibraries;true;ArtifactsLibraries;(Set,Collection,Collection,Log);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.maven;ArtifactsLibraries;true;ArtifactsLibraries;(Set,Collection,Collection,Log);;Argument[3];Argument[-1];taint",
        "org.springframework.boot.maven;ArtifactsLibraries;true;ArtifactsLibraries;(Set,Set,Collection,Collection,Log);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.maven;ArtifactsLibraries;true;ArtifactsLibraries;(Set,Set,Collection,Collection,Log);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.maven;ArtifactsLibraries;true;ArtifactsLibraries;(Set,Set,Collection,Collection,Log);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.maven;ArtifactsLibraries;true;ArtifactsLibraries;(Set,Set,Collection,Collection,Log);;Argument[3];Argument[-1];taint",
        "org.springframework.boot.maven;ArtifactsLibraries;true;ArtifactsLibraries;(Set,Set,Collection,Collection,Log);;Argument[4];Argument[-1];taint",
        "org.springframework.boot.maven;CacheInfo$VolumeCacheInfo;true;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.maven;DependencyFilter;true;DependencyFilter;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.maven;Docker$DockerRegistry;true;DockerRegistry;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.maven;Docker$DockerRegistry;true;DockerRegistry;(String,String,String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.maven;Docker$DockerRegistry;true;DockerRegistry;(String,String,String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.maven;Docker$DockerRegistry;true;DockerRegistry;(String,String,String,String);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.maven;Docker$DockerRegistry;true;DockerRegistry;(String,String,String,String);;Argument[3];Argument[-1];taint",
        "org.springframework.boot.maven;Docker$DockerRegistry;true;getEmail;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.maven;Docker$DockerRegistry;true;getPassword;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.maven;Docker$DockerRegistry;true;getToken;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.maven;Docker$DockerRegistry;true;getUsername;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.maven;Docker;true;getCertPath;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.maven;Docker;true;getHost;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.maven;ExcludeFilter;true;ExcludeFilter;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.maven;Image;true;getBuilder;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.maven;Image;true;getEnv;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.maven;Image;true;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.maven;Image;true;getNetwork;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.maven;Image;true;getRunImage;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.maven;Image;true;setNetwork;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.maven;IncludeFilter;true;IncludeFilter;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.maven;Layers;true;getConfiguration;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.maven;Layers;true;setConfiguration;(File);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.maven;PropertiesMergingResourceTransformer;true;getData;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.maven;PropertiesMergingResourceTransformer;true;getResource;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.maven;PropertiesMergingResourceTransformer;true;setResource;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.origin;Origin;true;from;(Object);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.origin;Origin;true;getParent;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.origin;OriginProvider;true;getOrigin;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.origin;OriginTrackedResource;true;getResource;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.origin;OriginTrackedResource;true;of;(Resource,Origin);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.origin;OriginTrackedResource;true;of;(Resource,Origin);;Argument[1];ReturnValue;taint",
        "org.springframework.boot.origin;OriginTrackedResource;true;of;(WritableResource,Origin);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.origin;OriginTrackedResource;true;of;(WritableResource,Origin);;Argument[1];ReturnValue;taint",
        "org.springframework.boot.origin;OriginTrackedValue;true;getValue;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.origin;OriginTrackedValue;true;of;(Object);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.origin;OriginTrackedValue;true;of;(Object,Origin);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.origin;OriginTrackedValue;true;of;(Object,Origin);;Argument[1];ReturnValue;taint",
        "org.springframework.boot.origin;OriginTrackedValue;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.origin;PropertySourceOrigin;true;PropertySourceOrigin;(PropertySource,String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.origin;PropertySourceOrigin;true;PropertySourceOrigin;(PropertySource,String);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.origin;PropertySourceOrigin;true;get;(PropertySource,String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.origin;PropertySourceOrigin;true;get;(PropertySource,String);;Argument[1];ReturnValue;taint",
        "org.springframework.boot.origin;PropertySourceOrigin;true;getPropertyName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.origin;PropertySourceOrigin;true;getPropertySource;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.origin;PropertySourceOrigin;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.origin;SystemEnvironmentOrigin;true;SystemEnvironmentOrigin;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.origin;SystemEnvironmentOrigin;true;getProperty;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.origin;SystemEnvironmentOrigin;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.origin;TextResourceOrigin;true;TextResourceOrigin;(Resource,Location);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.origin;TextResourceOrigin;true;TextResourceOrigin;(Resource,Location);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.origin;TextResourceOrigin;true;getLocation;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.origin;TextResourceOrigin;true;getResource;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.origin;TextResourceOrigin;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.orm.jpa.hibernate;SpringJtaPlatform;true;SpringJtaPlatform;(JtaTransactionManager);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.orm.jpa;EntityManagerFactoryBuilder$Builder;false;jta;(boolean);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.orm.jpa;EntityManagerFactoryBuilder$Builder;false;mappingResources;(String[]);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.orm.jpa;EntityManagerFactoryBuilder$Builder;false;mappingResources;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.orm.jpa;EntityManagerFactoryBuilder$Builder;false;mappingResources;(String[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.boot.orm.jpa;EntityManagerFactoryBuilder$Builder;false;packages;(Class[]);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.orm.jpa;EntityManagerFactoryBuilder$Builder;false;packages;(String[]);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.orm.jpa;EntityManagerFactoryBuilder$Builder;false;packages;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.orm.jpa;EntityManagerFactoryBuilder$Builder;false;packages;(String[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.boot.orm.jpa;EntityManagerFactoryBuilder$Builder;false;persistenceUnit;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.orm.jpa;EntityManagerFactoryBuilder$Builder;false;persistenceUnit;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.orm.jpa;EntityManagerFactoryBuilder$Builder;false;persistenceUnit;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.orm.jpa;EntityManagerFactoryBuilder$Builder;false;properties;(Map);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.orm.jpa;EntityManagerFactoryBuilder$Builder;false;properties;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.orm.jpa;EntityManagerFactoryBuilder$Builder;false;properties;(Map);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.boot.orm.jpa;EntityManagerFactoryBuilder;true;EntityManagerFactoryBuilder;(JpaVendorAdapter,Map,PersistenceUnitManager);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.orm.jpa;EntityManagerFactoryBuilder;true;EntityManagerFactoryBuilder;(JpaVendorAdapter,Map,PersistenceUnitManager);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.orm.jpa;EntityManagerFactoryBuilder;true;EntityManagerFactoryBuilder;(JpaVendorAdapter,Map,PersistenceUnitManager);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.orm.jpa;EntityManagerFactoryBuilder;true;EntityManagerFactoryBuilder;(JpaVendorAdapter,Map,PersistenceUnitManager,URL);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.orm.jpa;EntityManagerFactoryBuilder;true;EntityManagerFactoryBuilder;(JpaVendorAdapter,Map,PersistenceUnitManager,URL);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.orm.jpa;EntityManagerFactoryBuilder;true;EntityManagerFactoryBuilder;(JpaVendorAdapter,Map,PersistenceUnitManager,URL);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.orm.jpa;EntityManagerFactoryBuilder;true;EntityManagerFactoryBuilder;(JpaVendorAdapter,Map,PersistenceUnitManager,URL);;Argument[3];Argument[-1];taint",
        "org.springframework.boot.orm.jpa;EntityManagerFactoryBuilder;true;dataSource;(DataSource);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.orm.jpa;EntityManagerFactoryBuilder;true;setBootstrapExecutor;(AsyncTaskExecutor);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.orm.jpa;EntityManagerFactoryBuilder;true;setPersistenceUnitPostProcessors;(PersistenceUnitPostProcessor[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.r2dbc.init;R2dbcScriptDatabaseInitializer;true;R2dbcScriptDatabaseInitializer;(ConnectionFactory,DatabaseInitializationSettings);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.r2dbc.init;R2dbcScriptDatabaseInitializer;true;R2dbcScriptDatabaseInitializer;(ConnectionFactory,DatabaseInitializationSettings);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.r2dbc;ConnectionFactoryBuilder;false;configure;(Consumer);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.r2dbc;ConnectionFactoryBuilder;false;database;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.r2dbc;ConnectionFactoryBuilder;false;hostname;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.r2dbc;ConnectionFactoryBuilder;false;password;(CharSequence);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.r2dbc;ConnectionFactoryBuilder;false;port;(int);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.r2dbc;ConnectionFactoryBuilder;false;username;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.r2dbc;ConnectionFactoryBuilder;false;withOptions;(Builder);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.r2dbc;EmbeddedDatabaseConnection;false;getUrl;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.r2dbc;OptionsCapableConnectionFactory;true;OptionsCapableConnectionFactory;(ConnectionFactoryOptions,ConnectionFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.r2dbc;OptionsCapableConnectionFactory;true;OptionsCapableConnectionFactory;(ConnectionFactoryOptions,ConnectionFactory);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.r2dbc;OptionsCapableConnectionFactory;true;getOptions;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.r2dbc;OptionsCapableConnectionFactory;true;unwrapFrom;(ConnectionFactory);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.rsocket.netty;NettyRSocketServer;true;NettyRSocketServer;(Mono,Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.rsocket.netty;NettyRSocketServer;true;NettyRSocketServer;(Mono,Duration);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.rsocket.netty;NettyRSocketServerFactory;true;addRSocketServerCustomizers;(RSocketServerCustomizer[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.rsocket.netty;NettyRSocketServerFactory;true;setLifecycleTimeout;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.rsocket.netty;NettyRSocketServerFactory;true;setRSocketServerCustomizers;(Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.rsocket.netty;NettyRSocketServerFactory;true;setResourceFactory;(ReactorResourceFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.rsocket.server;ConfigurableRSocketServerFactory;true;setAddress;(InetAddress);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.rsocket.server;ConfigurableRSocketServerFactory;true;setFragmentSize;(DataSize);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.rsocket.server;ConfigurableRSocketServerFactory;true;setSsl;(Ssl);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.rsocket.server;ConfigurableRSocketServerFactory;true;setSslStoreProvider;(SslStoreProvider);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.sql.init;DatabaseInitializationSettings;true;getDataLocations;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.sql.init;DatabaseInitializationSettings;true;getSchemaLocations;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.sql.init;DatabaseInitializationSettings;true;getSeparator;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.sql.init;DatabaseInitializationSettings;true;setDataLocations;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.sql.init;DatabaseInitializationSettings;true;setSchemaLocations;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.sql.init;DatabaseInitializationSettings;true;setSeparator;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.system;ApplicationHome;true;getDir;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.system;ApplicationHome;true;getSource;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.system;ApplicationPid;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.system;ApplicationTemp;true;getDir;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.task;TaskExecutorBuilder;true;awaitTerminationPeriod;(Duration);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.task;TaskExecutorBuilder;true;configure;(ThreadPoolTaskExecutor);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.task;TaskExecutorBuilder;true;keepAlive;(Duration);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.task;TaskExecutorBuilder;true;taskDecorator;(TaskDecorator);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.task;TaskExecutorBuilder;true;threadNamePrefix;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.task;TaskSchedulerBuilder;true;TaskSchedulerBuilder;(Integer,Boolean,Duration,String,Set);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.task;TaskSchedulerBuilder;true;TaskSchedulerBuilder;(Integer,Boolean,Duration,String,Set);;Argument[3];Argument[-1];taint",
        "org.springframework.boot.task;TaskSchedulerBuilder;true;TaskSchedulerBuilder;(Integer,Boolean,Duration,String,Set);;Argument[4];Argument[-1];taint",
        "org.springframework.boot.task;TaskSchedulerBuilder;true;awaitTerminationPeriod;(Duration);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.task;TaskSchedulerBuilder;true;configure;(ThreadPoolTaskScheduler);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.task;TaskSchedulerBuilder;true;threadNamePrefix;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.test.autoconfigure.filter;FilterAnnotations;true;FilterAnnotations;(ClassLoader,Filter[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.test.autoconfigure.orm.jpa;TestEntityManager;true;TestEntityManager;(EntityManagerFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.test.autoconfigure.orm.jpa;TestEntityManager;true;persist;(Object);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.test.autoconfigure.orm.jpa;TestEntityManager;true;persistAndFlush;(Object);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.test.autoconfigure.orm.jpa;TestEntityManager;true;refresh;(Object);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.test.autoconfigure.orm.jpa;TestEntityManagerAutoConfiguration;true;testEntityManager;(EntityManagerFactory);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.test.autoconfigure.restdocs;RestDocsProperties;true;getUriHost;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.test.autoconfigure.restdocs;RestDocsProperties;true;getUriScheme;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.test.autoconfigure.restdocs;RestDocsProperties;true;setUriHost;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.test.autoconfigure.restdocs;RestDocsProperties;true;setUriScheme;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.test.autoconfigure.web.reactive;SpringBootWebTestClientBuilderCustomizer;true;SpringBootWebTestClientBuilderCustomizer;(Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.test.autoconfigure.web.reactive;SpringBootWebTestClientBuilderCustomizer;true;setTimeout;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.test.autoconfigure.web.servlet;SpringBootMockMvcBuilderCustomizer;true;SpringBootMockMvcBuilderCustomizer;(WebApplicationContext);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.test.autoconfigure.webservices.client;MockWebServiceServerAutoConfiguration;true;mockWebServiceServerWebServiceTemplateCustomizer;(TestMockWebServiceServer);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.test.context.assertj;ApplicationContextAssert;true;doesNotHaveBean;(Class);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.test.context.assertj;ApplicationContextAssert;true;doesNotHaveBean;(Class,Scope);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.test.context.assertj;ApplicationContextAssert;true;doesNotHaveBean;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.test.context.assertj;ApplicationContextAssert;true;hasBean;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.test.context.assertj;ApplicationContextAssert;true;hasFailed;();;Argument[-1];ReturnValue;value",
        "org.springframework.boot.test.context.assertj;ApplicationContextAssert;true;hasNotFailed;();;Argument[-1];ReturnValue;value",
        "org.springframework.boot.test.context.assertj;ApplicationContextAssert;true;hasSingleBean;(Class);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.test.context.assertj;ApplicationContextAssert;true;hasSingleBean;(Class,Scope);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.test.context.runner;AbstractApplicationContextRunner;true;run;(ContextConsumer);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.test.context.runner;AbstractApplicationContextRunner;true;withClassLoader;(ClassLoader);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.test.context.runner;AbstractApplicationContextRunner;true;withConfiguration;(Configurations);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.test.context.runner;AbstractApplicationContextRunner;true;withInitializer;(ApplicationContextInitializer);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.test.context.runner;AbstractApplicationContextRunner;true;withParent;(ApplicationContext);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.test.context.runner;AbstractApplicationContextRunner;true;withUserConfiguration;(Class[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.boot.test.context.runner;ApplicationContextRunner;true;ApplicationContextRunner;(Supplier);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.test.context.runner;ReactiveWebApplicationContextRunner;false;ReactiveWebApplicationContextRunner;(Supplier);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.test.context.runner;WebApplicationContextRunner;false;WebApplicationContextRunner;(Supplier);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.test.context;DefaultTestExecutionListenersPostProcessor;true;postProcessDefaultTestExecutionListeners;(Set);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.boot.test.context;FilteredClassLoader$ClassFilter;false;of;(Class[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.boot.test.context;FilteredClassLoader$ClassPathResourceFilter;false;of;(ClassPathResource[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.boot.test.context;FilteredClassLoader$PackageFilter;false;of;(String[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.boot.test.context;FilteredClassLoader;true;FilteredClassLoader;(ClassPathResource[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.test.context;FilteredClassLoader;true;FilteredClassLoader;(Class[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.test.context;FilteredClassLoader;true;FilteredClassLoader;(Predicate[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.test.context;FilteredClassLoader;true;FilteredClassLoader;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.test.json;AbstractJsonMarshalTester;true;AbstractJsonMarshalTester;(Class,ResolvableType);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.test.json;AbstractJsonMarshalTester;true;parse;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.test.json;AbstractJsonMarshalTester;true;parseObject;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.test.json;AbstractJsonMarshalTester;true;read;(Reader);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.test.json;AbstractJsonMarshalTester;true;readObject;(Reader);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.test.json;AbstractJsonMarshalTester;true;write;(Object);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.test.json;BasicJsonTester;true;from;(CharSequence);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.test.json;BasicJsonTester;true;from;(InputStream);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.test.json;BasicJsonTester;true;from;(byte[]);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.test.json;GsonTester;true;GsonTester;(Class,ResolvableType,Gson);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.test.json;GsonTester;true;GsonTester;(Class,ResolvableType,Gson);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.test.json;JacksonTester;true;JacksonTester;(Class,ResolvableType,ObjectMapper);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.test.json;JacksonTester;true;JacksonTester;(Class,ResolvableType,ObjectMapper);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.test.json;JacksonTester;true;JacksonTester;(Class,ResolvableType,ObjectMapper,Class);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.test.json;JacksonTester;true;JacksonTester;(Class,ResolvableType,ObjectMapper,Class);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.test.json;JsonContent;false;JsonContent;(Class,ResolvableType,String);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.test.json;JsonContent;false;JsonContent;(Class,ResolvableType,String);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.test.json;JsonContent;false;getJson;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.test.json;JsonContent;false;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.test.json;JsonContentAssert;true;doesNotHaveEmptyJsonPathValue;(CharSequence,Object[]);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.test.json;JsonContentAssert;true;doesNotHaveJsonPath;(CharSequence,Object[]);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.test.json;JsonContentAssert;true;doesNotHaveJsonPathValue;(CharSequence,Object[]);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.test.json;JsonContentAssert;true;hasEmptyJsonPathValue;(CharSequence,Object[]);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.test.json;JsonContentAssert;true;hasJsonPath;(CharSequence,Object[]);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.test.json;JsonContentAssert;true;hasJsonPathArrayValue;(CharSequence,Object[]);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.test.json;JsonContentAssert;true;hasJsonPathBooleanValue;(CharSequence,Object[]);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.test.json;JsonContentAssert;true;hasJsonPathMapValue;(CharSequence,Object[]);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.test.json;JsonContentAssert;true;hasJsonPathNumberValue;(CharSequence,Object[]);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.test.json;JsonContentAssert;true;hasJsonPathStringValue;(CharSequence,Object[]);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.test.json;JsonContentAssert;true;hasJsonPathValue;(CharSequence,Object[]);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.test.json;JsonContentAssert;true;isEqualToJson;(CharSequence);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.test.json;JsonContentAssert;true;isEqualToJson;(CharSequence,JSONComparator);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.test.json;JsonContentAssert;true;isEqualToJson;(CharSequence,JSONCompareMode);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.test.json;JsonContentAssert;true;isEqualToJson;(File);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.test.json;JsonContentAssert;true;isEqualToJson;(File,JSONComparator);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.test.json;JsonContentAssert;true;isEqualToJson;(File,JSONCompareMode);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.test.json;JsonContentAssert;true;isEqualToJson;(InputStream);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.test.json;JsonContentAssert;true;isEqualToJson;(InputStream,JSONComparator);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.test.json;JsonContentAssert;true;isEqualToJson;(InputStream,JSONCompareMode);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.test.json;JsonContentAssert;true;isEqualToJson;(Resource);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.test.json;JsonContentAssert;true;isEqualToJson;(Resource,JSONComparator);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.test.json;JsonContentAssert;true;isEqualToJson;(Resource,JSONCompareMode);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.test.json;JsonContentAssert;true;isEqualToJson;(String,Class);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.test.json;JsonContentAssert;true;isEqualToJson;(String,Class,JSONComparator);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.test.json;JsonContentAssert;true;isEqualToJson;(String,Class,JSONCompareMode);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.test.json;JsonContentAssert;true;isEqualToJson;(byte[]);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.test.json;JsonContentAssert;true;isEqualToJson;(byte[],JSONComparator);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.test.json;JsonContentAssert;true;isEqualToJson;(byte[],JSONCompareMode);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.test.json;JsonContentAssert;true;isNotEqualToJson;(CharSequence);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.test.json;JsonContentAssert;true;isNotEqualToJson;(CharSequence,JSONComparator);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.test.json;JsonContentAssert;true;isNotEqualToJson;(CharSequence,JSONCompareMode);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.test.json;JsonContentAssert;true;isNotEqualToJson;(File);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.test.json;JsonContentAssert;true;isNotEqualToJson;(File,JSONComparator);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.test.json;JsonContentAssert;true;isNotEqualToJson;(File,JSONCompareMode);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.test.json;JsonContentAssert;true;isNotEqualToJson;(InputStream);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.test.json;JsonContentAssert;true;isNotEqualToJson;(InputStream,JSONComparator);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.test.json;JsonContentAssert;true;isNotEqualToJson;(InputStream,JSONCompareMode);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.test.json;JsonContentAssert;true;isNotEqualToJson;(Resource);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.test.json;JsonContentAssert;true;isNotEqualToJson;(Resource,JSONComparator);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.test.json;JsonContentAssert;true;isNotEqualToJson;(Resource,JSONCompareMode);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.test.json;JsonContentAssert;true;isNotEqualToJson;(String,Class);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.test.json;JsonContentAssert;true;isNotEqualToJson;(String,Class,JSONComparator);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.test.json;JsonContentAssert;true;isNotEqualToJson;(String,Class,JSONCompareMode);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.test.json;JsonContentAssert;true;isNotEqualToJson;(byte[]);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.test.json;JsonContentAssert;true;isNotEqualToJson;(byte[],JSONComparator);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.test.json;JsonContentAssert;true;isNotEqualToJson;(byte[],JSONCompareMode);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.test.json;JsonContentAssert;true;isNotStrictlyEqualToJson;(CharSequence);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.test.json;JsonContentAssert;true;isNotStrictlyEqualToJson;(File);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.test.json;JsonContentAssert;true;isNotStrictlyEqualToJson;(InputStream);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.test.json;JsonContentAssert;true;isNotStrictlyEqualToJson;(Resource);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.test.json;JsonContentAssert;true;isNotStrictlyEqualToJson;(String,Class);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.test.json;JsonContentAssert;true;isNotStrictlyEqualToJson;(byte[]);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.test.json;JsonContentAssert;true;isStrictlyEqualToJson;(CharSequence);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.test.json;JsonContentAssert;true;isStrictlyEqualToJson;(File);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.test.json;JsonContentAssert;true;isStrictlyEqualToJson;(InputStream);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.test.json;JsonContentAssert;true;isStrictlyEqualToJson;(Resource);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.test.json;JsonContentAssert;true;isStrictlyEqualToJson;(String,Class);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.test.json;JsonContentAssert;true;isStrictlyEqualToJson;(byte[]);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.test.json;JsonbTester;true;JsonbTester;(Class,ResolvableType,Jsonb);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.test.json;JsonbTester;true;JsonbTester;(Class,ResolvableType,Jsonb);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.test.json;ObjectContent;false;ObjectContent;(ResolvableType,Object);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.test.json;ObjectContent;false;ObjectContent;(ResolvableType,Object);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.test.json;ObjectContent;false;getObject;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.test.json;ObjectContent;false;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.test.mock.mockito;MockReset;false;apply;(MockReset,MockSettings);;Argument[1];ReturnValue;taint",
        "org.springframework.boot.test.mock.mockito;MockitoPostProcessor;true;MockitoPostProcessor;(Set);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.test.mock.web;SpringBootMockServletContext;true;SpringBootMockServletContext;(String,ResourceLoader);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.test.system;CapturedOutput;true;getAll;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.test.system;CapturedOutput;true;getErr;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.test.system;CapturedOutput;true;getOut;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.test.system;OutputCaptureRule;true;expect;(Matcher);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.test.system;OutputCaptureRule;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.test.util;TestPropertyValues$Pair;false;addTo;(Map);;Argument[-1];Element of Argument[0];taint",
        "org.springframework.boot.test.util;TestPropertyValues$Pair;false;fromMapEntry;(Entry);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.boot.test.util;TestPropertyValues$Pair;false;of;(String,String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.test.util;TestPropertyValues$Pair;false;of;(String,String);;Argument[1];ReturnValue;taint",
        "org.springframework.boot.test.util;TestPropertyValues$Pair;false;parse;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.test.util;TestPropertyValues;false;and;(Iterable);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.test.util;TestPropertyValues;false;and;(Map);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.test.util;TestPropertyValues;false;and;(Stream);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.test.util;TestPropertyValues;false;and;(Stream,Function);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.test.util;TestPropertyValues;false;and;(String[]);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.test.web.client;LocalHostUriTemplateHandler;true;LocalHostUriTemplateHandler;(Environment);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.test.web.client;LocalHostUriTemplateHandler;true;LocalHostUriTemplateHandler;(Environment,String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.test.web.client;LocalHostUriTemplateHandler;true;LocalHostUriTemplateHandler;(Environment,String);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.test.web.client;LocalHostUriTemplateHandler;true;LocalHostUriTemplateHandler;(Environment,String,UriTemplateHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.test.web.client;LocalHostUriTemplateHandler;true;LocalHostUriTemplateHandler;(Environment,String,UriTemplateHandler);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.test.web.client;LocalHostUriTemplateHandler;true;LocalHostUriTemplateHandler;(Environment,String,UriTemplateHandler);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.test.web.client;MockServerRestTemplateCustomizer;true;getExpectationManagers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.test.web.client;MockServerRestTemplateCustomizer;true;getServer;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.test.web.client;MockServerRestTemplateCustomizer;true;getServer;(RestTemplate);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.test.web.client;MockServerRestTemplateCustomizer;true;getServers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.test.web.client;RootUriRequestExpectationManager;true;RootUriRequestExpectationManager;(String,RequestExpectationManager);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.test.web.client;RootUriRequestExpectationManager;true;RootUriRequestExpectationManager;(String,RequestExpectationManager);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.test.web.client;RootUriRequestExpectationManager;true;forRestTemplate;(RestTemplate,RequestExpectationManager);;Argument[1];ReturnValue;taint",
        "org.springframework.boot.test.web.client;TestRestTemplate;true;TestRestTemplate;(HttpClientOption[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.test.web.client;TestRestTemplate;true;TestRestTemplate;(RestTemplateBuilder);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.test.web.client;TestRestTemplate;true;TestRestTemplate;(RestTemplateBuilder,String,String,HttpClientOption[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.test.web.client;TestRestTemplate;true;TestRestTemplate;(RestTemplateBuilder,String,String,HttpClientOption[]);;Argument[3];Argument[-1];taint",
        "org.springframework.boot.test.web.client;TestRestTemplate;true;TestRestTemplate;(String,String,HttpClientOption[]);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.test.web.client;TestRestTemplate;true;getRestTemplate;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.test.web.htmlunit.webdriver;LocalHostWebConnectionHtmlUnitDriver;true;LocalHostWebConnectionHtmlUnitDriver;(Environment);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.test.web.htmlunit.webdriver;LocalHostWebConnectionHtmlUnitDriver;true;LocalHostWebConnectionHtmlUnitDriver;(Environment,BrowserVersion);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.test.web.htmlunit.webdriver;LocalHostWebConnectionHtmlUnitDriver;true;LocalHostWebConnectionHtmlUnitDriver;(Environment,Capabilities);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.test.web.htmlunit.webdriver;LocalHostWebConnectionHtmlUnitDriver;true;LocalHostWebConnectionHtmlUnitDriver;(Environment,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.test.web.htmlunit;LocalHostWebClient;true;LocalHostWebClient;(Environment);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.testsupport.compiler;TestCompiler$TestCompilationTask;true;TestCompilationTask;(CompilationTask);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.testsupport.compiler;TestCompiler;true;TestCompiler;(File);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.testsupport.compiler;TestCompiler;true;TestCompiler;(JavaCompiler,File);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.testsupport.compiler;TestCompiler;true;TestCompiler;(JavaCompiler,File);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.testsupport.compiler;TestCompiler;true;getOutputLocation;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.testsupport.gradle.testkit;GradleBuild;true;bootVersion;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.testsupport.gradle.testkit;GradleBuild;true;bootVersion;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.testsupport.gradle.testkit;GradleBuild;true;bootVersion;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.testsupport.gradle.testkit;GradleBuild;true;configurationCache;();;Argument[-1];ReturnValue;value",
        "org.springframework.boot.testsupport.gradle.testkit;GradleBuild;true;expectDeprecationWarningsWithAtLeastVersion;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.testsupport.gradle.testkit;GradleBuild;true;getGradleVersion;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.testsupport.gradle.testkit;GradleBuild;true;getProjectDir;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.testsupport.gradle.testkit;GradleBuild;true;gradleVersion;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.testsupport.gradle.testkit;GradleBuild;true;gradleVersion;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.testsupport.gradle.testkit;GradleBuild;true;gradleVersion;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.testsupport.gradle.testkit;GradleBuild;true;script;(String);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.testsupport.gradle.testkit;GradleBuild;true;script;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.testsupport.gradle.testkit;GradleBuild;true;script;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.testsupport.gradle.testkit;GradleBuild;true;scriptProperty;(String,String);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.testsupport.gradle.testkit;GradleBuild;true;scriptProperty;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.testsupport.gradle.testkit;GradleBuild;true;scriptProperty;(String,String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.testsupport.gradle.testkit;GradleBuild;true;scriptProperty;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.testsupport.gradle.testkit;GradleBuild;true;scriptProperty;(String,String);;Argument[1];ReturnValue;taint",
        "org.springframework.boot.testsupport.gradle.testkit;GradleBuild;true;setProjectDir;(File);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.testsupport.gradle.testkit;GradleBuild;true;settings;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.testsupport.system;CapturedOutput;true;getAll;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.testsupport.system;CapturedOutput;true;getErr;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.testsupport.system;CapturedOutput;true;getOut;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.testsupport.web.servlet;MockServletWebServer$RegisteredFilter;true;RegisteredFilter;(Filter);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.testsupport.web.servlet;MockServletWebServer$RegisteredFilter;true;getFilter;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.testsupport.web.servlet;MockServletWebServer$RegisteredFilter;true;getRegistration;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.testsupport.web.servlet;MockServletWebServer$RegisteredServlet;true;RegisteredServlet;(Servlet);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.testsupport.web.servlet;MockServletWebServer$RegisteredServlet;true;getRegistration;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.testsupport.web.servlet;MockServletWebServer$RegisteredServlet;true;getServlet;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.testsupport.web.servlet;MockServletWebServer;true;MockServletWebServer;(Initializer[],int);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.testsupport.web.servlet;MockServletWebServer;true;getRegisteredFilters;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.testsupport.web.servlet;MockServletWebServer;true;getRegisteredFilters;(int);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.testsupport.web.servlet;MockServletWebServer;true;getRegisteredServlet;(int);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.testsupport.web.servlet;MockServletWebServer;true;getRegisteredServlets;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.testsupport.web.servlet;MockServletWebServer;true;getServletContext;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.util;LambdaSafe$InvocationResult;false;get;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.util;LambdaSafe$InvocationResult;false;get;(Object);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.util;LambdaSafe$InvocationResult;false;get;(Object);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.util;LambdaSafe$InvocationResult;false;of;(Object);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.util;LambdaSafe;false;callback;(Class,Object,Object,Object[]);;Argument[1];ReturnValue;taint",
        "org.springframework.boot.util;LambdaSafe;false;callback;(Class,Object,Object,Object[]);;Argument[2];ReturnValue;taint",
        "org.springframework.boot.util;LambdaSafe;false;callback;(Class,Object,Object,Object[]);;ArrayElement of Argument[3];ReturnValue;taint",
        "org.springframework.boot.util;LambdaSafe;false;callbacks;(Class,Collection,Object,Object[]);;Argument[2];ReturnValue;taint",
        "org.springframework.boot.util;LambdaSafe;false;callbacks;(Class,Collection,Object,Object[]);;ArrayElement of Argument[3];ReturnValue;taint",
        "org.springframework.boot.util;LambdaSafe;false;callbacks;(Class,Collection,Object,Object[]);;Element of Argument[1];ReturnValue;taint",
        "org.springframework.boot.validation.beanvalidation;FilteredMethodValidationPostProcessor;true;FilteredMethodValidationPostProcessor;(Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.validation;MessageInterpolatorFactory;true;MessageInterpolatorFactory;(MessageSource);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.client;RestTemplateBuilder;true;RestTemplateBuilder;(RestTemplateCustomizer[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.client;RestTemplateBuilder;true;additionalCustomizers;(Collection);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.boot.web.client;RestTemplateBuilder;true;additionalCustomizers;(RestTemplateCustomizer[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.boot.web.client;RestTemplateBuilder;true;additionalInterceptors;(ClientHttpRequestInterceptor[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.boot.web.client;RestTemplateBuilder;true;additionalInterceptors;(Collection);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.boot.web.client;RestTemplateBuilder;true;additionalMessageConverters;(Collection);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.boot.web.client;RestTemplateBuilder;true;additionalMessageConverters;(HttpMessageConverter[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.boot.web.client;RestTemplateBuilder;true;additionalRequestCustomizers;(Collection);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.boot.web.client;RestTemplateBuilder;true;additionalRequestCustomizers;(RestTemplateRequestCustomizer[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.boot.web.client;RestTemplateBuilder;true;basicAuthentication;(String,String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.web.client;RestTemplateBuilder;true;basicAuthentication;(String,String);;Argument[1];ReturnValue;taint",
        "org.springframework.boot.web.client;RestTemplateBuilder;true;basicAuthentication;(String,String,Charset);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.web.client;RestTemplateBuilder;true;basicAuthentication;(String,String,Charset);;Argument[1];ReturnValue;taint",
        "org.springframework.boot.web.client;RestTemplateBuilder;true;configure;(RestTemplate);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.web.client;RestTemplateBuilder;true;customizers;(Collection);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.boot.web.client;RestTemplateBuilder;true;customizers;(RestTemplateCustomizer[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.boot.web.client;RestTemplateBuilder;true;defaultHeader;(String,String[]);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.web.client;RestTemplateBuilder;true;defaultHeader;(String,String[]);;ArrayElement of Argument[1];ReturnValue;taint",
        "org.springframework.boot.web.client;RestTemplateBuilder;true;errorHandler;(ResponseErrorHandler);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.web.client;RestTemplateBuilder;true;interceptors;(ClientHttpRequestInterceptor[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.boot.web.client;RestTemplateBuilder;true;interceptors;(Collection);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.boot.web.client;RestTemplateBuilder;true;messageConverters;(Collection);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.boot.web.client;RestTemplateBuilder;true;messageConverters;(HttpMessageConverter[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.boot.web.client;RestTemplateBuilder;true;requestCustomizers;(Collection);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.boot.web.client;RestTemplateBuilder;true;requestCustomizers;(RestTemplateRequestCustomizer[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.boot.web.client;RestTemplateBuilder;true;requestFactory;(Supplier);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.web.client;RestTemplateBuilder;true;rootUri;(String);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.web.client;RestTemplateBuilder;true;setConnectTimeout;(Duration);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.web.client;RestTemplateBuilder;true;setReadTimeout;(Duration);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.web.client;RestTemplateBuilder;true;uriTemplateHandler;(UriTemplateHandler);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.web.client;RestTemplateCustomizer;true;customize;(RestTemplate);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.client;RootUriTemplateHandler;true;RootUriTemplateHandler;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.client;RootUriTemplateHandler;true;RootUriTemplateHandler;(String,UriTemplateHandler);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.client;RootUriTemplateHandler;true;RootUriTemplateHandler;(String,UriTemplateHandler);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.web.client;RootUriTemplateHandler;true;addTo;(RestTemplate,String);;Argument[1];ReturnValue;taint",
        "org.springframework.boot.web.client;RootUriTemplateHandler;true;getRootUri;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.context;ConfigurableWebServerApplicationContext;true;setServerNamespace;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.context;WebServerApplicationContext;true;getServerNamespace;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.context;WebServerApplicationContext;true;getWebServer;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.context;WebServerGracefulShutdownLifecycle;false;WebServerGracefulShutdownLifecycle;(WebServer);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.context;WebServerInitializedEvent;true;getApplicationContext;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.context;WebServerPortFileWriter;true;WebServerPortFileWriter;(File);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.context;WebServerPortFileWriter;true;WebServerPortFileWriter;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.embedded.jetty;ConfigurableJettyWebServerFactory;true;addServerCustomizers;(JettyServerCustomizer[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.embedded.jetty;ConfigurableJettyWebServerFactory;true;setThreadPool;(ThreadPool);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.embedded.jetty;JettyReactiveWebServerFactory;true;getServerCustomizers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.embedded.jetty;JettyReactiveWebServerFactory;true;getThreadPool;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.embedded.jetty;JettyReactiveWebServerFactory;true;setResourceFactory;(JettyResourceFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.embedded.jetty;JettyReactiveWebServerFactory;true;setServerCustomizers;(Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.embedded.jetty;JettyServletWebServerFactory;true;JettyServletWebServerFactory;(String,int);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.embedded.jetty;JettyServletWebServerFactory;true;addConfigurations;(Configuration[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.embedded.jetty;JettyServletWebServerFactory;true;getConfigurations;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.embedded.jetty;JettyServletWebServerFactory;true;getServerCustomizers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.embedded.jetty;JettyServletWebServerFactory;true;getThreadPool;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.embedded.jetty;JettyServletWebServerFactory;true;setConfigurations;(Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.embedded.jetty;JettyServletWebServerFactory;true;setServerCustomizers;(Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.embedded.jetty;JettyWebServer;true;JettyWebServer;(Server);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.embedded.jetty;JettyWebServer;true;JettyWebServer;(Server,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.embedded.jetty;JettyWebServer;true;getServer;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.embedded.jetty;ServletContextInitializerConfiguration;true;ServletContextInitializerConfiguration;(ServletContextInitializer[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.embedded.netty;NettyReactiveWebServerFactory;true;getServerCustomizers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.embedded.netty;NettyReactiveWebServerFactory;true;setLifecycleTimeout;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.embedded.netty;NettyReactiveWebServerFactory;true;setResourceFactory;(ReactorResourceFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.embedded.netty;NettyReactiveWebServerFactory;true;setServerCustomizers;(Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.embedded.netty;NettyWebServer;true;NettyWebServer;(HttpServer,ReactorHttpHandlerAdapter,Duration,Shutdown);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.web.embedded.netty;NettyWebServer;true;NettyWebServer;(HttpServer,ReactorHttpHandlerAdapter,Duration,Shutdown);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.web.embedded.netty;NettyWebServer;true;setRouteProviders;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.embedded.netty;SslServerCustomizer;true;SslServerCustomizer;(Ssl,Http2,SslStoreProvider);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.embedded.netty;SslServerCustomizer;true;SslServerCustomizer;(Ssl,Http2,SslStoreProvider);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.web.embedded.netty;SslServerCustomizer;true;SslServerCustomizer;(Ssl,Http2,SslStoreProvider);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.web.embedded.tomcat;ConfigurableTomcatWebServerFactory;true;addConnectorCustomizers;(TomcatConnectorCustomizer[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.embedded.tomcat;ConfigurableTomcatWebServerFactory;true;addContextCustomizers;(TomcatContextCustomizer[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.embedded.tomcat;ConfigurableTomcatWebServerFactory;true;addEngineValves;(Valve[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.embedded.tomcat;ConfigurableTomcatWebServerFactory;true;addProtocolHandlerCustomizers;(TomcatProtocolHandlerCustomizer[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.embedded.tomcat;ConfigurableTomcatWebServerFactory;true;setBaseDirectory;(File);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.embedded.tomcat;TomcatReactiveWebServerFactory;true;addContextLifecycleListeners;(LifecycleListener[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.embedded.tomcat;TomcatReactiveWebServerFactory;true;getAdditionalTomcatConnectors;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.embedded.tomcat;TomcatReactiveWebServerFactory;true;getContextLifecycleListeners;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.embedded.tomcat;TomcatReactiveWebServerFactory;true;getEngineValves;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.embedded.tomcat;TomcatReactiveWebServerFactory;true;getTomcatConnectorCustomizers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.embedded.tomcat;TomcatReactiveWebServerFactory;true;getTomcatContextCustomizers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.embedded.tomcat;TomcatReactiveWebServerFactory;true;getTomcatProtocolHandlerCustomizers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.embedded.tomcat;TomcatReactiveWebServerFactory;true;setContextLifecycleListeners;(Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.embedded.tomcat;TomcatReactiveWebServerFactory;true;setProtocol;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.embedded.tomcat;TomcatReactiveWebServerFactory;true;setTomcatConnectorCustomizers;(Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.embedded.tomcat;TomcatReactiveWebServerFactory;true;setTomcatContextCustomizers;(Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.embedded.tomcat;TomcatReactiveWebServerFactory;true;setTomcatProtocolHandlerCustomizers;(Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.embedded.tomcat;TomcatServletWebServerFactory;true;TomcatServletWebServerFactory;(String,int);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.embedded.tomcat;TomcatServletWebServerFactory;true;addContextLifecycleListeners;(LifecycleListener[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.embedded.tomcat;TomcatServletWebServerFactory;true;addContextValves;(Valve[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.embedded.tomcat;TomcatServletWebServerFactory;true;addTldSkipPatterns;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.embedded.tomcat;TomcatServletWebServerFactory;true;getAdditionalTomcatConnectors;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.embedded.tomcat;TomcatServletWebServerFactory;true;getContextLifecycleListeners;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.embedded.tomcat;TomcatServletWebServerFactory;true;getContextValves;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.embedded.tomcat;TomcatServletWebServerFactory;true;getEngineValves;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.embedded.tomcat;TomcatServletWebServerFactory;true;getTldSkipPatterns;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.embedded.tomcat;TomcatServletWebServerFactory;true;getTomcatConnectorCustomizers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.embedded.tomcat;TomcatServletWebServerFactory;true;getTomcatContextCustomizers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.embedded.tomcat;TomcatServletWebServerFactory;true;getTomcatProtocolHandlerCustomizers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.embedded.tomcat;TomcatServletWebServerFactory;true;setContextLifecycleListeners;(Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.embedded.tomcat;TomcatServletWebServerFactory;true;setContextValves;(Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.embedded.tomcat;TomcatServletWebServerFactory;true;setEngineValves;(Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.embedded.tomcat;TomcatServletWebServerFactory;true;setProtocol;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.embedded.tomcat;TomcatServletWebServerFactory;true;setTldSkipPatterns;(Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.embedded.tomcat;TomcatServletWebServerFactory;true;setTomcatConnectorCustomizers;(Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.embedded.tomcat;TomcatServletWebServerFactory;true;setTomcatContextCustomizers;(Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.embedded.tomcat;TomcatServletWebServerFactory;true;setTomcatProtocolHandlerCustomizers;(Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.embedded.tomcat;TomcatWebServer;true;TomcatWebServer;(Tomcat);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.embedded.tomcat;TomcatWebServer;true;TomcatWebServer;(Tomcat,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.embedded.tomcat;TomcatWebServer;true;TomcatWebServer;(Tomcat,boolean,Shutdown);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.embedded.tomcat;TomcatWebServer;true;getTomcat;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.embedded.undertow;ConfigurableUndertowWebServerFactory;true;addBuilderCustomizers;(UndertowBuilderCustomizer[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.embedded.undertow;ConfigurableUndertowWebServerFactory;true;setAccessLogDirectory;(File);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.embedded.undertow;ConfigurableUndertowWebServerFactory;true;setAccessLogPattern;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.embedded.undertow;ConfigurableUndertowWebServerFactory;true;setAccessLogPrefix;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.embedded.undertow;ConfigurableUndertowWebServerFactory;true;setAccessLogSuffix;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.embedded.undertow;ConfigurableUndertowWebServerFactory;true;setBuilderCustomizers;(Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.embedded.undertow;HttpHandlerFactory;true;getHandler;(HttpHandler);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.web.embedded.undertow;UndertowReactiveWebServerFactory;true;getBuilderCustomizers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.embedded.undertow;UndertowServletWebServer;true;UndertowServletWebServer;(Builder,Iterable,String,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.embedded.undertow;UndertowServletWebServer;true;UndertowServletWebServer;(Builder,Iterable,String,boolean);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.web.embedded.undertow;UndertowServletWebServer;true;UndertowServletWebServer;(Builder,Iterable,String,boolean);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.web.embedded.undertow;UndertowServletWebServer;true;getDeploymentManager;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.embedded.undertow;UndertowServletWebServerFactory;true;UndertowServletWebServerFactory;(String,int);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.embedded.undertow;UndertowServletWebServerFactory;true;addDeploymentInfoCustomizers;(UndertowDeploymentInfoCustomizer[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.embedded.undertow;UndertowServletWebServerFactory;true;getAccessLogPrefix;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.embedded.undertow;UndertowServletWebServerFactory;true;getBuilderCustomizers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.embedded.undertow;UndertowServletWebServerFactory;true;getDeploymentInfoCustomizers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.embedded.undertow;UndertowServletWebServerFactory;true;setDeploymentInfoCustomizers;(Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.embedded.undertow;UndertowWebServer;true;UndertowWebServer;(Builder,Iterable,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.embedded.undertow;UndertowWebServer;true;UndertowWebServer;(Builder,Iterable,boolean);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.web.embedded.undertow;UndertowWebServer;true;UndertowWebServer;(Builder,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.error;ErrorAttributeOptions;false;getIncludes;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.reactive.context;AnnotationConfigReactiveWebServerApplicationContext;true;AnnotationConfigReactiveWebServerApplicationContext;(Class[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.reactive.context;AnnotationConfigReactiveWebServerApplicationContext;true;AnnotationConfigReactiveWebServerApplicationContext;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.reactive.context;ReactiveWebServerInitializedEvent;true;ReactiveWebServerInitializedEvent;(WebServer,ReactiveWebServerApplicationContext);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.web.reactive.result.view;MustacheView;true;setCharset;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.reactive.result.view;MustacheView;true;setCompiler;(Compiler);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.reactive.result.view;MustacheViewResolver;true;MustacheViewResolver;(Compiler);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.reactive.result.view;MustacheViewResolver;true;setCharset;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.server;AbstractConfigurableWebServerFactory;true;getAddress;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.server;AbstractConfigurableWebServerFactory;true;getCompression;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.server;AbstractConfigurableWebServerFactory;true;getErrorPages;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.server;AbstractConfigurableWebServerFactory;true;getHttp2;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.server;AbstractConfigurableWebServerFactory;true;getServerHeader;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.server;AbstractConfigurableWebServerFactory;true;getSsl;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.server;AbstractConfigurableWebServerFactory;true;getSslStoreProvider;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.server;Compression;true;getExcludedUserAgents;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.server;Compression;true;getMimeTypes;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.server;Compression;true;getMinResponseSize;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.server;Compression;true;setExcludedUserAgents;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.server;Compression;true;setMimeTypes;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.server;Compression;true;setMinResponseSize;(DataSize);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.server;ConfigurableWebServerFactory;true;setAddress;(InetAddress);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.server;ConfigurableWebServerFactory;true;setCompression;(Compression);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.server;ConfigurableWebServerFactory;true;setErrorPages;(Set);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.server;ConfigurableWebServerFactory;true;setHttp2;(Http2);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.server;ConfigurableWebServerFactory;true;setServerHeader;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.server;ConfigurableWebServerFactory;true;setSsl;(Ssl);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.server;ConfigurableWebServerFactory;true;setSslStoreProvider;(SslStoreProvider);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.server;Cookie;true;getDomain;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.server;Cookie;true;getMaxAge;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.server;Cookie;true;getName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.server;Cookie;true;getPath;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.server;Cookie;true;setDomain;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.server;Cookie;true;setMaxAge;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.server;Cookie;true;setName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.server;Cookie;true;setPath;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.server;ErrorPage;true;ErrorPage;(Class,String);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.web.server;ErrorPage;true;ErrorPage;(HttpStatus,String);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.web.server;ErrorPage;true;ErrorPage;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.server;ErrorPage;true;getPath;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.server;ErrorPageRegistry;true;addErrorPages;(ErrorPage[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.server;MimeMappings$Mapping;false;Mapping;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.server;MimeMappings$Mapping;false;Mapping;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.web.server;MimeMappings$Mapping;false;getExtension;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.server;MimeMappings$Mapping;false;getMimeType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.server;MimeMappings$Mapping;false;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.server;MimeMappings;false;add;(String,String);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.server;MimeMappings;false;add;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.server;MimeMappings;false;add;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.web.server;MimeMappings;false;get;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.server;MimeMappings;false;getAll;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.server;MimeMappings;false;remove;(String);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.server;Ssl;true;getCiphers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.server;Ssl;true;getEnabledProtocols;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.server;Ssl;true;getKeyAlias;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.server;Ssl;true;getKeyPassword;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.server;Ssl;true;getKeyStore;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.server;Ssl;true;getKeyStorePassword;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.server;Ssl;true;getKeyStoreProvider;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.server;Ssl;true;getKeyStoreType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.server;Ssl;true;getProtocol;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.server;Ssl;true;getTrustStore;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.server;Ssl;true;getTrustStorePassword;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.server;Ssl;true;getTrustStoreProvider;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.server;Ssl;true;getTrustStoreType;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.server;Ssl;true;setCiphers;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.server;Ssl;true;setEnabledProtocols;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.server;Ssl;true;setKeyAlias;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.server;Ssl;true;setKeyPassword;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.server;Ssl;true;setKeyStore;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.server;Ssl;true;setKeyStorePassword;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.server;Ssl;true;setKeyStoreProvider;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.server;Ssl;true;setKeyStoreType;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.server;Ssl;true;setProtocol;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.server;Ssl;true;setTrustStore;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.server;Ssl;true;setTrustStorePassword;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.server;Ssl;true;setTrustStoreProvider;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.server;Ssl;true;setTrustStoreType;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.servlet.context;AnnotationConfigServletWebApplicationContext;true;AnnotationConfigServletWebApplicationContext;(Class[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.servlet.context;AnnotationConfigServletWebApplicationContext;true;AnnotationConfigServletWebApplicationContext;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.servlet.context;AnnotationConfigServletWebServerApplicationContext;true;AnnotationConfigServletWebServerApplicationContext;(Class[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.servlet.context;AnnotationConfigServletWebServerApplicationContext;true;AnnotationConfigServletWebServerApplicationContext;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.servlet.context;ServletWebServerApplicationContext$ExistingWebApplicationScopes;true;ExistingWebApplicationScopes;(ConfigurableListableBeanFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.servlet.context;ServletWebServerInitializedEvent;true;ServletWebServerInitializedEvent;(WebServer,ServletWebServerApplicationContext);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.web.servlet.context;WebApplicationContextServletContextAwareProcessor;true;WebApplicationContextServletContextAwareProcessor;(ConfigurableWebApplicationContext);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.servlet.filter;ApplicationContextHeaderFilter;true;ApplicationContextHeaderFilter;(ApplicationContext);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.servlet.filter;ErrorPageSecurityFilter;true;ErrorPageSecurityFilter;(ApplicationContext);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.servlet.server;AbstractServletWebServerFactory;true;AbstractServletWebServerFactory;(String,int);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.servlet.server;AbstractServletWebServerFactory;true;getContextPath;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.servlet.server;AbstractServletWebServerFactory;true;getCookieSameSiteSuppliers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.servlet.server;AbstractServletWebServerFactory;true;getDisplayName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.servlet.server;AbstractServletWebServerFactory;true;getDocumentRoot;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.servlet.server;AbstractServletWebServerFactory;true;getInitParameters;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.servlet.server;AbstractServletWebServerFactory;true;getJsp;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.servlet.server;AbstractServletWebServerFactory;true;getLocaleCharsetMappings;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.servlet.server;AbstractServletWebServerFactory;true;getMimeMappings;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.servlet.server;AbstractServletWebServerFactory;true;getSession;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.servlet.server;ConfigurableServletWebServerFactory;true;addCookieSameSiteSuppliers;(CookieSameSiteSupplier[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.servlet.server;ConfigurableServletWebServerFactory;true;addInitializers;(ServletContextInitializer[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.servlet.server;ConfigurableServletWebServerFactory;true;setContextPath;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.servlet.server;ConfigurableServletWebServerFactory;true;setCookieSameSiteSuppliers;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.servlet.server;ConfigurableServletWebServerFactory;true;setDisplayName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.servlet.server;ConfigurableServletWebServerFactory;true;setDocumentRoot;(File);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.servlet.server;ConfigurableServletWebServerFactory;true;setInitParameters;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.servlet.server;ConfigurableServletWebServerFactory;true;setInitializers;(List);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.servlet.server;ConfigurableServletWebServerFactory;true;setJsp;(Jsp);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.servlet.server;ConfigurableServletWebServerFactory;true;setLocaleCharsetMappings;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.servlet.server;ConfigurableServletWebServerFactory;true;setSession;(Session);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.servlet.server;Encoding;true;getMapping;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.servlet.server;Encoding;true;setMapping;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.servlet.server;Jsp;true;getClassName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.servlet.server;Jsp;true;getInitParameters;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.servlet.server;Jsp;true;setClassName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.servlet.server;Jsp;true;setInitParameters;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.servlet.server;Session$Cookie;true;getComment;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.servlet.server;Session$Cookie;true;setComment;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.servlet.server;Session;true;getCookie;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.servlet.server;Session;true;getStoreDir;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.servlet.server;Session;true;getTimeout;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.servlet.server;Session;true;getTrackingModes;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.servlet.server;Session;true;setStoreDir;(File);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.servlet.server;Session;true;setTimeout;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.servlet.server;Session;true;setTrackingModes;(Set);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.servlet.support;ServletContextApplicationContextInitializer;true;ServletContextApplicationContextInitializer;(ServletContext);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.servlet.support;ServletContextApplicationContextInitializer;true;ServletContextApplicationContextInitializer;(ServletContext,boolean);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.servlet.view;MustacheView;true;setCharset;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.servlet.view;MustacheView;true;setCompiler;(Compiler);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.servlet.view;MustacheViewResolver;true;MustacheViewResolver;(Compiler);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.servlet.view;MustacheViewResolver;true;setCharset;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.servlet;AbstractFilterRegistrationBean;true;addServletNames;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.servlet;AbstractFilterRegistrationBean;true;addUrlPatterns;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.servlet;AbstractFilterRegistrationBean;true;getServletNames;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.servlet;AbstractFilterRegistrationBean;true;getServletRegistrationBeans;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.servlet;AbstractFilterRegistrationBean;true;getUrlPatterns;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.servlet;AbstractFilterRegistrationBean;true;setDispatcherTypes;(EnumSet);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.servlet;AbstractFilterRegistrationBean;true;setServletNames;(Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.servlet;AbstractFilterRegistrationBean;true;setServletRegistrationBeans;(Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.servlet;AbstractFilterRegistrationBean;true;setUrlPatterns;(Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.servlet;AbstractFilterRegistrationBean;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.servlet;DelegatingFilterProxyRegistrationBean;true;DelegatingFilterProxyRegistrationBean;(String,ServletRegistrationBean[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.servlet;DynamicRegistrationBean;true;addInitParameter;(String,String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.servlet;DynamicRegistrationBean;true;addInitParameter;(String,String);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.web.servlet;DynamicRegistrationBean;true;getInitParameters;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.servlet;DynamicRegistrationBean;true;setInitParameters;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.servlet;DynamicRegistrationBean;true;setName;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.servlet;FilterRegistrationBean;true;FilterRegistrationBean;(Filter,ServletRegistrationBean[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.servlet;FilterRegistrationBean;true;setFilter;(Filter);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.servlet;MultipartConfigFactory;true;setFileSizeThreshold;(DataSize);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.servlet;MultipartConfigFactory;true;setLocation;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.servlet;MultipartConfigFactory;true;setMaxFileSize;(DataSize);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.servlet;MultipartConfigFactory;true;setMaxRequestSize;(DataSize);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.servlet;ServletContextInitializerBeans;true;ServletContextInitializerBeans;(ListableBeanFactory,Class[]);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.web.servlet;ServletListenerRegistrationBean;true;ServletListenerRegistrationBean;(EventListener);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.servlet;ServletListenerRegistrationBean;true;getListener;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.servlet;ServletListenerRegistrationBean;true;setListener;(EventListener);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.servlet;ServletRegistrationBean;true;ServletRegistrationBean;(Servlet,String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.servlet;ServletRegistrationBean;true;ServletRegistrationBean;(Servlet,String[]);;Argument[1];Argument[-1];taint",
        "org.springframework.boot.web.servlet;ServletRegistrationBean;true;ServletRegistrationBean;(Servlet,boolean,String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.servlet;ServletRegistrationBean;true;ServletRegistrationBean;(Servlet,boolean,String[]);;Argument[2];Argument[-1];taint",
        "org.springframework.boot.web.servlet;ServletRegistrationBean;true;addUrlMappings;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.servlet;ServletRegistrationBean;true;getMultipartConfig;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.servlet;ServletRegistrationBean;true;getServlet;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.servlet;ServletRegistrationBean;true;getServletName;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.servlet;ServletRegistrationBean;true;getUrlMappings;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.servlet;ServletRegistrationBean;true;setMultipartConfig;(MultipartConfigElement);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.servlet;ServletRegistrationBean;true;setServlet;(Servlet);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.servlet;ServletRegistrationBean;true;setUrlMappings;(Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.web.servlet;ServletRegistrationBean;true;toString;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot.web.servlet;WebListenerRegistry;true;addWebListeners;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.webservices.client;HttpWebServiceMessageSenderBuilder;true;requestFactory;(Supplier);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.webservices.client;HttpWebServiceMessageSenderBuilder;true;requestFactory;(Supplier);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.webservices.client;HttpWebServiceMessageSenderBuilder;true;requestFactory;(Supplier);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.webservices.client;HttpWebServiceMessageSenderBuilder;true;setConnectTimeout;(Duration);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.webservices.client;HttpWebServiceMessageSenderBuilder;true;setConnectTimeout;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.webservices.client;HttpWebServiceMessageSenderBuilder;true;setConnectTimeout;(Duration);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.webservices.client;HttpWebServiceMessageSenderBuilder;true;setReadTimeout;(Duration);;Argument[-1];ReturnValue;value",
        "org.springframework.boot.webservices.client;HttpWebServiceMessageSenderBuilder;true;setReadTimeout;(Duration);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.webservices.client;HttpWebServiceMessageSenderBuilder;true;setReadTimeout;(Duration);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.webservices.client;WebServiceTemplateBuilder;true;WebServiceTemplateBuilder;(WebServiceTemplateCustomizer[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot.webservices.client;WebServiceTemplateBuilder;true;additionalCustomizers;(Collection);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.boot.webservices.client;WebServiceTemplateBuilder;true;additionalCustomizers;(WebServiceTemplateCustomizer[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.boot.webservices.client;WebServiceTemplateBuilder;true;additionalInterceptors;(ClientInterceptor[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.boot.webservices.client;WebServiceTemplateBuilder;true;additionalInterceptors;(Collection);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.boot.webservices.client;WebServiceTemplateBuilder;true;additionalMessageSenders;(Collection);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.boot.webservices.client;WebServiceTemplateBuilder;true;additionalMessageSenders;(WebServiceMessageSender[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.boot.webservices.client;WebServiceTemplateBuilder;true;configure;(WebServiceTemplate);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.webservices.client;WebServiceTemplateBuilder;true;customizers;(Collection);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.boot.webservices.client;WebServiceTemplateBuilder;true;customizers;(WebServiceTemplateCustomizer[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.boot.webservices.client;WebServiceTemplateBuilder;true;interceptors;(ClientInterceptor[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.boot.webservices.client;WebServiceTemplateBuilder;true;interceptors;(Collection);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.boot.webservices.client;WebServiceTemplateBuilder;true;messageSenders;(Collection);;Element of Argument[0];ReturnValue;taint",
        "org.springframework.boot.webservices.client;WebServiceTemplateBuilder;true;messageSenders;(WebServiceMessageSender[]);;ArrayElement of Argument[0];ReturnValue;taint",
        "org.springframework.boot.webservices.client;WebServiceTemplateBuilder;true;setDestinationProvider;(DestinationProvider);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.webservices.client;WebServiceTemplateBuilder;true;setFaultMessageResolver;(FaultMessageResolver);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.webservices.client;WebServiceTemplateBuilder;true;setMarshaller;(Marshaller);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.webservices.client;WebServiceTemplateBuilder;true;setUnmarshaller;(Unmarshaller);;Argument[0];ReturnValue;taint",
        "org.springframework.boot.webservices.client;WebServiceTemplateBuilder;true;setWebServiceMessageFactory;(WebServiceMessageFactory);;Argument[0];ReturnValue;taint",
        "org.springframework.boot;ApplicationArguments;true;getSourceArgs;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot;BootstrapContext;true;get;(Class);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot;BootstrapContext;true;getOrElse;(Class,Object);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot;BootstrapContext;true;getOrElseSupply;(Class,Supplier);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot;BootstrapContext;true;getOrElseThrow;(Class,Supplier);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot;BootstrapContextClosedEvent;true;getApplicationContext;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot;BootstrapContextClosedEvent;true;getBootstrapContext;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot;BootstrapRegistry;true;getRegisteredInstanceSupplier;(Class);;Argument[-1];ReturnValue;taint",
        "org.springframework.boot;BootstrapRegistry;true;register;(Class,InstanceSupplier);;Argument[1];Argument[-1];taint",
        "org.springframework.boot;BootstrapRegistry;true;registerIfAbsent;(Class,InstanceSupplier);;Argument[1];Argument[-1];taint",
        "org.springframework.boot;DefaultApplicationArguments;true;DefaultApplicationArguments;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot;ImageBanner;true;ImageBanner;(Resource);;Argument[0];Argument[-1];taint",
        "org.springframework.boot;ResourceBanner;true;ResourceBanner;(Resource);;Argument[0];Argument[-1];taint",
        "org.springframework.boot;SpringApplication;true;SpringApplication;(Class[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot;SpringApplication;true;SpringApplication;(ResourceLoader,Class[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot;SpringApplication;true;SpringApplication;(ResourceLoader,Class[]);;Argument[1];Argument[-1];taint",
        "org.springframework.boot;SpringApplication;true;addBootstrapRegistryInitializer;(BootstrapRegistryInitializer);;Argument[0];Argument[-1];taint",
        "org.springframework.boot;SpringApplication;true;addInitializers;(ApplicationContextInitializer[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot;SpringApplication;true;addListeners;(ApplicationListener[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot;SpringApplication;true;addPrimarySources;(Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.boot;SpringApplication;true;convertEnvironment;(ConfigurableEnvironment);;Argument[0];ReturnValue;taint",
        "org.springframework.boot;SpringApplication;true;getAdditionalProfiles;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot;SpringApplication;true;getAllSources;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot;SpringApplication;true;getApplicationStartup;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot;SpringApplication;true;getEnvironmentPrefix;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot;SpringApplication;true;getInitializers;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot;SpringApplication;true;getListeners;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot;SpringApplication;true;getResourceLoader;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot;SpringApplication;true;getSources;();;Argument[-1];ReturnValue;taint",
        "org.springframework.boot;SpringApplication;true;setAdditionalProfiles;(String[]);;Argument[0];Argument[-1];taint",
        "org.springframework.boot;SpringApplication;true;setApplicationContextFactory;(ApplicationContextFactory);;Argument[0];Argument[-1];taint",
        "org.springframework.boot;SpringApplication;true;setApplicationStartup;(ApplicationStartup);;Argument[0];Argument[-1];taint",
        "org.springframework.boot;SpringApplication;true;setBanner;(Banner);;Argument[0];Argument[-1];taint",
        "org.springframework.boot;SpringApplication;true;setBeanNameGenerator;(BeanNameGenerator);;Argument[0];Argument[-1];taint",
        "org.springframework.boot;SpringApplication;true;setDefaultProperties;(Map);;Argument[0];Argument[-1];taint",
        "org.springframework.boot;SpringApplication;true;setDefaultProperties;(Properties);;Argument[0];Argument[-1];taint",
        "org.springframework.boot;SpringApplication;true;setEnvironment;(ConfigurableEnvironment);;Argument[0];Argument[-1];taint",
        "org.springframework.boot;SpringApplication;true;setEnvironmentPrefix;(String);;Argument[0];Argument[-1];taint",
        "org.springframework.boot;SpringApplication;true;setInitializers;(Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.boot;SpringApplication;true;setListeners;(Collection);;Argument[0];Argument[-1];taint",
        "org.springframework.boot;SpringApplication;true;setResourceLoader;(ResourceLoader);;Argument[0];Argument[-1];taint",
        "org.springframework.boot;SpringApplication;true;setSources;(Set);;Argument[0];Argument[-1];taint",
        "org.springframework.boot;SpringApplicationShutdownHandlers;true;add;(Runnable);;Argument[0];Argument[-1];taint",
        "sample;AnnotatedSample;true;getName;();;Argument[-1];ReturnValue;taint",
        "sample;AnnotatedSample;true;setName;(String);;Argument[0];Argument[-1];taint",
        "smoketest.actuator.customsecurity;ExampleRestControllerEndpoint;true;echo;(String);;Argument[0];ReturnValue;taint",
        "smoketest.actuator.noweb;HelloWorldService;true;HelloWorldService;(ServiceProperties);;Argument[0];Argument[-1];taint",
        "smoketest.actuator.noweb;HelloWorldService;true;getHelloMessage;();;Argument[-1];ReturnValue;taint",
        "smoketest.actuator.noweb;ServiceProperties;true;getName;();;Argument[-1];ReturnValue;taint",
        "smoketest.actuator.noweb;ServiceProperties;true;setName;(String);;Argument[0];Argument[-1];taint",
        "smoketest.actuator;HelloWorldService;true;HelloWorldService;(ServiceProperties);;Argument[0];Argument[-1];taint",
        "smoketest.actuator;HelloWorldService;true;getHelloMessage;();;Argument[-1];ReturnValue;taint",
        "smoketest.actuator;SampleController;true;SampleController;(HelloWorldService);;Argument[0];Argument[-1];taint",
        "smoketest.actuator;SampleController;true;hello;();;Argument[-1];ReturnValue;taint",
        "smoketest.actuator;SampleController;true;olleh;(Message);;Argument[0];ReturnValue;taint",
        "smoketest.actuator;ServiceProperties;true;getName;();;Argument[-1];ReturnValue;taint",
        "smoketest.actuator;ServiceProperties;true;setName;(String);;Argument[0];Argument[-1];taint",
        "smoketest.aop.service;HelloWorldService;true;getHelloMessage;();;Argument[-1];ReturnValue;taint",
        "smoketest.atmosphere;ChatService;true;onMessage;(Message);;Argument[0];Argument[-1];taint",
        "smoketest.atmosphere;ChatService;true;onMessage;(Message);;Argument[0];ReturnValue;taint",
        "smoketest.atmosphere;Message;true;getAuthor;();;Argument[-1];ReturnValue;taint",
        "smoketest.atmosphere;Message;true;getMessage;();;Argument[-1];ReturnValue;taint",
        "smoketest.atmosphere;Message;true;setAuthor;(String);;Argument[0];Argument[-1];taint",
        "smoketest.atmosphere;Message;true;setMessage;(String);;Argument[0];Argument[-1];taint",
        "smoketest.atomikos;Account;true;Account;(String);;Argument[0];Argument[-1];taint",
        "smoketest.atomikos;Account;true;getUsername;();;Argument[-1];ReturnValue;taint",
        "smoketest.atomikos;AccountService;true;AccountService;(JmsTemplate,AccountRepository);;Argument[0];Argument[-1];taint",
        "smoketest.atomikos;AccountService;true;AccountService;(JmsTemplate,AccountRepository);;Argument[1];Argument[-1];taint",
        "smoketest.bootstrapregistry.app;MySubversionClient;true;MySubversionClient;(SubversionServerCertificate);;Argument[0];Argument[-1];taint",
        "smoketest.bootstrapregistry.external.svn;SubversionClient;true;SubversionClient;(SubversionServerCertificate);;Argument[0];Argument[-1];taint",
        "smoketest.bootstrapregistry.external.svn;SubversionClient;true;load;(String);;Argument[-1];ReturnValue;taint",
        "smoketest.bootstrapregistry.external.svn;SubversionClient;true;load;(String);;Argument[0];ReturnValue;taint",
        "smoketest.bootstrapregistry.external.svn;SubversionServerCertificate;true;of;(String);;Argument[0];ReturnValue;taint",
        "smoketest.bootstrapregistry.external.svn;SubversionServerCertificate;true;toString;();;Argument[-1];ReturnValue;taint",
        "smoketest.cache;CacheManagerCheck;true;CacheManagerCheck;(CacheManager);;Argument[0];Argument[-1];taint",
        "smoketest.cache;Country;true;Country;(String);;Argument[0];Argument[-1];taint",
        "smoketest.cache;Country;true;getCode;();;Argument[-1];ReturnValue;taint",
        "smoketest.cache;CountryRepository;true;findByCode;(String);;Argument[0];ReturnValue;taint",
        "smoketest.data.couchbase;User;true;getFirstName;();;Argument[-1];ReturnValue;taint",
        "smoketest.data.couchbase;User;true;getId;();;Argument[-1];ReturnValue;taint",
        "smoketest.data.couchbase;User;true;getLastName;();;Argument[-1];ReturnValue;taint",
        "smoketest.data.couchbase;User;true;setFirstName;(String);;Argument[0];Argument[-1];taint",
        "smoketest.data.couchbase;User;true;setId;(String);;Argument[0];Argument[-1];taint",
        "smoketest.data.couchbase;User;true;setLastName;(String);;Argument[0];Argument[-1];taint",
        "smoketest.data.couchbase;User;true;toString;();;Argument[-1];ReturnValue;taint",
        "smoketest.data.elasticsearch;Customer;true;Customer;(String,String);;Argument[0];Argument[-1];taint",
        "smoketest.data.elasticsearch;Customer;true;Customer;(String,String);;Argument[1];Argument[-1];taint",
        "smoketest.data.elasticsearch;Customer;true;getFirstName;();;Argument[-1];ReturnValue;taint",
        "smoketest.data.elasticsearch;Customer;true;getId;();;Argument[-1];ReturnValue;taint",
        "smoketest.data.elasticsearch;Customer;true;getLastName;();;Argument[-1];ReturnValue;taint",
        "smoketest.data.elasticsearch;Customer;true;setFirstName;(String);;Argument[0];Argument[-1];taint",
        "smoketest.data.elasticsearch;Customer;true;setId;(String);;Argument[0];Argument[-1];taint",
        "smoketest.data.elasticsearch;Customer;true;setLastName;(String);;Argument[0];Argument[-1];taint",
        "smoketest.data.elasticsearch;Customer;true;toString;();;Argument[-1];ReturnValue;taint",
        "smoketest.data.jdbc;Customer;true;getDateOfBirth;();;Argument[-1];ReturnValue;taint",
        "smoketest.data.jdbc;Customer;true;getFirstName;();;Argument[-1];ReturnValue;taint",
        "smoketest.data.jdbc;Customer;true;setDateOfBirth;(LocalDate);;Argument[0];Argument[-1];taint",
        "smoketest.data.jdbc;Customer;true;setFirstName;(String);;Argument[0];Argument[-1];taint",
        "smoketest.data.jdbc;SampleController;true;SampleController;(CustomerRepository);;Argument[0];Argument[-1];taint",
        "smoketest.data.jpa.domain;City;true;City;(String,String);;Argument[0];Argument[-1];taint",
        "smoketest.data.jpa.domain;City;true;City;(String,String);;Argument[1];Argument[-1];taint",
        "smoketest.data.jpa.domain;City;true;getCountry;();;Argument[-1];ReturnValue;taint",
        "smoketest.data.jpa.domain;City;true;getMap;();;Argument[-1];ReturnValue;taint",
        "smoketest.data.jpa.domain;City;true;getName;();;Argument[-1];ReturnValue;taint",
        "smoketest.data.jpa.domain;City;true;getState;();;Argument[-1];ReturnValue;taint",
        "smoketest.data.jpa.domain;City;true;toString;();;Argument[-1];ReturnValue;taint",
        "smoketest.data.jpa.domain;Hotel;true;Hotel;(City,String);;Argument[0];Argument[-1];taint",
        "smoketest.data.jpa.domain;Hotel;true;Hotel;(City,String);;Argument[1];Argument[-1];taint",
        "smoketest.data.jpa.domain;Hotel;true;getAddress;();;Argument[-1];ReturnValue;taint",
        "smoketest.data.jpa.domain;Hotel;true;getCity;();;Argument[-1];ReturnValue;taint",
        "smoketest.data.jpa.domain;Hotel;true;getName;();;Argument[-1];ReturnValue;taint",
        "smoketest.data.jpa.domain;Hotel;true;getZip;();;Argument[-1];ReturnValue;taint",
        "smoketest.data.jpa.domain;Review;true;Review;(Hotel,int,ReviewDetails);;Argument[0];Argument[-1];taint",
        "smoketest.data.jpa.domain;Review;true;getCheckInDate;();;Argument[-1];ReturnValue;taint",
        "smoketest.data.jpa.domain;Review;true;getDetails;();;Argument[-1];ReturnValue;taint",
        "smoketest.data.jpa.domain;Review;true;getHotel;();;Argument[-1];ReturnValue;taint",
        "smoketest.data.jpa.domain;Review;true;getTitle;();;Argument[-1];ReturnValue;taint",
        "smoketest.data.jpa.domain;Review;true;setCheckInDate;(Date);;Argument[0];Argument[-1];taint",
        "smoketest.data.jpa.domain;Review;true;setDetails;(String);;Argument[0];Argument[-1];taint",
        "smoketest.data.jpa.domain;Review;true;setTitle;(String);;Argument[0];Argument[-1];taint",
        "smoketest.data.jpa.domain;ReviewDetails;true;getCheckInDate;();;Argument[-1];ReturnValue;taint",
        "smoketest.data.jpa.domain;ReviewDetails;true;getDetails;();;Argument[-1];ReturnValue;taint",
        "smoketest.data.jpa.domain;ReviewDetails;true;getTitle;();;Argument[-1];ReturnValue;taint",
        "smoketest.data.jpa.domain;ReviewDetails;true;setCheckInDate;(Date);;Argument[0];Argument[-1];taint",
        "smoketest.data.jpa.domain;ReviewDetails;true;setDetails;(String);;Argument[0];Argument[-1];taint",
        "smoketest.data.jpa.domain;ReviewDetails;true;setTitle;(String);;Argument[0];Argument[-1];taint",
        "smoketest.data.jpa.service;CitySearchCriteria;true;CitySearchCriteria;(String);;Argument[0];Argument[-1];taint",
        "smoketest.data.jpa.service;CitySearchCriteria;true;getName;();;Argument[-1];ReturnValue;taint",
        "smoketest.data.jpa.service;CitySearchCriteria;true;setName;(String);;Argument[0];Argument[-1];taint",
        "smoketest.data.ldap;Person;true;toString;();;Argument[-1];ReturnValue;taint",
        "smoketest.data.ldap;SampleLdapApplication;true;SampleLdapApplication;(PersonRepository);;Argument[0];Argument[-1];taint",
        "smoketest.data.mongo;Customer;true;Customer;(String,String);;Argument[0];Argument[-1];taint",
        "smoketest.data.mongo;Customer;true;Customer;(String,String);;Argument[1];Argument[-1];taint",
        "smoketest.data.mongo;Customer;true;toString;();;Argument[-1];ReturnValue;taint",
        "smoketest.data.neo4j;Customer;true;Customer;(String,String);;Argument[0];Argument[-1];taint",
        "smoketest.data.neo4j;Customer;true;Customer;(String,String);;Argument[1];Argument[-1];taint",
        "smoketest.data.neo4j;Customer;true;toString;();;Argument[-1];ReturnValue;taint",
        "smoketest.data.r2dbc;City;true;City;(String,String);;Argument[0];Argument[-1];taint",
        "smoketest.data.r2dbc;City;true;City;(String,String);;Argument[1];Argument[-1];taint",
        "smoketest.data.r2dbc;City;true;getCountry;();;Argument[-1];ReturnValue;taint",
        "smoketest.data.r2dbc;City;true;getName;();;Argument[-1];ReturnValue;taint",
        "smoketest.data.r2dbc;City;true;getState;();;Argument[-1];ReturnValue;taint",
        "smoketest.data.r2dbc;City;true;toString;();;Argument[-1];ReturnValue;taint",
        "smoketest.data.r2dbc;CityController;true;CityController;(CityRepository);;Argument[0];Argument[-1];taint",
        "smoketest.data.rest.domain;City;true;City;(String,String);;Argument[0];Argument[-1];taint",
        "smoketest.data.rest.domain;City;true;City;(String,String);;Argument[1];Argument[-1];taint",
        "smoketest.data.rest.domain;City;true;getCountry;();;Argument[-1];ReturnValue;taint",
        "smoketest.data.rest.domain;City;true;getMap;();;Argument[-1];ReturnValue;taint",
        "smoketest.data.rest.domain;City;true;getName;();;Argument[-1];ReturnValue;taint",
        "smoketest.data.rest.domain;City;true;getState;();;Argument[-1];ReturnValue;taint",
        "smoketest.data.rest.domain;City;true;toString;();;Argument[-1];ReturnValue;taint",
        "smoketest.data.rest.domain;Hotel;true;Hotel;(City,String);;Argument[0];Argument[-1];taint",
        "smoketest.data.rest.domain;Hotel;true;Hotel;(City,String);;Argument[1];Argument[-1];taint",
        "smoketest.data.rest.domain;Hotel;true;getAddress;();;Argument[-1];ReturnValue;taint",
        "smoketest.data.rest.domain;Hotel;true;getCity;();;Argument[-1];ReturnValue;taint",
        "smoketest.data.rest.domain;Hotel;true;getName;();;Argument[-1];ReturnValue;taint",
        "smoketest.data.rest.domain;Hotel;true;getZip;();;Argument[-1];ReturnValue;taint",
        "smoketest.data.rest.service;CitySearchCriteria;true;CitySearchCriteria;(String);;Argument[0];Argument[-1];taint",
        "smoketest.data.rest.service;CitySearchCriteria;true;getName;();;Argument[-1];ReturnValue;taint",
        "smoketest.data.rest.service;CitySearchCriteria;true;setName;(String);;Argument[0];Argument[-1];taint",
        "smoketest.flyway;Person;true;getFirstName;();;Argument[-1];ReturnValue;taint",
        "smoketest.flyway;Person;true;getLastName;();;Argument[-1];ReturnValue;taint",
        "smoketest.flyway;Person;true;setFirstName;(String);;Argument[0];Argument[-1];taint",
        "smoketest.flyway;Person;true;setLastName;(String);;Argument[0];Argument[-1];taint",
        "smoketest.flyway;Person;true;toString;();;Argument[-1];ReturnValue;taint",
        "smoketest.freemarker;WelcomeController;true;welcome;(Map);;Argument[-1];Element of Argument[0];taint",
        "smoketest.groovytemplates.mvc;MessageController;true;MessageController;(MessageRepository);;Argument[0];Argument[-1];taint",
        "smoketest.groovytemplates.mvc;MessageController;true;create;(Message,BindingResult,RedirectAttributes);;Argument[0];Argument[-1];taint",
        "smoketest.groovytemplates;Message;true;getCreated;();;Argument[-1];ReturnValue;taint",
        "smoketest.groovytemplates;Message;true;getSummary;();;Argument[-1];ReturnValue;taint",
        "smoketest.groovytemplates;Message;true;getText;();;Argument[-1];ReturnValue;taint",
        "smoketest.groovytemplates;Message;true;setCreated;(Date);;Argument[0];Argument[-1];taint",
        "smoketest.groovytemplates;Message;true;setSummary;(String);;Argument[0];Argument[-1];taint",
        "smoketest.groovytemplates;Message;true;setText;(String);;Argument[0];Argument[-1];taint",
        "smoketest.groovytemplates;MessageRepository;true;findAll;();;Argument[-1];ReturnValue;taint",
        "smoketest.groovytemplates;MessageRepository;true;findMessage;(Long);;Argument[-1];ReturnValue;taint",
        "smoketest.groovytemplates;MessageRepository;true;save;(Message);;Argument[0];Argument[-1];taint",
        "smoketest.groovytemplates;MessageRepository;true;save;(Message);;Argument[0];ReturnValue;taint",
        "smoketest.hateoas.domain;Customer;true;Customer;(Long,String,String);;Argument[1];Argument[-1];taint",
        "smoketest.hateoas.domain;Customer;true;Customer;(Long,String,String);;Argument[2];Argument[-1];taint",
        "smoketest.hateoas.domain;Customer;true;getFirstName;();;Argument[-1];ReturnValue;taint",
        "smoketest.hateoas.domain;Customer;true;getLastName;();;Argument[-1];ReturnValue;taint",
        "smoketest.hateoas.domain;CustomerRepository;true;findAll;();;Argument[-1];ReturnValue;taint",
        "smoketest.hateoas.domain;CustomerRepository;true;findOne;(Long);;Argument[-1];ReturnValue;taint",
        "smoketest.hateoas.web;CustomerController;true;CustomerController;(CustomerRepository,EntityLinks);;Argument[0];Argument[-1];taint",
        "smoketest.hateoas.web;CustomerController;true;CustomerController;(CustomerRepository,EntityLinks);;Argument[1];Argument[-1];taint",
        "smoketest.hazelcast3;Country;true;Country;(String);;Argument[0];Argument[-1];taint",
        "smoketest.hazelcast3;Country;true;getCode;();;Argument[-1];ReturnValue;taint",
        "smoketest.hazelcast3;CountryRepository;true;findByCode;(String);;Argument[0];ReturnValue;taint",
        "smoketest.integration;HelloWorldService;true;HelloWorldService;(ServiceProperties);;Argument[0];Argument[-1];taint",
        "smoketest.integration;HelloWorldService;true;getHelloMessage;(String);;Argument[-1];ReturnValue;taint",
        "smoketest.integration;HelloWorldService;true;getHelloMessage;(String);;Argument[0];ReturnValue;taint",
        "smoketest.integration;SampleApplicationRunner;true;SampleApplicationRunner;(SampleMessageGateway);;Argument[0];Argument[-1];taint",
        "smoketest.integration;SampleEndpoint;true;SampleEndpoint;(HelloWorldService);;Argument[0];Argument[-1];taint",
        "smoketest.integration;SampleEndpoint;true;hello;(File);;Argument[-1];ReturnValue;taint",
        "smoketest.integration;SampleIntegrationApplication;true;SampleIntegrationApplication;(ServiceProperties);;Argument[0];Argument[-1];taint",
        "smoketest.integration;ServiceProperties;true;getGreeting;();;Argument[-1];ReturnValue;taint",
        "smoketest.integration;ServiceProperties;true;getInputDir;();;Argument[-1];ReturnValue;taint",
        "smoketest.integration;ServiceProperties;true;getOutputDir;();;Argument[-1];ReturnValue;taint",
        "smoketest.integration;ServiceProperties;true;setGreeting;(String);;Argument[0];Argument[-1];taint",
        "smoketest.integration;ServiceProperties;true;setInputDir;(File);;Argument[0];Argument[-1];taint",
        "smoketest.integration;ServiceProperties;true;setOutputDir;(File);;Argument[0];Argument[-1];taint",
        "smoketest.jersey;Endpoint;true;Endpoint;(Service);;Argument[0];Argument[-1];taint",
        "smoketest.jersey;Endpoint;true;message;();;Argument[-1];ReturnValue;taint",
        "smoketest.jersey;Service;true;message;();;Argument[-1];ReturnValue;taint",
        "smoketest.jetty.jsp;MyRestResponse;true;MyRestResponse;(String);;Argument[0];Argument[-1];taint",
        "smoketest.jetty.jsp;MyRestResponse;true;getMessage;();;Argument[-1];ReturnValue;taint",
        "smoketest.jetty.jsp;WelcomeController;true;welcome;(Map);;Argument[-1];Element of Argument[0];taint",
        "smoketest.jetty.service;HelloWorldService;true;getHelloMessage;();;Argument[-1];ReturnValue;taint",
        "smoketest.jetty.web;SampleController;true;helloWorld;();;Argument[-1];ReturnValue;taint",
        "smoketest.jetty10.service;HelloWorldService;true;getHelloMessage;();;Argument[-1];ReturnValue;taint",
        "smoketest.jetty10.web;SampleController;true;helloWorld;();;Argument[-1];ReturnValue;taint",
        "smoketest.jpa.domain;Note;true;getBody;();;Argument[-1];ReturnValue;taint",
        "smoketest.jpa.domain;Note;true;getTags;();;Argument[-1];ReturnValue;taint",
        "smoketest.jpa.domain;Note;true;getTitle;();;Argument[-1];ReturnValue;taint",
        "smoketest.jpa.domain;Note;true;setBody;(String);;Argument[0];Argument[-1];taint",
        "smoketest.jpa.domain;Note;true;setTags;(List);;Argument[0];Argument[-1];taint",
        "smoketest.jpa.domain;Note;true;setTitle;(String);;Argument[0];Argument[-1];taint",
        "smoketest.jpa.domain;Tag;true;getName;();;Argument[-1];ReturnValue;taint",
        "smoketest.jpa.domain;Tag;true;getNotes;();;Argument[-1];ReturnValue;taint",
        "smoketest.jpa.domain;Tag;true;setName;(String);;Argument[0];Argument[-1];taint",
        "smoketest.jpa.domain;Tag;true;setNotes;(List);;Argument[0];Argument[-1];taint",
        "smoketest.jsp;WelcomeController;true;welcome;(Map);;Argument[-1];Element of Argument[0];taint",
        "smoketest.kafka;SampleMessage;true;SampleMessage;(Integer,String);;Argument[1];Argument[-1];taint",
        "smoketest.kafka;SampleMessage;true;getMessage;();;Argument[-1];ReturnValue;taint",
        "smoketest.kafka;SampleMessage;true;toString;();;Argument[-1];ReturnValue;taint",
        "smoketest.mustache;WelcomeController;true;welcome;(Map);;Argument[-1];Element of Argument[0];taint",
        "smoketest.parent;HelloWorldService;true;HelloWorldService;(ServiceProperties);;Argument[0];Argument[-1];taint",
        "smoketest.parent;HelloWorldService;true;getHelloMessage;(String);;Argument[-1];ReturnValue;taint",
        "smoketest.parent;HelloWorldService;true;getHelloMessage;(String);;Argument[0];ReturnValue;taint",
        "smoketest.parent;SampleEndpoint;true;SampleEndpoint;(HelloWorldService);;Argument[0];Argument[-1];taint",
        "smoketest.parent;SampleEndpoint;true;hello;(File);;Argument[-1];ReturnValue;taint",
        "smoketest.parent;ServiceProperties;true;getGreeting;();;Argument[-1];ReturnValue;taint",
        "smoketest.parent;ServiceProperties;true;getInputDir;();;Argument[-1];ReturnValue;taint",
        "smoketest.parent;ServiceProperties;true;getOutputDir;();;Argument[-1];ReturnValue;taint",
        "smoketest.parent;ServiceProperties;true;setGreeting;(String);;Argument[0];Argument[-1];taint",
        "smoketest.parent;ServiceProperties;true;setInputDir;(File);;Argument[0];Argument[-1];taint",
        "smoketest.parent;ServiceProperties;true;setOutputDir;(File);;Argument[0];Argument[-1];taint",
        "smoketest.profile.service;MessageService;true;getMessage;();;Argument[-1];ReturnValue;taint",
        "smoketest.propertyvalidation;SampleProperties;true;getHost;();;Argument[-1];ReturnValue;taint",
        "smoketest.propertyvalidation;SampleProperties;true;setHost;(String);;Argument[0];Argument[-1];taint",
        "smoketest.propertyvalidation;SamplePropertyValidationApplication;true;SamplePropertyValidationApplication;(SampleProperties);;Argument[0];Argument[-1];taint",
        "smoketest.quartz;SampleJob;true;setName;(String);;Argument[0];Argument[-1];taint",
        "smoketest.rsocket;Project;true;Project;(String);;Argument[0];Argument[-1];taint",
        "smoketest.rsocket;Project;true;getName;();;Argument[-1];ReturnValue;taint",
        "smoketest.rsocket;Project;true;setName;(String);;Argument[0];Argument[-1];taint",
        "smoketest.secure.jersey;Endpoint;true;Endpoint;(Service);;Argument[0];Argument[-1];taint",
        "smoketest.secure.jersey;Endpoint;true;message;();;Argument[-1];ReturnValue;taint",
        "smoketest.secure.jersey;Service;true;message;();;Argument[-1];ReturnValue;taint",
        "smoketest.simple.service;HelloWorldService;true;getHelloMessage;();;Argument[-1];ReturnValue;taint",
        "smoketest.simple;SampleConfigurationProperties;false;getName;();;Argument[-1];ReturnValue;taint",
        "smoketest.simple;SampleConfigurationProperties;false;setName;(String);;Argument[0];Argument[-1];taint",
        "smoketest.test.domain;User;true;User;(String,VehicleIdentificationNumber);;Argument[0];Argument[-1];taint",
        "smoketest.test.domain;User;true;User;(String,VehicleIdentificationNumber);;Argument[1];Argument[-1];taint",
        "smoketest.test.domain;User;true;getUsername;();;Argument[-1];ReturnValue;taint",
        "smoketest.test.domain;User;true;getVin;();;Argument[-1];ReturnValue;taint",
        "smoketest.test.domain;VehicleIdentificationNumber;false;VehicleIdentificationNumber;(String);;Argument[0];Argument[-1];taint",
        "smoketest.test.domain;VehicleIdentificationNumber;false;toString;();;Argument[-1];ReturnValue;taint",
        "smoketest.test.service;ServiceProperties;true;getVehicleServiceRootUrl;();;Argument[-1];ReturnValue;taint",
        "smoketest.test.service;ServiceProperties;true;setVehicleServiceRootUrl;(String);;Argument[0];Argument[-1];taint",
        "smoketest.test.service;VehicleDetails;true;VehicleDetails;(String,String);;Argument[0];Argument[-1];taint",
        "smoketest.test.service;VehicleDetails;true;VehicleDetails;(String,String);;Argument[1];Argument[-1];taint",
        "smoketest.test.service;VehicleDetails;true;getMake;();;Argument[-1];ReturnValue;taint",
        "smoketest.test.service;VehicleDetails;true;getModel;();;Argument[-1];ReturnValue;taint",
        "smoketest.test.service;VehicleIdentificationNumberNotFoundException;true;VehicleIdentificationNumberNotFoundException;(VehicleIdentificationNumber);;Argument[0];Argument[-1];taint",
        "smoketest.test.service;VehicleIdentificationNumberNotFoundException;true;VehicleIdentificationNumberNotFoundException;(VehicleIdentificationNumber,Throwable);;Argument[0];Argument[-1];taint",
        "smoketest.test.service;VehicleIdentificationNumberNotFoundException;true;getVehicleIdentificationNumber;();;Argument[-1];ReturnValue;taint",
        "smoketest.test.web;UserNameNotFoundException;true;UserNameNotFoundException;(String);;Argument[0];Argument[-1];taint",
        "smoketest.test.web;UserNameNotFoundException;true;getUsername;();;Argument[-1];ReturnValue;taint",
        "smoketest.test.web;UserVehicleController;true;UserVehicleController;(UserVehicleService);;Argument[0];Argument[-1];taint",
        "smoketest.test.web;UserVehicleService;true;UserVehicleService;(UserRepository,VehicleDetailsService);;Argument[0];Argument[-1];taint",
        "smoketest.test.web;UserVehicleService;true;UserVehicleService;(UserRepository,VehicleDetailsService);;Argument[1];Argument[-1];taint",
        "smoketest.testng.service;HelloWorldService;true;getHelloMessage;();;Argument[-1];ReturnValue;taint",
        "smoketest.testng.web;SampleController;true;helloWorld;();;Argument[-1];ReturnValue;taint",
        "smoketest.tomcat.jsp;MyRestResponse;true;MyRestResponse;(String);;Argument[0];Argument[-1];taint",
        "smoketest.tomcat.jsp;MyRestResponse;true;getMessage;();;Argument[-1];ReturnValue;taint",
        "smoketest.tomcat.jsp;WelcomeController;true;welcome;(Map);;Argument[-1];Element of Argument[0];taint",
        "smoketest.tomcat.service;HelloWorldService;true;getHelloMessage;();;Argument[-1];ReturnValue;taint",
        "smoketest.tomcat.web;SampleController;true;helloWorld;();;Argument[-1];ReturnValue;taint",
        "smoketest.web.thymeleaf.mvc;MessageController;true;MessageController;(MessageRepository);;Argument[0];Argument[-1];taint",
        "smoketest.web.thymeleaf.mvc;MessageController;true;create;(Message,BindingResult,RedirectAttributes);;Argument[0];Argument[-1];taint",
        "smoketest.web.thymeleaf;Message;true;getCreated;();;Argument[-1];ReturnValue;taint",
        "smoketest.web.thymeleaf;Message;true;getSummary;();;Argument[-1];ReturnValue;taint",
        "smoketest.web.thymeleaf;Message;true;getText;();;Argument[-1];ReturnValue;taint",
        "smoketest.web.thymeleaf;Message;true;setCreated;(Calendar);;Argument[0];Argument[-1];taint",
        "smoketest.web.thymeleaf;Message;true;setSummary;(String);;Argument[0];Argument[-1];taint",
        "smoketest.web.thymeleaf;Message;true;setText;(String);;Argument[0];Argument[-1];taint",
        "smoketest.web.thymeleaf;MessageRepository;true;findAll;();;Argument[-1];ReturnValue;taint",
        "smoketest.web.thymeleaf;MessageRepository;true;findMessage;(Long);;Argument[-1];ReturnValue;taint",
        "smoketest.web.thymeleaf;MessageRepository;true;save;(Message);;Argument[0];Argument[-1];taint",
        "smoketest.web.thymeleaf;MessageRepository;true;save;(Message);;Argument[0];ReturnValue;taint",
        "smoketest.webservices.endpoint;HolidayEndpoint;true;HolidayEndpoint;(HumanResourceService);;Argument[0];Argument[-1];taint",
        "smoketest.webservices.service;HumanResourceService;true;bookHoliday;(Date,Date,String);;Argument[0];Argument[-1];taint",
        "smoketest.webservices.service;HumanResourceService;true;bookHoliday;(Date,Date,String);;Argument[1];Argument[-1];taint",
        "smoketest.webservices.service;HumanResourceService;true;bookHoliday;(Date,Date,String);;Argument[2];Argument[-1];taint",
        "smoketest.websocket.jetty.client;SimpleClientWebSocketHandler;true;SimpleClientWebSocketHandler;(GreetingService,CountDownLatch,AtomicReference);;Argument[0];Argument[-1];taint",
        "smoketest.websocket.jetty.client;SimpleClientWebSocketHandler;true;SimpleClientWebSocketHandler;(GreetingService,CountDownLatch,AtomicReference);;Argument[1];Argument[-1];taint",
        "smoketest.websocket.jetty.client;SimpleClientWebSocketHandler;true;SimpleClientWebSocketHandler;(GreetingService,CountDownLatch,AtomicReference);;Argument[2];Argument[-1];taint",
        "smoketest.websocket.jetty.echo;DefaultEchoService;true;DefaultEchoService;(String);;Argument[0];Argument[-1];taint",
        "smoketest.websocket.jetty.echo;EchoService;true;getMessage;(String);;Argument[-1];ReturnValue;taint",
        "smoketest.websocket.jetty.echo;EchoService;true;getMessage;(String);;Argument[0];ReturnValue;taint",
        "smoketest.websocket.jetty.echo;EchoWebSocketHandler;true;EchoWebSocketHandler;(EchoService);;Argument[0];Argument[-1];taint",
        "smoketest.websocket.jetty.snake;Location;true;getAdjacentLocation;(Direction);;Argument[-1];ReturnValue;value",
        "smoketest.websocket.jetty.snake;Snake;true;Snake;(int,WebSocketSession);;Argument[1];Argument[-1];taint",
        "smoketest.websocket.jetty.snake;Snake;true;getHead;();;Argument[-1];ReturnValue;taint",
        "smoketest.websocket.jetty.snake;Snake;true;getHexColor;();;Argument[-1];ReturnValue;taint",
        "smoketest.websocket.jetty.snake;Snake;true;getTail;();;Argument[-1];ReturnValue;taint",
        "smoketest.websocket.jetty10.client;SimpleClientWebSocketHandler;true;SimpleClientWebSocketHandler;(GreetingService,CountDownLatch,AtomicReference);;Argument[0];Argument[-1];taint",
        "smoketest.websocket.jetty10.client;SimpleClientWebSocketHandler;true;SimpleClientWebSocketHandler;(GreetingService,CountDownLatch,AtomicReference);;Argument[1];Argument[-1];taint",
        "smoketest.websocket.jetty10.client;SimpleClientWebSocketHandler;true;SimpleClientWebSocketHandler;(GreetingService,CountDownLatch,AtomicReference);;Argument[2];Argument[-1];taint",
        "smoketest.websocket.jetty10.echo;DefaultEchoService;true;DefaultEchoService;(String);;Argument[0];Argument[-1];taint",
        "smoketest.websocket.jetty10.echo;EchoService;true;getMessage;(String);;Argument[-1];ReturnValue;taint",
        "smoketest.websocket.jetty10.echo;EchoService;true;getMessage;(String);;Argument[0];ReturnValue;taint",
        "smoketest.websocket.jetty10.echo;EchoWebSocketHandler;true;EchoWebSocketHandler;(EchoService);;Argument[0];Argument[-1];taint",
        "smoketest.websocket.jetty10.snake;Location;true;getAdjacentLocation;(Direction);;Argument[-1];ReturnValue;value",
        "smoketest.websocket.jetty10.snake;Snake;true;Snake;(int,WebSocketSession);;Argument[1];Argument[-1];taint",
        "smoketest.websocket.jetty10.snake;Snake;true;getHead;();;Argument[-1];ReturnValue;taint",
        "smoketest.websocket.jetty10.snake;Snake;true;getHexColor;();;Argument[-1];ReturnValue;taint",
        "smoketest.websocket.jetty10.snake;Snake;true;getTail;();;Argument[-1];ReturnValue;taint",
        "smoketest.websocket.tomcat.client;SimpleClientWebSocketHandler;true;SimpleClientWebSocketHandler;(GreetingService,CountDownLatch,AtomicReference);;Argument[0];Argument[-1];taint",
        "smoketest.websocket.tomcat.client;SimpleClientWebSocketHandler;true;SimpleClientWebSocketHandler;(GreetingService,CountDownLatch,AtomicReference);;Argument[1];Argument[-1];taint",
        "smoketest.websocket.tomcat.client;SimpleClientWebSocketHandler;true;SimpleClientWebSocketHandler;(GreetingService,CountDownLatch,AtomicReference);;Argument[2];Argument[-1];taint",
        "smoketest.websocket.tomcat.echo;DefaultEchoService;true;DefaultEchoService;(String);;Argument[0];Argument[-1];taint",
        "smoketest.websocket.tomcat.echo;EchoService;true;getMessage;(String);;Argument[-1];ReturnValue;taint",
        "smoketest.websocket.tomcat.echo;EchoService;true;getMessage;(String);;Argument[0];ReturnValue;taint",
        "smoketest.websocket.tomcat.echo;EchoWebSocketHandler;true;EchoWebSocketHandler;(EchoService);;Argument[0];Argument[-1];taint",
        "smoketest.websocket.tomcat.snake;Location;true;getAdjacentLocation;(Direction);;Argument[-1];ReturnValue;value",
        "smoketest.websocket.tomcat.snake;Snake;true;Snake;(int,WebSocketSession);;Argument[1];Argument[-1];taint",
        "smoketest.websocket.tomcat.snake;Snake;true;getHead;();;Argument[-1];ReturnValue;taint",
        "smoketest.websocket.tomcat.snake;Snake;true;getHexColor;();;Argument[-1];ReturnValue;taint",
        "smoketest.websocket.tomcat.snake;Snake;true;getTail;();;Argument[-1];ReturnValue;taint",
        "smoketest.websocket.undertow.client;SimpleClientWebSocketHandler;true;SimpleClientWebSocketHandler;(GreetingService,CountDownLatch,AtomicReference);;Argument[0];Argument[-1];taint",
        "smoketest.websocket.undertow.client;SimpleClientWebSocketHandler;true;SimpleClientWebSocketHandler;(GreetingService,CountDownLatch,AtomicReference);;Argument[1];Argument[-1];taint",
        "smoketest.websocket.undertow.client;SimpleClientWebSocketHandler;true;SimpleClientWebSocketHandler;(GreetingService,CountDownLatch,AtomicReference);;Argument[2];Argument[-1];taint",
        "smoketest.websocket.undertow.echo;DefaultEchoService;true;DefaultEchoService;(String);;Argument[0];Argument[-1];taint",
        "smoketest.websocket.undertow.echo;EchoService;true;getMessage;(String);;Argument[-1];ReturnValue;taint",
        "smoketest.websocket.undertow.echo;EchoService;true;getMessage;(String);;Argument[0];ReturnValue;taint",
        "smoketest.websocket.undertow.echo;EchoWebSocketHandler;true;EchoWebSocketHandler;(EchoService);;Argument[0];Argument[-1];taint",
        "smoketest.websocket.undertow.snake;Location;true;getAdjacentLocation;(Direction);;Argument[-1];ReturnValue;value",
        "smoketest.websocket.undertow.snake;Snake;true;Snake;(int,WebSocketSession);;Argument[1];Argument[-1];taint",
        "smoketest.websocket.undertow.snake;Snake;true;getHead;();;Argument[-1];ReturnValue;taint",
        "smoketest.websocket.undertow.snake;Snake;true;getHexColor;();;Argument[-1];ReturnValue;taint",
        "smoketest.websocket.undertow.snake;Snake;true;getTail;();;Argument[-1];ReturnValue;taint",
        "smoketest.xml.service;HelloWorldService;true;getHelloMessage;();;Argument[-1];ReturnValue;taint"
      ]
  }
}
